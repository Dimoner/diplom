
ESP-01_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd1c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  0800de30  0800de30  0001de30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e560  0800e560  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e560  0800e560  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e560  0800e560  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e560  0800e560  0001e560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e564  0800e564  0001e564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000039bc  200001e0  0800e748  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003b9c  0800e748  00023b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022dda  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bea  00000000  00000000  00042fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  00047bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  000493c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000153f2  00000000  00000000  0004a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00007b0f  00000000  00000000  0005fdaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000678b9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000078a0  00000000  00000000  0006790c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800de14 	.word	0x0800de14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800de14 	.word	0x0800de14

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2lz>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	460c      	mov	r4, r1
 8001068:	4605      	mov	r5, r0
 800106a:	4621      	mov	r1, r4
 800106c:	4628      	mov	r0, r5
 800106e:	2200      	movs	r2, #0
 8001070:	2300      	movs	r3, #0
 8001072:	f7ff fca3 	bl	80009bc <__aeabi_dcmplt>
 8001076:	b928      	cbnz	r0, 8001084 <__aeabi_d2lz+0x20>
 8001078:	4628      	mov	r0, r5
 800107a:	4621      	mov	r1, r4
 800107c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001080:	f000 b80a 	b.w	8001098 <__aeabi_d2ulz>
 8001084:	4628      	mov	r0, r5
 8001086:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800108a:	f000 f805 	bl	8001098 <__aeabi_d2ulz>
 800108e:	4240      	negs	r0, r0
 8001090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001094:	bd38      	pop	{r3, r4, r5, pc}
 8001096:	bf00      	nop

08001098 <__aeabi_d2ulz>:
 8001098:	b5d0      	push	{r4, r6, r7, lr}
 800109a:	2200      	movs	r2, #0
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <__aeabi_d2ulz+0x34>)
 800109e:	4606      	mov	r6, r0
 80010a0:	460f      	mov	r7, r1
 80010a2:	f7ff fa19 	bl	80004d8 <__aeabi_dmul>
 80010a6:	f7ff fcef 	bl	8000a88 <__aeabi_d2uiz>
 80010aa:	4604      	mov	r4, r0
 80010ac:	f7ff f99a 	bl	80003e4 <__aeabi_ui2d>
 80010b0:	2200      	movs	r2, #0
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <__aeabi_d2ulz+0x38>)
 80010b4:	f7ff fa10 	bl	80004d8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4630      	mov	r0, r6
 80010be:	4639      	mov	r1, r7
 80010c0:	f7ff f852 	bl	8000168 <__aeabi_dsub>
 80010c4:	f7ff fce0 	bl	8000a88 <__aeabi_d2uiz>
 80010c8:	4621      	mov	r1, r4
 80010ca:	bdd0      	pop	{r4, r6, r7, pc}
 80010cc:	3df00000 	.word	0x3df00000
 80010d0:	41f00000 	.word	0x41f00000

080010d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_ADC1_Init+0x7c>)
 80010e6:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <MX_ADC1_Init+0x80>)
 80010e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_ADC1_Init+0x7c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_ADC1_Init+0x7c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_ADC1_Init+0x7c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_ADC1_Init+0x7c>)
 80010fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001102:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_ADC1_Init+0x7c>)
 8001106:	2200      	movs	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_ADC1_Init+0x7c>)
 800110c:	2201      	movs	r2, #1
 800110e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001110:	480f      	ldr	r0, [pc, #60]	; (8001150 <MX_ADC1_Init+0x7c>)
 8001112:	f001 fe6d 	bl	8002df0 <HAL_ADC_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800111c:	f000 fddb 	bl	8001cd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001120:	2304      	movs	r3, #4
 8001122:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001124:	2301      	movs	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	4619      	mov	r1, r3
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <MX_ADC1_Init+0x7c>)
 8001132:	f002 f8f1 	bl	8003318 <HAL_ADC_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800113c:	f000 fdcb 	bl	8001cd6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
	//Выполняет автоматическую самокалибровку АЦП. Функция должна вызываться при отключенном АЦП.
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <MX_ADC1_Init+0x7c>)
 8001142:	f002 fa7d 	bl	8003640 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20003704 	.word	0x20003704
 8001154:	40012400 	.word	0x40012400

08001158 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_ADC_MspInit+0x7c>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d129      	bne.n	80011cc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011a8:	2310      	movs	r3, #16
 80011aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ac:	2303      	movs	r3, #3
 80011ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4619      	mov	r1, r3
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <HAL_ADC_MspInit+0x84>)
 80011b8:	f002 fe02 	bl	8003dc0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2105      	movs	r1, #5
 80011c0:	2012      	movs	r0, #18
 80011c2:	f002 fbbe 	bl	8003942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011c6:	2012      	movs	r0, #18
 80011c8:	f002 fbd7 	bl	800397a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40012400 	.word	0x40012400
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010800 	.word	0x40010800

080011e0 <resetGlobalState>:
 */
struct GlobalStateStruct globalState;
struct GlobalStateStruct pauseState;
bool globalStopFlag = false;
bool globalPauseFlag = false;
void resetGlobalState(){
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	globalStopFlag = false;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <resetGlobalState+0x84>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
	globalPauseFlag = false;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <resetGlobalState+0x88>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
	globalState.isExistActiveAction = false;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <resetGlobalState+0x8c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	globalState.typeStruct.subType[0] = '0';
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <resetGlobalState+0x8c>)
 80011fa:	2230      	movs	r2, #48	; 0x30
 80011fc:	709a      	strb	r2, [r3, #2]
	globalState.typeStruct.subType[1] = '0';
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <resetGlobalState+0x8c>)
 8001200:	2230      	movs	r2, #48	; 0x30
 8001202:	70da      	strb	r2, [r3, #3]
	globalState.typeStruct.type[0] = '0';
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <resetGlobalState+0x8c>)
 8001206:	2230      	movs	r2, #48	; 0x30
 8001208:	701a      	strb	r2, [r3, #0]
	globalState.typeStruct.type[1] = '0';
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <resetGlobalState+0x8c>)
 800120c:	2230      	movs	r2, #48	; 0x30
 800120e:	705a      	strb	r2, [r3, #1]

	globalState.changePositionStruct.dir = false;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <resetGlobalState+0x8c>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	globalState.changePositionStruct.id = 0;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <resetGlobalState+0x8c>)
 800121a:	2200      	movs	r2, #0
 800121c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	globalState.changePositionStruct.way = 0;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <resetGlobalState+0x8c>)
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	64da      	str	r2, [r3, #76]	; 0x4c

	globalState.detectAmperageRangeStruct.id = 0;
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <resetGlobalState+0x8c>)
 800122a:	2200      	movs	r2, #0
 800122c:	869a      	strh	r2, [r3, #52]	; 0x34
	globalState.detectAmperageRangeStruct.dir = false;
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <resetGlobalState+0x8c>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	globalState.detectAmperageRangeStruct.way = 0;
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <resetGlobalState+0x8c>)
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	639a      	str	r2, [r3, #56]	; 0x38
	globalState.detectAmperageRangeStruct.step = 0;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <resetGlobalState+0x8c>)
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	63da      	str	r2, [r3, #60]	; 0x3c
	globalState.detectAmperageRangeStruct.count = 0;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <resetGlobalState+0x8c>)
 8001248:	2200      	movs	r2, #0
 800124a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	globalState.detectAmperageRangeStruct.cur = 0;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <resetGlobalState+0x8c>)
 8001250:	2200      	movs	r2, #0
 8001252:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	globalState.detectAmperageRangeStruct.speed = 0;
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <resetGlobalState+0x8c>)
 8001258:	2200      	movs	r2, #0
 800125a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	200001fc 	.word	0x200001fc
 8001268:	200001fd 	.word	0x200001fd
 800126c:	20003734 	.word	0x20003734

08001270 <copyGlobalStateToPause>:

void copyGlobalStateToPause(struct GlobalStateStruct from){
 8001270:	b084      	sub	sp, #16
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
 8001276:	f107 0c08 	add.w	ip, r7, #8
 800127a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	pauseState = from;
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <copyGlobalStateToPause+0x2c>)
 8001280:	4618      	mov	r0, r3
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	2254      	movs	r2, #84	; 0x54
 8001288:	4619      	mov	r1, r3
 800128a:	f008 f976 	bl	800957a <memcpy>
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001296:	b004      	add	sp, #16
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20003878 	.word	0x20003878

080012a0 <copyGlobalStateFromPause>:

void copyGlobalStateFromPause(struct GlobalStateStruct from){
 80012a0:	b084      	sub	sp, #16
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	f107 0c08 	add.w	ip, r7, #8
 80012aa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	globalState = from;
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <copyGlobalStateFromPause+0x34>)
 80012b0:	4618      	mov	r0, r3
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	2254      	movs	r2, #84	; 0x54
 80012b8:	4619      	mov	r1, r3
 80012ba:	f008 f95e 	bl	800957a <memcpy>
	globalState.isExistActiveAction = false;
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <copyGlobalStateFromPause+0x34>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012ce:	b004      	add	sp, #16
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20003734 	.word	0x20003734

080012d8 <vApplicationStackOverflowHook>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0

	myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 80012f0:	4a18      	ldr	r2, [pc, #96]	; (8001354 <MX_FREERTOS_Init+0x68>)
 80012f2:	2101      	movs	r1, #1
 80012f4:	2001      	movs	r0, #1
 80012f6:	f005 fa17 	bl	8006728 <osSemaphoreNew>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a16      	ldr	r2, [pc, #88]	; (8001358 <MX_FREERTOS_Init+0x6c>)
 80012fe:	6013      	str	r3, [r2, #0]

	myQueue01Handle = osMessageQueueNew(16, sizeof(uint8_t),&myQueue01_attributes);
 8001300:	4a16      	ldr	r2, [pc, #88]	; (800135c <MX_FREERTOS_Init+0x70>)
 8001302:	2101      	movs	r1, #1
 8001304:	2010      	movs	r0, #16
 8001306:	f005 faab 	bl	8006860 <osMessageQueueNew>
 800130a:	4603      	mov	r3, r0
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <MX_FREERTOS_Init+0x74>)
 800130e:	6013      	str	r3, [r2, #0]
	myQueue02Handle = osMessageQueueNew(16, sizeof(uint8_t),&myQueue02_attributes);
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <MX_FREERTOS_Init+0x78>)
 8001312:	2101      	movs	r1, #1
 8001314:	2010      	movs	r0, #16
 8001316:	f005 faa3 	bl	8006860 <osMessageQueueNew>
 800131a:	4603      	mov	r3, r0
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <MX_FREERTOS_Init+0x7c>)
 800131e:	6013      	str	r3, [r2, #0]

	myTaskUARTHandle = osThreadNew(StartTaskUART, NULL, &myTaskUART_attributes);
 8001320:	4a12      	ldr	r2, [pc, #72]	; (800136c <MX_FREERTOS_Init+0x80>)
 8001322:	2100      	movs	r1, #0
 8001324:	4812      	ldr	r0, [pc, #72]	; (8001370 <MX_FREERTOS_Init+0x84>)
 8001326:	f005 f927 	bl	8006578 <osThreadNew>
 800132a:	4603      	mov	r3, r0
 800132c:	4a11      	ldr	r2, [pc, #68]	; (8001374 <MX_FREERTOS_Init+0x88>)
 800132e:	6013      	str	r3, [r2, #0]
	myTaskMotorHandle = osThreadNew(StartTaskMOTOR, NULL, &myTaskMotor_attributes);
 8001330:	4a11      	ldr	r2, [pc, #68]	; (8001378 <MX_FREERTOS_Init+0x8c>)
 8001332:	2100      	movs	r1, #0
 8001334:	4811      	ldr	r0, [pc, #68]	; (800137c <MX_FREERTOS_Init+0x90>)
 8001336:	f005 f91f 	bl	8006578 <osThreadNew>
 800133a:	4603      	mov	r3, r0
 800133c:	4a10      	ldr	r2, [pc, #64]	; (8001380 <MX_FREERTOS_Init+0x94>)
 800133e:	6013      	str	r3, [r2, #0]
	myTaskPMTHandle = osThreadNew(StartTaskPMT, NULL, &myTaskPMT_attributes);
 8001340:	4a10      	ldr	r2, [pc, #64]	; (8001384 <MX_FREERTOS_Init+0x98>)
 8001342:	2100      	movs	r1, #0
 8001344:	4810      	ldr	r0, [pc, #64]	; (8001388 <MX_FREERTOS_Init+0x9c>)
 8001346:	f005 f917 	bl	8006578 <osThreadNew>
 800134a:	4603      	mov	r3, r0
 800134c:	4a0f      	ldr	r2, [pc, #60]	; (800138c <MX_FREERTOS_Init+0xa0>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	0800e024 	.word	0x0800e024
 8001358:	200038cc 	.word	0x200038cc
 800135c:	0800dff4 	.word	0x0800dff4
 8001360:	200038d0 	.word	0x200038d0
 8001364:	0800e00c 	.word	0x0800e00c
 8001368:	200038d4 	.word	0x200038d4
 800136c:	0800df88 	.word	0x0800df88
 8001370:	08001391 	.word	0x08001391
 8001374:	20003790 	.word	0x20003790
 8001378:	0800dfac 	.word	0x0800dfac
 800137c:	080014d5 	.word	0x080014d5
 8001380:	20003788 	.word	0x20003788
 8001384:	0800dfd0 	.word	0x0800dfd0
 8001388:	08001605 	.word	0x08001605
 800138c:	20003794 	.word	0x20003794

08001390 <StartTaskUART>:


/*
 * Задача для чтения сообщения из UART
 */
void StartTaskUART(void *argument) {
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b0dd      	sub	sp, #372	; 0x174
 8001394:	af12      	add	r7, sp, #72	; 0x48
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	6018      	str	r0, [r3, #0]
	for (;;) {
		// 1 - получили символ и проверии, что это стартовый
		bool isStartReadUart = receiveSymbol() == OK && checkStartOfMessage() == OK;
 800139a:	f001 f977 	bl	800268c <receiveSymbol>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d106      	bne.n	80013b2 <StartTaskUART+0x22>
 80013a4:	f001 f988 	bl	80026b8 <checkStartOfMessage>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <StartTaskUART+0x22>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <StartTaskUART+0x24>
 80013b2:	2300      	movs	r3, #0
 80013b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 80013b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if (!isStartReadUart) {
 80013c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80013c8:	f083 0301 	eor.w	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d004      	beq.n	80013dc <StartTaskUART+0x4c>
			SentError((uint8_t*) __FILE__, __LINE__);
 80013d2:	2176      	movs	r1, #118	; 0x76
 80013d4:	4839      	ldr	r0, [pc, #228]	; (80014bc <StartTaskUART+0x12c>)
 80013d6:	f004 ff4b 	bl	8006270 <SentError>
			continue;
 80013da:	e06d      	b.n	80014b8 <StartTaskUART+0x128>
		}

		// 2 - читаем остальную часть строки в receiveMessageText
		char receiveMessageText[200];
		bool receiveMessageResult = receiveMessage(receiveMessageText) == OK;
 80013dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 f979 	bl	80026d8 <receiveMessage>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf0c      	ite	eq
 80013ec:	2301      	moveq	r3, #1
 80013ee:	2300      	movne	r3, #0
 80013f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		if (!receiveMessageResult) {
 80013f4:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80013f8:	f083 0301 	eor.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <StartTaskUART+0x7c>
			SentError((uint8_t*) __FILE__, __LINE__);
 8001402:	217e      	movs	r1, #126	; 0x7e
 8001404:	482d      	ldr	r0, [pc, #180]	; (80014bc <StartTaskUART+0x12c>)
 8001406:	f004 ff33 	bl	8006270 <SentError>
			continue;
 800140a:	e055      	b.n	80014b8 <StartTaskUART+0x128>
		}

		// 3 - записываем новое глобальное состояние систему
		struct GlobalStateStruct parseMessageResult = getNewGlobalState(receiveMessageText);
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f001 f986 	bl	8002728 <getNewGlobalState>
		clean(receiveMessageText);
 800141c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001420:	4618      	mov	r0, r3
 8001422:	f001 fab9 	bl	8002998 <clean>

		// 4 - если это проверка состояния сразу отвечае
		if (isCheckState(parseMessageResult.typeStruct))
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	f001 f83b 	bl	80024a6 <isCheckState>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d007      	beq.n	8001446 <StartTaskUART+0xb6>
		{
			SentResultActionResponse(parseMessageResult.typeStruct, "", 1);
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	2201      	movs	r2, #1
 800143c:	4920      	ldr	r1, [pc, #128]	; (80014c0 <StartTaskUART+0x130>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	f004 ff50 	bl	80062e4 <SentResultActionResponse>
			continue;
 8001444:	e038      	b.n	80014b8 <StartTaskUART+0x128>
		}

		// 5 - если это команда стоп
		if (isStopMeasure(parseMessageResult.typeStruct))
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	f001 f903 	bl	8002656 <isStopMeasure>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <StartTaskUART+0xce>
		{
			globalStopFlag = true;
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <StartTaskUART+0x134>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
			continue;
 800145c:	e02c      	b.n	80014b8 <StartTaskUART+0x128>
		}

		// 6 - если это команда паузы
		if (isPauseMeasure(parseMessageResult.typeStruct))
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	f001 f8dc 	bl	8002620 <isPauseMeasure>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <StartTaskUART+0xe6>
		{
			globalPauseFlag = true;
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <StartTaskUART+0x138>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
			continue;
 8001474:	e020      	b.n	80014b8 <StartTaskUART+0x128>
		}

		// 6 - если это команда продолжения после паузы
		if (isContinueMeasure(parseMessageResult.typeStruct))
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	f001 f8b5 	bl	80025ea <isContinueMeasure>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00c      	beq.n	80014a0 <StartTaskUART+0x110>
		{
			copyGlobalStateFromPause(pauseState);
 8001486:	4c11      	ldr	r4, [pc, #68]	; (80014cc <StartTaskUART+0x13c>)
 8001488:	4668      	mov	r0, sp
 800148a:	f104 0310 	add.w	r3, r4, #16
 800148e:	2244      	movs	r2, #68	; 0x44
 8001490:	4619      	mov	r1, r3
 8001492:	f008 f872 	bl	800957a <memcpy>
 8001496:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800149a:	f7ff ff01 	bl	80012a0 <copyGlobalStateFromPause>
			continue;
 800149e:	e00b      	b.n	80014b8 <StartTaskUART+0x128>
		}

		globalState = parseMessageResult;
 80014a0:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <StartTaskUART+0x140>)
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	2354      	movs	r3, #84	; 0x54
 80014ac:	461a      	mov	r2, r3
 80014ae:	f008 f864 	bl	800957a <memcpy>

		osDelay(1);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f005 f90a 	bl	80066cc <osDelay>
	for (;;) {
 80014b8:	e76f      	b.n	800139a <StartTaskUART+0xa>
 80014ba:	bf00      	nop
 80014bc:	0800de7c 	.word	0x0800de7c
 80014c0:	0800de94 	.word	0x0800de94
 80014c4:	200001fc 	.word	0x200001fc
 80014c8:	200001fd 	.word	0x200001fd
 80014cc:	20003878 	.word	0x20003878
 80014d0:	20003734 	.word	0x20003734

080014d4 <StartTaskMOTOR>:
 * @brief Function implementing the myTaskMotor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskMOTOR */
void StartTaskMOTOR(void *argument) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	for (;;) {
		// 1 - дожидаемся пока придем команда для изменения положения шагового двигателя
		if(isChangePosition(globalState.typeStruct) && !globalState.isExistActiveAction){
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <StartTaskMOTOR+0xb0>)
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	f000 fffc 	bl	80024dc <isChangePosition>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d047      	beq.n	800157a <StartTaskMOTOR+0xa6>
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <StartTaskMOTOR+0xb0>)
 80014ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014f0:	f083 0301 	eor.w	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d03f      	beq.n	800157a <StartTaskMOTOR+0xa6>
			speedChangeFactor = 0;
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <StartTaskMOTOR+0xb4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
			speedDownChangeFactor = 0;
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <StartTaskMOTOR+0xb8>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
			isSetMotorPin = false;
 8001506:	4b22      	ldr	r3, [pc, #136]	; (8001590 <StartTaskMOTOR+0xbc>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
			totalRate = 0;
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <StartTaskMOTOR+0xc0>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
			currentRate = 0;
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <StartTaskMOTOR+0xc4>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
			globalState.isExistActiveAction = true;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <StartTaskMOTOR+0xb0>)
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			// 2 - устанавливаем вращение
			// true - часовая / false - против часовой
			if(globalState.changePositionStruct.dir){
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <StartTaskMOTOR+0xb0>)
 8001522:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <StartTaskMOTOR+0x62>
				HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2101      	movs	r1, #1
 800152e:	481b      	ldr	r0, [pc, #108]	; (800159c <StartTaskMOTOR+0xc8>)
 8001530:	f002 fdca 	bl	80040c8 <HAL_GPIO_WritePin>
 8001534:	e004      	b.n	8001540 <StartTaskMOTOR+0x6c>
			} else {
				HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2101      	movs	r1, #1
 800153a:	4818      	ldr	r0, [pc, #96]	; (800159c <StartTaskMOTOR+0xc8>)
 800153c:	f002 fdc4 	bl	80040c8 <HAL_GPIO_WritePin>
			}

			// 3 - определяем кол-во шим сигналов для вращения
			totalRate = globalState.changePositionStruct.way * 1000;
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <StartTaskMOTOR+0xb0>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001544:	4916      	ldr	r1, [pc, #88]	; (80015a0 <StartTaskMOTOR+0xcc>)
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fc1c 	bl	8000d84 <__aeabi_fmul>
 800154c:	4603      	mov	r3, r0
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fd68 	bl	8001024 <__aeabi_f2uiz>
 8001554:	4603      	mov	r3, r0
 8001556:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <StartTaskMOTOR+0xc0>)
 8001558:	6013      	str	r3, [r2, #0]
			currentRate = globalState.changePositionStruct.way * 1000;
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <StartTaskMOTOR+0xb0>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	4910      	ldr	r1, [pc, #64]	; (80015a0 <StartTaskMOTOR+0xcc>)
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fc0f 	bl	8000d84 <__aeabi_fmul>
 8001566:	4603      	mov	r3, r0
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fd5b 	bl	8001024 <__aeabi_f2uiz>
 800156e:	4603      	mov	r3, r0
 8001570:	4a09      	ldr	r2, [pc, #36]	; (8001598 <StartTaskMOTOR+0xc4>)
 8001572:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 8001574:	480b      	ldr	r0, [pc, #44]	; (80015a4 <StartTaskMOTOR+0xd0>)
 8001576:	f003 fc1d 	bl	8004db4 <HAL_TIM_Base_Start_IT>
		}

		osDelay(1);
 800157a:	2001      	movs	r0, #1
 800157c:	f005 f8a6 	bl	80066cc <osDelay>
		if(isChangePosition(globalState.typeStruct) && !globalState.isExistActiveAction){
 8001580:	e7ac      	b.n	80014dc <StartTaskMOTOR+0x8>
 8001582:	bf00      	nop
 8001584:	20003734 	.word	0x20003734
 8001588:	20000209 	.word	0x20000209
 800158c:	2000020a 	.word	0x2000020a
 8001590:	20000208 	.word	0x20000208
 8001594:	20000200 	.word	0x20000200
 8001598:	20000204 	.word	0x20000204
 800159c:	40010c00 	.word	0x40010c00
 80015a0:	447a0000 	.word	0x447a0000
 80015a4:	20003a30 	.word	0x20003a30

080015a8 <measureAmperageRangeItem>:
	}
}

// логика измерения с усреднением
uint32_t measureAmperageRangeItem(uint16_t count){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
	uint32_t ADC_value = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Start(&hadc1);
 80015b6:	4812      	ldr	r0, [pc, #72]	; (8001600 <measureAmperageRangeItem+0x58>)
 80015b8:	f001 fcf2 	bl	8002fa0 <HAL_ADC_Start>
	//HAL_ADC_PollForConversion(&hadc1, 100);
	for (int i = 0; i < count; i++) {
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	e012      	b.n	80015e8 <measureAmperageRangeItem+0x40>

		if(ADC_value == 0){
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d104      	bne.n	80015d2 <measureAmperageRangeItem+0x2a>
			ADC_value = HAL_ADC_GetValue(&hadc1);
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <measureAmperageRangeItem+0x58>)
 80015ca:	f001 fdc3 	bl	8003154 <HAL_ADC_GetValue>
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	e007      	b.n	80015e2 <measureAmperageRangeItem+0x3a>
	    }else {
			ADC_value = (HAL_ADC_GetValue(&hadc1) + ADC_value) / 2;
 80015d2:	480b      	ldr	r0, [pc, #44]	; (8001600 <measureAmperageRangeItem+0x58>)
 80015d4:	f001 fdbe 	bl	8003154 <HAL_ADC_GetValue>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4413      	add	r3, r2
 80015de:	085b      	lsrs	r3, r3, #1
 80015e0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < count; i++) {
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	3301      	adds	r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbe8      	blt.n	80015c2 <measureAmperageRangeItem+0x1a>
		}
	}
	HAL_ADC_Stop(&hadc1);
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <measureAmperageRangeItem+0x58>)
 80015f2:	f001 fd83 	bl	80030fc <HAL_ADC_Stop>
	return ADC_value;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20003704 	.word	0x20003704

08001604 <StartTaskPMT>:
 * @brief Function implementing the myTaskPMT thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskPMT */
void StartTaskPMT(void *argument) {
 8001604:	b5b0      	push	{r4, r5, r7, lr}
 8001606:	b098      	sub	sp, #96	; 0x60
 8001608:	af12      	add	r7, sp, #72	; 0x48
 800160a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskPMT */

	/* Infinite loop */
	for (;;) {
		//ток на промежутке
		if (isDetectAmperageRange(globalState.typeStruct) && !globalState.isExistActiveAction)
 800160c:	4ba1      	ldr	r3, [pc, #644]	; (8001894 <StartTaskPMT+0x290>)
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	f000 ff7f 	bl	8002512 <isDetectAmperageRange>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8101 	beq.w	800181e <StartTaskPMT+0x21a>
 800161c:	4b9d      	ldr	r3, [pc, #628]	; (8001894 <StartTaskPMT+0x290>)
 800161e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001622:	f083 0301 	eor.w	r3, r3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80f8 	beq.w	800181e <StartTaskPMT+0x21a>
		{
			globalState.isExistActiveAction = true;
 800162e:	4b99      	ldr	r3, [pc, #612]	; (8001894 <StartTaskPMT+0x290>)
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			// 1 - выполняем измерение в 1 точке
			SendResponseMeasure(
 8001636:	4b97      	ldr	r3, [pc, #604]	; (8001894 <StartTaskPMT+0x290>)
 8001638:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
 800163a:	4b96      	ldr	r3, [pc, #600]	; (8001894 <StartTaskPMT+0x290>)
 800163c:	f8b3 5042 	ldrh.w	r5, [r3, #66]	; 0x42
 8001640:	4b94      	ldr	r3, [pc, #592]	; (8001894 <StartTaskPMT+0x290>)
 8001642:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ffae 	bl	80015a8 <measureAmperageRangeItem>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	4629      	mov	r1, r5
 8001652:	4620      	mov	r0, r4
 8001654:	f004 feac 	bl	80063b0 <SendResponseMeasure>
					globalState.detectAmperageRangeStruct.id,
					globalState.detectAmperageRangeStruct.cur,
					measureAmperageRangeItem(globalState.detectAmperageRangeStruct.count));

			// 2 - задаем направление последующих измерений
			if(globalState.detectAmperageRangeStruct.dir){
 8001658:	4b8e      	ldr	r3, [pc, #568]	; (8001894 <StartTaskPMT+0x290>)
 800165a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <StartTaskPMT+0x6a>
				HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2101      	movs	r1, #1
 8001666:	488c      	ldr	r0, [pc, #560]	; (8001898 <StartTaskPMT+0x294>)
 8001668:	f002 fd2e 	bl	80040c8 <HAL_GPIO_WritePin>
 800166c:	e004      	b.n	8001678 <StartTaskPMT+0x74>
			} else {
				HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2101      	movs	r1, #1
 8001672:	4889      	ldr	r0, [pc, #548]	; (8001898 <StartTaskPMT+0x294>)
 8001674:	f002 fd28 	bl	80040c8 <HAL_GPIO_WritePin>
			}

			// 3 - высчитываем сколько шагов надо совершить
			uint32_t totalMeasureWay =  globalState.detectAmperageRangeStruct.way * 1000;
 8001678:	4b86      	ldr	r3, [pc, #536]	; (8001894 <StartTaskPMT+0x290>)
 800167a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167c:	4987      	ldr	r1, [pc, #540]	; (800189c <StartTaskPMT+0x298>)
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fb80 	bl	8000d84 <__aeabi_fmul>
 8001684:	4603      	mov	r3, r0
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fccc 	bl	8001024 <__aeabi_f2uiz>
 800168c:	4603      	mov	r3, r0
 800168e:	60fb      	str	r3, [r7, #12]

			// 4 - определяем на каком кол-ве сигналов надо снять измерение
			uint32_t stepCount = globalState.detectAmperageRangeStruct.step * 1000;
 8001690:	4b80      	ldr	r3, [pc, #512]	; (8001894 <StartTaskPMT+0x290>)
 8001692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001694:	4981      	ldr	r1, [pc, #516]	; (800189c <StartTaskPMT+0x298>)
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fb74 	bl	8000d84 <__aeabi_fmul>
 800169c:	4603      	mov	r3, r0
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fcc0 	bl	8001024 <__aeabi_f2uiz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	60bb      	str	r3, [r7, #8]

			// 5 - задаем текущий счетчик
			uint32_t currentCount = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

			// 6 - запускам процесс преодаления промежутка
			for (int i = 0; i < totalMeasureWay; i++) {
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	e08d      	b.n	80017ce <StartTaskPMT+0x1ca>
				// если пришла команда на закончить, то завершаем все действия
				if(globalStopFlag){
 80016b2:	4b7b      	ldr	r3, [pc, #492]	; (80018a0 <StartTaskPMT+0x29c>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <StartTaskPMT+0xbe>
					i = totalMeasureWay + 1;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3301      	adds	r3, #1
 80016be:	613b      	str	r3, [r7, #16]
					continue;
 80016c0:	e082      	b.n	80017c8 <StartTaskPMT+0x1c4>
				}
				// если пришла команда на паузу, то заканчиваем все, но сохраняем предыдушее состояние
				if(globalPauseFlag){
 80016c2:	4b78      	ldr	r3, [pc, #480]	; (80018a4 <StartTaskPMT+0x2a0>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d046      	beq.n	8001758 <StartTaskPMT+0x154>
					if(globalState.detectAmperageRangeStruct.dir){
 80016ca:	4b72      	ldr	r3, [pc, #456]	; (8001894 <StartTaskPMT+0x290>)
 80016cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d010      	beq.n	80016f6 <StartTaskPMT+0xf2>
						globalState.detectAmperageRangeStruct.cur = globalState.detectAmperageRangeStruct.cur + (i / 10);
 80016d4:	4b6f      	ldr	r3, [pc, #444]	; (8001894 <StartTaskPMT+0x290>)
 80016d6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4972      	ldr	r1, [pc, #456]	; (80018a8 <StartTaskPMT+0x2a4>)
 80016de:	fb81 0103 	smull	r0, r1, r1, r3
 80016e2:	1089      	asrs	r1, r1, #2
 80016e4:	17db      	asrs	r3, r3, #31
 80016e6:	1acb      	subs	r3, r1, r3
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b69      	ldr	r3, [pc, #420]	; (8001894 <StartTaskPMT+0x290>)
 80016f0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80016f4:	e00f      	b.n	8001716 <StartTaskPMT+0x112>
					} else {
						globalState.detectAmperageRangeStruct.cur = globalState.detectAmperageRangeStruct.cur - (i / 10);
 80016f6:	4b67      	ldr	r3, [pc, #412]	; (8001894 <StartTaskPMT+0x290>)
 80016f8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	496a      	ldr	r1, [pc, #424]	; (80018a8 <StartTaskPMT+0x2a4>)
 8001700:	fb81 0103 	smull	r0, r1, r1, r3
 8001704:	1089      	asrs	r1, r1, #2
 8001706:	17db      	asrs	r3, r3, #31
 8001708:	1a5b      	subs	r3, r3, r1
 800170a:	b29b      	uxth	r3, r3
 800170c:	4413      	add	r3, r2
 800170e:	b29a      	uxth	r2, r3
 8001710:	4b60      	ldr	r3, [pc, #384]	; (8001894 <StartTaskPMT+0x290>)
 8001712:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
					}

					globalState.detectAmperageRangeStruct.way = (totalMeasureWay - i + (stepCount - currentCount)) / 1000;
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	1ad2      	subs	r2, r2, r3
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	1acb      	subs	r3, r1, r3
 8001722:	4413      	add	r3, r2
 8001724:	4a61      	ldr	r2, [pc, #388]	; (80018ac <StartTaskPMT+0x2a8>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	099b      	lsrs	r3, r3, #6
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fad1 	bl	8000cd4 <__aeabi_ui2f>
 8001732:	4603      	mov	r3, r0
 8001734:	4a57      	ldr	r2, [pc, #348]	; (8001894 <StartTaskPMT+0x290>)
 8001736:	6393      	str	r3, [r2, #56]	; 0x38
					copyGlobalStateToPause(globalState);
 8001738:	4c56      	ldr	r4, [pc, #344]	; (8001894 <StartTaskPMT+0x290>)
 800173a:	4668      	mov	r0, sp
 800173c:	f104 0310 	add.w	r3, r4, #16
 8001740:	2244      	movs	r2, #68	; 0x44
 8001742:	4619      	mov	r1, r3
 8001744:	f007 ff19 	bl	800957a <memcpy>
 8001748:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800174c:	f7ff fd90 	bl	8001270 <copyGlobalStateToPause>
					i = totalMeasureWay + 1;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3301      	adds	r3, #1
 8001754:	613b      	str	r3, [r7, #16]
					continue;
 8001756:	e037      	b.n	80017c8 <StartTaskPMT+0x1c4>
				}
				HAL_GPIO_WritePin(MOTOR_Port, STEP_Pin, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	2102      	movs	r1, #2
 800175c:	484e      	ldr	r0, [pc, #312]	; (8001898 <StartTaskPMT+0x294>)
 800175e:	f002 fcb3 	bl	80040c8 <HAL_GPIO_WritePin>
                osDelay(globalState.detectAmperageRangeStruct.speed);
 8001762:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <StartTaskPMT+0x290>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4618      	mov	r0, r3
 8001768:	f004 ffb0 	bl	80066cc <osDelay>
                HAL_GPIO_WritePin(MOTOR_Port, STEP_Pin, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	2102      	movs	r1, #2
 8001770:	4849      	ldr	r0, [pc, #292]	; (8001898 <StartTaskPMT+0x294>)
 8001772:	f002 fca9 	bl	80040c8 <HAL_GPIO_WritePin>
                osDelay(globalState.detectAmperageRangeStruct.speed);
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <StartTaskPMT+0x290>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4618      	mov	r0, r3
 800177c:	f004 ffa6 	bl	80066cc <osDelay>

                if(currentCount == stepCount){
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	429a      	cmp	r2, r3
 8001786:	d11c      	bne.n	80017c2 <StartTaskPMT+0x1be>
                	SendResponseMeasure(
 8001788:	4b42      	ldr	r3, [pc, #264]	; (8001894 <StartTaskPMT+0x290>)
 800178a:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
                			globalState.detectAmperageRangeStruct.id,
							globalState.detectAmperageRangeStruct.cur + (i / 10),
 800178c:	4b41      	ldr	r3, [pc, #260]	; (8001894 <StartTaskPMT+0x290>)
 800178e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4944      	ldr	r1, [pc, #272]	; (80018a8 <StartTaskPMT+0x2a4>)
 8001796:	fb81 0103 	smull	r0, r1, r1, r3
 800179a:	1089      	asrs	r1, r1, #2
 800179c:	17db      	asrs	r3, r3, #31
 800179e:	1acb      	subs	r3, r1, r3
                	SendResponseMeasure(
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	b29d      	uxth	r5, r3
 80017a6:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <StartTaskPMT+0x290>)
 80017a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fefb 	bl	80015a8 <measureAmperageRangeItem>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	4629      	mov	r1, r5
 80017b8:	4620      	mov	r0, r4
 80017ba:	f004 fdf9 	bl	80063b0 <SendResponseMeasure>
							measureAmperageRangeItem(globalState.detectAmperageRangeStruct.count)
							);
                	currentCount = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
                	// нм --- шаги --- ответ по x
                	// 0,01   10       1
                	// 1      1000     100
                	// 10     10000    1000
                }
                currentCount += 1;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
			for (int i = 0; i < totalMeasureWay; i++) {
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	3301      	adds	r3, #1
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	f63f af6d 	bhi.w	80016b2 <StartTaskPMT+0xae>
			}


			if(globalPauseFlag == false){
 80017d8:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <StartTaskPMT+0x2a0>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	f083 0301 	eor.w	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d019      	beq.n	800181a <StartTaskPMT+0x216>
				// финальный замер
				SendResponseMeasure(
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <StartTaskPMT+0x290>)
 80017e8:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
					globalState.detectAmperageRangeStruct.id,
					globalState.detectAmperageRangeStruct.cur + totalMeasureWay,
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <StartTaskPMT+0x290>)
 80017ec:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
				SendResponseMeasure(
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	b29d      	uxth	r5, r3
 80017f8:	4b26      	ldr	r3, [pc, #152]	; (8001894 <StartTaskPMT+0x290>)
 80017fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fed2 	bl	80015a8 <measureAmperageRangeItem>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4629      	mov	r1, r5
 800180a:	4620      	mov	r0, r4
 800180c:	f004 fdd0 	bl	80063b0 <SendResponseMeasure>
					measureAmperageRangeItem(globalState.detectAmperageRangeStruct.count)
				);

				// 7 - сообщяем об окончании процесса измерения
				SendResponseStop(globalState.detectAmperageRangeStruct.id);
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <StartTaskPMT+0x290>)
 8001812:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fdf1 	bl	80063fc <SendResponseStop>
			}

			// 8 - сбрасываем состояния в конце измерения
			resetGlobalState();
 800181a:	f7ff fce1 	bl	80011e0 <resetGlobalState>
		}

		// ток в точке от времени
		if (isDetectAmperageTime(globalState.typeStruct) && !globalState.isExistActiveAction)
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <StartTaskPMT+0x290>)
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	f000 fe91 	bl	8002548 <isDetectAmperageTime>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
		{
		}

		// счет на промежутке
		if (isDetectTickRange(globalState.typeStruct) && !globalState.isExistActiveAction)
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <StartTaskPMT+0x290>)
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	f000 fea6 	bl	800257e <isDetectTickRange>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d022      	beq.n	800187e <StartTaskPMT+0x27a>
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <StartTaskPMT+0x290>)
 800183a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800183e:	f083 0301 	eor.w	r3, r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d01a      	beq.n	800187e <StartTaskPMT+0x27a>
		{
			HAL_TIM_Base_Start(&htim2);
 8001848:	4819      	ldr	r0, [pc, #100]	; (80018b0 <StartTaskPMT+0x2ac>)
 800184a:	f003 fa69 	bl	8004d20 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start(&htim3);
 800184e:	4819      	ldr	r0, [pc, #100]	; (80018b4 <StartTaskPMT+0x2b0>)
 8001850:	f003 fa66 	bl	8004d20 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim1);
 8001854:	4818      	ldr	r0, [pc, #96]	; (80018b8 <StartTaskPMT+0x2b4>)
 8001856:	f003 faad 	bl	8004db4 <HAL_TIM_Base_Start_IT>
			sprintf(PMT_State_, "PMT_TIM=%d%c", freq_, '\0');
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <StartTaskPMT+0x2b8>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	2300      	movs	r3, #0
 8001860:	4917      	ldr	r1, [pc, #92]	; (80018c0 <StartTaskPMT+0x2bc>)
 8001862:	4818      	ldr	r0, [pc, #96]	; (80018c4 <StartTaskPMT+0x2c0>)
 8001864:	f008 fe1e 	bl	800a4a4 <siprintf>
			if (HAL_UART_Transmit(&huart1, (uint8_t *)&PMT_State_, strlen(PMT_State_), 1000) == HAL_OK)
 8001868:	4816      	ldr	r0, [pc, #88]	; (80018c4 <StartTaskPMT+0x2c0>)
 800186a:	f7fe fc71 	bl	8000150 <strlen>
 800186e:	4603      	mov	r3, r0
 8001870:	b29a      	uxth	r2, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	4913      	ldr	r1, [pc, #76]	; (80018c4 <StartTaskPMT+0x2c0>)
 8001878:	4813      	ldr	r0, [pc, #76]	; (80018c8 <StartTaskPMT+0x2c4>)
 800187a:	f003 ff90 	bl	800579e <HAL_UART_Transmit>
			{
			}
		}

		// счет в точке от времени
		if (isDetectTickTime(globalState.typeStruct) && !globalState.isExistActiveAction)
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <StartTaskPMT+0x290>)
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	f000 fe97 	bl	80025b4 <isDetectTickTime>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
		{
		}

		osDelay(1);
 800188a:	2001      	movs	r0, #1
 800188c:	f004 ff1e 	bl	80066cc <osDelay>
		if (isDetectAmperageRange(globalState.typeStruct) && !globalState.isExistActiveAction)
 8001890:	e6bc      	b.n	800160c <StartTaskPMT+0x8>
 8001892:	bf00      	nop
 8001894:	20003734 	.word	0x20003734
 8001898:	40010c00 	.word	0x40010c00
 800189c:	447a0000 	.word	0x447a0000
 80018a0:	200001fc 	.word	0x200001fc
 80018a4:	200001fd 	.word	0x200001fd
 80018a8:	66666667 	.word	0x66666667
 80018ac:	10624dd3 	.word	0x10624dd3
 80018b0:	20003a78 	.word	0x20003a78
 80018b4:	200039e8 	.word	0x200039e8
 80018b8:	20003a30 	.word	0x20003a30
 80018bc:	20003860 	.word	0x20003860
 80018c0:	0800de98 	.word	0x0800de98
 80018c4:	20003864 	.word	0x20003864
 80018c8:	20003b04 	.word	0x20003b04

080018cc <HAL_TIM_PeriodElapsedCallback>:
const uint8_t speedChangeStep = 100;
// шаг изменения скорости по сигналу
const uint8_t speedChangeStepCount = 130;
//Функция-обработчик прерываний таймеров
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	 /* USER CODE BEGIN Callback 0 */
	// логика вращения шаговым двигателем
    if (htim->Instance == TIM1) {
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a6f      	ldr	r2, [pc, #444]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	f040 80b6 	bne.w	8001a4c <HAL_TIM_PeriodElapsedCallback+0x180>
    	// если прошли путь или получили глобальную команду на остановку
    	if(currentRate == 0 || globalStopFlag){
 80018e0:	4b6e      	ldr	r3, [pc, #440]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_TIM_PeriodElapsedCallback+0x24>
 80018e8:	4b6d      	ldr	r3, [pc, #436]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d01c      	beq.n	800192a <HAL_TIM_PeriodElapsedCallback+0x5e>
    		HAL_TIM_Base_Stop_IT(&htim1);
 80018f0:	486c      	ldr	r0, [pc, #432]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80018f2:	f003 fab1 	bl	8004e58 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_PRESCALER(&htim1, currentSpeed);
 80018f6:	4b6b      	ldr	r3, [pc, #428]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28

    		// 5 - отправляем состояние ответа по UART---------------
    		SentResultActionResponse(globalState.typeStruct, "", 1);
 8001900:	4b69      	ldr	r3, [pc, #420]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001902:	2201      	movs	r2, #1
 8001904:	4969      	ldr	r1, [pc, #420]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	f004 fcec 	bl	80062e4 <SentResultActionResponse>

    		// ------------------------------------------------------

    		// 6 - сбрасываем команду -------------------------------
    		resetGlobalState();
 800190c:	f7ff fc68 	bl	80011e0 <resetGlobalState>
    		// ------------------------------------------------------
    		speedChangeFactor = 0;
 8001910:	4b67      	ldr	r3, [pc, #412]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
    		speedDownChangeFactor = 0;
 8001916:	4b67      	ldr	r3, [pc, #412]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
    		totalRate = 0;
 800191c:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
    		currentRate = 0;
 8001922:	4b5e      	ldr	r3, [pc, #376]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
    		return;
 8001928:	e0b2      	b.n	8001a90 <HAL_TIM_PeriodElapsedCallback+0x1c4>
    	}

    	if(isSetMotorPin){
 800192a:	4b64      	ldr	r3, [pc, #400]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00e      	beq.n	8001950 <HAL_TIM_PeriodElapsedCallback+0x84>
    		HAL_GPIO_WritePin(MOTOR_Port, STEP_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2102      	movs	r1, #2
 8001936:	4862      	ldr	r0, [pc, #392]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001938:	f002 fbc6 	bl	80040c8 <HAL_GPIO_WritePin>
    		isSetMotorPin = false;
 800193c:	4b5f      	ldr	r3, [pc, #380]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
    		countSetPin += 1;
 8001942:	4b60      	ldr	r3, [pc, #384]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b5e      	ldr	r3, [pc, #376]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	e00d      	b.n	800196c <HAL_TIM_PeriodElapsedCallback+0xa0>
    	} else {
    		HAL_GPIO_WritePin(MOTOR_Port, STEP_Pin, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2102      	movs	r1, #2
 8001954:	485a      	ldr	r0, [pc, #360]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001956:	f002 fbb7 	bl	80040c8 <HAL_GPIO_WritePin>
    		isSetMotorPin = true;
 800195a:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
    		countSetPin += 1;
 8001960:	4b58      	ldr	r3, [pc, #352]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	b2da      	uxtb	r2, r3
 8001968:	4b56      	ldr	r3, [pc, #344]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800196a:	701a      	strb	r2, [r3, #0]
    	}

    	if(countSetPin == 2){
 800196c:	4b55      	ldr	r3, [pc, #340]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d107      	bne.n	8001984 <HAL_TIM_PeriodElapsedCallback+0xb8>
    		currentRate -= 1;
 8001974:	4b49      	ldr	r3, [pc, #292]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3b01      	subs	r3, #1
 800197a:	4a48      	ldr	r2, [pc, #288]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800197c:	6013      	str	r3, [r2, #0]
    		countSetPin = 0;
 800197e:	4b51      	ldr	r3, [pc, #324]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
    	}

    	if(totalRate > (changeSpeedLine * 2 + 100)){
 8001984:	f241 7370 	movw	r3, #6000	; 0x1770
 8001988:	3332      	adds	r3, #50	; 0x32
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	461a      	mov	r2, r3
 800198e:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d279      	bcs.n	8001a8a <HAL_TIM_PeriodElapsedCallback+0x1be>
    		if(currentRate == (totalRate - (speedChangeStep * speedChangeFactor)) && currentRate >= totalRate - changeSpeedLine){
 8001996:	4b48      	ldr	r3, [pc, #288]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2264      	movs	r2, #100	; 0x64
 800199c:	4611      	mov	r1, r2
 800199e:	4a44      	ldr	r2, [pc, #272]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	fb02 f201 	mul.w	r2, r2, r1
 80019a6:	1a9a      	subs	r2, r3, r2
 80019a8:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d11e      	bne.n	80019ee <HAL_TIM_PeriodElapsedCallback+0x122>
 80019b0:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f241 7270 	movw	r2, #6000	; 0x1770
 80019b8:	1a9a      	subs	r2, r3, r2
 80019ba:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d815      	bhi.n	80019ee <HAL_TIM_PeriodElapsedCallback+0x122>
    			__HAL_TIM_SET_PRESCALER(&htim1, currentSpeed - speedChangeStepCount - (speedChangeStepCount * speedChangeFactor));
 80019c2:	f242 7310 	movw	r3, #10000	; 0x2710
 80019c6:	2282      	movs	r2, #130	; 0x82
 80019c8:	1a9a      	subs	r2, r3, r2
 80019ca:	2382      	movs	r3, #130	; 0x82
 80019cc:	4619      	mov	r1, r3
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	fb03 f301 	mul.w	r3, r3, r1
 80019d6:	4619      	mov	r1, r3
 80019d8:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	1a52      	subs	r2, r2, r1
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
    		    speedChangeFactor += 1;
 80019e0:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80019ea:	701a      	strb	r2, [r3, #0]
    		    return;
 80019ec:	e050      	b.n	8001a90 <HAL_TIM_PeriodElapsedCallback+0x1c4>
    		}

    		 if(currentRate == (changeSpeedLine - (speedChangeStep * speedDownChangeFactor)) && currentRate <= changeSpeedLine){
 80019ee:	f241 7370 	movw	r3, #6000	; 0x1770
 80019f2:	461a      	mov	r2, r3
 80019f4:	2364      	movs	r3, #100	; 0x64
 80019f6:	4619      	mov	r1, r3
 80019f8:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	fb03 f301 	mul.w	r3, r3, r1
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d141      	bne.n	8001a8e <HAL_TIM_PeriodElapsedCallback+0x1c2>
 8001a0a:	f241 7370 	movw	r3, #6000	; 0x1770
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d33a      	bcc.n	8001a8e <HAL_TIM_PeriodElapsedCallback+0x1c2>
    			speedChangeFactor -= 1;
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a22:	701a      	strb	r2, [r3, #0]
    			__HAL_TIM_SET_PRESCALER(&htim1, currentSpeed - (speedChangeStepCount * speedChangeFactor));
 8001a24:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a28:	2382      	movs	r3, #130	; 0x82
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	fb03 f301 	mul.w	r3, r3, r1
 8001a34:	4619      	mov	r1, r3
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	1a52      	subs	r2, r2, r1
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28
    		    speedDownChangeFactor += 1;
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	3301      	adds	r3, #1
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001a48:	701a      	strb	r2, [r3, #0]
    		    return;
 8001a4a:	e021      	b.n	8001a90 <HAL_TIM_PeriodElapsedCallback+0x1c4>
    	}

		return;
    }

	if (htim == &htim1) {
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d11d      	bne.n	8001a90 <HAL_TIM_PeriodElapsedCallback+0x1c4>
		uint16_t TIM2_count = __HAL_TIM_GET_COUNTER(&htim2);
 8001a54:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	81fb      	strh	r3, [r7, #14]
		//Значение счетчика таймера TIM2
		//(Количество последних подсчитанных
		//импульсов к моменту прерывания)
		uint16_t TIM2_overflows = __HAL_TIM_GET_COUNTER(&htim3);
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	81bb      	strh	r3, [r7, #12]
		//Значение счетчика таймера TIM3
		freq_ = TIM2_count + (TIM2_overflows * 65535) + TIM2_overflows;
 8001a64:	89f9      	ldrh	r1, [r7, #14]
 8001a66:	89ba      	ldrh	r2, [r7, #12]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	041b      	lsls	r3, r3, #16
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	18ca      	adds	r2, r1, r3
 8001a70:	89bb      	ldrh	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001a76:	6013      	str	r3, [r2, #0]
        //Вычисление частоты
        //Установка флага окончания измерения частоты
		__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
        //Обнуление счетчиков таймеров 2 и 3
		__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2200      	movs	r2, #0
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24
 8001a88:	e002      	b.n	8001a90 <HAL_TIM_PeriodElapsedCallback+0x1c4>
		return;
 8001a8a:	bf00      	nop
 8001a8c:	e000      	b.n	8001a90 <HAL_TIM_PeriodElapsedCallback+0x1c4>
    		return;
 8001a8e:	bf00      	nop
	}
}
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40012c00 	.word	0x40012c00
 8001a9c:	20000204 	.word	0x20000204
 8001aa0:	200001fc 	.word	0x200001fc
 8001aa4:	20003a30 	.word	0x20003a30
 8001aa8:	20003734 	.word	0x20003734
 8001aac:	0800de94 	.word	0x0800de94
 8001ab0:	20000209 	.word	0x20000209
 8001ab4:	2000020a 	.word	0x2000020a
 8001ab8:	20000200 	.word	0x20000200
 8001abc:	20000208 	.word	0x20000208
 8001ac0:	40010c00 	.word	0x40010c00
 8001ac4:	2000020b 	.word	0x2000020b
 8001ac8:	20003a78 	.word	0x20003a78
 8001acc:	200039e8 	.word	0x200039e8
 8001ad0:	20003860 	.word	0x20003860

08001ad4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae8:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <MX_GPIO_Init+0xf4>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a36      	ldr	r2, [pc, #216]	; (8001bc8 <MX_GPIO_Init+0xf4>)
 8001aee:	f043 0310 	orr.w	r3, r3, #16
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <MX_GPIO_Init+0xf4>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b00:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <MX_GPIO_Init+0xf4>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a30      	ldr	r2, [pc, #192]	; (8001bc8 <MX_GPIO_Init+0xf4>)
 8001b06:	f043 0320 	orr.w	r3, r3, #32
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <MX_GPIO_Init+0xf4>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <MX_GPIO_Init+0xf4>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a2a      	ldr	r2, [pc, #168]	; (8001bc8 <MX_GPIO_Init+0xf4>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <MX_GPIO_Init+0xf4>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <MX_GPIO_Init+0xf4>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a24      	ldr	r2, [pc, #144]	; (8001bc8 <MX_GPIO_Init+0xf4>)
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <MX_GPIO_Init+0xf4>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b4e:	481f      	ldr	r0, [pc, #124]	; (8001bcc <MX_GPIO_Init+0xf8>)
 8001b50:	f002 faba 	bl	80040c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|Relay_OUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2164      	movs	r1, #100	; 0x64
 8001b58:	481d      	ldr	r0, [pc, #116]	; (8001bd0 <MX_GPIO_Init+0xfc>)
 8001b5a:	f002 fab5 	bl	80040c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2103      	movs	r1, #3
 8001b62:	481c      	ldr	r0, [pc, #112]	; (8001bd4 <MX_GPIO_Init+0x100>)
 8001b64:	f002 fab0 	bl	80040c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2302      	movs	r3, #2
 8001b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 0310 	add.w	r3, r7, #16
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4812      	ldr	r0, [pc, #72]	; (8001bcc <MX_GPIO_Init+0xf8>)
 8001b82:	f002 f91d 	bl	8003dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|Relay_OUT_Pin|LED2_Pin;
 8001b86:	2364      	movs	r3, #100	; 0x64
 8001b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <MX_GPIO_Init+0xfc>)
 8001b9e:	f002 f90f 	bl	8003dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <MX_GPIO_Init+0x100>)
 8001bba:	f002 f901 	bl	8003dc0 <HAL_GPIO_Init>

}
 8001bbe:	bf00      	nop
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40011000 	.word	0x40011000
 8001bd0:	40010800 	.word	0x40010800
 8001bd4:	40010c00 	.word	0x40010c00

08001bd8 <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

int main(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  HAL_Init();
 8001bdc:	f001 f8e8 	bl	8002db0 <HAL_Init>
  SystemClock_Config();
 8001be0:	f000 f815 	bl	8001c0e <SystemClock_Config>
  MX_GPIO_Init();
 8001be4:	f7ff ff76 	bl	8001ad4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001be8:	f000 fb8e 	bl	8002308 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001bec:	f7ff fa72 	bl	80010d4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001bf0:	f000 fa14 	bl	800201c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bf4:	f000 fa62 	bl	80020bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bf8:	f000 faca 	bl	8002190 <MX_TIM3_Init>

  osKernelInitialize();
 8001bfc:	f004 fc56 	bl	80064ac <osKernelInitialize>
  // инициализация FreeTos
  MX_FREERTOS_Init();
 8001c00:	f7ff fb74 	bl	80012ec <MX_FREERTOS_Init>
  osKernelStart();
 8001c04:	f004 fc84 	bl	8006510 <osKernelStart>
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b094      	sub	sp, #80	; 0x50
 8001c12:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c18:	2228      	movs	r2, #40	; 0x28
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f007 fcba 	bl	8009596 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c50:	2302      	movs	r3, #2
 8001c52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c5a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fa47 	bl	80040f8 <HAL_RCC_OscConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c70:	f000 f831 	bl	8001cd6 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c74:	230f      	movs	r3, #15
 8001c76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c84:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	2102      	movs	r1, #2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 fcb1 	bl	80045f8 <HAL_RCC_ClockConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001c9c:	f000 f81b 	bl	8001cd6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ca4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ca8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4618      	mov	r0, r3
 8001cae:	f002 fe6d 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001cb8:	f000 f80d 	bl	8001cd6 <Error_Handler>
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	3750      	adds	r7, #80	; 0x50
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
          if(huart == &huart1)
          {
                  // можно установить какой-то флаг, сообщающий об окончании отправки
          }
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <Error_Handler>:

void Error_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cda:	b672      	cpsid	i
}
 8001cdc:	bf00      	nop
  __disable_irq();
  while (1)
 8001cde:	e7fe      	b.n	8001cde <Error_Handler+0x8>

08001ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_MspInit+0x68>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	4a17      	ldr	r2, [pc, #92]	; (8001d48 <HAL_MspInit+0x68>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6193      	str	r3, [r2, #24]
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_MspInit+0x68>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_MspInit+0x68>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <HAL_MspInit+0x68>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	61d3      	str	r3, [r2, #28]
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_MspInit+0x68>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	210f      	movs	r1, #15
 8001d1a:	f06f 0001 	mvn.w	r0, #1
 8001d1e:	f001 fe10 	bl	8003942 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_MspInit+0x6c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_MspInit+0x6c>)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010000 	.word	0x40010000

08001d50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08c      	sub	sp, #48	; 0x30
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	201e      	movs	r0, #30
 8001d66:	f001 fdec 	bl	8003942 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d6a:	201e      	movs	r0, #30
 8001d6c:	f001 fe05 	bl	800397a <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001d70:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <HAL_InitTick+0xa0>)
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	4a1e      	ldr	r2, [pc, #120]	; (8001df0 <HAL_InitTick+0xa0>)
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	61d3      	str	r3, [r2, #28]
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <HAL_InitTick+0xa0>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d88:	f107 0210 	add.w	r2, r7, #16
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f002 fdac 	bl	80048f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d98:	f002 fd82 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <HAL_InitTick+0xa4>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0c9b      	lsrs	r3, r3, #18
 8001dac:	3b01      	subs	r3, #1
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_InitTick+0xa8>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <HAL_InitTick+0xac>)
 8001db4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_InitTick+0xa8>)
 8001db8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dbc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001dbe:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <HAL_InitTick+0xa8>)
 8001dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_InitTick+0xa8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_InitTick+0xa8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001dd0:	4809      	ldr	r0, [pc, #36]	; (8001df8 <HAL_InitTick+0xa8>)
 8001dd2:	f002 ff55 	bl	8004c80 <HAL_TIM_Base_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d104      	bne.n	8001de6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001ddc:	4806      	ldr	r0, [pc, #24]	; (8001df8 <HAL_InitTick+0xa8>)
 8001dde:	f002 ffe9 	bl	8004db4 <HAL_TIM_Base_Start_IT>
 8001de2:	4603      	mov	r3, r0
 8001de4:	e000      	b.n	8001de8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3730      	adds	r7, #48	; 0x30
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	431bde83 	.word	0x431bde83
 8001df8:	200039a0 	.word	0x200039a0
 8001dfc:	40000800 	.word	0x40000800

08001e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <NMI_Handler+0x4>

08001e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <HardFault_Handler+0x4>

08001e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <MemManage_Handler+0x4>

08001e12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <BusFault_Handler+0x4>

08001e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <UsageFault_Handler+0x4>

08001e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
	...

08001e2c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <DMA1_Channel4_IRQHandler+0x10>)
 8001e32:	f001 febf 	bl	8003bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20003ac0 	.word	0x20003ac0

08001e40 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <ADC1_2_IRQHandler+0x10>)
 8001e46:	f001 f991 	bl	800316c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20003704 	.word	0x20003704

08001e54 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <TIM1_UP_IRQHandler+0x10>)
 8001e5a:	f003 f82b 	bl	8004eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20003a30 	.word	0x20003a30

08001e68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM4_IRQHandler+0x10>)
 8001e6e:	f003 f821 	bl	8004eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200039a0 	.word	0x200039a0

08001e7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <USART1_IRQHandler+0x10>)
 8001e82:	f003 fe05 	bl	8005a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20003b04 	.word	0x20003b04

08001e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
	return 1;
 8001e94:	2301      	movs	r3, #1
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr

08001e9e <_kill>:

int _kill(int pid, int sig)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ea8:	f007 fa44 	bl	8009334 <__errno>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2216      	movs	r2, #22
 8001eb0:	601a      	str	r2, [r3, #0]
	return -1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_exit>:

void _exit (int status)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ffe7 	bl	8001e9e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ed0:	e7fe      	b.n	8001ed0 <_exit+0x12>

08001ed2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e00a      	b.n	8001efa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	4601      	mov	r1, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	60ba      	str	r2, [r7, #8]
 8001ef0:	b2ca      	uxtb	r2, r1
 8001ef2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	dbf0      	blt.n	8001ee4 <_read+0x12>
	}

return len;
 8001f02:	687b      	ldr	r3, [r7, #4]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	e009      	b.n	8001f32 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	60ba      	str	r2, [r7, #8]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	dbf1      	blt.n	8001f1e <_write+0x12>
	}
	return len;
 8001f3a:	687b      	ldr	r3, [r7, #4]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_close>:

int _close(int file)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	return -1;
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f6a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <_isatty>:

int _isatty(int file)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	return 1;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
	return 0;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fac:	4a14      	ldr	r2, [pc, #80]	; (8002000 <_sbrk+0x5c>)
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <_sbrk+0x60>)
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <_sbrk+0x64>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <_sbrk+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d207      	bcs.n	8001fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd4:	f007 f9ae 	bl	8009334 <__errno>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	220c      	movs	r2, #12
 8001fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	e009      	b.n	8001ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <_sbrk+0x64>)
 8001ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20005000 	.word	0x20005000
 8002004:	00000400 	.word	0x00000400
 8002008:	2000020c 	.word	0x2000020c
 800200c:	20003ba0 	.word	0x20003ba0

08002010 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002022:	f107 0308 	add.w	r3, r7, #8
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002030:	463b      	mov	r3, r7
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002038:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <MX_TIM1_Init+0x98>)
 800203a:	4a1f      	ldr	r2, [pc, #124]	; (80020b8 <MX_TIM1_Init+0x9c>)
 800203c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 800203e:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <MX_TIM1_Init+0x98>)
 8002040:	f242 7210 	movw	r2, #10000	; 0x2710
 8002044:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <MX_TIM1_Init+0x98>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <MX_TIM1_Init+0x98>)
 800204e:	2201      	movs	r2, #1
 8002050:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <MX_TIM1_Init+0x98>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <MX_TIM1_Init+0x98>)
 800205a:	2200      	movs	r2, #0
 800205c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <MX_TIM1_Init+0x98>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002064:	4813      	ldr	r0, [pc, #76]	; (80020b4 <MX_TIM1_Init+0x98>)
 8002066:	f002 fe0b 	bl	8004c80 <HAL_TIM_Base_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002070:	f7ff fe31 	bl	8001cd6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002078:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	4619      	mov	r1, r3
 8002080:	480c      	ldr	r0, [pc, #48]	; (80020b4 <MX_TIM1_Init+0x98>)
 8002082:	f003 f81f 	bl	80050c4 <HAL_TIM_ConfigClockSource>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800208c:	f7ff fe23 	bl	8001cd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002090:	2310      	movs	r3, #16
 8002092:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002098:	463b      	mov	r3, r7
 800209a:	4619      	mov	r1, r3
 800209c:	4805      	ldr	r0, [pc, #20]	; (80020b4 <MX_TIM1_Init+0x98>)
 800209e:	f003 fac1 	bl	8005624 <HAL_TIMEx_MasterConfigSynchronization>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80020a8:	f7ff fe15 	bl	8001cd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020ac:	bf00      	nop
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20003a30 	.word	0x20003a30
 80020b8:	40012c00 	.word	0x40012c00

080020bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020e8:	4b28      	ldr	r3, [pc, #160]	; (800218c <MX_TIM2_Init+0xd0>)
 80020ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <MX_TIM2_Init+0xd0>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <MX_TIM2_Init+0xd0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <MX_TIM2_Init+0xd0>)
 80020fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002102:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <MX_TIM2_Init+0xd0>)
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <MX_TIM2_Init+0xd0>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002110:	481e      	ldr	r0, [pc, #120]	; (800218c <MX_TIM2_Init+0xd0>)
 8002112:	f002 fdb5 	bl	8004c80 <HAL_TIM_Base_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800211c:	f7ff fddb 	bl	8001cd6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002120:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002124:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800212a:	2300      	movs	r3, #0
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002132:	f107 0320 	add.w	r3, r7, #32
 8002136:	4619      	mov	r1, r3
 8002138:	4814      	ldr	r0, [pc, #80]	; (800218c <MX_TIM2_Init+0xd0>)
 800213a:	f002 ffc3 	bl	80050c4 <HAL_TIM_ConfigClockSource>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002144:	f7ff fdc7 	bl	8001cd6 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002148:	2305      	movs	r3, #5
 800214a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	4619      	mov	r1, r3
 8002156:	480d      	ldr	r0, [pc, #52]	; (800218c <MX_TIM2_Init+0xd0>)
 8002158:	f003 f878 	bl	800524c <HAL_TIM_SlaveConfigSynchro>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002162:	f7ff fdb8 	bl	8001cd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002166:	2320      	movs	r3, #32
 8002168:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4806      	ldr	r0, [pc, #24]	; (800218c <MX_TIM2_Init+0xd0>)
 8002174:	f003 fa56 	bl	8005624 <HAL_TIMEx_MasterConfigSynchronization>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800217e:	f7ff fdaa 	bl	8001cd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 8002182:	bf00      	nop
 8002184:	3730      	adds	r7, #48	; 0x30
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20003a78 	.word	0x20003a78

08002190 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <MX_TIM3_Init+0x98>)
 80021b0:	4a1e      	ldr	r2, [pc, #120]	; (800222c <MX_TIM3_Init+0x9c>)
 80021b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <MX_TIM3_Init+0x98>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ba:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <MX_TIM3_Init+0x98>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <MX_TIM3_Init+0x98>)
 80021c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <MX_TIM3_Init+0x98>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <MX_TIM3_Init+0x98>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021d4:	4814      	ldr	r0, [pc, #80]	; (8002228 <MX_TIM3_Init+0x98>)
 80021d6:	f002 fd53 	bl	8004c80 <HAL_TIM_Base_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80021e0:	f7ff fd79 	bl	8001cd6 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80021e4:	2307      	movs	r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80021e8:	2310      	movs	r3, #16
 80021ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	4619      	mov	r1, r3
 80021f2:	480d      	ldr	r0, [pc, #52]	; (8002228 <MX_TIM3_Init+0x98>)
 80021f4:	f003 f82a 	bl	800524c <HAL_TIM_SlaveConfigSynchro>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80021fe:	f7ff fd6a 	bl	8001cd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	4619      	mov	r1, r3
 800220e:	4806      	ldr	r0, [pc, #24]	; (8002228 <MX_TIM3_Init+0x98>)
 8002210:	f003 fa08 	bl	8005624 <HAL_TIMEx_MasterConfigSynchronization>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800221a:	f7ff fd5c 	bl	8001cd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	3720      	adds	r7, #32
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200039e8 	.word	0x200039e8
 800222c:	40000400 	.word	0x40000400

08002230 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0318 	add.w	r3, r7, #24
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a2b      	ldr	r2, [pc, #172]	; (80022f8 <HAL_TIM_Base_MspInit+0xc8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d114      	bne.n	800227a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <HAL_TIM_Base_MspInit+0xcc>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	4a29      	ldr	r2, [pc, #164]	; (80022fc <HAL_TIM_Base_MspInit+0xcc>)
 8002256:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800225a:	6193      	str	r3, [r2, #24]
 800225c:	4b27      	ldr	r3, [pc, #156]	; (80022fc <HAL_TIM_Base_MspInit+0xcc>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002268:	2200      	movs	r2, #0
 800226a:	2105      	movs	r1, #5
 800226c:	2019      	movs	r0, #25
 800226e:	f001 fb68 	bl	8003942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002272:	2019      	movs	r0, #25
 8002274:	f001 fb81 	bl	800397a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002278:	e03a      	b.n	80022f0 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002282:	d124      	bne.n	80022ce <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_TIM_Base_MspInit+0xcc>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	4a1c      	ldr	r2, [pc, #112]	; (80022fc <HAL_TIM_Base_MspInit+0xcc>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	61d3      	str	r3, [r2, #28]
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <HAL_TIM_Base_MspInit+0xcc>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <HAL_TIM_Base_MspInit+0xcc>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a16      	ldr	r2, [pc, #88]	; (80022fc <HAL_TIM_Base_MspInit+0xcc>)
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	6193      	str	r3, [r2, #24]
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <HAL_TIM_Base_MspInit+0xcc>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022b4:	2301      	movs	r3, #1
 80022b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c0:	f107 0318 	add.w	r3, r7, #24
 80022c4:	4619      	mov	r1, r3
 80022c6:	480e      	ldr	r0, [pc, #56]	; (8002300 <HAL_TIM_Base_MspInit+0xd0>)
 80022c8:	f001 fd7a 	bl	8003dc0 <HAL_GPIO_Init>
}
 80022cc:	e010      	b.n	80022f0 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM3)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <HAL_TIM_Base_MspInit+0xd4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d10b      	bne.n	80022f0 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_TIM_Base_MspInit+0xcc>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_TIM_Base_MspInit+0xcc>)
 80022de:	f043 0302 	orr.w	r3, r3, #2
 80022e2:	61d3      	str	r3, [r2, #28]
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_TIM_Base_MspInit+0xcc>)
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
}
 80022f0:	bf00      	nop
 80022f2:	3728      	adds	r7, #40	; 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40012c00 	.word	0x40012c00
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010800 	.word	0x40010800
 8002304:	40000400 	.word	0x40000400

08002308 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <MX_USART1_UART_Init+0x4c>)
 800230e:	4a12      	ldr	r2, [pc, #72]	; (8002358 <MX_USART1_UART_Init+0x50>)
 8002310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <MX_USART1_UART_Init+0x4c>)
 8002314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002318:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800231a:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <MX_USART1_UART_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <MX_USART1_UART_Init+0x4c>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <MX_USART1_UART_Init+0x4c>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <MX_USART1_UART_Init+0x4c>)
 800232e:	220c      	movs	r2, #12
 8002330:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <MX_USART1_UART_Init+0x4c>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <MX_USART1_UART_Init+0x4c>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800233e:	4805      	ldr	r0, [pc, #20]	; (8002354 <MX_USART1_UART_Init+0x4c>)
 8002340:	f003 f9e0 	bl	8005704 <HAL_UART_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800234a:	f7ff fcc4 	bl	8001cd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20003b04 	.word	0x20003b04
 8002358:	40013800 	.word	0x40013800

0800235c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a34      	ldr	r2, [pc, #208]	; (8002448 <HAL_UART_MspInit+0xec>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d160      	bne.n	800243e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800237c:	4b33      	ldr	r3, [pc, #204]	; (800244c <HAL_UART_MspInit+0xf0>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4a32      	ldr	r2, [pc, #200]	; (800244c <HAL_UART_MspInit+0xf0>)
 8002382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002386:	6193      	str	r3, [r2, #24]
 8002388:	4b30      	ldr	r3, [pc, #192]	; (800244c <HAL_UART_MspInit+0xf0>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_UART_MspInit+0xf0>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4a2c      	ldr	r2, [pc, #176]	; (800244c <HAL_UART_MspInit+0xf0>)
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	6193      	str	r3, [r2, #24]
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <HAL_UART_MspInit+0xf0>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ba:	f107 0310 	add.w	r3, r7, #16
 80023be:	4619      	mov	r1, r3
 80023c0:	4823      	ldr	r0, [pc, #140]	; (8002450 <HAL_UART_MspInit+0xf4>)
 80023c2:	f001 fcfd 	bl	8003dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d4:	f107 0310 	add.w	r3, r7, #16
 80023d8:	4619      	mov	r1, r3
 80023da:	481d      	ldr	r0, [pc, #116]	; (8002450 <HAL_UART_MspInit+0xf4>)
 80023dc:	f001 fcf0 	bl	8003dc0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80023e0:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <HAL_UART_MspInit+0xf8>)
 80023e2:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <HAL_UART_MspInit+0xfc>)
 80023e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023e6:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <HAL_UART_MspInit+0xf8>)
 80023e8:	2210      	movs	r2, #16
 80023ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ec:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_UART_MspInit+0xf8>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <HAL_UART_MspInit+0xf8>)
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_UART_MspInit+0xf8>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_UART_MspInit+0xf8>)
 8002400:	2200      	movs	r2, #0
 8002402:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <HAL_UART_MspInit+0xf8>)
 8002406:	2200      	movs	r2, #0
 8002408:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_UART_MspInit+0xf8>)
 800240c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002410:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002412:	4810      	ldr	r0, [pc, #64]	; (8002454 <HAL_UART_MspInit+0xf8>)
 8002414:	f001 fac4 	bl	80039a0 <HAL_DMA_Init>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800241e:	f7ff fc5a 	bl	8001cd6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <HAL_UART_MspInit+0xf8>)
 8002426:	635a      	str	r2, [r3, #52]	; 0x34
 8002428:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <HAL_UART_MspInit+0xf8>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	2025      	movs	r0, #37	; 0x25
 8002434:	f001 fa85 	bl	8003942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002438:	2025      	movs	r0, #37	; 0x25
 800243a:	f001 fa9e 	bl	800397a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800243e:	bf00      	nop
 8002440:	3720      	adds	r7, #32
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40013800 	.word	0x40013800
 800244c:	40021000 	.word	0x40021000
 8002450:	40010800 	.word	0x40010800
 8002454:	20003ac0 	.word	0x20003ac0
 8002458:	40020044 	.word	0x40020044

0800245c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800245c:	480c      	ldr	r0, [pc, #48]	; (8002490 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800245e:	490d      	ldr	r1, [pc, #52]	; (8002494 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002460:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002464:	e002      	b.n	800246c <LoopCopyDataInit>

08002466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246a:	3304      	adds	r3, #4

0800246c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800246c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002470:	d3f9      	bcc.n	8002466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002474:	4c0a      	ldr	r4, [pc, #40]	; (80024a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002478:	e001      	b.n	800247e <LoopFillZerobss>

0800247a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800247c:	3204      	adds	r2, #4

0800247e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002480:	d3fb      	bcc.n	800247a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002482:	f7ff fdc5 	bl	8002010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002486:	f007 f851 	bl	800952c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800248a:	f7ff fba5 	bl	8001bd8 <main>
  bx lr
 800248e:	4770      	bx	lr
  ldr r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002494:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002498:	0800e568 	.word	0x0800e568
  ldr r2, =_sbss
 800249c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80024a0:	20003b9c 	.word	0x20003b9c

080024a4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a4:	e7fe      	b.n	80024a4 <CAN1_RX1_IRQHandler>

080024a6 <isCheckState>:
#include "TypeStruct.h"

bool isCheckState(struct TypeStruct dto){
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '1' && dto.subType[0] == '0' && dto.subType[1] == '0';
 80024ae:	793b      	ldrb	r3, [r7, #4]
 80024b0:	2b30      	cmp	r3, #48	; 0x30
 80024b2:	d10a      	bne.n	80024ca <isCheckState+0x24>
 80024b4:	797b      	ldrb	r3, [r7, #5]
 80024b6:	2b31      	cmp	r3, #49	; 0x31
 80024b8:	d107      	bne.n	80024ca <isCheckState+0x24>
 80024ba:	79bb      	ldrb	r3, [r7, #6]
 80024bc:	2b30      	cmp	r3, #48	; 0x30
 80024be:	d104      	bne.n	80024ca <isCheckState+0x24>
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	2b30      	cmp	r3, #48	; 0x30
 80024c4:	d101      	bne.n	80024ca <isCheckState+0x24>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <isCheckState+0x26>
 80024ca:	2300      	movs	r3, #0
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <isChangePosition>:

bool isChangePosition(struct TypeStruct dto){
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '2' && dto.subType[0] == '0' && dto.subType[1] == '0';
 80024e4:	793b      	ldrb	r3, [r7, #4]
 80024e6:	2b30      	cmp	r3, #48	; 0x30
 80024e8:	d10a      	bne.n	8002500 <isChangePosition+0x24>
 80024ea:	797b      	ldrb	r3, [r7, #5]
 80024ec:	2b32      	cmp	r3, #50	; 0x32
 80024ee:	d107      	bne.n	8002500 <isChangePosition+0x24>
 80024f0:	79bb      	ldrb	r3, [r7, #6]
 80024f2:	2b30      	cmp	r3, #48	; 0x30
 80024f4:	d104      	bne.n	8002500 <isChangePosition+0x24>
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	2b30      	cmp	r3, #48	; 0x30
 80024fa:	d101      	bne.n	8002500 <isChangePosition+0x24>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <isChangePosition+0x26>
 8002500:	2300      	movs	r3, #0
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <isDetectAmperageRange>:

bool isDetectAmperageRange(struct TypeStruct dto){
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '3' && dto.subType[0] == '0' && dto.subType[1] == '1';
 800251a:	793b      	ldrb	r3, [r7, #4]
 800251c:	2b30      	cmp	r3, #48	; 0x30
 800251e:	d10a      	bne.n	8002536 <isDetectAmperageRange+0x24>
 8002520:	797b      	ldrb	r3, [r7, #5]
 8002522:	2b33      	cmp	r3, #51	; 0x33
 8002524:	d107      	bne.n	8002536 <isDetectAmperageRange+0x24>
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	2b30      	cmp	r3, #48	; 0x30
 800252a:	d104      	bne.n	8002536 <isDetectAmperageRange+0x24>
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	2b31      	cmp	r3, #49	; 0x31
 8002530:	d101      	bne.n	8002536 <isDetectAmperageRange+0x24>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <isDetectAmperageRange+0x26>
 8002536:	2300      	movs	r3, #0
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	b2db      	uxtb	r3, r3
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <isDetectAmperageTime>:

bool isDetectAmperageTime(struct TypeStruct dto){
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '3' && dto.subType[0] == '0' && dto.subType[1] == '2';
 8002550:	793b      	ldrb	r3, [r7, #4]
 8002552:	2b30      	cmp	r3, #48	; 0x30
 8002554:	d10a      	bne.n	800256c <isDetectAmperageTime+0x24>
 8002556:	797b      	ldrb	r3, [r7, #5]
 8002558:	2b33      	cmp	r3, #51	; 0x33
 800255a:	d107      	bne.n	800256c <isDetectAmperageTime+0x24>
 800255c:	79bb      	ldrb	r3, [r7, #6]
 800255e:	2b30      	cmp	r3, #48	; 0x30
 8002560:	d104      	bne.n	800256c <isDetectAmperageTime+0x24>
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	2b32      	cmp	r3, #50	; 0x32
 8002566:	d101      	bne.n	800256c <isDetectAmperageTime+0x24>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <isDetectAmperageTime+0x26>
 800256c:	2300      	movs	r3, #0
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	b2db      	uxtb	r3, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <isDetectTickRange>:

bool isDetectTickRange(struct TypeStruct dto){
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '4' && dto.subType[0] == '0' && dto.subType[1] == '1';
 8002586:	793b      	ldrb	r3, [r7, #4]
 8002588:	2b30      	cmp	r3, #48	; 0x30
 800258a:	d10a      	bne.n	80025a2 <isDetectTickRange+0x24>
 800258c:	797b      	ldrb	r3, [r7, #5]
 800258e:	2b34      	cmp	r3, #52	; 0x34
 8002590:	d107      	bne.n	80025a2 <isDetectTickRange+0x24>
 8002592:	79bb      	ldrb	r3, [r7, #6]
 8002594:	2b30      	cmp	r3, #48	; 0x30
 8002596:	d104      	bne.n	80025a2 <isDetectTickRange+0x24>
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	2b31      	cmp	r3, #49	; 0x31
 800259c:	d101      	bne.n	80025a2 <isDetectTickRange+0x24>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <isDetectTickRange+0x26>
 80025a2:	2300      	movs	r3, #0
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <isDetectTickTime>:

bool isDetectTickTime(struct TypeStruct dto){
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '4' && dto.subType[0] == '0' && dto.subType[1] == '2';
 80025bc:	793b      	ldrb	r3, [r7, #4]
 80025be:	2b30      	cmp	r3, #48	; 0x30
 80025c0:	d10a      	bne.n	80025d8 <isDetectTickTime+0x24>
 80025c2:	797b      	ldrb	r3, [r7, #5]
 80025c4:	2b34      	cmp	r3, #52	; 0x34
 80025c6:	d107      	bne.n	80025d8 <isDetectTickTime+0x24>
 80025c8:	79bb      	ldrb	r3, [r7, #6]
 80025ca:	2b30      	cmp	r3, #48	; 0x30
 80025cc:	d104      	bne.n	80025d8 <isDetectTickTime+0x24>
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	2b32      	cmp	r3, #50	; 0x32
 80025d2:	d101      	bne.n	80025d8 <isDetectTickTime+0x24>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <isDetectTickTime+0x26>
 80025d8:	2300      	movs	r3, #0
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <isContinueMeasure>:

bool isContinueMeasure(struct TypeStruct dto){
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '5' && dto.subType[0] == '0' && dto.subType[1] == '0';
 80025f2:	793b      	ldrb	r3, [r7, #4]
 80025f4:	2b30      	cmp	r3, #48	; 0x30
 80025f6:	d10a      	bne.n	800260e <isContinueMeasure+0x24>
 80025f8:	797b      	ldrb	r3, [r7, #5]
 80025fa:	2b35      	cmp	r3, #53	; 0x35
 80025fc:	d107      	bne.n	800260e <isContinueMeasure+0x24>
 80025fe:	79bb      	ldrb	r3, [r7, #6]
 8002600:	2b30      	cmp	r3, #48	; 0x30
 8002602:	d104      	bne.n	800260e <isContinueMeasure+0x24>
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	2b30      	cmp	r3, #48	; 0x30
 8002608:	d101      	bne.n	800260e <isContinueMeasure+0x24>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <isContinueMeasure+0x26>
 800260e:	2300      	movs	r3, #0
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <isPauseMeasure>:

bool isPauseMeasure(struct TypeStruct dto){
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '6' && dto.subType[0] == '0' && dto.subType[1] == '0';
 8002628:	793b      	ldrb	r3, [r7, #4]
 800262a:	2b30      	cmp	r3, #48	; 0x30
 800262c:	d10a      	bne.n	8002644 <isPauseMeasure+0x24>
 800262e:	797b      	ldrb	r3, [r7, #5]
 8002630:	2b36      	cmp	r3, #54	; 0x36
 8002632:	d107      	bne.n	8002644 <isPauseMeasure+0x24>
 8002634:	79bb      	ldrb	r3, [r7, #6]
 8002636:	2b30      	cmp	r3, #48	; 0x30
 8002638:	d104      	bne.n	8002644 <isPauseMeasure+0x24>
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	2b30      	cmp	r3, #48	; 0x30
 800263e:	d101      	bne.n	8002644 <isPauseMeasure+0x24>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <isPauseMeasure+0x26>
 8002644:	2300      	movs	r3, #0
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	b2db      	uxtb	r3, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <isStopMeasure>:

bool isStopMeasure(struct TypeStruct dto){
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '7' && dto.subType[0] == '0' && dto.subType[1] == '0';
 800265e:	793b      	ldrb	r3, [r7, #4]
 8002660:	2b30      	cmp	r3, #48	; 0x30
 8002662:	d10a      	bne.n	800267a <isStopMeasure+0x24>
 8002664:	797b      	ldrb	r3, [r7, #5]
 8002666:	2b37      	cmp	r3, #55	; 0x37
 8002668:	d107      	bne.n	800267a <isStopMeasure+0x24>
 800266a:	79bb      	ldrb	r3, [r7, #6]
 800266c:	2b30      	cmp	r3, #48	; 0x30
 800266e:	d104      	bne.n	800267a <isStopMeasure+0x24>
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	2b30      	cmp	r3, #48	; 0x30
 8002674:	d101      	bne.n	800267a <isStopMeasure+0x24>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <isStopMeasure+0x26>
 800267a:	2300      	movs	r3, #0
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	b2db      	uxtb	r3, r3
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <receiveSymbol>:
#include "CParser.h"

Status receiveSymbol() {
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive(&huart1, (uint8_t*) &receivedSymbol_, 1, HAL_MAX_DELAY) == HAL_OK)
 8002690:	f04f 33ff 	mov.w	r3, #4294967295
 8002694:	2201      	movs	r2, #1
 8002696:	4906      	ldr	r1, [pc, #24]	; (80026b0 <receiveSymbol+0x24>)
 8002698:	4806      	ldr	r0, [pc, #24]	; (80026b4 <receiveSymbol+0x28>)
 800269a:	f003 f912 	bl	80058c2 <HAL_UART_Receive>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <receiveSymbol+0x1c>
		return OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e000      	b.n	80026aa <receiveSymbol+0x1e>
	else
		return ERR;
 80026a8:	2301      	movs	r3, #1
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2000378c 	.word	0x2000378c
 80026b4:	20003b04 	.word	0x20003b04

080026b8 <checkStartOfMessage>:

/*
 * Если принятый символ '$' (начало пакета), то возвращаем OK, иначе ERR
 */
Status checkStartOfMessage() {
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
	if (receivedSymbol_ == '$') {
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <checkStartOfMessage+0x1c>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b24      	cmp	r3, #36	; 0x24
 80026c2:	d101      	bne.n	80026c8 <checkStartOfMessage+0x10>
		return OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e000      	b.n	80026ca <checkStartOfMessage+0x12>
	} else
		return ERR;
 80026c8:	2301      	movs	r3, #1
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	2000378c 	.word	0x2000378c

080026d8 <receiveMessage>:
/*
 * Читаем символы из UART, пока не встретим ';' (конец пакета),
 * в конце ставим символ конца строки и возвращаем OK
 * Если произошла ошибка при чтении, возвращаем ERR
 */
Status receiveMessage(char* outMessage) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]
	do {
		if (receiveSymbol() == OK) {
 80026e4:	f7ff ffd2 	bl	800268c <receiveSymbol>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <receiveMessage+0x2a>
			outMessage[i] = receivedSymbol_;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <receiveMessage+0x4c>)
 80026f6:	7812      	ldrb	r2, [r2, #0]
 80026f8:	701a      	strb	r2, [r3, #0]
			i++;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	3301      	adds	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	e001      	b.n	8002706 <receiveMessage+0x2e>
		} else
			return ERR;
 8002702:	2301      	movs	r3, #1
 8002704:	e009      	b.n	800271a <receiveMessage+0x42>
	} while (receivedSymbol_ != ';');
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <receiveMessage+0x4c>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b3b      	cmp	r3, #59	; 0x3b
 800270c:	d1ea      	bne.n	80026e4 <receiveMessage+0xc>
	outMessage[i] = '\0';
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	4413      	add	r3, r2
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
	return OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	2000378c 	.word	0x2000378c

08002728 <getNewGlobalState>:
/*
 * Из полученного сообщения выхватываем дату, время
 * и управляющую команду, раскидываем данные по
 * соответствующим полям
 */
struct GlobalStateStruct getNewGlobalState(char receiveMessageText[200]) {
 8002728:	b5b0      	push	{r4, r5, r7, lr}
 800272a:	b0a2      	sub	sp, #136	; 0x88
 800272c:	af00      	add	r7, sp, #0
 800272e:	6278      	str	r0, [r7, #36]	; 0x24
 8002730:	6239      	str	r1, [r7, #32]
	struct GlobalStateStruct newGlobalState;

	struct TypeStruct actionType = getTypeStruct(receiveMessageText);
 8002732:	6a38      	ldr	r0, [r7, #32]
 8002734:	f000 f94c 	bl	80029d0 <getTypeStruct>
 8002738:	4603      	mov	r3, r0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
	newGlobalState.typeStruct = actionType;
 800273c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273e:	633b      	str	r3, [r7, #48]	; 0x30
	char* payload = getPayload(receiveMessageText);
 8002740:	6a38      	ldr	r0, [r7, #32]
 8002742:	f000 f9b1 	bl	8002aa8 <getPayload>
 8002746:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

	if (isCheckState(actionType)){
 800274a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800274c:	f7ff feab 	bl	80024a6 <isCheckState>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <getNewGlobalState+0x40>
	     return newGlobalState;
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	4618      	mov	r0, r3
 800275a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800275e:	2254      	movs	r2, #84	; 0x54
 8002760:	4619      	mov	r1, r3
 8002762:	f006 ff0a 	bl	800957a <memcpy>
 8002766:	e09b      	b.n	80028a0 <getNewGlobalState+0x178>
	}

	if (isChangePosition(actionType)){
 8002768:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800276a:	f7ff feb7 	bl	80024dc <isChangePosition>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d017      	beq.n	80027a4 <getNewGlobalState+0x7c>
	     newGlobalState.changePositionStruct = getChangePositionStruct(payload);
 8002774:	f107 0318 	add.w	r3, r7, #24
 8002778:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800277c:	4618      	mov	r0, r3
 800277e:	f000 f9ab 	bl	8002ad8 <getChangePositionStruct>
 8002782:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002786:	f107 0218 	add.w	r2, r7, #24
 800278a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800278e:	e883 0003 	stmia.w	r3, {r0, r1}
	     return newGlobalState;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	4618      	mov	r0, r3
 8002796:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800279a:	2254      	movs	r2, #84	; 0x54
 800279c:	4619      	mov	r1, r3
 800279e:	f006 feec 	bl	800957a <memcpy>
 80027a2:	e07d      	b.n	80028a0 <getNewGlobalState+0x178>
	}

	if (isDetectAmperageRange(actionType)){
 80027a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027a6:	f7ff feb4 	bl	8002512 <isDetectAmperageRange>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d015      	beq.n	80027dc <getNewGlobalState+0xb4>
	     newGlobalState.detectAmperageRangeStruct = getDetectAmperageRangeStruct(payload);
 80027b0:	463b      	mov	r3, r7
 80027b2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fa0e 	bl	8002bd8 <getDetectAmperageRangeStruct>
 80027bc:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80027c0:	463d      	mov	r5, r7
 80027c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027c6:	682b      	ldr	r3, [r5, #0]
 80027c8:	6023      	str	r3, [r4, #0]
	     return newGlobalState;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	4618      	mov	r0, r3
 80027ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027d2:	2254      	movs	r2, #84	; 0x54
 80027d4:	4619      	mov	r1, r3
 80027d6:	f006 fed0 	bl	800957a <memcpy>
 80027da:	e061      	b.n	80028a0 <getNewGlobalState+0x178>
	}

	if (isDetectAmperageTime(actionType)){
 80027dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027de:	f7ff feb3 	bl	8002548 <isDetectAmperageTime>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <getNewGlobalState+0xd2>
	   return newGlobalState;
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	4618      	mov	r0, r3
 80027ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027f0:	2254      	movs	r2, #84	; 0x54
 80027f2:	4619      	mov	r1, r3
 80027f4:	f006 fec1 	bl	800957a <memcpy>
 80027f8:	e052      	b.n	80028a0 <getNewGlobalState+0x178>
	}

	if (isDetectTickRange(actionType)){
 80027fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027fc:	f7ff febf 	bl	800257e <isDetectTickRange>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <getNewGlobalState+0xf0>
	    return newGlobalState;
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	4618      	mov	r0, r3
 800280a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800280e:	2254      	movs	r2, #84	; 0x54
 8002810:	4619      	mov	r1, r3
 8002812:	f006 feb2 	bl	800957a <memcpy>
 8002816:	e043      	b.n	80028a0 <getNewGlobalState+0x178>
	}

	if (isDetectTickTime(actionType)){
 8002818:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800281a:	f7ff fecb 	bl	80025b4 <isDetectTickTime>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <getNewGlobalState+0x10e>
	   return newGlobalState;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	4618      	mov	r0, r3
 8002828:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800282c:	2254      	movs	r2, #84	; 0x54
 800282e:	4619      	mov	r1, r3
 8002830:	f006 fea3 	bl	800957a <memcpy>
 8002834:	e034      	b.n	80028a0 <getNewGlobalState+0x178>
	}

	if (isContinueMeasure(actionType)){
 8002836:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002838:	f7ff fed7 	bl	80025ea <isContinueMeasure>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <getNewGlobalState+0x12c>
	   return newGlobalState;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	4618      	mov	r0, r3
 8002846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800284a:	2254      	movs	r2, #84	; 0x54
 800284c:	4619      	mov	r1, r3
 800284e:	f006 fe94 	bl	800957a <memcpy>
 8002852:	e025      	b.n	80028a0 <getNewGlobalState+0x178>
	}

	if (isPauseMeasure(actionType)){
 8002854:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002856:	f7ff fee3 	bl	8002620 <isPauseMeasure>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <getNewGlobalState+0x14a>
	   return newGlobalState;
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	4618      	mov	r0, r3
 8002864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002868:	2254      	movs	r2, #84	; 0x54
 800286a:	4619      	mov	r1, r3
 800286c:	f006 fe85 	bl	800957a <memcpy>
 8002870:	e016      	b.n	80028a0 <getNewGlobalState+0x178>
	}

	if (isStopMeasure(actionType)){
 8002872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002874:	f7ff feef 	bl	8002656 <isStopMeasure>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <getNewGlobalState+0x168>
	   return newGlobalState;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	4618      	mov	r0, r3
 8002882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002886:	2254      	movs	r2, #84	; 0x54
 8002888:	4619      	mov	r1, r3
 800288a:	f006 fe76 	bl	800957a <memcpy>
 800288e:	e007      	b.n	80028a0 <getNewGlobalState+0x178>
	}

	return newGlobalState;
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	4618      	mov	r0, r3
 8002894:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002898:	2254      	movs	r2, #84	; 0x54
 800289a:	4619      	mov	r1, r3
 800289c:	f006 fe6d 	bl	800957a <memcpy>
}
 80028a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028a2:	3788      	adds	r7, #136	; 0x88
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bdb0      	pop	{r4, r5, r7, pc}

080028a8 <str_to_uint16>:
#include "RequestResponseParser.h"

// char[] -> uint16_t
uint16_t str_to_uint16(const char *str) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
    char *end;
    long val = strtol(str, &end, 10);
 80028b0:	f107 0308 	add.w	r3, r7, #8
 80028b4:	220a      	movs	r2, #10
 80028b6:	4619      	mov	r1, r3
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f008 fd87 	bl	800b3cc <strtol>
 80028be:	60f8      	str	r0, [r7, #12]
    return (uint16_t)val;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	b29b      	uxth	r3, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <str_to_uint32>:

// char[] -> uint8_t
uint32_t str_to_uint32(const char *str) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    char *end;
    long val = strtol(str, &end, 10);
 80028d4:	f107 0308 	add.w	r3, r7, #8
 80028d8:	220a      	movs	r2, #10
 80028da:	4619      	mov	r1, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f008 fd75 	bl	800b3cc <strtol>
 80028e2:	60f8      	str	r0, [r7, #12]
    return (uint32_t)val;
 80028e4:	68fb      	ldr	r3, [r7, #12]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <stof>:

// char[] -> float
float stof(const char* s){
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
    float rez = 0, fact = 1;
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002902:	613b      	str	r3, [r7, #16]
    if (*s == '-'){
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b2d      	cmp	r3, #45	; 0x2d
 800290a:	d104      	bne.n	8002916 <stof+0x26>
        s++;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3301      	adds	r3, #1
 8002910:	607b      	str	r3, [r7, #4]
        fact = -1;
 8002912:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <stof+0xa0>)
 8002914:	613b      	str	r3, [r7, #16]
    };
    for (int point_seen = 0; *s; s++){
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	e02c      	b.n	8002976 <stof+0x86>
        if (*s == '.'){
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b2e      	cmp	r3, #46	; 0x2e
 8002922:	d102      	bne.n	800292a <stof+0x3a>
            point_seen = 1;
 8002924:	2301      	movs	r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
            continue;
 8002928:	e022      	b.n	8002970 <stof+0x80>
        };
        int d = *s - '0';
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	3b30      	subs	r3, #48	; 0x30
 8002930:	60bb      	str	r3, [r7, #8]
        if (d >= 0 && d <= 9){
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	db1b      	blt.n	8002970 <stof+0x80>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b09      	cmp	r3, #9
 800293c:	dc18      	bgt.n	8002970 <stof+0x80>
            if (point_seen) fact /= 10.0f;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <stof+0x60>
 8002944:	4913      	ldr	r1, [pc, #76]	; (8002994 <stof+0xa4>)
 8002946:	6938      	ldr	r0, [r7, #16]
 8002948:	f7fe fad0 	bl	8000eec <__aeabi_fdiv>
 800294c:	4603      	mov	r3, r0
 800294e:	613b      	str	r3, [r7, #16]
            rez = rez * 10.0f + (float)d;
 8002950:	4910      	ldr	r1, [pc, #64]	; (8002994 <stof+0xa4>)
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f7fe fa16 	bl	8000d84 <__aeabi_fmul>
 8002958:	4603      	mov	r3, r0
 800295a:	461c      	mov	r4, r3
 800295c:	68b8      	ldr	r0, [r7, #8]
 800295e:	f7fe f9bd 	bl	8000cdc <__aeabi_i2f>
 8002962:	4603      	mov	r3, r0
 8002964:	4619      	mov	r1, r3
 8002966:	4620      	mov	r0, r4
 8002968:	f7fe f904 	bl	8000b74 <__addsf3>
 800296c:	4603      	mov	r3, r0
 800296e:	617b      	str	r3, [r7, #20]
    for (int point_seen = 0; *s; s++){
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3301      	adds	r3, #1
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1ce      	bne.n	800291c <stof+0x2c>
        };
    };
    return rez * fact;
 800297e:	6939      	ldr	r1, [r7, #16]
 8002980:	6978      	ldr	r0, [r7, #20]
 8002982:	f7fe f9ff 	bl	8000d84 <__aeabi_fmul>
 8002986:	4603      	mov	r3, r0
};
 8002988:	4618      	mov	r0, r3
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	bd90      	pop	{r4, r7, pc}
 8002990:	bf800000 	.word	0xbf800000
 8002994:	41200000 	.word	0x41200000

08002998 <clean>:

// зануление всех элементов char[]
void clean(char *var) {
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
    while(var[i] != '\0') {
 80029a4:	e007      	b.n	80029b6 <clean+0x1e>
        var[i] = '\0';
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4413      	add	r3, r2
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
        i++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3301      	adds	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]
    while(var[i] != '\0') {
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f1      	bne.n	80029a6 <clean+0xe>
    }
}
 80029c2:	bf00      	nop
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
	...

080029d0 <getTypeStruct>:

struct TypeStruct getTypeStruct(char receiveBuf[200]){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
    char type[2];
    uint8_t typeDataIndex = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	77fb      	strb	r3, [r7, #31]

    char subType[2];
    uint8_t payloadDataIndex = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	77bb      	strb	r3, [r7, #30]

    bool border = false;
 80029e0:	2300      	movs	r3, #0
 80029e2:	777b      	strb	r3, [r7, #29]
    // _0_0*
    // пропускаем первую _, поэтому начинаем с int i = 1,
    for (int i = 1; i < strlen(receiveBuf); i++) {
 80029e4:	2301      	movs	r3, #1
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	e034      	b.n	8002a54 <getTypeStruct+0x84>
        if (receiveBuf[i] == '*'){
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b2a      	cmp	r3, #42	; 0x2a
 80029f4:	d036      	beq.n	8002a64 <getTypeStruct+0x94>
            break;
        }

        if (receiveBuf[i] == '_'){
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b5f      	cmp	r3, #95	; 0x5f
 8002a00:	d102      	bne.n	8002a08 <getTypeStruct+0x38>
            border = true;
 8002a02:	2301      	movs	r3, #1
 8002a04:	777b      	strb	r3, [r7, #29]
            continue;
 8002a06:	e022      	b.n	8002a4e <getTypeStruct+0x7e>
        }

        if (!border){
 8002a08:	7f7b      	ldrb	r3, [r7, #29]
 8002a0a:	f083 0301 	eor.w	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00c      	beq.n	8002a2e <getTypeStruct+0x5e>
            type[typeDataIndex] = receiveBuf[i];
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	441a      	add	r2, r3
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	f107 0120 	add.w	r1, r7, #32
 8002a22:	440b      	add	r3, r1
 8002a24:	f803 2c10 	strb.w	r2, [r3, #-16]
            typeDataIndex += 1;
 8002a28:	7ffb      	ldrb	r3, [r7, #31]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	77fb      	strb	r3, [r7, #31]
        }

        if (border){
 8002a2e:	7f7b      	ldrb	r3, [r7, #29]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00c      	beq.n	8002a4e <getTypeStruct+0x7e>
            subType[payloadDataIndex] = receiveBuf[i];
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	441a      	add	r2, r3
 8002a3a:	7fbb      	ldrb	r3, [r7, #30]
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	f107 0120 	add.w	r1, r7, #32
 8002a42:	440b      	add	r3, r1
 8002a44:	f803 2c14 	strb.w	r2, [r3, #-20]
            payloadDataIndex += 1;
 8002a48:	7fbb      	ldrb	r3, [r7, #30]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	77bb      	strb	r3, [r7, #30]
    for (int i = 1; i < strlen(receiveBuf); i++) {
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	3301      	adds	r3, #1
 8002a52:	61bb      	str	r3, [r7, #24]
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7fd fb7b 	bl	8000150 <strlen>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d8c3      	bhi.n	80029ea <getTypeStruct+0x1a>
 8002a62:	e000      	b.n	8002a66 <getTypeStruct+0x96>
            break;
 8002a64:	bf00      	nop
        }
    }

    struct TypeStruct tom = {"", ""};
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <getTypeStruct+0xd4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60bb      	str	r3, [r7, #8]
    tom.type[0] = type[0];
 8002a6c:	7c3b      	ldrb	r3, [r7, #16]
 8002a6e:	723b      	strb	r3, [r7, #8]
    tom.type[1] = type[1];
 8002a70:	7c7b      	ldrb	r3, [r7, #17]
 8002a72:	727b      	strb	r3, [r7, #9]
    tom.subType[0] = subType[0];
 8002a74:	7b3b      	ldrb	r3, [r7, #12]
 8002a76:	72bb      	strb	r3, [r7, #10]
    tom.subType[1] = subType[1];
 8002a78:	7b7b      	ldrb	r3, [r7, #13]
 8002a7a:	72fb      	strb	r3, [r7, #11]
    return tom;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	2300      	movs	r3, #0
 8002a82:	7d3a      	ldrb	r2, [r7, #20]
 8002a84:	f362 0307 	bfi	r3, r2, #0, #8
 8002a88:	7d7a      	ldrb	r2, [r7, #21]
 8002a8a:	f362 230f 	bfi	r3, r2, #8, #8
 8002a8e:	7dba      	ldrb	r2, [r7, #22]
 8002a90:	f362 4317 	bfi	r3, r2, #16, #8
 8002a94:	7dfa      	ldrb	r2, [r7, #23]
 8002a96:	f362 631f 	bfi	r3, r2, #24, #8
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	0800dea8 	.word	0x0800dea8

08002aa8 <getPayload>:

char* getPayload(char requestPayload[]){
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
    char * token = strtok(requestPayload, "*");
 8002ab0:	4907      	ldr	r1, [pc, #28]	; (8002ad0 <getPayload+0x28>)
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f008 fba6 	bl	800b204 <strtok>
 8002ab8:	60f8      	str	r0, [r7, #12]
    token = strtok(NULL, " ");
 8002aba:	4906      	ldr	r1, [pc, #24]	; (8002ad4 <getPayload+0x2c>)
 8002abc:	2000      	movs	r0, #0
 8002abe:	f008 fba1 	bl	800b204 <strtok>
 8002ac2:	60f8      	str	r0, [r7, #12]
    return token;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	0800deac 	.word	0x0800deac
 8002ad4:	0800deb0 	.word	0x0800deb0

08002ad8 <getChangePositionStruct>:

/// DIR=1-WAY=111.1-ID={int}
struct ChangePositionStruct getChangePositionStruct(char requestPayload[]){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
    struct ChangePositionStruct dima = { false, 0 };
 8002ae2:	f107 0308 	add.w	r3, r7, #8
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]

    /// DIR=1 WAY=111.1
    char * param = strtok(requestPayload, "-=");
 8002aec:	4936      	ldr	r1, [pc, #216]	; (8002bc8 <getChangePositionStruct+0xf0>)
 8002aee:	6838      	ldr	r0, [r7, #0]
 8002af0:	f008 fb88 	bl	800b204 <strtok>
 8002af4:	6178      	str	r0, [r7, #20]
    while( param != NULL ) {
 8002af6:	e057      	b.n	8002ba8 <getChangePositionStruct+0xd0>

        if (strstr (param,"ID") != NULL){
 8002af8:	4934      	ldr	r1, [pc, #208]	; (8002bcc <getChangePositionStruct+0xf4>)
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f007 fd42 	bl	800a584 <strstr>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00f      	beq.n	8002b26 <getChangePositionStruct+0x4e>
            param = strtok(NULL, "-=");
 8002b06:	4930      	ldr	r1, [pc, #192]	; (8002bc8 <getChangePositionStruct+0xf0>)
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f008 fb7b 	bl	800b204 <strtok>
 8002b0e:	6178      	str	r0, [r7, #20]
            dima.id = str_to_uint16(param);
 8002b10:	6978      	ldr	r0, [r7, #20]
 8002b12:	f7ff fec9 	bl	80028a8 <str_to_uint16>
 8002b16:	4603      	mov	r3, r0
 8002b18:	813b      	strh	r3, [r7, #8]
            param = strtok(NULL, "-=");
 8002b1a:	492b      	ldr	r1, [pc, #172]	; (8002bc8 <getChangePositionStruct+0xf0>)
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f008 fb71 	bl	800b204 <strtok>
 8002b22:	6178      	str	r0, [r7, #20]
            continue;
 8002b24:	e040      	b.n	8002ba8 <getChangePositionStruct+0xd0>
        }

        if (strstr (param,"DIR") != NULL){
 8002b26:	492a      	ldr	r1, [pc, #168]	; (8002bd0 <getChangePositionStruct+0xf8>)
 8002b28:	6978      	ldr	r0, [r7, #20]
 8002b2a:	f007 fd2b 	bl	800a584 <strstr>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <getChangePositionStruct+0x88>
            param = strtok(NULL, "-=");
 8002b34:	4924      	ldr	r1, [pc, #144]	; (8002bc8 <getChangePositionStruct+0xf0>)
 8002b36:	2000      	movs	r0, #0
 8002b38:	f008 fb64 	bl	800b204 <strtok>
 8002b3c:	6178      	str	r0, [r7, #20]
            dima.dir = strstr (param,"1") != NULL;
 8002b3e:	2131      	movs	r1, #49	; 0x31
 8002b40:	6978      	ldr	r0, [r7, #20]
 8002b42:	f007 fd12 	bl	800a56a <strchr>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf14      	ite	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	2300      	moveq	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	72bb      	strb	r3, [r7, #10]
            param = strtok(NULL, "-=");
 8002b54:	491c      	ldr	r1, [pc, #112]	; (8002bc8 <getChangePositionStruct+0xf0>)
 8002b56:	2000      	movs	r0, #0
 8002b58:	f008 fb54 	bl	800b204 <strtok>
 8002b5c:	6178      	str	r0, [r7, #20]
            continue;
 8002b5e:	e023      	b.n	8002ba8 <getChangePositionStruct+0xd0>
        }

        if (strstr (param,"WAY") != NULL){
 8002b60:	491c      	ldr	r1, [pc, #112]	; (8002bd4 <getChangePositionStruct+0xfc>)
 8002b62:	6978      	ldr	r0, [r7, #20]
 8002b64:	f007 fd0e 	bl	800a584 <strstr>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d017      	beq.n	8002b9e <getChangePositionStruct+0xc6>
            param = strtok(NULL, "-=");
 8002b6e:	4916      	ldr	r1, [pc, #88]	; (8002bc8 <getChangePositionStruct+0xf0>)
 8002b70:	2000      	movs	r0, #0
 8002b72:	f008 fb47 	bl	800b204 <strtok>
 8002b76:	6178      	str	r0, [r7, #20]
            float ftemp = atof(param);
 8002b78:	6978      	ldr	r0, [r7, #20]
 8002b7a:	f006 fbd7 	bl	800932c <atof>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4610      	mov	r0, r2
 8002b84:	4619      	mov	r1, r3
 8002b86:	f7fd ff9f 	bl	8000ac8 <__aeabi_d2f>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	613b      	str	r3, [r7, #16]
            dima.way = ftemp;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	60fb      	str	r3, [r7, #12]
            param = strtok(NULL, "-=");
 8002b92:	490d      	ldr	r1, [pc, #52]	; (8002bc8 <getChangePositionStruct+0xf0>)
 8002b94:	2000      	movs	r0, #0
 8002b96:	f008 fb35 	bl	800b204 <strtok>
 8002b9a:	6178      	str	r0, [r7, #20]
            continue;
 8002b9c:	e004      	b.n	8002ba8 <getChangePositionStruct+0xd0>
        }

        param = strtok(NULL, "-=");
 8002b9e:	490a      	ldr	r1, [pc, #40]	; (8002bc8 <getChangePositionStruct+0xf0>)
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f008 fb2f 	bl	800b204 <strtok>
 8002ba6:	6178      	str	r0, [r7, #20]
    while( param != NULL ) {
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1a4      	bne.n	8002af8 <getChangePositionStruct+0x20>
    }


    return dima;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f107 0308 	add.w	r3, r7, #8
 8002bb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002bba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	0800deb4 	.word	0x0800deb4
 8002bcc:	0800deb8 	.word	0x0800deb8
 8002bd0:	0800debc 	.word	0x0800debc
 8002bd4:	0800dec0 	.word	0x0800dec0

08002bd8 <getDetectAmperageRangeStruct>:

/// 3_1*DIR={1-часовая/2-против}-WAY={нм}-STEP={нм}-COUNT={нм}-ID={int}-CUR={float}-SPE=2
struct DetectAmperageRangeStruct getDetectAmperageRangeStruct(char requestPayload[]){
 8002bd8:	b5b0      	push	{r4, r5, r7, lr}
 8002bda:	b08c      	sub	sp, #48	; 0x30
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
    struct DetectAmperageRangeStruct dima = { false, 0,0,0 };
 8002be2:	f107 030c 	add.w	r3, r7, #12
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	60da      	str	r2, [r3, #12]
 8002bf0:	611a      	str	r2, [r3, #16]

    /// DIR=1 WAY=111.1
    char * param = strtok(requestPayload, "-=");
 8002bf2:	4967      	ldr	r1, [pc, #412]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002bf4:	6838      	ldr	r0, [r7, #0]
 8002bf6:	f008 fb05 	bl	800b204 <strtok>
 8002bfa:	62f8      	str	r0, [r7, #44]	; 0x2c
    while( param != NULL ) {
 8002bfc:	e0b7      	b.n	8002d6e <getDetectAmperageRangeStruct+0x196>

        if (strstr (param,"ID") != NULL){
 8002bfe:	4965      	ldr	r1, [pc, #404]	; (8002d94 <getDetectAmperageRangeStruct+0x1bc>)
 8002c00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c02:	f007 fcbf 	bl	800a584 <strstr>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00f      	beq.n	8002c2c <getDetectAmperageRangeStruct+0x54>
            param = strtok(NULL, "-=");
 8002c0c:	4960      	ldr	r1, [pc, #384]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f008 faf8 	bl	800b204 <strtok>
 8002c14:	62f8      	str	r0, [r7, #44]	; 0x2c
            dima.id = str_to_uint16(param);
 8002c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c18:	f7ff fe46 	bl	80028a8 <str_to_uint16>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	81bb      	strh	r3, [r7, #12]
            param = strtok(NULL, "-=");
 8002c20:	495b      	ldr	r1, [pc, #364]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002c22:	2000      	movs	r0, #0
 8002c24:	f008 faee 	bl	800b204 <strtok>
 8002c28:	62f8      	str	r0, [r7, #44]	; 0x2c
            continue;
 8002c2a:	e0a0      	b.n	8002d6e <getDetectAmperageRangeStruct+0x196>
        }

        if (strstr (param,"DIR") != NULL){
 8002c2c:	495a      	ldr	r1, [pc, #360]	; (8002d98 <getDetectAmperageRangeStruct+0x1c0>)
 8002c2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c30:	f007 fca8 	bl	800a584 <strstr>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d015      	beq.n	8002c66 <getDetectAmperageRangeStruct+0x8e>
            param = strtok(NULL, "-=");
 8002c3a:	4955      	ldr	r1, [pc, #340]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f008 fae1 	bl	800b204 <strtok>
 8002c42:	62f8      	str	r0, [r7, #44]	; 0x2c
            dima.dir = strstr (param,"1") != NULL;
 8002c44:	2131      	movs	r1, #49	; 0x31
 8002c46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c48:	f007 fc8f 	bl	800a56a <strchr>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf14      	ite	ne
 8002c52:	2301      	movne	r3, #1
 8002c54:	2300      	moveq	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	73bb      	strb	r3, [r7, #14]
            param = strtok(NULL, "-=");
 8002c5a:	494d      	ldr	r1, [pc, #308]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f008 fad1 	bl	800b204 <strtok>
 8002c62:	62f8      	str	r0, [r7, #44]	; 0x2c
            continue;
 8002c64:	e083      	b.n	8002d6e <getDetectAmperageRangeStruct+0x196>
        }

        if (strstr (param,"WAY") != NULL){
 8002c66:	494d      	ldr	r1, [pc, #308]	; (8002d9c <getDetectAmperageRangeStruct+0x1c4>)
 8002c68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c6a:	f007 fc8b 	bl	800a584 <strstr>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d010      	beq.n	8002c96 <getDetectAmperageRangeStruct+0xbe>
            param = strtok(NULL, "-=");
 8002c74:	4946      	ldr	r1, [pc, #280]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002c76:	2000      	movs	r0, #0
 8002c78:	f008 fac4 	bl	800b204 <strtok>
 8002c7c:	62f8      	str	r0, [r7, #44]	; 0x2c
            float ftemp = stof(param);
 8002c7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c80:	f7ff fe36 	bl	80028f0 <stof>
 8002c84:	6238      	str	r0, [r7, #32]
            dima.way = ftemp;
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	613b      	str	r3, [r7, #16]
            param = strtok(NULL, "-=");
 8002c8a:	4941      	ldr	r1, [pc, #260]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f008 fab9 	bl	800b204 <strtok>
 8002c92:	62f8      	str	r0, [r7, #44]	; 0x2c
            continue;
 8002c94:	e06b      	b.n	8002d6e <getDetectAmperageRangeStruct+0x196>
        }

        if (strstr (param,"STEP") != NULL){
 8002c96:	4942      	ldr	r1, [pc, #264]	; (8002da0 <getDetectAmperageRangeStruct+0x1c8>)
 8002c98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c9a:	f007 fc73 	bl	800a584 <strstr>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d010      	beq.n	8002cc6 <getDetectAmperageRangeStruct+0xee>
            param = strtok(NULL, "-=");
 8002ca4:	493a      	ldr	r1, [pc, #232]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f008 faac 	bl	800b204 <strtok>
 8002cac:	62f8      	str	r0, [r7, #44]	; 0x2c
            float ftemp = stof(param);
 8002cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cb0:	f7ff fe1e 	bl	80028f0 <stof>
 8002cb4:	6278      	str	r0, [r7, #36]	; 0x24
            dima.step = ftemp;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	617b      	str	r3, [r7, #20]
            param = strtok(NULL, "-=");
 8002cba:	4935      	ldr	r1, [pc, #212]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f008 faa1 	bl	800b204 <strtok>
 8002cc2:	62f8      	str	r0, [r7, #44]	; 0x2c
            continue;
 8002cc4:	e053      	b.n	8002d6e <getDetectAmperageRangeStruct+0x196>
        }

        if (strstr (param,"CUR") != NULL){
 8002cc6:	4937      	ldr	r1, [pc, #220]	; (8002da4 <getDetectAmperageRangeStruct+0x1cc>)
 8002cc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cca:	f007 fc5b 	bl	800a584 <strstr>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d019      	beq.n	8002d08 <getDetectAmperageRangeStruct+0x130>
            param = strtok(NULL, "-=");
 8002cd4:	492e      	ldr	r1, [pc, #184]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f008 fa94 	bl	800b204 <strtok>
 8002cdc:	62f8      	str	r0, [r7, #44]	; 0x2c
            float ftemp = str_to_uint16(param);
 8002cde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ce0:	f7ff fde2 	bl	80028a8 <str_to_uint16>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fff4 	bl	8000cd4 <__aeabi_ui2f>
 8002cec:	4603      	mov	r3, r0
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
            dima.cur = ftemp;
 8002cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf2:	f7fe f997 	bl	8001024 <__aeabi_f2uiz>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	837b      	strh	r3, [r7, #26]
            param = strtok(NULL, "-=");
 8002cfc:	4924      	ldr	r1, [pc, #144]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f008 fa80 	bl	800b204 <strtok>
 8002d04:	62f8      	str	r0, [r7, #44]	; 0x2c
            continue;
 8002d06:	e032      	b.n	8002d6e <getDetectAmperageRangeStruct+0x196>
         }

        if (strstr (param,"COUNT") != NULL){
 8002d08:	4927      	ldr	r1, [pc, #156]	; (8002da8 <getDetectAmperageRangeStruct+0x1d0>)
 8002d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d0c:	f007 fc3a 	bl	800a584 <strstr>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00f      	beq.n	8002d36 <getDetectAmperageRangeStruct+0x15e>
            param = strtok(NULL, "-=");
 8002d16:	491e      	ldr	r1, [pc, #120]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f008 fa73 	bl	800b204 <strtok>
 8002d1e:	62f8      	str	r0, [r7, #44]	; 0x2c
            dima.count = str_to_uint16(param);
 8002d20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d22:	f7ff fdc1 	bl	80028a8 <str_to_uint16>
 8002d26:	4603      	mov	r3, r0
 8002d28:	833b      	strh	r3, [r7, #24]
            param = strtok(NULL, "-=");
 8002d2a:	4919      	ldr	r1, [pc, #100]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f008 fa69 	bl	800b204 <strtok>
 8002d32:	62f8      	str	r0, [r7, #44]	; 0x2c
            continue;
 8002d34:	e01b      	b.n	8002d6e <getDetectAmperageRangeStruct+0x196>
        }

        if (strstr (param,"SPE") != NULL){
 8002d36:	491d      	ldr	r1, [pc, #116]	; (8002dac <getDetectAmperageRangeStruct+0x1d4>)
 8002d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d3a:	f007 fc23 	bl	800a584 <strstr>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00f      	beq.n	8002d64 <getDetectAmperageRangeStruct+0x18c>
            param = strtok(NULL, "-=");
 8002d44:	4912      	ldr	r1, [pc, #72]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002d46:	2000      	movs	r0, #0
 8002d48:	f008 fa5c 	bl	800b204 <strtok>
 8002d4c:	62f8      	str	r0, [r7, #44]	; 0x2c
            dima.speed = str_to_uint32(param);
 8002d4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d50:	f7ff fdbc 	bl	80028cc <str_to_uint32>
 8002d54:	4603      	mov	r3, r0
 8002d56:	61fb      	str	r3, [r7, #28]
            param = strtok(NULL, "-=");
 8002d58:	490d      	ldr	r1, [pc, #52]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f008 fa52 	bl	800b204 <strtok>
 8002d60:	62f8      	str	r0, [r7, #44]	; 0x2c
            continue;
 8002d62:	e004      	b.n	8002d6e <getDetectAmperageRangeStruct+0x196>
        }

        param = strtok(NULL, "-=");
 8002d64:	490a      	ldr	r1, [pc, #40]	; (8002d90 <getDetectAmperageRangeStruct+0x1b8>)
 8002d66:	2000      	movs	r0, #0
 8002d68:	f008 fa4c 	bl	800b204 <strtok>
 8002d6c:	62f8      	str	r0, [r7, #44]	; 0x2c
    while( param != NULL ) {
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f47f af44 	bne.w	8002bfe <getDetectAmperageRangeStruct+0x26>
    }


    return dima;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	461d      	mov	r5, r3
 8002d7a:	f107 040c 	add.w	r4, r7, #12
 8002d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	602b      	str	r3, [r5, #0]
}
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	3730      	adds	r7, #48	; 0x30
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	0800deb4 	.word	0x0800deb4
 8002d94:	0800deb8 	.word	0x0800deb8
 8002d98:	0800debc 	.word	0x0800debc
 8002d9c:	0800dec0 	.word	0x0800dec0
 8002da0:	0800dec4 	.word	0x0800dec4
 8002da4:	0800decc 	.word	0x0800decc
 8002da8:	0800ded0 	.word	0x0800ded0
 8002dac:	0800ded8 	.word	0x0800ded8

08002db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <HAL_Init+0x28>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a07      	ldr	r2, [pc, #28]	; (8002dd8 <HAL_Init+0x28>)
 8002dba:	f043 0310 	orr.w	r3, r3, #16
 8002dbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	f000 fdb3 	bl	800392c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc6:	200f      	movs	r0, #15
 8002dc8:	f7fe ffc2 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dcc:	f7fe ff88 	bl	8001ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40022000 	.word	0x40022000

08002ddc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return uwTick;
 8002de0:	4b02      	ldr	r3, [pc, #8]	; (8002dec <HAL_GetTick+0x10>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	20003b48 	.word	0x20003b48

08002df0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0be      	b.n	8002f90 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fe f992 	bl	8001158 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fbc1 	bl	80035bc <ADC_ConversionStop_Disable>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f040 8099 	bne.w	8002f7e <HAL_ADC_Init+0x18e>
 8002e4c:	7dfb      	ldrb	r3, [r7, #23]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f040 8095 	bne.w	8002f7e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e5c:	f023 0302 	bic.w	r3, r3, #2
 8002e60:	f043 0202 	orr.w	r2, r3, #2
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e70:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	7b1b      	ldrb	r3, [r3, #12]
 8002e76:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e78:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e88:	d003      	beq.n	8002e92 <HAL_ADC_Init+0xa2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d102      	bne.n	8002e98 <HAL_ADC_Init+0xa8>
 8002e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e96:	e000      	b.n	8002e9a <HAL_ADC_Init+0xaa>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	7d1b      	ldrb	r3, [r3, #20]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d119      	bne.n	8002edc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7b1b      	ldrb	r3, [r3, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	035a      	lsls	r2, r3, #13
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	e00b      	b.n	8002edc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	f043 0201 	orr.w	r2, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <HAL_ADC_Init+0x1a8>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	430b      	orrs	r3, r1
 8002f02:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f0c:	d003      	beq.n	8002f16 <HAL_ADC_Init+0x126>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d104      	bne.n	8002f20 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	051b      	lsls	r3, r3, #20
 8002f1e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <HAL_ADC_Init+0x1ac>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d10b      	bne.n	8002f5c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f5a:	e018      	b.n	8002f8e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	f023 0312 	bic.w	r3, r3, #18
 8002f64:	f043 0210 	orr.w	r2, r3, #16
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f7c:	e007      	b.n	8002f8e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	f043 0210 	orr.w	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	ffe1f7fd 	.word	0xffe1f7fd
 8002f9c:	ff1f0efe 	.word	0xff1f0efe

08002fa0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_Start+0x1a>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e098      	b.n	80030ec <HAL_ADC_Start+0x14c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 faa0 	bl	8003508 <ADC_Enable>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f040 8087 	bne.w	80030e2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a41      	ldr	r2, [pc, #260]	; (80030f4 <HAL_ADC_Start+0x154>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d105      	bne.n	8002ffe <HAL_ADC_Start+0x5e>
 8002ff2:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_ADC_Start+0x158>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d115      	bne.n	800302a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	2b00      	cmp	r3, #0
 8003016:	d026      	beq.n	8003066 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003020:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003028:	e01d      	b.n	8003066 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2f      	ldr	r2, [pc, #188]	; (80030f8 <HAL_ADC_Start+0x158>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_ADC_Start+0xaa>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2b      	ldr	r2, [pc, #172]	; (80030f4 <HAL_ADC_Start+0x154>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d10d      	bne.n	8003066 <HAL_ADC_Start+0xc6>
 800304a:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <HAL_ADC_Start+0x158>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800305e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	f023 0206 	bic.w	r2, r3, #6
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	62da      	str	r2, [r3, #44]	; 0x2c
 800307e:	e002      	b.n	8003086 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f06f 0202 	mvn.w	r2, #2
 8003096:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030a6:	d113      	bne.n	80030d0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80030ac:	4a11      	ldr	r2, [pc, #68]	; (80030f4 <HAL_ADC_Start+0x154>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d105      	bne.n	80030be <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80030b2:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_ADC_Start+0x158>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d108      	bne.n	80030d0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80030cc:	609a      	str	r2, [r3, #8]
 80030ce:	e00c      	b.n	80030ea <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	e003      	b.n	80030ea <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40012800 	.word	0x40012800
 80030f8:	40012400 	.word	0x40012400

080030fc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_ADC_Stop+0x1a>
 8003112:	2302      	movs	r3, #2
 8003114:	e01a      	b.n	800314c <HAL_ADC_Stop+0x50>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fa4c 	bl	80035bc <ADC_ConversionStop_Disable>
 8003124:	4603      	mov	r3, r0
 8003126:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800314a:	7bfb      	ldrb	r3, [r7, #15]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b20      	cmp	r3, #32
 8003180:	d140      	bne.n	8003204 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d139      	bne.n	8003204 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031b6:	d11d      	bne.n	80031f4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d119      	bne.n	80031f4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0220 	bic.w	r2, r2, #32
 80031ce:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d105      	bne.n	80031f4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	f043 0201 	orr.w	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f87c 	bl	80032f2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f06f 0212 	mvn.w	r2, #18
 8003202:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320e:	2b80      	cmp	r3, #128	; 0x80
 8003210:	d14f      	bne.n	80032b2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b04      	cmp	r3, #4
 800321e:	d148      	bne.n	80032b2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003242:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003246:	d012      	beq.n	800326e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003252:	2b00      	cmp	r3, #0
 8003254:	d125      	bne.n	80032a2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003260:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003264:	d11d      	bne.n	80032a2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800326a:	2b00      	cmp	r3, #0
 800326c:	d119      	bne.n	80032a2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800327c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d105      	bne.n	80032a2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fa78 	bl	8003798 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 020c 	mvn.w	r2, #12
 80032b0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	d114      	bne.n	80032ea <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d10d      	bne.n	80032ea <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f812 	bl	8003304 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0201 	mvn.w	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
	...

08003318 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x20>
 8003334:	2302      	movs	r3, #2
 8003336:	e0dc      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x1da>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b06      	cmp	r3, #6
 8003346:	d81c      	bhi.n	8003382 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	3b05      	subs	r3, #5
 800335a:	221f      	movs	r2, #31
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	4019      	ands	r1, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3b05      	subs	r3, #5
 8003374:	fa00 f203 	lsl.w	r2, r0, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	635a      	str	r2, [r3, #52]	; 0x34
 8003380:	e03c      	b.n	80033fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d81c      	bhi.n	80033c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	3b23      	subs	r3, #35	; 0x23
 800339c:	221f      	movs	r2, #31
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	4019      	ands	r1, r3
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	3b23      	subs	r3, #35	; 0x23
 80033b6:	fa00 f203 	lsl.w	r2, r0, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30
 80033c2:	e01b      	b.n	80033fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	3b41      	subs	r3, #65	; 0x41
 80033d6:	221f      	movs	r2, #31
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	4019      	ands	r1, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	3b41      	subs	r3, #65	; 0x41
 80033f0:	fa00 f203 	lsl.w	r2, r0, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b09      	cmp	r3, #9
 8003402:	d91c      	bls.n	800343e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68d9      	ldr	r1, [r3, #12]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	3b1e      	subs	r3, #30
 8003416:	2207      	movs	r2, #7
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	4019      	ands	r1, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6898      	ldr	r0, [r3, #8]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	3b1e      	subs	r3, #30
 8003430:	fa00 f203 	lsl.w	r2, r0, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	60da      	str	r2, [r3, #12]
 800343c:	e019      	b.n	8003472 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6919      	ldr	r1, [r3, #16]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	2207      	movs	r2, #7
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	4019      	ands	r1, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6898      	ldr	r0, [r3, #8]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	fa00 f203 	lsl.w	r2, r0, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b10      	cmp	r3, #16
 8003478:	d003      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800347e:	2b11      	cmp	r3, #17
 8003480:	d132      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <HAL_ADC_ConfigChannel+0x1e4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d125      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d126      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b10      	cmp	r3, #16
 80034b0:	d11a      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <HAL_ADC_ConfigChannel+0x1e8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a13      	ldr	r2, [pc, #76]	; (8003504 <HAL_ADC_ConfigChannel+0x1ec>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	0c9a      	lsrs	r2, r3, #18
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034c8:	e002      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f9      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x1b2>
 80034d6:	e007      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	40012400 	.word	0x40012400
 8003500:	20000000 	.word	0x20000000
 8003504:	431bde83 	.word	0x431bde83

08003508 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d040      	beq.n	80035a8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003536:	4b1f      	ldr	r3, [pc, #124]	; (80035b4 <ADC_Enable+0xac>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <ADC_Enable+0xb0>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	0c9b      	lsrs	r3, r3, #18
 8003542:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003544:	e002      	b.n	800354c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3b01      	subs	r3, #1
 800354a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f9      	bne.n	8003546 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003552:	f7ff fc43 	bl	8002ddc <HAL_GetTick>
 8003556:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003558:	e01f      	b.n	800359a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800355a:	f7ff fc3f 	bl	8002ddc <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d918      	bls.n	800359a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d011      	beq.n	800359a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	f043 0210 	orr.w	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	f043 0201 	orr.w	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e007      	b.n	80035aa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d1d8      	bne.n	800355a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000000 	.word	0x20000000
 80035b8:	431bde83 	.word	0x431bde83

080035bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d12e      	bne.n	8003634 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035e6:	f7ff fbf9 	bl	8002ddc <HAL_GetTick>
 80035ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035ec:	e01b      	b.n	8003626 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035ee:	f7ff fbf5 	bl	8002ddc <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d914      	bls.n	8003626 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b01      	cmp	r3, #1
 8003608:	d10d      	bne.n	8003626 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	f043 0210 	orr.w	r2, r3, #16
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	f043 0201 	orr.w	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e007      	b.n	8003636 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b01      	cmp	r3, #1
 8003632:	d0dc      	beq.n	80035ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_ADCEx_Calibration_Start+0x1e>
 800365a:	2302      	movs	r3, #2
 800365c:	e095      	b.n	800378a <HAL_ADCEx_Calibration_Start+0x14a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ffa8 	bl	80035bc <ADC_ConversionStop_Disable>
 800366c:	4603      	mov	r3, r0
 800366e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 8084 	bne.w	8003780 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003680:	f023 0302 	bic.w	r3, r3, #2
 8003684:	f043 0202 	orr.w	r2, r3, #2
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800368c:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_ADCEx_Calibration_Start+0x154>)
 800368e:	681c      	ldr	r4, [r3, #0]
 8003690:	2002      	movs	r0, #2
 8003692:	f001 fa31 	bl	8004af8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003696:	4603      	mov	r3, r0
 8003698:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800369c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800369e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80036a0:	e002      	b.n	80036a8 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f9      	bne.n	80036a2 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ff2a 	bl	8003508 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0208 	orr.w	r2, r2, #8
 80036c2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80036c4:	f7ff fb8a 	bl	8002ddc <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80036ca:	e01b      	b.n	8003704 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80036cc:	f7ff fb86 	bl	8002ddc <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b0a      	cmp	r3, #10
 80036d8:	d914      	bls.n	8003704 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00d      	beq.n	8003704 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	f023 0312 	bic.w	r3, r3, #18
 80036f0:	f043 0210 	orr.w	r2, r3, #16
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e042      	b.n	800378a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1dc      	bne.n	80036cc <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0204 	orr.w	r2, r2, #4
 8003720:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003722:	f7ff fb5b 	bl	8002ddc <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003728:	e01b      	b.n	8003762 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800372a:	f7ff fb57 	bl	8002ddc <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b0a      	cmp	r3, #10
 8003736:	d914      	bls.n	8003762 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f023 0312 	bic.w	r3, r3, #18
 800374e:	f043 0210 	orr.w	r2, r3, #16
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e013      	b.n	800378a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1dc      	bne.n	800372a <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	f023 0303 	bic.w	r3, r3, #3
 8003778:	f043 0201 	orr.w	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003788:	7dfb      	ldrb	r3, [r7, #23]
}
 800378a:	4618      	mov	r0, r3
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	bd90      	pop	{r4, r7, pc}
 8003792:	bf00      	nop
 8003794:	20000000 	.word	0x20000000

08003798 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
	...

080037ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c8:	4013      	ands	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037de:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	60d3      	str	r3, [r2, #12]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <__NVIC_GetPriorityGrouping+0x18>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 0307 	and.w	r3, r3, #7
}
 8003802:	4618      	mov	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	db0b      	blt.n	800383a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	f003 021f 	and.w	r2, r3, #31
 8003828:	4906      	ldr	r1, [pc, #24]	; (8003844 <__NVIC_EnableIRQ+0x34>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2001      	movs	r0, #1
 8003832:	fa00 f202 	lsl.w	r2, r0, r2
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr
 8003844:	e000e100 	.word	0xe000e100

08003848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	6039      	str	r1, [r7, #0]
 8003852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003858:	2b00      	cmp	r3, #0
 800385a:	db0a      	blt.n	8003872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	b2da      	uxtb	r2, r3
 8003860:	490c      	ldr	r1, [pc, #48]	; (8003894 <__NVIC_SetPriority+0x4c>)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	440b      	add	r3, r1
 800386c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003870:	e00a      	b.n	8003888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4908      	ldr	r1, [pc, #32]	; (8003898 <__NVIC_SetPriority+0x50>)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	3b04      	subs	r3, #4
 8003880:	0112      	lsls	r2, r2, #4
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	440b      	add	r3, r1
 8003886:	761a      	strb	r2, [r3, #24]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000e100 	.word	0xe000e100
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	; 0x24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f1c3 0307 	rsb	r3, r3, #7
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	bf28      	it	cs
 80038ba:	2304      	movcs	r3, #4
 80038bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3304      	adds	r3, #4
 80038c2:	2b06      	cmp	r3, #6
 80038c4:	d902      	bls.n	80038cc <NVIC_EncodePriority+0x30>
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3b03      	subs	r3, #3
 80038ca:	e000      	b.n	80038ce <NVIC_EncodePriority+0x32>
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	401a      	ands	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e4:	f04f 31ff 	mov.w	r1, #4294967295
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	43d9      	mvns	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	4313      	orrs	r3, r2
         );
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3724      	adds	r7, #36	; 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003904:	f3bf 8f4f 	dsb	sy
}
 8003908:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <__NVIC_SystemReset+0x24>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003912:	4904      	ldr	r1, [pc, #16]	; (8003924 <__NVIC_SystemReset+0x24>)
 8003914:	4b04      	ldr	r3, [pc, #16]	; (8003928 <__NVIC_SystemReset+0x28>)
 8003916:	4313      	orrs	r3, r2
 8003918:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800391a:	f3bf 8f4f 	dsb	sy
}
 800391e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003920:	bf00      	nop
 8003922:	e7fd      	b.n	8003920 <__NVIC_SystemReset+0x20>
 8003924:	e000ed00 	.word	0xe000ed00
 8003928:	05fa0004 	.word	0x05fa0004

0800392c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff ff39 	bl	80037ac <__NVIC_SetPriorityGrouping>
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003942:	b580      	push	{r7, lr}
 8003944:	b086      	sub	sp, #24
 8003946:	af00      	add	r7, sp, #0
 8003948:	4603      	mov	r3, r0
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003954:	f7ff ff4e 	bl	80037f4 <__NVIC_GetPriorityGrouping>
 8003958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	6978      	ldr	r0, [r7, #20]
 8003960:	f7ff ff9c 	bl	800389c <NVIC_EncodePriority>
 8003964:	4602      	mov	r2, r0
 8003966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff6b 	bl	8003848 <__NVIC_SetPriority>
}
 8003972:	bf00      	nop
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	4603      	mov	r3, r0
 8003982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff41 	bl	8003810 <__NVIC_EnableIRQ>
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800399a:	f7ff ffb1 	bl	8003900 <__NVIC_SystemReset>
	...

080039a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e043      	b.n	8003a3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <HAL_DMA_Init+0xa8>)
 80039be:	4413      	add	r3, r2
 80039c0:	4a22      	ldr	r2, [pc, #136]	; (8003a4c <HAL_DMA_Init+0xac>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	009a      	lsls	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <HAL_DMA_Init+0xb0>)
 80039d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80039ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80039f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr
 8003a48:	bffdfff8 	.word	0xbffdfff8
 8003a4c:	cccccccd 	.word	0xcccccccd
 8003a50:	40020000 	.word	0x40020000

08003a54 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d008      	beq.n	8003a7c <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e020      	b.n	8003abe <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 020e 	bic.w	r2, r2, #14
 8003a8a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aaa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d005      	beq.n	8003aea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
 8003ae8:	e051      	b.n	8003b8e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 020e 	bic.w	r2, r2, #14
 8003af8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a22      	ldr	r2, [pc, #136]	; (8003b98 <HAL_DMA_Abort_IT+0xd0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d029      	beq.n	8003b68 <HAL_DMA_Abort_IT+0xa0>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a20      	ldr	r2, [pc, #128]	; (8003b9c <HAL_DMA_Abort_IT+0xd4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d022      	beq.n	8003b64 <HAL_DMA_Abort_IT+0x9c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <HAL_DMA_Abort_IT+0xd8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d01a      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x96>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <HAL_DMA_Abort_IT+0xdc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d012      	beq.n	8003b58 <HAL_DMA_Abort_IT+0x90>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <HAL_DMA_Abort_IT+0xe0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00a      	beq.n	8003b52 <HAL_DMA_Abort_IT+0x8a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1a      	ldr	r2, [pc, #104]	; (8003bac <HAL_DMA_Abort_IT+0xe4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d102      	bne.n	8003b4c <HAL_DMA_Abort_IT+0x84>
 8003b46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b4a:	e00e      	b.n	8003b6a <HAL_DMA_Abort_IT+0xa2>
 8003b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b50:	e00b      	b.n	8003b6a <HAL_DMA_Abort_IT+0xa2>
 8003b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b56:	e008      	b.n	8003b6a <HAL_DMA_Abort_IT+0xa2>
 8003b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b5c:	e005      	b.n	8003b6a <HAL_DMA_Abort_IT+0xa2>
 8003b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b62:	e002      	b.n	8003b6a <HAL_DMA_Abort_IT+0xa2>
 8003b64:	2310      	movs	r3, #16
 8003b66:	e000      	b.n	8003b6a <HAL_DMA_Abort_IT+0xa2>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	4a11      	ldr	r2, [pc, #68]	; (8003bb0 <HAL_DMA_Abort_IT+0xe8>)
 8003b6c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	4798      	blx	r3
    } 
  }
  return status;
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40020008 	.word	0x40020008
 8003b9c:	4002001c 	.word	0x4002001c
 8003ba0:	40020030 	.word	0x40020030
 8003ba4:	40020044 	.word	0x40020044
 8003ba8:	40020058 	.word	0x40020058
 8003bac:	4002006c 	.word	0x4002006c
 8003bb0:	40020000 	.word	0x40020000

08003bb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d04f      	beq.n	8003c7c <HAL_DMA_IRQHandler+0xc8>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d04a      	beq.n	8003c7c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d107      	bne.n	8003c04 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0204 	bic.w	r2, r2, #4
 8003c02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a66      	ldr	r2, [pc, #408]	; (8003da4 <HAL_DMA_IRQHandler+0x1f0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d029      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xae>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a65      	ldr	r2, [pc, #404]	; (8003da8 <HAL_DMA_IRQHandler+0x1f4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d022      	beq.n	8003c5e <HAL_DMA_IRQHandler+0xaa>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a63      	ldr	r2, [pc, #396]	; (8003dac <HAL_DMA_IRQHandler+0x1f8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01a      	beq.n	8003c58 <HAL_DMA_IRQHandler+0xa4>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a62      	ldr	r2, [pc, #392]	; (8003db0 <HAL_DMA_IRQHandler+0x1fc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d012      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x9e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a60      	ldr	r2, [pc, #384]	; (8003db4 <HAL_DMA_IRQHandler+0x200>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00a      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x98>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a5f      	ldr	r2, [pc, #380]	; (8003db8 <HAL_DMA_IRQHandler+0x204>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d102      	bne.n	8003c46 <HAL_DMA_IRQHandler+0x92>
 8003c40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c44:	e00e      	b.n	8003c64 <HAL_DMA_IRQHandler+0xb0>
 8003c46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003c4a:	e00b      	b.n	8003c64 <HAL_DMA_IRQHandler+0xb0>
 8003c4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c50:	e008      	b.n	8003c64 <HAL_DMA_IRQHandler+0xb0>
 8003c52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c56:	e005      	b.n	8003c64 <HAL_DMA_IRQHandler+0xb0>
 8003c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c5c:	e002      	b.n	8003c64 <HAL_DMA_IRQHandler+0xb0>
 8003c5e:	2340      	movs	r3, #64	; 0x40
 8003c60:	e000      	b.n	8003c64 <HAL_DMA_IRQHandler+0xb0>
 8003c62:	2304      	movs	r3, #4
 8003c64:	4a55      	ldr	r2, [pc, #340]	; (8003dbc <HAL_DMA_IRQHandler+0x208>)
 8003c66:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8094 	beq.w	8003d9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003c7a:	e08e      	b.n	8003d9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	2202      	movs	r2, #2
 8003c82:	409a      	lsls	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d056      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x186>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d051      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10b      	bne.n	8003cbc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 020a 	bic.w	r2, r2, #10
 8003cb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a38      	ldr	r2, [pc, #224]	; (8003da4 <HAL_DMA_IRQHandler+0x1f0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d029      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x166>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a37      	ldr	r2, [pc, #220]	; (8003da8 <HAL_DMA_IRQHandler+0x1f4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d022      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x162>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a35      	ldr	r2, [pc, #212]	; (8003dac <HAL_DMA_IRQHandler+0x1f8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01a      	beq.n	8003d10 <HAL_DMA_IRQHandler+0x15c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a34      	ldr	r2, [pc, #208]	; (8003db0 <HAL_DMA_IRQHandler+0x1fc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d012      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x156>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a32      	ldr	r2, [pc, #200]	; (8003db4 <HAL_DMA_IRQHandler+0x200>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00a      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x150>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a31      	ldr	r2, [pc, #196]	; (8003db8 <HAL_DMA_IRQHandler+0x204>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d102      	bne.n	8003cfe <HAL_DMA_IRQHandler+0x14a>
 8003cf8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cfc:	e00e      	b.n	8003d1c <HAL_DMA_IRQHandler+0x168>
 8003cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d02:	e00b      	b.n	8003d1c <HAL_DMA_IRQHandler+0x168>
 8003d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d08:	e008      	b.n	8003d1c <HAL_DMA_IRQHandler+0x168>
 8003d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d0e:	e005      	b.n	8003d1c <HAL_DMA_IRQHandler+0x168>
 8003d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d14:	e002      	b.n	8003d1c <HAL_DMA_IRQHandler+0x168>
 8003d16:	2320      	movs	r3, #32
 8003d18:	e000      	b.n	8003d1c <HAL_DMA_IRQHandler+0x168>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	4a27      	ldr	r2, [pc, #156]	; (8003dbc <HAL_DMA_IRQHandler+0x208>)
 8003d1e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d034      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d38:	e02f      	b.n	8003d9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	2208      	movs	r2, #8
 8003d40:	409a      	lsls	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d028      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x1e8>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d023      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 020e 	bic.w	r2, r2, #14
 8003d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
    }
  }
  return;
 8003d9a:	bf00      	nop
 8003d9c:	bf00      	nop
}
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40020008 	.word	0x40020008
 8003da8:	4002001c 	.word	0x4002001c
 8003dac:	40020030 	.word	0x40020030
 8003db0:	40020044 	.word	0x40020044
 8003db4:	40020058 	.word	0x40020058
 8003db8:	4002006c 	.word	0x4002006c
 8003dbc:	40020000 	.word	0x40020000

08003dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b08b      	sub	sp, #44	; 0x2c
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dd2:	e169      	b.n	80040a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	f040 8158 	bne.w	80040a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4a9a      	ldr	r2, [pc, #616]	; (8004060 <HAL_GPIO_Init+0x2a0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d05e      	beq.n	8003eba <HAL_GPIO_Init+0xfa>
 8003dfc:	4a98      	ldr	r2, [pc, #608]	; (8004060 <HAL_GPIO_Init+0x2a0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d875      	bhi.n	8003eee <HAL_GPIO_Init+0x12e>
 8003e02:	4a98      	ldr	r2, [pc, #608]	; (8004064 <HAL_GPIO_Init+0x2a4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d058      	beq.n	8003eba <HAL_GPIO_Init+0xfa>
 8003e08:	4a96      	ldr	r2, [pc, #600]	; (8004064 <HAL_GPIO_Init+0x2a4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d86f      	bhi.n	8003eee <HAL_GPIO_Init+0x12e>
 8003e0e:	4a96      	ldr	r2, [pc, #600]	; (8004068 <HAL_GPIO_Init+0x2a8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d052      	beq.n	8003eba <HAL_GPIO_Init+0xfa>
 8003e14:	4a94      	ldr	r2, [pc, #592]	; (8004068 <HAL_GPIO_Init+0x2a8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d869      	bhi.n	8003eee <HAL_GPIO_Init+0x12e>
 8003e1a:	4a94      	ldr	r2, [pc, #592]	; (800406c <HAL_GPIO_Init+0x2ac>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d04c      	beq.n	8003eba <HAL_GPIO_Init+0xfa>
 8003e20:	4a92      	ldr	r2, [pc, #584]	; (800406c <HAL_GPIO_Init+0x2ac>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d863      	bhi.n	8003eee <HAL_GPIO_Init+0x12e>
 8003e26:	4a92      	ldr	r2, [pc, #584]	; (8004070 <HAL_GPIO_Init+0x2b0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d046      	beq.n	8003eba <HAL_GPIO_Init+0xfa>
 8003e2c:	4a90      	ldr	r2, [pc, #576]	; (8004070 <HAL_GPIO_Init+0x2b0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d85d      	bhi.n	8003eee <HAL_GPIO_Init+0x12e>
 8003e32:	2b12      	cmp	r3, #18
 8003e34:	d82a      	bhi.n	8003e8c <HAL_GPIO_Init+0xcc>
 8003e36:	2b12      	cmp	r3, #18
 8003e38:	d859      	bhi.n	8003eee <HAL_GPIO_Init+0x12e>
 8003e3a:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <HAL_GPIO_Init+0x80>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003ebb 	.word	0x08003ebb
 8003e44:	08003e95 	.word	0x08003e95
 8003e48:	08003ea7 	.word	0x08003ea7
 8003e4c:	08003ee9 	.word	0x08003ee9
 8003e50:	08003eef 	.word	0x08003eef
 8003e54:	08003eef 	.word	0x08003eef
 8003e58:	08003eef 	.word	0x08003eef
 8003e5c:	08003eef 	.word	0x08003eef
 8003e60:	08003eef 	.word	0x08003eef
 8003e64:	08003eef 	.word	0x08003eef
 8003e68:	08003eef 	.word	0x08003eef
 8003e6c:	08003eef 	.word	0x08003eef
 8003e70:	08003eef 	.word	0x08003eef
 8003e74:	08003eef 	.word	0x08003eef
 8003e78:	08003eef 	.word	0x08003eef
 8003e7c:	08003eef 	.word	0x08003eef
 8003e80:	08003eef 	.word	0x08003eef
 8003e84:	08003e9d 	.word	0x08003e9d
 8003e88:	08003eb1 	.word	0x08003eb1
 8003e8c:	4a79      	ldr	r2, [pc, #484]	; (8004074 <HAL_GPIO_Init+0x2b4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d013      	beq.n	8003eba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e92:	e02c      	b.n	8003eee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	623b      	str	r3, [r7, #32]
          break;
 8003e9a:	e029      	b.n	8003ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	623b      	str	r3, [r7, #32]
          break;
 8003ea4:	e024      	b.n	8003ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	3308      	adds	r3, #8
 8003eac:	623b      	str	r3, [r7, #32]
          break;
 8003eae:	e01f      	b.n	8003ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	623b      	str	r3, [r7, #32]
          break;
 8003eb8:	e01a      	b.n	8003ef0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ec2:	2304      	movs	r3, #4
 8003ec4:	623b      	str	r3, [r7, #32]
          break;
 8003ec6:	e013      	b.n	8003ef0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d105      	bne.n	8003edc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	611a      	str	r2, [r3, #16]
          break;
 8003eda:	e009      	b.n	8003ef0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003edc:	2308      	movs	r3, #8
 8003ede:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	615a      	str	r2, [r3, #20]
          break;
 8003ee6:	e003      	b.n	8003ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	623b      	str	r3, [r7, #32]
          break;
 8003eec:	e000      	b.n	8003ef0 <HAL_GPIO_Init+0x130>
          break;
 8003eee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2bff      	cmp	r3, #255	; 0xff
 8003ef4:	d801      	bhi.n	8003efa <HAL_GPIO_Init+0x13a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	e001      	b.n	8003efe <HAL_GPIO_Init+0x13e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3304      	adds	r3, #4
 8003efe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2bff      	cmp	r3, #255	; 0xff
 8003f04:	d802      	bhi.n	8003f0c <HAL_GPIO_Init+0x14c>
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	e002      	b.n	8003f12 <HAL_GPIO_Init+0x152>
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	3b08      	subs	r3, #8
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	210f      	movs	r1, #15
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	401a      	ands	r2, r3
 8003f24:	6a39      	ldr	r1, [r7, #32]
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80b1 	beq.w	80040a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f40:	4b4d      	ldr	r3, [pc, #308]	; (8004078 <HAL_GPIO_Init+0x2b8>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	4a4c      	ldr	r2, [pc, #304]	; (8004078 <HAL_GPIO_Init+0x2b8>)
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	6193      	str	r3, [r2, #24]
 8003f4c:	4b4a      	ldr	r3, [pc, #296]	; (8004078 <HAL_GPIO_Init+0x2b8>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f58:	4a48      	ldr	r2, [pc, #288]	; (800407c <HAL_GPIO_Init+0x2bc>)
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	3302      	adds	r3, #2
 8003f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	220f      	movs	r2, #15
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a40      	ldr	r2, [pc, #256]	; (8004080 <HAL_GPIO_Init+0x2c0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d013      	beq.n	8003fac <HAL_GPIO_Init+0x1ec>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a3f      	ldr	r2, [pc, #252]	; (8004084 <HAL_GPIO_Init+0x2c4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_GPIO_Init+0x1e8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a3e      	ldr	r2, [pc, #248]	; (8004088 <HAL_GPIO_Init+0x2c8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d007      	beq.n	8003fa4 <HAL_GPIO_Init+0x1e4>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a3d      	ldr	r2, [pc, #244]	; (800408c <HAL_GPIO_Init+0x2cc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d101      	bne.n	8003fa0 <HAL_GPIO_Init+0x1e0>
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e006      	b.n	8003fae <HAL_GPIO_Init+0x1ee>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	e004      	b.n	8003fae <HAL_GPIO_Init+0x1ee>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e002      	b.n	8003fae <HAL_GPIO_Init+0x1ee>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <HAL_GPIO_Init+0x1ee>
 8003fac:	2300      	movs	r3, #0
 8003fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb0:	f002 0203 	and.w	r2, r2, #3
 8003fb4:	0092      	lsls	r2, r2, #2
 8003fb6:	4093      	lsls	r3, r2
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003fbe:	492f      	ldr	r1, [pc, #188]	; (800407c <HAL_GPIO_Init+0x2bc>)
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d006      	beq.n	8003fe6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fd8:	4b2d      	ldr	r3, [pc, #180]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	492c      	ldr	r1, [pc, #176]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	600b      	str	r3, [r1, #0]
 8003fe4:	e006      	b.n	8003ff4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fe6:	4b2a      	ldr	r3, [pc, #168]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	4928      	ldr	r1, [pc, #160]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d006      	beq.n	800400e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004000:	4b23      	ldr	r3, [pc, #140]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	4922      	ldr	r1, [pc, #136]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	4313      	orrs	r3, r2
 800400a:	604b      	str	r3, [r1, #4]
 800400c:	e006      	b.n	800401c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800400e:	4b20      	ldr	r3, [pc, #128]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	43db      	mvns	r3, r3
 8004016:	491e      	ldr	r1, [pc, #120]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 8004018:	4013      	ands	r3, r2
 800401a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d006      	beq.n	8004036 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	4918      	ldr	r1, [pc, #96]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]
 8004034:	e006      	b.n	8004044 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004036:	4b16      	ldr	r3, [pc, #88]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	43db      	mvns	r3, r3
 800403e:	4914      	ldr	r1, [pc, #80]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 8004040:	4013      	ands	r3, r2
 8004042:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d021      	beq.n	8004094 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004050:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	490e      	ldr	r1, [pc, #56]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	4313      	orrs	r3, r2
 800405a:	60cb      	str	r3, [r1, #12]
 800405c:	e021      	b.n	80040a2 <HAL_GPIO_Init+0x2e2>
 800405e:	bf00      	nop
 8004060:	10320000 	.word	0x10320000
 8004064:	10310000 	.word	0x10310000
 8004068:	10220000 	.word	0x10220000
 800406c:	10210000 	.word	0x10210000
 8004070:	10120000 	.word	0x10120000
 8004074:	10110000 	.word	0x10110000
 8004078:	40021000 	.word	0x40021000
 800407c:	40010000 	.word	0x40010000
 8004080:	40010800 	.word	0x40010800
 8004084:	40010c00 	.word	0x40010c00
 8004088:	40011000 	.word	0x40011000
 800408c:	40011400 	.word	0x40011400
 8004090:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <HAL_GPIO_Init+0x304>)
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	43db      	mvns	r3, r3
 800409c:	4909      	ldr	r1, [pc, #36]	; (80040c4 <HAL_GPIO_Init+0x304>)
 800409e:	4013      	ands	r3, r2
 80040a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	3301      	adds	r3, #1
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	fa22 f303 	lsr.w	r3, r2, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f47f ae8e 	bne.w	8003dd4 <HAL_GPIO_Init+0x14>
  }
}
 80040b8:	bf00      	nop
 80040ba:	bf00      	nop
 80040bc:	372c      	adds	r7, #44	; 0x2c
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr
 80040c4:	40010400 	.word	0x40010400

080040c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	807b      	strh	r3, [r7, #2]
 80040d4:	4613      	mov	r3, r2
 80040d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040d8:	787b      	ldrb	r3, [r7, #1]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040de:	887a      	ldrh	r2, [r7, #2]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80040e4:	e003      	b.n	80040ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040e6:	887b      	ldrh	r3, [r7, #2]
 80040e8:	041a      	lsls	r2, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	611a      	str	r2, [r3, #16]
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e26c      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 8087 	beq.w	8004226 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004118:	4b92      	ldr	r3, [pc, #584]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b04      	cmp	r3, #4
 8004122:	d00c      	beq.n	800413e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004124:	4b8f      	ldr	r3, [pc, #572]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 030c 	and.w	r3, r3, #12
 800412c:	2b08      	cmp	r3, #8
 800412e:	d112      	bne.n	8004156 <HAL_RCC_OscConfig+0x5e>
 8004130:	4b8c      	ldr	r3, [pc, #560]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413c:	d10b      	bne.n	8004156 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413e:	4b89      	ldr	r3, [pc, #548]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d06c      	beq.n	8004224 <HAL_RCC_OscConfig+0x12c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d168      	bne.n	8004224 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e246      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415e:	d106      	bne.n	800416e <HAL_RCC_OscConfig+0x76>
 8004160:	4b80      	ldr	r3, [pc, #512]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a7f      	ldr	r2, [pc, #508]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	e02e      	b.n	80041cc <HAL_RCC_OscConfig+0xd4>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10c      	bne.n	8004190 <HAL_RCC_OscConfig+0x98>
 8004176:	4b7b      	ldr	r3, [pc, #492]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a7a      	ldr	r2, [pc, #488]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 800417c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	4b78      	ldr	r3, [pc, #480]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a77      	ldr	r2, [pc, #476]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e01d      	b.n	80041cc <HAL_RCC_OscConfig+0xd4>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004198:	d10c      	bne.n	80041b4 <HAL_RCC_OscConfig+0xbc>
 800419a:	4b72      	ldr	r3, [pc, #456]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a71      	ldr	r2, [pc, #452]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	4b6f      	ldr	r3, [pc, #444]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a6e      	ldr	r2, [pc, #440]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e00b      	b.n	80041cc <HAL_RCC_OscConfig+0xd4>
 80041b4:	4b6b      	ldr	r3, [pc, #428]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a6a      	ldr	r2, [pc, #424]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	4b68      	ldr	r3, [pc, #416]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a67      	ldr	r2, [pc, #412]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d013      	beq.n	80041fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fe fe02 	bl	8002ddc <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041dc:	f7fe fdfe 	bl	8002ddc <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	; 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e1fa      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ee:	4b5d      	ldr	r3, [pc, #372]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0xe4>
 80041fa:	e014      	b.n	8004226 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fe fdee 	bl	8002ddc <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004204:	f7fe fdea 	bl	8002ddc <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e1e6      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004216:	4b53      	ldr	r3, [pc, #332]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x10c>
 8004222:	e000      	b.n	8004226 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d063      	beq.n	80042fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004232:	4b4c      	ldr	r3, [pc, #304]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00b      	beq.n	8004256 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800423e:	4b49      	ldr	r3, [pc, #292]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b08      	cmp	r3, #8
 8004248:	d11c      	bne.n	8004284 <HAL_RCC_OscConfig+0x18c>
 800424a:	4b46      	ldr	r3, [pc, #280]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d116      	bne.n	8004284 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004256:	4b43      	ldr	r3, [pc, #268]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_RCC_OscConfig+0x176>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d001      	beq.n	800426e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e1ba      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426e:	4b3d      	ldr	r3, [pc, #244]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4939      	ldr	r1, [pc, #228]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004282:	e03a      	b.n	80042fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d020      	beq.n	80042ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800428c:	4b36      	ldr	r3, [pc, #216]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004292:	f7fe fda3 	bl	8002ddc <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429a:	f7fe fd9f 	bl	8002ddc <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e19b      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ac:	4b2d      	ldr	r3, [pc, #180]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f0      	beq.n	800429a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b8:	4b2a      	ldr	r3, [pc, #168]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4927      	ldr	r1, [pc, #156]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	600b      	str	r3, [r1, #0]
 80042cc:	e015      	b.n	80042fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ce:	4b26      	ldr	r3, [pc, #152]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d4:	f7fe fd82 	bl	8002ddc <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042dc:	f7fe fd7e 	bl	8002ddc <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e17a      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ee:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d03a      	beq.n	800437c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d019      	beq.n	8004342 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430e:	4b17      	ldr	r3, [pc, #92]	; (800436c <HAL_RCC_OscConfig+0x274>)
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004314:	f7fe fd62 	bl	8002ddc <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800431c:	f7fe fd5e 	bl	8002ddc <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e15a      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <HAL_RCC_OscConfig+0x26c>)
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800433a:	2001      	movs	r0, #1
 800433c:	f000 fb08 	bl	8004950 <RCC_Delay>
 8004340:	e01c      	b.n	800437c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_RCC_OscConfig+0x274>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004348:	f7fe fd48 	bl	8002ddc <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434e:	e00f      	b.n	8004370 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004350:	f7fe fd44 	bl	8002ddc <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d908      	bls.n	8004370 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e140      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000
 8004368:	42420000 	.word	0x42420000
 800436c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004370:	4b9e      	ldr	r3, [pc, #632]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e9      	bne.n	8004350 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80a6 	beq.w	80044d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800438a:	2300      	movs	r3, #0
 800438c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438e:	4b97      	ldr	r3, [pc, #604]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10d      	bne.n	80043b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800439a:	4b94      	ldr	r3, [pc, #592]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	4a93      	ldr	r2, [pc, #588]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 80043a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a4:	61d3      	str	r3, [r2, #28]
 80043a6:	4b91      	ldr	r3, [pc, #580]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	4b8e      	ldr	r3, [pc, #568]	; (80045f0 <HAL_RCC_OscConfig+0x4f8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d118      	bne.n	80043f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c2:	4b8b      	ldr	r3, [pc, #556]	; (80045f0 <HAL_RCC_OscConfig+0x4f8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a8a      	ldr	r2, [pc, #552]	; (80045f0 <HAL_RCC_OscConfig+0x4f8>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ce:	f7fe fd05 	bl	8002ddc <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d6:	f7fe fd01 	bl	8002ddc <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b64      	cmp	r3, #100	; 0x64
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e0fd      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e8:	4b81      	ldr	r3, [pc, #516]	; (80045f0 <HAL_RCC_OscConfig+0x4f8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d106      	bne.n	800440a <HAL_RCC_OscConfig+0x312>
 80043fc:	4b7b      	ldr	r3, [pc, #492]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	4a7a      	ldr	r2, [pc, #488]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6213      	str	r3, [r2, #32]
 8004408:	e02d      	b.n	8004466 <HAL_RCC_OscConfig+0x36e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x334>
 8004412:	4b76      	ldr	r3, [pc, #472]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	4a75      	ldr	r2, [pc, #468]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	6213      	str	r3, [r2, #32]
 800441e:	4b73      	ldr	r3, [pc, #460]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	4a72      	ldr	r2, [pc, #456]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004424:	f023 0304 	bic.w	r3, r3, #4
 8004428:	6213      	str	r3, [r2, #32]
 800442a:	e01c      	b.n	8004466 <HAL_RCC_OscConfig+0x36e>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b05      	cmp	r3, #5
 8004432:	d10c      	bne.n	800444e <HAL_RCC_OscConfig+0x356>
 8004434:	4b6d      	ldr	r3, [pc, #436]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	4a6c      	ldr	r2, [pc, #432]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 800443a:	f043 0304 	orr.w	r3, r3, #4
 800443e:	6213      	str	r3, [r2, #32]
 8004440:	4b6a      	ldr	r3, [pc, #424]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	4a69      	ldr	r2, [pc, #420]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	6213      	str	r3, [r2, #32]
 800444c:	e00b      	b.n	8004466 <HAL_RCC_OscConfig+0x36e>
 800444e:	4b67      	ldr	r3, [pc, #412]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	4a66      	ldr	r2, [pc, #408]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	6213      	str	r3, [r2, #32]
 800445a:	4b64      	ldr	r3, [pc, #400]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	4a63      	ldr	r2, [pc, #396]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004460:	f023 0304 	bic.w	r3, r3, #4
 8004464:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d015      	beq.n	800449a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446e:	f7fe fcb5 	bl	8002ddc <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004474:	e00a      	b.n	800448c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004476:	f7fe fcb1 	bl	8002ddc <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f241 3288 	movw	r2, #5000	; 0x1388
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e0ab      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448c:	4b57      	ldr	r3, [pc, #348]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ee      	beq.n	8004476 <HAL_RCC_OscConfig+0x37e>
 8004498:	e014      	b.n	80044c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449a:	f7fe fc9f 	bl	8002ddc <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a2:	f7fe fc9b 	bl	8002ddc <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e095      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b8:	4b4c      	ldr	r3, [pc, #304]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1ee      	bne.n	80044a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d105      	bne.n	80044d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ca:	4b48      	ldr	r3, [pc, #288]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	4a47      	ldr	r2, [pc, #284]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 80044d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8081 	beq.w	80045e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044e0:	4b42      	ldr	r3, [pc, #264]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 030c 	and.w	r3, r3, #12
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d061      	beq.n	80045b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d146      	bne.n	8004582 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f4:	4b3f      	ldr	r3, [pc, #252]	; (80045f4 <HAL_RCC_OscConfig+0x4fc>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fa:	f7fe fc6f 	bl	8002ddc <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004502:	f7fe fc6b 	bl	8002ddc <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e067      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004514:	4b35      	ldr	r3, [pc, #212]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f0      	bne.n	8004502 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d108      	bne.n	800453c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800452a:	4b30      	ldr	r3, [pc, #192]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	492d      	ldr	r1, [pc, #180]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800453c:	4b2b      	ldr	r3, [pc, #172]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a19      	ldr	r1, [r3, #32]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	430b      	orrs	r3, r1
 800454e:	4927      	ldr	r1, [pc, #156]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004550:	4313      	orrs	r3, r2
 8004552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004554:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <HAL_RCC_OscConfig+0x4fc>)
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455a:	f7fe fc3f 	bl	8002ddc <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004562:	f7fe fc3b 	bl	8002ddc <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e037      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004574:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x46a>
 8004580:	e02f      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004582:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <HAL_RCC_OscConfig+0x4fc>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004588:	f7fe fc28 	bl	8002ddc <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004590:	f7fe fc24 	bl	8002ddc <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e020      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x498>
 80045ae:	e018      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e013      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_RCC_OscConfig+0x4f4>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d106      	bne.n	80045de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d001      	beq.n	80045e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40007000 	.word	0x40007000
 80045f4:	42420060 	.word	0x42420060

080045f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0d0      	b.n	80047ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800460c:	4b6a      	ldr	r3, [pc, #424]	; (80047b8 <HAL_RCC_ClockConfig+0x1c0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d910      	bls.n	800463c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461a:	4b67      	ldr	r3, [pc, #412]	; (80047b8 <HAL_RCC_ClockConfig+0x1c0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 0207 	bic.w	r2, r3, #7
 8004622:	4965      	ldr	r1, [pc, #404]	; (80047b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	4313      	orrs	r3, r2
 8004628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800462a:	4b63      	ldr	r3, [pc, #396]	; (80047b8 <HAL_RCC_ClockConfig+0x1c0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d001      	beq.n	800463c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e0b8      	b.n	80047ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d020      	beq.n	800468a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004654:	4b59      	ldr	r3, [pc, #356]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a58      	ldr	r2, [pc, #352]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 800465a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800465e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800466c:	4b53      	ldr	r3, [pc, #332]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4a52      	ldr	r2, [pc, #328]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004672:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004676:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004678:	4b50      	ldr	r3, [pc, #320]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	494d      	ldr	r1, [pc, #308]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004686:	4313      	orrs	r3, r2
 8004688:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d040      	beq.n	8004718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d107      	bne.n	80046ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469e:	4b47      	ldr	r3, [pc, #284]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d115      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e07f      	b.n	80047ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d107      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b6:	4b41      	ldr	r3, [pc, #260]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e073      	b.n	80047ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c6:	4b3d      	ldr	r3, [pc, #244]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e06b      	b.n	80047ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046d6:	4b39      	ldr	r3, [pc, #228]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f023 0203 	bic.w	r2, r3, #3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4936      	ldr	r1, [pc, #216]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046e8:	f7fe fb78 	bl	8002ddc <HAL_GetTick>
 80046ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ee:	e00a      	b.n	8004706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f0:	f7fe fb74 	bl	8002ddc <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e053      	b.n	80047ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004706:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 020c 	and.w	r2, r3, #12
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	429a      	cmp	r2, r3
 8004716:	d1eb      	bne.n	80046f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004718:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <HAL_RCC_ClockConfig+0x1c0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d210      	bcs.n	8004748 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004726:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f023 0207 	bic.w	r2, r3, #7
 800472e:	4922      	ldr	r1, [pc, #136]	; (80047b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	4313      	orrs	r3, r2
 8004734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004736:	4b20      	ldr	r3, [pc, #128]	; (80047b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d001      	beq.n	8004748 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e032      	b.n	80047ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d008      	beq.n	8004766 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004754:	4b19      	ldr	r3, [pc, #100]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	4916      	ldr	r1, [pc, #88]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004762:	4313      	orrs	r3, r2
 8004764:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004772:	4b12      	ldr	r3, [pc, #72]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	490e      	ldr	r1, [pc, #56]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004782:	4313      	orrs	r3, r2
 8004784:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004786:	f000 f821 	bl	80047cc <HAL_RCC_GetSysClockFreq>
 800478a:	4602      	mov	r2, r0
 800478c:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	490a      	ldr	r1, [pc, #40]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004798:	5ccb      	ldrb	r3, [r1, r3]
 800479a:	fa22 f303 	lsr.w	r3, r2, r3
 800479e:	4a09      	ldr	r2, [pc, #36]	; (80047c4 <HAL_RCC_ClockConfig+0x1cc>)
 80047a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047a2:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <HAL_RCC_ClockConfig+0x1d0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fd fad2 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40022000 	.word	0x40022000
 80047bc:	40021000 	.word	0x40021000
 80047c0:	0800e034 	.word	0x0800e034
 80047c4:	20000000 	.word	0x20000000
 80047c8:	20000004 	.word	0x20000004

080047cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047cc:	b490      	push	{r4, r7}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80047d2:	4b2a      	ldr	r3, [pc, #168]	; (800487c <HAL_RCC_GetSysClockFreq+0xb0>)
 80047d4:	1d3c      	adds	r4, r7, #4
 80047d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80047dc:	f240 2301 	movw	r3, #513	; 0x201
 80047e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61fb      	str	r3, [r7, #28]
 80047e6:	2300      	movs	r3, #0
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	2300      	movs	r3, #0
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	2b04      	cmp	r3, #4
 8004804:	d002      	beq.n	800480c <HAL_RCC_GetSysClockFreq+0x40>
 8004806:	2b08      	cmp	r3, #8
 8004808:	d003      	beq.n	8004812 <HAL_RCC_GetSysClockFreq+0x46>
 800480a:	e02d      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800480c:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800480e:	623b      	str	r3, [r7, #32]
      break;
 8004810:	e02d      	b.n	800486e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	0c9b      	lsrs	r3, r3, #18
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800481e:	4413      	add	r3, r2
 8004820:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004824:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d013      	beq.n	8004858 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004830:	4b13      	ldr	r3, [pc, #76]	; (8004880 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	0c5b      	lsrs	r3, r3, #17
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800483e:	4413      	add	r3, r2
 8004840:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004844:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	4a0e      	ldr	r2, [pc, #56]	; (8004884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800484a:	fb02 f203 	mul.w	r2, r2, r3
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	fbb2 f3f3 	udiv	r3, r2, r3
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
 8004856:	e004      	b.n	8004862 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	4a0b      	ldr	r2, [pc, #44]	; (8004888 <HAL_RCC_GetSysClockFreq+0xbc>)
 800485c:	fb02 f303 	mul.w	r3, r2, r3
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	623b      	str	r3, [r7, #32]
      break;
 8004866:	e002      	b.n	800486e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800486a:	623b      	str	r3, [r7, #32]
      break;
 800486c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800486e:	6a3b      	ldr	r3, [r7, #32]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3728      	adds	r7, #40	; 0x28
 8004874:	46bd      	mov	sp, r7
 8004876:	bc90      	pop	{r4, r7}
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	0800dedc 	.word	0x0800dedc
 8004880:	40021000 	.word	0x40021000
 8004884:	007a1200 	.word	0x007a1200
 8004888:	003d0900 	.word	0x003d0900

0800488c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004890:	4b02      	ldr	r3, [pc, #8]	; (800489c <HAL_RCC_GetHCLKFreq+0x10>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	20000000 	.word	0x20000000

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048a4:	f7ff fff2 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048a8:	4602      	mov	r2, r0
 80048aa:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	4903      	ldr	r1, [pc, #12]	; (80048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b6:	5ccb      	ldrb	r3, [r1, r3]
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40021000 	.word	0x40021000
 80048c4:	0800e044 	.word	0x0800e044

080048c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048cc:	f7ff ffde 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	0adb      	lsrs	r3, r3, #11
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	4903      	ldr	r1, [pc, #12]	; (80048ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000
 80048ec:	0800e044 	.word	0x0800e044

080048f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	220f      	movs	r2, #15
 80048fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004900:	4b11      	ldr	r3, [pc, #68]	; (8004948 <HAL_RCC_GetClockConfig+0x58>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f003 0203 	and.w	r2, r3, #3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800490c:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <HAL_RCC_GetClockConfig+0x58>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_RCC_GetClockConfig+0x58>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004924:	4b08      	ldr	r3, [pc, #32]	; (8004948 <HAL_RCC_GetClockConfig+0x58>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	08db      	lsrs	r3, r3, #3
 800492a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_RCC_GetClockConfig+0x5c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0207 	and.w	r2, r3, #7
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr
 8004948:	40021000 	.word	0x40021000
 800494c:	40022000 	.word	0x40022000

08004950 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <RCC_Delay+0x34>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <RCC_Delay+0x38>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	0a5b      	lsrs	r3, r3, #9
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800496c:	bf00      	nop
  }
  while (Delay --);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1e5a      	subs	r2, r3, #1
 8004972:	60fa      	str	r2, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f9      	bne.n	800496c <RCC_Delay+0x1c>
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	20000000 	.word	0x20000000
 8004988:	10624dd3 	.word	0x10624dd3

0800498c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d07d      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80049a8:	2300      	movs	r3, #0
 80049aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ac:	4b4f      	ldr	r3, [pc, #316]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10d      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b8:	4b4c      	ldr	r3, [pc, #304]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	4a4b      	ldr	r2, [pc, #300]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c2:	61d3      	str	r3, [r2, #28]
 80049c4:	4b49      	ldr	r3, [pc, #292]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049d0:	2301      	movs	r3, #1
 80049d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d4:	4b46      	ldr	r3, [pc, #280]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d118      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049e0:	4b43      	ldr	r3, [pc, #268]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a42      	ldr	r2, [pc, #264]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ec:	f7fe f9f6 	bl	8002ddc <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f2:	e008      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f4:	f7fe f9f2 	bl	8002ddc <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	; 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e06d      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a06:	4b3a      	ldr	r3, [pc, #232]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a12:	4b36      	ldr	r3, [pc, #216]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d02e      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d027      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a30:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a3a:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a40:	4b2c      	ldr	r3, [pc, #176]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a46:	4a29      	ldr	r2, [pc, #164]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d014      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a56:	f7fe f9c1 	bl	8002ddc <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5c:	e00a      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5e:	f7fe f9bd 	bl	8002ddc <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e036      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a74:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0ee      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a80:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4917      	ldr	r1, [pc, #92]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d105      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a98:	4b14      	ldr	r3, [pc, #80]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	4a13      	ldr	r2, [pc, #76]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ab0:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	490b      	ldr	r1, [pc, #44]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	4904      	ldr	r1, [pc, #16]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40007000 	.word	0x40007000
 8004af4:	42420440 	.word	0x42420440

08004af8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004af8:	b590      	push	{r4, r7, lr}
 8004afa:	b08d      	sub	sp, #52	; 0x34
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b00:	4b5a      	ldr	r3, [pc, #360]	; (8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004b02:	f107 040c 	add.w	r4, r7, #12
 8004b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b0c:	f240 2301 	movw	r3, #513	; 0x201
 8004b10:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
 8004b16:	2300      	movs	r3, #0
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	2300      	movs	r3, #0
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b10      	cmp	r3, #16
 8004b30:	f200 8091 	bhi.w	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d04c      	beq.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d07c      	beq.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004b40:	e089      	b.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8004b42:	4b4b      	ldr	r3, [pc, #300]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004b48:	4b49      	ldr	r3, [pc, #292]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8082 	beq.w	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	0c9b      	lsrs	r3, r3, #18
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b62:	4413      	add	r3, r2
 8004b64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b68:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d018      	beq.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b74:	4b3e      	ldr	r3, [pc, #248]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	0c5b      	lsrs	r3, r3, #17
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b82:	4413      	add	r3, r2
 8004b84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00d      	beq.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004b94:	4a37      	ldr	r2, [pc, #220]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba4:	e004      	b.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	4a33      	ldr	r2, [pc, #204]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004bb0:	4b2f      	ldr	r3, [pc, #188]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bbc:	d102      	bne.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004bc2:	e04a      	b.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	4a2c      	ldr	r2, [pc, #176]	; (8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	085b      	lsrs	r3, r3, #1
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004bd2:	e042      	b.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004bd4:	4b26      	ldr	r3, [pc, #152]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be4:	d108      	bne.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004bf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf6:	e01f      	b.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c02:	d109      	bne.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004c04:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8004c10:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c16:	e00f      	b.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c22:	d11c      	bne.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d016      	beq.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8004c30:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004c36:	e012      	b.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004c38:	e011      	b.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004c3a:	f7ff fe45 	bl	80048c8 <HAL_RCC_GetPCLK2Freq>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	0b9b      	lsrs	r3, r3, #14
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004c54:	e004      	b.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004c56:	bf00      	nop
 8004c58:	e002      	b.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e000      	b.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004c5e:	bf00      	nop
    }
  }
  return (frequency);
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3734      	adds	r7, #52	; 0x34
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd90      	pop	{r4, r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	0800deec 	.word	0x0800deec
 8004c70:	40021000 	.word	0x40021000
 8004c74:	007a1200 	.word	0x007a1200
 8004c78:	003d0900 	.word	0x003d0900
 8004c7c:	aaaaaaab 	.word	0xaaaaaaab

08004c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e041      	b.n	8004d16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fd fac2 	bl	8002230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f000 fb2a 	bl	8005318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d001      	beq.n	8004d38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e032      	b.n	8004d9e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <HAL_TIM_Base_Start+0x88>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00e      	beq.n	8004d68 <HAL_TIM_Base_Start+0x48>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d52:	d009      	beq.n	8004d68 <HAL_TIM_Base_Start+0x48>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <HAL_TIM_Base_Start+0x8c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d004      	beq.n	8004d68 <HAL_TIM_Base_Start+0x48>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <HAL_TIM_Base_Start+0x90>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d111      	bne.n	8004d8c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b06      	cmp	r3, #6
 8004d78:	d010      	beq.n	8004d9c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8a:	e007      	b.n	8004d9c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr
 8004da8:	40012c00 	.word	0x40012c00
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800

08004db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d001      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e03a      	b.n	8004e42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a18      	ldr	r2, [pc, #96]	; (8004e4c <HAL_TIM_Base_Start_IT+0x98>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00e      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x58>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df6:	d009      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x58>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a14      	ldr	r2, [pc, #80]	; (8004e50 <HAL_TIM_Base_Start_IT+0x9c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d004      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x58>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <HAL_TIM_Base_Start_IT+0xa0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d111      	bne.n	8004e30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b06      	cmp	r3, #6
 8004e1c:	d010      	beq.n	8004e40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2e:	e007      	b.n	8004e40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr
 8004e4c:	40012c00 	.word	0x40012c00
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800

08004e58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6a1a      	ldr	r2, [r3, #32]
 8004e76:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10f      	bne.n	8004ea0 <HAL_TIM_Base_Stop_IT+0x48>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6a1a      	ldr	r2, [r3, #32]
 8004e86:	f240 4344 	movw	r3, #1092	; 0x444
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d107      	bne.n	8004ea0 <HAL_TIM_Base_Stop_IT+0x48>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d122      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d11b      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0202 	mvn.w	r2, #2
 8004ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f9f3 	bl	80052e2 <HAL_TIM_IC_CaptureCallback>
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f9e6 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f9f5 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d122      	bne.n	8004f64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d11b      	bne.n	8004f64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0204 	mvn.w	r2, #4
 8004f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f9c9 	bl	80052e2 <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f9bc 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f9cb 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d122      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0208 	mvn.w	r2, #8
 8004f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f99f 	bl	80052e2 <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f992 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f9a1 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d122      	bne.n	800500c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d11b      	bne.n	800500c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0210 	mvn.w	r2, #16
 8004fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2208      	movs	r2, #8
 8004fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f975 	bl	80052e2 <HAL_TIM_IC_CaptureCallback>
 8004ff8:	e005      	b.n	8005006 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f968 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f977 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b01      	cmp	r3, #1
 8005018:	d10e      	bne.n	8005038 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b01      	cmp	r3, #1
 8005026:	d107      	bne.n	8005038 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f06f 0201 	mvn.w	r2, #1
 8005030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fc fc4a 	bl	80018cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005042:	2b80      	cmp	r3, #128	; 0x80
 8005044:	d10e      	bne.n	8005064 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005050:	2b80      	cmp	r3, #128	; 0x80
 8005052:	d107      	bne.n	8005064 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800505c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fb47 	bl	80056f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d10e      	bne.n	8005090 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d107      	bne.n	8005090 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f93b 	bl	8005306 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b20      	cmp	r3, #32
 800509c:	d10e      	bne.n	80050bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d107      	bne.n	80050bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0220 	mvn.w	r2, #32
 80050b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fb12 	bl	80056e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050bc:	bf00      	nop
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_TIM_ConfigClockSource+0x18>
 80050d8:	2302      	movs	r3, #2
 80050da:	e0b3      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x180>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005102:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005114:	d03e      	beq.n	8005194 <HAL_TIM_ConfigClockSource+0xd0>
 8005116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511a:	f200 8087 	bhi.w	800522c <HAL_TIM_ConfigClockSource+0x168>
 800511e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005122:	f000 8085 	beq.w	8005230 <HAL_TIM_ConfigClockSource+0x16c>
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512a:	d87f      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x168>
 800512c:	2b70      	cmp	r3, #112	; 0x70
 800512e:	d01a      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0xa2>
 8005130:	2b70      	cmp	r3, #112	; 0x70
 8005132:	d87b      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x168>
 8005134:	2b60      	cmp	r3, #96	; 0x60
 8005136:	d050      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x116>
 8005138:	2b60      	cmp	r3, #96	; 0x60
 800513a:	d877      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x168>
 800513c:	2b50      	cmp	r3, #80	; 0x50
 800513e:	d03c      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0xf6>
 8005140:	2b50      	cmp	r3, #80	; 0x50
 8005142:	d873      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x168>
 8005144:	2b40      	cmp	r3, #64	; 0x40
 8005146:	d058      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x136>
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	d86f      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x168>
 800514c:	2b30      	cmp	r3, #48	; 0x30
 800514e:	d064      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x156>
 8005150:	2b30      	cmp	r3, #48	; 0x30
 8005152:	d86b      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x168>
 8005154:	2b20      	cmp	r3, #32
 8005156:	d060      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x156>
 8005158:	2b20      	cmp	r3, #32
 800515a:	d867      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x168>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d05c      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x156>
 8005160:	2b10      	cmp	r3, #16
 8005162:	d05a      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005164:	e062      	b.n	800522c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6899      	ldr	r1, [r3, #8]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f000 fa36 	bl	80055e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005188:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	609a      	str	r2, [r3, #8]
      break;
 8005192:	e04e      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	6899      	ldr	r1, [r3, #8]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f000 fa1f 	bl	80055e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b6:	609a      	str	r2, [r3, #8]
      break;
 80051b8:	e03b      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f000 f996 	bl	80054f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2150      	movs	r1, #80	; 0x50
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 f9ed 	bl	80055b2 <TIM_ITRx_SetConfig>
      break;
 80051d8:	e02b      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6859      	ldr	r1, [r3, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	461a      	mov	r2, r3
 80051e8:	f000 f9b4 	bl	8005554 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2160      	movs	r1, #96	; 0x60
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f9dd 	bl	80055b2 <TIM_ITRx_SetConfig>
      break;
 80051f8:	e01b      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6859      	ldr	r1, [r3, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	461a      	mov	r2, r3
 8005208:	f000 f976 	bl	80054f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2140      	movs	r1, #64	; 0x40
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f9cd 	bl	80055b2 <TIM_ITRx_SetConfig>
      break;
 8005218:	e00b      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4619      	mov	r1, r3
 8005224:	4610      	mov	r0, r2
 8005226:	f000 f9c4 	bl	80055b2 <TIM_ITRx_SetConfig>
        break;
 800522a:	e002      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800522c:	bf00      	nop
 800522e:	e000      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005230:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005260:	2302      	movs	r3, #2
 8005262:	e031      	b.n	80052c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f8b0 	bl	80053dc <TIM_SlaveTimer_SetConfig>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d009      	beq.n	8005296 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e018      	b.n	80052c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr

080052e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr

08005306 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a29      	ldr	r2, [pc, #164]	; (80053d0 <TIM_Base_SetConfig+0xb8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00b      	beq.n	8005348 <TIM_Base_SetConfig+0x30>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005336:	d007      	beq.n	8005348 <TIM_Base_SetConfig+0x30>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a26      	ldr	r2, [pc, #152]	; (80053d4 <TIM_Base_SetConfig+0xbc>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_Base_SetConfig+0x30>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <TIM_Base_SetConfig+0xc0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d108      	bne.n	800535a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a1c      	ldr	r2, [pc, #112]	; (80053d0 <TIM_Base_SetConfig+0xb8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00b      	beq.n	800537a <TIM_Base_SetConfig+0x62>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005368:	d007      	beq.n	800537a <TIM_Base_SetConfig+0x62>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a19      	ldr	r2, [pc, #100]	; (80053d4 <TIM_Base_SetConfig+0xbc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d003      	beq.n	800537a <TIM_Base_SetConfig+0x62>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <TIM_Base_SetConfig+0xc0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d108      	bne.n	800538c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a07      	ldr	r2, [pc, #28]	; (80053d0 <TIM_Base_SetConfig+0xb8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d103      	bne.n	80053c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	615a      	str	r2, [r3, #20]
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800

080053dc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0307 	bic.w	r3, r3, #7
 8005406:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b70      	cmp	r3, #112	; 0x70
 8005420:	d01a      	beq.n	8005458 <TIM_SlaveTimer_SetConfig+0x7c>
 8005422:	2b70      	cmp	r3, #112	; 0x70
 8005424:	d860      	bhi.n	80054e8 <TIM_SlaveTimer_SetConfig+0x10c>
 8005426:	2b60      	cmp	r3, #96	; 0x60
 8005428:	d054      	beq.n	80054d4 <TIM_SlaveTimer_SetConfig+0xf8>
 800542a:	2b60      	cmp	r3, #96	; 0x60
 800542c:	d85c      	bhi.n	80054e8 <TIM_SlaveTimer_SetConfig+0x10c>
 800542e:	2b50      	cmp	r3, #80	; 0x50
 8005430:	d046      	beq.n	80054c0 <TIM_SlaveTimer_SetConfig+0xe4>
 8005432:	2b50      	cmp	r3, #80	; 0x50
 8005434:	d858      	bhi.n	80054e8 <TIM_SlaveTimer_SetConfig+0x10c>
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d019      	beq.n	800546e <TIM_SlaveTimer_SetConfig+0x92>
 800543a:	2b40      	cmp	r3, #64	; 0x40
 800543c:	d854      	bhi.n	80054e8 <TIM_SlaveTimer_SetConfig+0x10c>
 800543e:	2b30      	cmp	r3, #48	; 0x30
 8005440:	d054      	beq.n	80054ec <TIM_SlaveTimer_SetConfig+0x110>
 8005442:	2b30      	cmp	r3, #48	; 0x30
 8005444:	d850      	bhi.n	80054e8 <TIM_SlaveTimer_SetConfig+0x10c>
 8005446:	2b20      	cmp	r3, #32
 8005448:	d050      	beq.n	80054ec <TIM_SlaveTimer_SetConfig+0x110>
 800544a:	2b20      	cmp	r3, #32
 800544c:	d84c      	bhi.n	80054e8 <TIM_SlaveTimer_SetConfig+0x10c>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d04c      	beq.n	80054ec <TIM_SlaveTimer_SetConfig+0x110>
 8005452:	2b10      	cmp	r3, #16
 8005454:	d04a      	beq.n	80054ec <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005456:	e047      	b.n	80054e8 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68d9      	ldr	r1, [r3, #12]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f000 f8bd 	bl	80055e6 <TIM_ETR_SetConfig>
      break;
 800546c:	e03f      	b.n	80054ee <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b05      	cmp	r3, #5
 8005474:	d101      	bne.n	800547a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e03a      	b.n	80054f0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0201 	bic.w	r2, r2, #1
 8005490:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054a0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	621a      	str	r2, [r3, #32]
      break;
 80054be:	e016      	b.n	80054ee <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	6899      	ldr	r1, [r3, #8]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	461a      	mov	r2, r3
 80054ce:	f000 f813 	bl	80054f8 <TIM_TI1_ConfigInputStage>
      break;
 80054d2:	e00c      	b.n	80054ee <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	6899      	ldr	r1, [r3, #8]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	461a      	mov	r2, r3
 80054e2:	f000 f837 	bl	8005554 <TIM_TI2_ConfigInputStage>
      break;
 80054e6:	e002      	b.n	80054ee <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80054e8:	bf00      	nop
 80054ea:	e000      	b.n	80054ee <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80054ec:	bf00      	nop
  }
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f023 0201 	bic.w	r2, r3, #1
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f023 030a 	bic.w	r3, r3, #10
 8005534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	621a      	str	r2, [r3, #32]
}
 800554a:	bf00      	nop
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	f023 0210 	bic.w	r2, r3, #16
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800557e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	031b      	lsls	r3, r3, #12
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005590:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	621a      	str	r2, [r3, #32]
}
 80055a8:	bf00      	nop
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr

080055b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b085      	sub	sp, #20
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f043 0307 	orr.w	r3, r3, #7
 80055d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	609a      	str	r2, [r3, #8]
}
 80055dc:	bf00      	nop
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr

080055e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b087      	sub	sp, #28
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
 80055f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005600:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	021a      	lsls	r2, r3, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	431a      	orrs	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	4313      	orrs	r3, r2
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	609a      	str	r2, [r3, #8]
}
 800561a:	bf00      	nop
 800561c:	371c      	adds	r7, #28
 800561e:	46bd      	mov	sp, r7
 8005620:	bc80      	pop	{r7}
 8005622:	4770      	bx	lr

08005624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005638:	2302      	movs	r3, #2
 800563a:	e046      	b.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a16      	ldr	r2, [pc, #88]	; (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00e      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005688:	d009      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a12      	ldr	r2, [pc, #72]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d004      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a10      	ldr	r2, [pc, #64]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d10c      	bne.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800

080056e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr

080056f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr

08005704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e03f      	b.n	8005796 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fc fe16 	bl	800235c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2224      	movs	r2, #36	; 0x24
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fd03 	bl	8006154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800575c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695a      	ldr	r2, [r3, #20]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800576c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800577c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b08a      	sub	sp, #40	; 0x28
 80057a2:	af02      	add	r7, sp, #8
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	4613      	mov	r3, r2
 80057ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	d17c      	bne.n	80058b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <HAL_UART_Transmit+0x2c>
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e075      	b.n	80058ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_UART_Transmit+0x3e>
 80057d8:	2302      	movs	r3, #2
 80057da:	e06e      	b.n	80058ba <HAL_UART_Transmit+0x11c>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2221      	movs	r2, #33	; 0x21
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057f2:	f7fd faf3 	bl	8002ddc <HAL_GetTick>
 80057f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	88fa      	ldrh	r2, [r7, #6]
 80057fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	88fa      	ldrh	r2, [r7, #6]
 8005802:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580c:	d108      	bne.n	8005820 <HAL_UART_Transmit+0x82>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d104      	bne.n	8005820 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	e003      	b.n	8005828 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005830:	e02a      	b.n	8005888 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2200      	movs	r2, #0
 800583a:	2180      	movs	r1, #128	; 0x80
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 faee 	bl	8005e1e <UART_WaitOnFlagUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e036      	b.n	80058ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10b      	bne.n	800586a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005860:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	3302      	adds	r3, #2
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	e007      	b.n	800587a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	781a      	ldrb	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	3301      	adds	r3, #1
 8005878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1cf      	bne.n	8005832 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2200      	movs	r2, #0
 800589a:	2140      	movs	r1, #64	; 0x40
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fabe 	bl	8005e1e <UART_WaitOnFlagUntilTimeout>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e006      	b.n	80058ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	e000      	b.n	80058ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058b8:	2302      	movs	r3, #2
  }
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3720      	adds	r7, #32
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b08a      	sub	sp, #40	; 0x28
 80058c6:	af02      	add	r7, sp, #8
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	603b      	str	r3, [r7, #0]
 80058ce:	4613      	mov	r3, r2
 80058d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b20      	cmp	r3, #32
 80058e0:	f040 808c 	bne.w	80059fc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_UART_Receive+0x2e>
 80058ea:	88fb      	ldrh	r3, [r7, #6]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e084      	b.n	80059fe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_UART_Receive+0x40>
 80058fe:	2302      	movs	r3, #2
 8005900:	e07d      	b.n	80059fe <HAL_UART_Receive+0x13c>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2222      	movs	r2, #34	; 0x22
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800591e:	f7fd fa5d 	bl	8002ddc <HAL_GetTick>
 8005922:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	88fa      	ldrh	r2, [r7, #6]
 8005928:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	88fa      	ldrh	r2, [r7, #6]
 800592e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005938:	d108      	bne.n	800594c <HAL_UART_Receive+0x8a>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d104      	bne.n	800594c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	e003      	b.n	8005954 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005950:	2300      	movs	r3, #0
 8005952:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800595c:	e043      	b.n	80059e6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2200      	movs	r2, #0
 8005966:	2120      	movs	r1, #32
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 fa58 	bl	8005e1e <UART_WaitOnFlagUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e042      	b.n	80059fe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10c      	bne.n	8005998 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	b29b      	uxth	r3, r3
 8005986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598a:	b29a      	uxth	r2, r3
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	3302      	adds	r3, #2
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	e01f      	b.n	80059d8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a0:	d007      	beq.n	80059b2 <HAL_UART_Receive+0xf0>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <HAL_UART_Receive+0xfe>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	e008      	b.n	80059d2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	3301      	adds	r3, #1
 80059d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1b6      	bne.n	800595e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e000      	b.n	80059fe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80059fc:	2302      	movs	r3, #2
  }
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	4613      	mov	r3, r2
 8005a12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	d130      	bne.n	8005a82 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_UART_Transmit_IT+0x26>
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e029      	b.n	8005a84 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_UART_Transmit_IT+0x38>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e022      	b.n	8005a84 <HAL_UART_Transmit_IT+0x7e>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	88fa      	ldrh	r2, [r7, #6]
 8005a50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	88fa      	ldrh	r2, [r7, #6]
 8005a56:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2221      	movs	r2, #33	; 0x21
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a7c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e000      	b.n	8005a84 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005a82:	2302      	movs	r3, #2
  }
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr
	...

08005a90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08a      	sub	sp, #40	; 0x28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10d      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	f003 0320 	and.w	r3, r3, #32
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x52>
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa90 	bl	8006000 <UART_Receive_IT>
      return;
 8005ae0:	e17b      	b.n	8005dda <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80b1 	beq.w	8005c4c <HAL_UART_IRQHandler+0x1bc>
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <HAL_UART_IRQHandler+0x70>
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80a6 	beq.w	8005c4c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HAL_UART_IRQHandler+0x90>
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	f043 0201 	orr.w	r2, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <HAL_UART_IRQHandler+0xb0>
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b38:	f043 0202 	orr.w	r2, r3, #2
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <HAL_UART_IRQHandler+0xd0>
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	f043 0204 	orr.w	r2, r3, #4
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00f      	beq.n	8005b8a <HAL_UART_IRQHandler+0xfa>
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d104      	bne.n	8005b7e <HAL_UART_IRQHandler+0xee>
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f043 0208 	orr.w	r2, r3, #8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 811e 	beq.w	8005dd0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <HAL_UART_IRQHandler+0x11e>
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fa29 	bl	8006000 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	bf14      	ite	ne
 8005bbc:	2301      	movne	r3, #1
 8005bbe:	2300      	moveq	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <HAL_UART_IRQHandler+0x146>
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d031      	beq.n	8005c3a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f96b 	bl	8005eb2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d023      	beq.n	8005c32 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	695a      	ldr	r2, [r3, #20]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d013      	beq.n	8005c2a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	4a76      	ldr	r2, [pc, #472]	; (8005de0 <HAL_UART_IRQHandler+0x350>)
 8005c08:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fd ff5a 	bl	8003ac8 <HAL_DMA_Abort_IT>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d016      	beq.n	8005c48 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c24:	4610      	mov	r0, r2
 8005c26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c28:	e00e      	b.n	8005c48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f8e3 	bl	8005df6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c30:	e00a      	b.n	8005c48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f8df 	bl	8005df6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c38:	e006      	b.n	8005c48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f8db 	bl	8005df6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c46:	e0c3      	b.n	8005dd0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c48:	bf00      	nop
    return;
 8005c4a:	e0c1      	b.n	8005dd0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	f040 80a1 	bne.w	8005d98 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 809b 	beq.w	8005d98 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	f003 0310 	and.w	r3, r3, #16
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8095 	beq.w	8005d98 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d04e      	beq.n	8005d30 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005c9c:	8a3b      	ldrh	r3, [r7, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 8098 	beq.w	8005dd4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ca8:	8a3a      	ldrh	r2, [r7, #16]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	f080 8092 	bcs.w	8005dd4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	8a3a      	ldrh	r2, [r7, #16]
 8005cb4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	2b20      	cmp	r3, #32
 8005cbe:	d02b      	beq.n	8005d18 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cce:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cee:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0210 	bic.w	r2, r2, #16
 8005d0c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fd fe9e 	bl	8003a54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	4619      	mov	r1, r3
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f86d 	bl	8005e08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005d2e:	e051      	b.n	8005dd4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d047      	beq.n	8005dd8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005d48:	8a7b      	ldrh	r3, [r7, #18]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d044      	beq.n	8005dd8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d5c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695a      	ldr	r2, [r3, #20]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0201 	bic.w	r2, r2, #1
 8005d6c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0210 	bic.w	r2, r2, #16
 8005d8a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d8c:	8a7b      	ldrh	r3, [r7, #18]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f839 	bl	8005e08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005d96:	e01f      	b.n	8005dd8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d008      	beq.n	8005db4 <HAL_UART_IRQHandler+0x324>
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f8c0 	bl	8005f32 <UART_Transmit_IT>
    return;
 8005db2:	e012      	b.n	8005dda <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <HAL_UART_IRQHandler+0x34a>
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d008      	beq.n	8005dda <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f901 	bl	8005fd0 <UART_EndTransmit_IT>
    return;
 8005dce:	e004      	b.n	8005dda <HAL_UART_IRQHandler+0x34a>
    return;
 8005dd0:	bf00      	nop
 8005dd2:	e002      	b.n	8005dda <HAL_UART_IRQHandler+0x34a>
      return;
 8005dd4:	bf00      	nop
 8005dd6:	e000      	b.n	8005dda <HAL_UART_IRQHandler+0x34a>
      return;
 8005dd8:	bf00      	nop
  }
}
 8005dda:	3728      	adds	r7, #40	; 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	08005f0b 	.word	0x08005f0b

08005de4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bc80      	pop	{r7}
 8005df4:	4770      	bx	lr

08005df6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr

08005e08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bc80      	pop	{r7}
 8005e1c:	4770      	bx	lr

08005e1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	603b      	str	r3, [r7, #0]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e2e:	e02c      	b.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e36:	d028      	beq.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d007      	beq.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x30>
 8005e3e:	f7fc ffcd 	bl	8002ddc <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d21d      	bcs.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e5c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	695a      	ldr	r2, [r3, #20]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0201 	bic.w	r2, r2, #1
 8005e6c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e00f      	b.n	8005eaa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4013      	ands	r3, r2
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	bf0c      	ite	eq
 8005e9a:	2301      	moveq	r3, #1
 8005e9c:	2300      	movne	r3, #0
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d0c3      	beq.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ec8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d107      	bne.n	8005ef2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0210 	bic.w	r2, r2, #16
 8005ef0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bc80      	pop	{r7}
 8005f08:	4770      	bx	lr

08005f0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7ff ff66 	bl	8005df6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b085      	sub	sp, #20
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b21      	cmp	r3, #33	; 0x21
 8005f44:	d13e      	bne.n	8005fc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4e:	d114      	bne.n	8005f7a <UART_Transmit_IT+0x48>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d110      	bne.n	8005f7a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	461a      	mov	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	1c9a      	adds	r2, r3, #2
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	621a      	str	r2, [r3, #32]
 8005f78:	e008      	b.n	8005f8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	1c59      	adds	r1, r3, #1
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6211      	str	r1, [r2, #32]
 8005f84:	781a      	ldrb	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10f      	bne.n	8005fc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e000      	b.n	8005fc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
  }
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr

08005fd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7fb fe67 	bl	8001cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b22      	cmp	r3, #34	; 0x22
 8006012:	f040 8099 	bne.w	8006148 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601e:	d117      	bne.n	8006050 <UART_Receive_IT+0x50>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d113      	bne.n	8006050 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	b29b      	uxth	r3, r3
 800603a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603e:	b29a      	uxth	r2, r3
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006048:	1c9a      	adds	r2, r3, #2
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	629a      	str	r2, [r3, #40]	; 0x28
 800604e:	e026      	b.n	800609e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006056:	2300      	movs	r3, #0
 8006058:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006062:	d007      	beq.n	8006074 <UART_Receive_IT+0x74>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10a      	bne.n	8006082 <UART_Receive_IT+0x82>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d106      	bne.n	8006082 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	b2da      	uxtb	r2, r3
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	e008      	b.n	8006094 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800608e:	b2da      	uxtb	r2, r3
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	4619      	mov	r1, r3
 80060ac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d148      	bne.n	8006144 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0220 	bic.w	r2, r2, #32
 80060c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695a      	ldr	r2, [r3, #20]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0201 	bic.w	r2, r2, #1
 80060e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d123      	bne.n	800613a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0210 	bic.w	r2, r2, #16
 8006106:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b10      	cmp	r3, #16
 8006114:	d10a      	bne.n	800612c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff fe68 	bl	8005e08 <HAL_UARTEx_RxEventCallback>
 8006138:	e002      	b.n	8006140 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff fe52 	bl	8005de4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006140:	2300      	movs	r3, #0
 8006142:	e002      	b.n	800614a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	e000      	b.n	800614a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006148:	2302      	movs	r3, #2
  }
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800618e:	f023 030c 	bic.w	r3, r3, #12
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6812      	ldr	r2, [r2, #0]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	430b      	orrs	r3, r1
 800619a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a2c      	ldr	r2, [pc, #176]	; (8006268 <UART_SetConfig+0x114>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d103      	bne.n	80061c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80061bc:	f7fe fb84 	bl	80048c8 <HAL_RCC_GetPCLK2Freq>
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	e002      	b.n	80061ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80061c4:	f7fe fb6c 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 80061c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	009a      	lsls	r2, r3, #2
 80061d4:	441a      	add	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e0:	4a22      	ldr	r2, [pc, #136]	; (800626c <UART_SetConfig+0x118>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	0119      	lsls	r1, r3, #4
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009a      	lsls	r2, r3, #2
 80061f4:	441a      	add	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006200:	4b1a      	ldr	r3, [pc, #104]	; (800626c <UART_SetConfig+0x118>)
 8006202:	fba3 0302 	umull	r0, r3, r3, r2
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	2064      	movs	r0, #100	; 0x64
 800620a:	fb00 f303 	mul.w	r3, r0, r3
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	3332      	adds	r3, #50	; 0x32
 8006214:	4a15      	ldr	r2, [pc, #84]	; (800626c <UART_SetConfig+0x118>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006220:	4419      	add	r1, r3
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4613      	mov	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	009a      	lsls	r2, r3, #2
 800622c:	441a      	add	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	fbb2 f2f3 	udiv	r2, r2, r3
 8006238:	4b0c      	ldr	r3, [pc, #48]	; (800626c <UART_SetConfig+0x118>)
 800623a:	fba3 0302 	umull	r0, r3, r3, r2
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	2064      	movs	r0, #100	; 0x64
 8006242:	fb00 f303 	mul.w	r3, r0, r3
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	3332      	adds	r3, #50	; 0x32
 800624c:	4a07      	ldr	r2, [pc, #28]	; (800626c <UART_SetConfig+0x118>)
 800624e:	fba2 2303 	umull	r2, r3, r2, r3
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	f003 020f 	and.w	r2, r3, #15
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	440a      	add	r2, r1
 800625e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006260:	bf00      	nop
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40013800 	.word	0x40013800
 800626c:	51eb851f 	.word	0x51eb851f

08006270 <SentError>:
/*
 * Эта функция нужна для отладки кода. При вызове
 * отправляет по UART сообщение об ошибке с путем к файлу
 * и номером строки, где данная функция была вызвана
 */
void SentError(uint8_t *file, uint32_t line) {
 8006270:	b590      	push	{r4, r7, lr}
 8006272:	b0b5      	sub	sp, #212	; 0xd4
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
	char buf[200] = { 0 };
 800627a:	2300      	movs	r3, #0
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	f107 030c 	add.w	r3, r7, #12
 8006282:	22c4      	movs	r2, #196	; 0xc4
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f003 f985 	bl	8009596 <memset>
	sprintf(buf, "\r Exception: Wrong parameters value: file %s on line %d\r\n", file, (int) line);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	f107 0008 	add.w	r0, r7, #8
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	4911      	ldr	r1, [pc, #68]	; (80062dc <SentError+0x6c>)
 8006296:	f004 f905 	bl	800a4a4 <siprintf>
	while (HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf),10 * strlen(buf)) != HAL_OK);
 800629a:	bf00      	nop
 800629c:	f107 0308 	add.w	r3, r7, #8
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7f9 ff55 	bl	8000150 <strlen>
 80062a6:	4603      	mov	r3, r0
 80062a8:	b29c      	uxth	r4, r3
 80062aa:	f107 0308 	add.w	r3, r7, #8
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7f9 ff4e 	bl	8000150 <strlen>
 80062b4:	4602      	mov	r2, r0
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	f107 0108 	add.w	r1, r7, #8
 80062c2:	4622      	mov	r2, r4
 80062c4:	4806      	ldr	r0, [pc, #24]	; (80062e0 <SentError+0x70>)
 80062c6:	f7ff fa6a 	bl	800579e <HAL_UART_Transmit>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e5      	bne.n	800629c <SentError+0x2c>
	HAL_NVIC_SystemReset();
 80062d0:	f7fd fb61 	bl	8003996 <HAL_NVIC_SystemReset>
}
 80062d4:	bf00      	nop
 80062d6:	37d4      	adds	r7, #212	; 0xd4
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd90      	pop	{r4, r7, pc}
 80062dc:	0800defc 	.word	0x0800defc
 80062e0:	20003b04 	.word	0x20003b04

080062e4 <SentResultActionResponse>:

void SentResultActionResponse(struct TypeStruct typeStruct, char err[255], bool stat) {
 80062e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e6:	b08b      	sub	sp, #44	; 0x2c
 80062e8:	af04      	add	r7, sp, #16
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	4613      	mov	r3, r2
 80062f0:	71fb      	strb	r3, [r7, #7]
 80062f2:	466b      	mov	r3, sp
 80062f4:	461e      	mov	r6, r3
	char resultState[19 + strlen(err)];
 80062f6:	68b8      	ldr	r0, [r7, #8]
 80062f8:	f7f9 ff2a 	bl	8000150 <strlen>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f103 0413 	add.w	r4, r3, #19
 8006302:	4623      	mov	r3, r4
 8006304:	3b01      	subs	r3, #1
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	4620      	mov	r0, r4
 800630a:	f04f 0100 	mov.w	r1, #0
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	f04f 0300 	mov.w	r3, #0
 8006316:	00cb      	lsls	r3, r1, #3
 8006318:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800631c:	00c2      	lsls	r2, r0, #3
 800631e:	4620      	mov	r0, r4
 8006320:	f04f 0100 	mov.w	r1, #0
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	00cb      	lsls	r3, r1, #3
 800632e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006332:	00c2      	lsls	r2, r0, #3
 8006334:	1de3      	adds	r3, r4, #7
 8006336:	08db      	lsrs	r3, r3, #3
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	ebad 0d03 	sub.w	sp, sp, r3
 800633e:	ab04      	add	r3, sp, #16
 8006340:	3300      	adds	r3, #0
 8006342:	613b      	str	r3, [r7, #16]

	sprintf(
 8006344:	6938      	ldr	r0, [r7, #16]
	        resultState,
	        "R_%c%c_%c%c*ERR=%s-STAT=%d",
	         typeStruct.type[0],
 8006346:	7b3b      	ldrb	r3, [r7, #12]
	sprintf(
 8006348:	461c      	mov	r4, r3
	         typeStruct.type[1],
 800634a:	7b7b      	ldrb	r3, [r7, #13]
	sprintf(
 800634c:	461d      	mov	r5, r3
	         typeStruct.subType[0],
 800634e:	7bbb      	ldrb	r3, [r7, #14]
	sprintf(
 8006350:	461a      	mov	r2, r3
	         typeStruct.subType[1],
 8006352:	7bfb      	ldrb	r3, [r7, #15]
	sprintf(
 8006354:	4619      	mov	r1, r3
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	9303      	str	r3, [sp, #12]
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	9302      	str	r3, [sp, #8]
 800635e:	9101      	str	r1, [sp, #4]
 8006360:	9200      	str	r2, [sp, #0]
 8006362:	462b      	mov	r3, r5
 8006364:	4622      	mov	r2, r4
 8006366:	4910      	ldr	r1, [pc, #64]	; (80063a8 <SentResultActionResponse+0xc4>)
 8006368:	f004 f89c 	bl	800a4a4 <siprintf>
	         err,
	         stat);

	while (
 800636c:	bf00      	nop
			HAL_UART_Transmit(&huart1, (uint8_t*) resultState, strlen(resultState), 10 * strlen(resultState)
 800636e:	693c      	ldr	r4, [r7, #16]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4618      	mov	r0, r3
 8006374:	f7f9 feec 	bl	8000150 <strlen>
 8006378:	4603      	mov	r3, r0
 800637a:	b29d      	uxth	r5, r3
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	4618      	mov	r0, r3
 8006380:	f7f9 fee6 	bl	8000150 <strlen>
 8006384:	4602      	mov	r2, r0
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	462a      	mov	r2, r5
 8006390:	4621      	mov	r1, r4
 8006392:	4806      	ldr	r0, [pc, #24]	; (80063ac <SentResultActionResponse+0xc8>)
 8006394:	f7ff fa03 	bl	800579e <HAL_UART_Transmit>
 8006398:	4603      	mov	r3, r0
	while (
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e7      	bne.n	800636e <SentResultActionResponse+0x8a>
 800639e:	46b5      	mov	sp, r6
	) != HAL_OK);
}
 80063a0:	bf00      	nop
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a8:	0800df38 	.word	0x0800df38
 80063ac:	20003b04 	.word	0x20003b04

080063b0 <SendResponseMeasure>:

// отправляем команду об измерении
/// id - айди операции
/// x - измерения по х (длина волны/время)
/// y - измерения по y (счет/токовый сигнал)
void SendResponseMeasure(uint16_t id, uint16_t x, uint32_t y){
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af02      	add	r7, sp, #8
 80063b6:	4603      	mov	r3, r0
 80063b8:	603a      	str	r2, [r7, #0]
 80063ba:	80fb      	strh	r3, [r7, #6]
 80063bc:	460b      	mov	r3, r1
 80063be:	80bb      	strh	r3, [r7, #4]
    static char measureResult[20];
    sprintf(measureResult, "M_%d-%d-%d", id, x, y);
 80063c0:	88fa      	ldrh	r2, [r7, #6]
 80063c2:	88b9      	ldrh	r1, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	460b      	mov	r3, r1
 80063ca:	4909      	ldr	r1, [pc, #36]	; (80063f0 <SendResponseMeasure+0x40>)
 80063cc:	4809      	ldr	r0, [pc, #36]	; (80063f4 <SendResponseMeasure+0x44>)
 80063ce:	f004 f869 	bl	800a4a4 <siprintf>
    HAL_UART_Transmit_IT(&huart1, measureResult, strlen(measureResult));
 80063d2:	4808      	ldr	r0, [pc, #32]	; (80063f4 <SendResponseMeasure+0x44>)
 80063d4:	f7f9 febc 	bl	8000150 <strlen>
 80063d8:	4603      	mov	r3, r0
 80063da:	b29b      	uxth	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	4905      	ldr	r1, [pc, #20]	; (80063f4 <SendResponseMeasure+0x44>)
 80063e0:	4805      	ldr	r0, [pc, #20]	; (80063f8 <SendResponseMeasure+0x48>)
 80063e2:	f7ff fb10 	bl	8005a06 <HAL_UART_Transmit_IT>
}
 80063e6:	bf00      	nop
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	0800df54 	.word	0x0800df54
 80063f4:	20000210 	.word	0x20000210
 80063f8:	20003b04 	.word	0x20003b04

080063fc <SendResponseStop>:

// отправляем команду об остановке измерения окончательной
void SendResponseStop(uint16_t id){
 80063fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	80fb      	strh	r3, [r7, #6]
 8006406:	466b      	mov	r3, sp
 8006408:	461e      	mov	r6, r3

    char resultState[snprintf( NULL, 0, "%d", id ) + 7];
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <SendResponseStop+0xa4>)
 800640e:	2100      	movs	r1, #0
 8006410:	2000      	movs	r0, #0
 8006412:	f004 f813 	bl	800a43c <sniprintf>
 8006416:	4603      	mov	r3, r0
 8006418:	1ddc      	adds	r4, r3, #7
 800641a:	1e63      	subs	r3, r4, #1
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	4623      	mov	r3, r4
 8006420:	4618      	mov	r0, r3
 8006422:	f04f 0100 	mov.w	r1, #0
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	f04f 0300 	mov.w	r3, #0
 800642e:	00cb      	lsls	r3, r1, #3
 8006430:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006434:	00c2      	lsls	r2, r0, #3
 8006436:	4623      	mov	r3, r4
 8006438:	4618      	mov	r0, r3
 800643a:	f04f 0100 	mov.w	r1, #0
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	00cb      	lsls	r3, r1, #3
 8006448:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800644c:	00c2      	lsls	r2, r0, #3
 800644e:	4623      	mov	r3, r4
 8006450:	3307      	adds	r3, #7
 8006452:	08db      	lsrs	r3, r3, #3
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	ebad 0d03 	sub.w	sp, sp, r3
 800645a:	466b      	mov	r3, sp
 800645c:	3300      	adds	r3, #0
 800645e:	60bb      	str	r3, [r7, #8]

    sprintf(resultState, "M_STOP_%d", id);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	88fa      	ldrh	r2, [r7, #6]
 8006464:	490f      	ldr	r1, [pc, #60]	; (80064a4 <SendResponseStop+0xa8>)
 8006466:	4618      	mov	r0, r3
 8006468:	f004 f81c 	bl	800a4a4 <siprintf>

    HAL_UART_Transmit(&huart1, (uint8_t*) resultState, strlen(resultState),10 * strlen(resultState));
 800646c:	68bc      	ldr	r4, [r7, #8]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4618      	mov	r0, r3
 8006472:	f7f9 fe6d 	bl	8000150 <strlen>
 8006476:	4603      	mov	r3, r0
 8006478:	b29d      	uxth	r5, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	4618      	mov	r0, r3
 800647e:	f7f9 fe67 	bl	8000150 <strlen>
 8006482:	4602      	mov	r2, r0
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	462a      	mov	r2, r5
 800648e:	4621      	mov	r1, r4
 8006490:	4805      	ldr	r0, [pc, #20]	; (80064a8 <SendResponseStop+0xac>)
 8006492:	f7ff f984 	bl	800579e <HAL_UART_Transmit>
 8006496:	46b5      	mov	sp, r6
}
 8006498:	bf00      	nop
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064a0:	0800df60 	.word	0x0800df60
 80064a4:	0800df64 	.word	0x0800df64
 80064a8:	20003b04 	.word	0x20003b04

080064ac <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064b2:	f3ef 8305 	mrs	r3, IPSR
 80064b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80064b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10f      	bne.n	80064de <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064be:	f3ef 8310 	mrs	r3, PRIMASK
 80064c2:	607b      	str	r3, [r7, #4]
  return(result);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d109      	bne.n	80064de <osKernelInitialize+0x32>
 80064ca:	4b10      	ldr	r3, [pc, #64]	; (800650c <osKernelInitialize+0x60>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d109      	bne.n	80064e6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064d2:	f3ef 8311 	mrs	r3, BASEPRI
 80064d6:	603b      	str	r3, [r7, #0]
  return(result);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80064de:	f06f 0305 	mvn.w	r3, #5
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	e00c      	b.n	8006500 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064e6:	4b09      	ldr	r3, [pc, #36]	; (800650c <osKernelInitialize+0x60>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d105      	bne.n	80064fa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80064ee:	4b07      	ldr	r3, [pc, #28]	; (800650c <osKernelInitialize+0x60>)
 80064f0:	2201      	movs	r2, #1
 80064f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	e002      	b.n	8006500 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80064fa:	f04f 33ff 	mov.w	r3, #4294967295
 80064fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006500:	68fb      	ldr	r3, [r7, #12]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	bc80      	pop	{r7}
 800650a:	4770      	bx	lr
 800650c:	20000224 	.word	0x20000224

08006510 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006516:	f3ef 8305 	mrs	r3, IPSR
 800651a:	60bb      	str	r3, [r7, #8]
  return(result);
 800651c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10f      	bne.n	8006542 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006522:	f3ef 8310 	mrs	r3, PRIMASK
 8006526:	607b      	str	r3, [r7, #4]
  return(result);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d109      	bne.n	8006542 <osKernelStart+0x32>
 800652e:	4b11      	ldr	r3, [pc, #68]	; (8006574 <osKernelStart+0x64>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d109      	bne.n	800654a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006536:	f3ef 8311 	mrs	r3, BASEPRI
 800653a:	603b      	str	r3, [r7, #0]
  return(result);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006542:	f06f 0305 	mvn.w	r3, #5
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	e00e      	b.n	8006568 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800654a:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <osKernelStart+0x64>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d107      	bne.n	8006562 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006552:	4b08      	ldr	r3, [pc, #32]	; (8006574 <osKernelStart+0x64>)
 8006554:	2202      	movs	r2, #2
 8006556:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006558:	f001 faa8 	bl	8007aac <vTaskStartScheduler>
      stat = osOK;
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e002      	b.n	8006568 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006562:	f04f 33ff 	mov.w	r3, #4294967295
 8006566:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006568:	68fb      	ldr	r3, [r7, #12]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000224 	.word	0x20000224

08006578 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006578:	b580      	push	{r7, lr}
 800657a:	b092      	sub	sp, #72	; 0x48
 800657c:	af04      	add	r7, sp, #16
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006588:	f3ef 8305 	mrs	r3, IPSR
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006590:	2b00      	cmp	r3, #0
 8006592:	f040 8094 	bne.w	80066be <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006596:	f3ef 8310 	mrs	r3, PRIMASK
 800659a:	623b      	str	r3, [r7, #32]
  return(result);
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f040 808d 	bne.w	80066be <osThreadNew+0x146>
 80065a4:	4b48      	ldr	r3, [pc, #288]	; (80066c8 <osThreadNew+0x150>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d106      	bne.n	80065ba <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065ac:	f3ef 8311 	mrs	r3, BASEPRI
 80065b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f040 8082 	bne.w	80066be <osThreadNew+0x146>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d07e      	beq.n	80066be <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80065c0:	2380      	movs	r3, #128	; 0x80
 80065c2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80065c4:	2318      	movs	r3, #24
 80065c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80065c8:	2300      	movs	r3, #0
 80065ca:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80065cc:	f107 031b 	add.w	r3, r7, #27
 80065d0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80065d2:	f04f 33ff 	mov.w	r3, #4294967295
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d045      	beq.n	800666a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <osThreadNew+0x74>
        name = attr->name;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d008      	beq.n	8006612 <osThreadNew+0x9a>
 8006600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006602:	2b38      	cmp	r3, #56	; 0x38
 8006604:	d805      	bhi.n	8006612 <osThreadNew+0x9a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <osThreadNew+0x9e>
        return (NULL);
 8006612:	2300      	movs	r3, #0
 8006614:	e054      	b.n	80066c0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	089b      	lsrs	r3, r3, #2
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <osThreadNew+0xd4>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2bbb      	cmp	r3, #187	; 0xbb
 8006634:	d90a      	bls.n	800664c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800663a:	2b00      	cmp	r3, #0
 800663c:	d006      	beq.n	800664c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <osThreadNew+0xd4>
        mem = 1;
 8006646:	2301      	movs	r3, #1
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
 800664a:	e010      	b.n	800666e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10c      	bne.n	800666e <osThreadNew+0xf6>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d108      	bne.n	800666e <osThreadNew+0xf6>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d104      	bne.n	800666e <osThreadNew+0xf6>
          mem = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
 8006668:	e001      	b.n	800666e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	2b01      	cmp	r3, #1
 8006672:	d110      	bne.n	8006696 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800667c:	9202      	str	r2, [sp, #8]
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006688:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f001 f82a 	bl	80076e4 <xTaskCreateStatic>
 8006690:	4603      	mov	r3, r0
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	e013      	b.n	80066be <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	2b00      	cmp	r3, #0
 800669a:	d110      	bne.n	80066be <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	b29a      	uxth	r2, r3
 80066a0:	f107 0314 	add.w	r3, r7, #20
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f001 f874 	bl	800779c <xTaskCreate>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d001      	beq.n	80066be <osThreadNew+0x146>
          hTask = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066be:	697b      	ldr	r3, [r7, #20]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3738      	adds	r7, #56	; 0x38
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20000224 	.word	0x20000224

080066cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066d4:	f3ef 8305 	mrs	r3, IPSR
 80066d8:	613b      	str	r3, [r7, #16]
  return(result);
 80066da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10f      	bne.n	8006700 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066e0:	f3ef 8310 	mrs	r3, PRIMASK
 80066e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d109      	bne.n	8006700 <osDelay+0x34>
 80066ec:	4b0d      	ldr	r3, [pc, #52]	; (8006724 <osDelay+0x58>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d109      	bne.n	8006708 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066f4:	f3ef 8311 	mrs	r3, BASEPRI
 80066f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <osDelay+0x3c>
    stat = osErrorISR;
 8006700:	f06f 0305 	mvn.w	r3, #5
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	e007      	b.n	8006718 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 f996 	bl	8007a44 <vTaskDelay>
    }
  }

  return (stat);
 8006718:	697b      	ldr	r3, [r7, #20]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20000224 	.word	0x20000224

08006728 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006728:	b580      	push	{r7, lr}
 800672a:	b08c      	sub	sp, #48	; 0x30
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006734:	2300      	movs	r3, #0
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006738:	f3ef 8305 	mrs	r3, IPSR
 800673c:	61bb      	str	r3, [r7, #24]
  return(result);
 800673e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006740:	2b00      	cmp	r3, #0
 8006742:	f040 8086 	bne.w	8006852 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006746:	f3ef 8310 	mrs	r3, PRIMASK
 800674a:	617b      	str	r3, [r7, #20]
  return(result);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d17f      	bne.n	8006852 <osSemaphoreNew+0x12a>
 8006752:	4b42      	ldr	r3, [pc, #264]	; (800685c <osSemaphoreNew+0x134>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b02      	cmp	r3, #2
 8006758:	d105      	bne.n	8006766 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800675a:	f3ef 8311 	mrs	r3, BASEPRI
 800675e:	613b      	str	r3, [r7, #16]
  return(result);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d175      	bne.n	8006852 <osSemaphoreNew+0x12a>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d072      	beq.n	8006852 <osSemaphoreNew+0x12a>
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	429a      	cmp	r2, r3
 8006772:	d86e      	bhi.n	8006852 <osSemaphoreNew+0x12a>
    mem = -1;
 8006774:	f04f 33ff 	mov.w	r3, #4294967295
 8006778:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d015      	beq.n	80067ac <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d006      	beq.n	8006796 <osSemaphoreNew+0x6e>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	2b4f      	cmp	r3, #79	; 0x4f
 800678e:	d902      	bls.n	8006796 <osSemaphoreNew+0x6e>
        mem = 1;
 8006790:	2301      	movs	r3, #1
 8006792:	623b      	str	r3, [r7, #32]
 8006794:	e00c      	b.n	80067b0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d108      	bne.n	80067b0 <osSemaphoreNew+0x88>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d104      	bne.n	80067b0 <osSemaphoreNew+0x88>
          mem = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	623b      	str	r3, [r7, #32]
 80067aa:	e001      	b.n	80067b0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d04c      	beq.n	8006852 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d128      	bne.n	8006810 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d10a      	bne.n	80067da <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	2203      	movs	r2, #3
 80067ca:	9200      	str	r2, [sp, #0]
 80067cc:	2200      	movs	r2, #0
 80067ce:	2100      	movs	r1, #0
 80067d0:	2001      	movs	r0, #1
 80067d2:	f000 fa15 	bl	8006c00 <xQueueGenericCreateStatic>
 80067d6:	6278      	str	r0, [r7, #36]	; 0x24
 80067d8:	e005      	b.n	80067e6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80067da:	2203      	movs	r2, #3
 80067dc:	2100      	movs	r1, #0
 80067de:	2001      	movs	r0, #1
 80067e0:	f000 fa85 	bl	8006cee <xQueueGenericCreate>
 80067e4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d022      	beq.n	8006832 <osSemaphoreNew+0x10a>
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d01f      	beq.n	8006832 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80067f2:	2300      	movs	r3, #0
 80067f4:	2200      	movs	r2, #0
 80067f6:	2100      	movs	r1, #0
 80067f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067fa:	f000 fb43 	bl	8006e84 <xQueueGenericSend>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b01      	cmp	r3, #1
 8006802:	d016      	beq.n	8006832 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006806:	f000 fdb3 	bl	8007370 <vQueueDelete>
            hSemaphore = NULL;
 800680a:	2300      	movs	r3, #0
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
 800680e:	e010      	b.n	8006832 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d108      	bne.n	8006828 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	461a      	mov	r2, r3
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 fac6 	bl	8006db0 <xQueueCreateCountingSemaphoreStatic>
 8006824:	6278      	str	r0, [r7, #36]	; 0x24
 8006826:	e004      	b.n	8006832 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 faf7 	bl	8006e1e <xQueueCreateCountingSemaphore>
 8006830:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00c      	beq.n	8006852 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <osSemaphoreNew+0x11e>
          name = attr->name;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	e001      	b.n	800684a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800684a:	69f9      	ldr	r1, [r7, #28]
 800684c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800684e:	f000 fec3 	bl	80075d8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006854:	4618      	mov	r0, r3
 8006856:	3728      	adds	r7, #40	; 0x28
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20000224 	.word	0x20000224

08006860 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006860:	b580      	push	{r7, lr}
 8006862:	b08c      	sub	sp, #48	; 0x30
 8006864:	af02      	add	r7, sp, #8
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800686c:	2300      	movs	r3, #0
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006870:	f3ef 8305 	mrs	r3, IPSR
 8006874:	61bb      	str	r3, [r7, #24]
  return(result);
 8006876:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006878:	2b00      	cmp	r3, #0
 800687a:	d16f      	bne.n	800695c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800687c:	f3ef 8310 	mrs	r3, PRIMASK
 8006880:	617b      	str	r3, [r7, #20]
  return(result);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d169      	bne.n	800695c <osMessageQueueNew+0xfc>
 8006888:	4b37      	ldr	r3, [pc, #220]	; (8006968 <osMessageQueueNew+0x108>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b02      	cmp	r3, #2
 800688e:	d105      	bne.n	800689c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006890:	f3ef 8311 	mrs	r3, BASEPRI
 8006894:	613b      	str	r3, [r7, #16]
  return(result);
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d15f      	bne.n	800695c <osMessageQueueNew+0xfc>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d05c      	beq.n	800695c <osMessageQueueNew+0xfc>
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d059      	beq.n	800695c <osMessageQueueNew+0xfc>
    mem = -1;
 80068a8:	f04f 33ff 	mov.w	r3, #4294967295
 80068ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d029      	beq.n	8006908 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d012      	beq.n	80068e2 <osMessageQueueNew+0x82>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	2b4f      	cmp	r3, #79	; 0x4f
 80068c2:	d90e      	bls.n	80068e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68b9      	ldr	r1, [r7, #8]
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	429a      	cmp	r2, r3
 80068da:	d302      	bcc.n	80068e2 <osMessageQueueNew+0x82>
        mem = 1;
 80068dc:	2301      	movs	r3, #1
 80068de:	623b      	str	r3, [r7, #32]
 80068e0:	e014      	b.n	800690c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d110      	bne.n	800690c <osMessageQueueNew+0xac>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10c      	bne.n	800690c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d108      	bne.n	800690c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d104      	bne.n	800690c <osMessageQueueNew+0xac>
          mem = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	623b      	str	r3, [r7, #32]
 8006906:	e001      	b.n	800690c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d10b      	bne.n	800692a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	2100      	movs	r1, #0
 800691c:	9100      	str	r1, [sp, #0]
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 f96d 	bl	8006c00 <xQueueGenericCreateStatic>
 8006926:	6278      	str	r0, [r7, #36]	; 0x24
 8006928:	e008      	b.n	800693c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d105      	bne.n	800693c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006930:	2200      	movs	r2, #0
 8006932:	68b9      	ldr	r1, [r7, #8]
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 f9da 	bl	8006cee <xQueueGenericCreate>
 800693a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00c      	beq.n	800695c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	61fb      	str	r3, [r7, #28]
 800694e:	e001      	b.n	8006954 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006950:	2300      	movs	r3, #0
 8006952:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006954:	69f9      	ldr	r1, [r7, #28]
 8006956:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006958:	f000 fe3e 	bl	80075d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800695e:	4618      	mov	r0, r3
 8006960:	3728      	adds	r7, #40	; 0x28
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20000224 	.word	0x20000224

0800696c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4a06      	ldr	r2, [pc, #24]	; (8006994 <vApplicationGetIdleTaskMemory+0x28>)
 800697c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4a05      	ldr	r2, [pc, #20]	; (8006998 <vApplicationGetIdleTaskMemory+0x2c>)
 8006982:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2280      	movs	r2, #128	; 0x80
 8006988:	601a      	str	r2, [r3, #0]
}
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr
 8006994:	20000228 	.word	0x20000228
 8006998:	200002e4 	.word	0x200002e4

0800699c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4a07      	ldr	r2, [pc, #28]	; (80069c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80069ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4a06      	ldr	r2, [pc, #24]	; (80069cc <vApplicationGetTimerTaskMemory+0x30>)
 80069b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069ba:	601a      	str	r2, [r3, #0]
}
 80069bc:	bf00      	nop
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc80      	pop	{r7}
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	200004e4 	.word	0x200004e4
 80069cc:	200005a0 	.word	0x200005a0

080069d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f103 0208 	add.w	r2, r3, #8
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f04f 32ff 	mov.w	r2, #4294967295
 80069e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f103 0208 	add.w	r2, r3, #8
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f103 0208 	add.w	r2, r3, #8
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bc80      	pop	{r7}
 8006a0c:	4770      	bx	lr

08006a0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr

08006a26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a26:	b480      	push	{r7}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	601a      	str	r2, [r3, #0]
}
 8006a62:	bf00      	nop
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr

08006a6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a82:	d103      	bne.n	8006a8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	60fb      	str	r3, [r7, #12]
 8006a8a:	e00c      	b.n	8006aa6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3308      	adds	r3, #8
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	e002      	b.n	8006a9a <vListInsert+0x2e>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d2f6      	bcs.n	8006a94 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	601a      	str	r2, [r3, #0]
}
 8006ad2:	bf00      	nop
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr

08006adc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6892      	ldr	r2, [r2, #8]
 8006af2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6852      	ldr	r2, [r2, #4]
 8006afc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d103      	bne.n	8006b10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	1e5a      	subs	r2, r3, #1
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	4770      	bx	lr
	...

08006b30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b5a:	f002 f90f 	bl	8008d7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b66:	68f9      	ldr	r1, [r7, #12]
 8006b68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b6a:	fb01 f303 	mul.w	r3, r1, r3
 8006b6e:	441a      	add	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	68f9      	ldr	r1, [r7, #12]
 8006b8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b90:	fb01 f303 	mul.w	r3, r1, r3
 8006b94:	441a      	add	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	22ff      	movs	r2, #255	; 0xff
 8006b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	22ff      	movs	r2, #255	; 0xff
 8006ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d114      	bne.n	8006bda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01a      	beq.n	8006bee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3310      	adds	r3, #16
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f001 fa37 	bl	8008030 <xTaskRemoveFromEventList>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d012      	beq.n	8006bee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006bc8:	4b0c      	ldr	r3, [pc, #48]	; (8006bfc <xQueueGenericReset+0xcc>)
 8006bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	e009      	b.n	8006bee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3310      	adds	r3, #16
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff fef6 	bl	80069d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3324      	adds	r3, #36	; 0x24
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff fef1 	bl	80069d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006bee:	f002 f8f5 	bl	8008ddc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006bf2:	2301      	movs	r3, #1
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	e000ed04 	.word	0xe000ed04

08006c00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08e      	sub	sp, #56	; 0x38
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10a      	bne.n	8006c46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c42:	bf00      	nop
 8006c44:	e7fe      	b.n	8006c44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <xQueueGenericCreateStatic+0x52>
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <xQueueGenericCreateStatic+0x56>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e000      	b.n	8006c58 <xQueueGenericCreateStatic+0x58>
 8006c56:	2300      	movs	r3, #0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	623b      	str	r3, [r7, #32]
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d102      	bne.n	8006c7e <xQueueGenericCreateStatic+0x7e>
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <xQueueGenericCreateStatic+0x82>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <xQueueGenericCreateStatic+0x84>
 8006c82:	2300      	movs	r3, #0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	61fb      	str	r3, [r7, #28]
}
 8006c9a:	bf00      	nop
 8006c9c:	e7fe      	b.n	8006c9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c9e:	2350      	movs	r3, #80	; 0x50
 8006ca0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b50      	cmp	r3, #80	; 0x50
 8006ca6:	d00a      	beq.n	8006cbe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	61bb      	str	r3, [r7, #24]
}
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00d      	beq.n	8006ce4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cd0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 f843 	bl	8006d6a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3730      	adds	r7, #48	; 0x30
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b08a      	sub	sp, #40	; 0x28
 8006cf2:	af02      	add	r7, sp, #8
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10a      	bne.n	8006d18 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	613b      	str	r3, [r7, #16]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d102      	bne.n	8006d24 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61fb      	str	r3, [r7, #28]
 8006d22:	e004      	b.n	8006d2e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	fb02 f303 	mul.w	r3, r2, r3
 8006d2c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	3350      	adds	r3, #80	; 0x50
 8006d32:	4618      	mov	r0, r3
 8006d34:	f002 f922 	bl	8008f7c <pvPortMalloc>
 8006d38:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00f      	beq.n	8006d60 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	3350      	adds	r3, #80	; 0x50
 8006d44:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d4e:	79fa      	ldrb	r2, [r7, #7]
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	4613      	mov	r3, r2
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f805 	bl	8006d6a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006d60:	69bb      	ldr	r3, [r7, #24]
	}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3720      	adds	r7, #32
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	607a      	str	r2, [r7, #4]
 8006d76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	e002      	b.n	8006d8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d98:	2101      	movs	r1, #1
 8006d9a:	69b8      	ldr	r0, [r7, #24]
 8006d9c:	f7ff fec8 	bl	8006b30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	78fa      	ldrb	r2, [r7, #3]
 8006da4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006da8:	bf00      	nop
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08a      	sub	sp, #40	; 0x28
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10a      	bne.n	8006dd8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	61bb      	str	r3, [r7, #24]
}
 8006dd4:	bf00      	nop
 8006dd6:	e7fe      	b.n	8006dd6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d90a      	bls.n	8006df6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	617b      	str	r3, [r7, #20]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006df6:	2302      	movs	r3, #2
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2100      	movs	r1, #0
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff fefd 	bl	8006c00 <xQueueGenericCreateStatic>
 8006e06:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e14:	69fb      	ldr	r3, [r7, #28]
	}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3720      	adds	r7, #32
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b086      	sub	sp, #24
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10a      	bne.n	8006e44 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	613b      	str	r3, [r7, #16]
}
 8006e40:	bf00      	nop
 8006e42:	e7fe      	b.n	8006e42 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d90a      	bls.n	8006e62 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	60fb      	str	r3, [r7, #12]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006e62:	2202      	movs	r2, #2
 8006e64:	2100      	movs	r1, #0
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff ff41 	bl	8006cee <xQueueGenericCreate>
 8006e6c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e7a:	697b      	ldr	r3, [r7, #20]
	}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08e      	sub	sp, #56	; 0x38
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e92:	2300      	movs	r3, #0
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <xQueueGenericSend+0x32>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d103      	bne.n	8006ec4 <xQueueGenericSend+0x40>
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <xQueueGenericSend+0x44>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <xQueueGenericSend+0x46>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <xQueueGenericSend+0x60>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ee0:	bf00      	nop
 8006ee2:	e7fe      	b.n	8006ee2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d103      	bne.n	8006ef2 <xQueueGenericSend+0x6e>
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d101      	bne.n	8006ef6 <xQueueGenericSend+0x72>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <xQueueGenericSend+0x74>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <xQueueGenericSend+0x8e>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	623b      	str	r3, [r7, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f12:	f001 fa53 	bl	80083bc <xTaskGetSchedulerState>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <xQueueGenericSend+0x9e>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <xQueueGenericSend+0xa2>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <xQueueGenericSend+0xa4>
 8006f26:	2300      	movs	r3, #0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <xQueueGenericSend+0xbe>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	61fb      	str	r3, [r7, #28]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f42:	f001 ff1b 	bl	8008d7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d302      	bcc.n	8006f58 <xQueueGenericSend+0xd4>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d129      	bne.n	8006fac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	68b9      	ldr	r1, [r7, #8]
 8006f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f5e:	f000 fa2a 	bl	80073b6 <prvCopyDataToQueue>
 8006f62:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d010      	beq.n	8006f8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	3324      	adds	r3, #36	; 0x24
 8006f70:	4618      	mov	r0, r3
 8006f72:	f001 f85d 	bl	8008030 <xTaskRemoveFromEventList>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d013      	beq.n	8006fa4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f7c:	4b3f      	ldr	r3, [pc, #252]	; (800707c <xQueueGenericSend+0x1f8>)
 8006f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	e00a      	b.n	8006fa4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d007      	beq.n	8006fa4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f94:	4b39      	ldr	r3, [pc, #228]	; (800707c <xQueueGenericSend+0x1f8>)
 8006f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fa4:	f001 ff1a 	bl	8008ddc <vPortExitCritical>
				return pdPASS;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e063      	b.n	8007074 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d103      	bne.n	8006fba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fb2:	f001 ff13 	bl	8008ddc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e05c      	b.n	8007074 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d106      	bne.n	8006fce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fc0:	f107 0314 	add.w	r3, r7, #20
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f001 f897 	bl	80080f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fce:	f001 ff05 	bl	8008ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fd2:	f000 fddb 	bl	8007b8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fd6:	f001 fed1 	bl	8008d7c <vPortEnterCritical>
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fe0:	b25b      	sxtb	r3, r3
 8006fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe6:	d103      	bne.n	8006ff0 <xQueueGenericSend+0x16c>
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ff6:	b25b      	sxtb	r3, r3
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d103      	bne.n	8007006 <xQueueGenericSend+0x182>
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007006:	f001 fee9 	bl	8008ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800700a:	1d3a      	adds	r2, r7, #4
 800700c:	f107 0314 	add.w	r3, r7, #20
 8007010:	4611      	mov	r1, r2
 8007012:	4618      	mov	r0, r3
 8007014:	f001 f886 	bl	8008124 <xTaskCheckForTimeOut>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d124      	bne.n	8007068 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800701e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007020:	f000 fac1 	bl	80075a6 <prvIsQueueFull>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d018      	beq.n	800705c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	3310      	adds	r3, #16
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	4611      	mov	r1, r2
 8007032:	4618      	mov	r0, r3
 8007034:	f000 ffac 	bl	8007f90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800703a:	f000 fa4c 	bl	80074d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800703e:	f000 fdb3 	bl	8007ba8 <xTaskResumeAll>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	f47f af7c 	bne.w	8006f42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800704a:	4b0c      	ldr	r3, [pc, #48]	; (800707c <xQueueGenericSend+0x1f8>)
 800704c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	e772      	b.n	8006f42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800705c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800705e:	f000 fa3a 	bl	80074d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007062:	f000 fda1 	bl	8007ba8 <xTaskResumeAll>
 8007066:	e76c      	b.n	8006f42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800706a:	f000 fa34 	bl	80074d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800706e:	f000 fd9b 	bl	8007ba8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007072:	2300      	movs	r3, #0
		}
	}
}
 8007074:	4618      	mov	r0, r3
 8007076:	3738      	adds	r7, #56	; 0x38
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	e000ed04 	.word	0xe000ed04

08007080 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08e      	sub	sp, #56	; 0x38
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10a      	bne.n	80070ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070aa:	bf00      	nop
 80070ac:	e7fe      	b.n	80070ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d103      	bne.n	80070bc <xQueueGenericSendFromISR+0x3c>
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <xQueueGenericSendFromISR+0x40>
 80070bc:	2301      	movs	r3, #1
 80070be:	e000      	b.n	80070c2 <xQueueGenericSendFromISR+0x42>
 80070c0:	2300      	movs	r3, #0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10a      	bne.n	80070dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	623b      	str	r3, [r7, #32]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d103      	bne.n	80070ea <xQueueGenericSendFromISR+0x6a>
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d101      	bne.n	80070ee <xQueueGenericSendFromISR+0x6e>
 80070ea:	2301      	movs	r3, #1
 80070ec:	e000      	b.n	80070f0 <xQueueGenericSendFromISR+0x70>
 80070ee:	2300      	movs	r3, #0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	61fb      	str	r3, [r7, #28]
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800710a:	f001 fef9 	bl	8008f00 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800710e:	f3ef 8211 	mrs	r2, BASEPRI
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	61ba      	str	r2, [r7, #24]
 8007124:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007126:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007128:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007132:	429a      	cmp	r2, r3
 8007134:	d302      	bcc.n	800713c <xQueueGenericSendFromISR+0xbc>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d12c      	bne.n	8007196 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800714c:	f000 f933 	bl	80073b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007150:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007158:	d112      	bne.n	8007180 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	2b00      	cmp	r3, #0
 8007160:	d016      	beq.n	8007190 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	3324      	adds	r3, #36	; 0x24
 8007166:	4618      	mov	r0, r3
 8007168:	f000 ff62 	bl	8008030 <xTaskRemoveFromEventList>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00e      	beq.n	8007190 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	e007      	b.n	8007190 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007180:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007184:	3301      	adds	r3, #1
 8007186:	b2db      	uxtb	r3, r3
 8007188:	b25a      	sxtb	r2, r3
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007190:	2301      	movs	r3, #1
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007194:	e001      	b.n	800719a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007196:	2300      	movs	r3, #0
 8007198:	637b      	str	r3, [r7, #52]	; 0x34
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3738      	adds	r7, #56	; 0x38
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08c      	sub	sp, #48	; 0x30
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071bc:	2300      	movs	r3, #0
 80071be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <xQueueReceive+0x30>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	623b      	str	r3, [r7, #32]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d103      	bne.n	80071ee <xQueueReceive+0x3e>
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <xQueueReceive+0x42>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e000      	b.n	80071f4 <xQueueReceive+0x44>
 80071f2:	2300      	movs	r3, #0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <xQueueReceive+0x5e>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	61fb      	str	r3, [r7, #28]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800720e:	f001 f8d5 	bl	80083bc <xTaskGetSchedulerState>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <xQueueReceive+0x6e>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <xQueueReceive+0x72>
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <xQueueReceive+0x74>
 8007222:	2300      	movs	r3, #0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <xQueueReceive+0x8e>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	61bb      	str	r3, [r7, #24]
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800723e:	f001 fd9d 	bl	8008d7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007246:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	2b00      	cmp	r3, #0
 800724c:	d01f      	beq.n	800728e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800724e:	68b9      	ldr	r1, [r7, #8]
 8007250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007252:	f000 f91a 	bl	800748a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	1e5a      	subs	r2, r3, #1
 800725a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00f      	beq.n	8007286 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	3310      	adds	r3, #16
 800726a:	4618      	mov	r0, r3
 800726c:	f000 fee0 	bl	8008030 <xTaskRemoveFromEventList>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d007      	beq.n	8007286 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007276:	4b3d      	ldr	r3, [pc, #244]	; (800736c <xQueueReceive+0x1bc>)
 8007278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007286:	f001 fda9 	bl	8008ddc <vPortExitCritical>
				return pdPASS;
 800728a:	2301      	movs	r3, #1
 800728c:	e069      	b.n	8007362 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d103      	bne.n	800729c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007294:	f001 fda2 	bl	8008ddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007298:	2300      	movs	r3, #0
 800729a:	e062      	b.n	8007362 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072a2:	f107 0310 	add.w	r3, r7, #16
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 ff26 	bl	80080f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072b0:	f001 fd94 	bl	8008ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072b4:	f000 fc6a 	bl	8007b8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072b8:	f001 fd60 	bl	8008d7c <vPortEnterCritical>
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072c2:	b25b      	sxtb	r3, r3
 80072c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c8:	d103      	bne.n	80072d2 <xQueueReceive+0x122>
 80072ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072d8:	b25b      	sxtb	r3, r3
 80072da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072de:	d103      	bne.n	80072e8 <xQueueReceive+0x138>
 80072e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072e8:	f001 fd78 	bl	8008ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072ec:	1d3a      	adds	r2, r7, #4
 80072ee:	f107 0310 	add.w	r3, r7, #16
 80072f2:	4611      	mov	r1, r2
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 ff15 	bl	8008124 <xTaskCheckForTimeOut>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d123      	bne.n	8007348 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007302:	f000 f93a 	bl	800757a <prvIsQueueEmpty>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d017      	beq.n	800733c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	3324      	adds	r3, #36	; 0x24
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	4611      	mov	r1, r2
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fe3b 	bl	8007f90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800731a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800731c:	f000 f8db 	bl	80074d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007320:	f000 fc42 	bl	8007ba8 <xTaskResumeAll>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d189      	bne.n	800723e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800732a:	4b10      	ldr	r3, [pc, #64]	; (800736c <xQueueReceive+0x1bc>)
 800732c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	e780      	b.n	800723e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800733c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800733e:	f000 f8ca 	bl	80074d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007342:	f000 fc31 	bl	8007ba8 <xTaskResumeAll>
 8007346:	e77a      	b.n	800723e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800734a:	f000 f8c4 	bl	80074d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800734e:	f000 fc2b 	bl	8007ba8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007354:	f000 f911 	bl	800757a <prvIsQueueEmpty>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	f43f af6f 	beq.w	800723e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007360:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007362:	4618      	mov	r0, r3
 8007364:	3730      	adds	r7, #48	; 0x30
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	e000ed04 	.word	0xe000ed04

08007370 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10a      	bne.n	8007398 <vQueueDelete+0x28>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	60bb      	str	r3, [r7, #8]
}
 8007394:	bf00      	nop
 8007396:	e7fe      	b.n	8007396 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f945 	bl	8007628 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d102      	bne.n	80073ae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f001 feab 	bl	8009104 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80073ae:	bf00      	nop
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b086      	sub	sp, #24
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073c2:	2300      	movs	r3, #0
 80073c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10d      	bne.n	80073f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d14d      	bne.n	8007478 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f001 f809 	bl	80083f8 <xTaskPriorityDisinherit>
 80073e6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	605a      	str	r2, [r3, #4]
 80073ee:	e043      	b.n	8007478 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d119      	bne.n	800742a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6898      	ldr	r0, [r3, #8]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	461a      	mov	r2, r3
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	f002 f8ba 	bl	800957a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	441a      	add	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	429a      	cmp	r2, r3
 800741e:	d32b      	bcc.n	8007478 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	609a      	str	r2, [r3, #8]
 8007428:	e026      	b.n	8007478 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	68d8      	ldr	r0, [r3, #12]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	461a      	mov	r2, r3
 8007434:	68b9      	ldr	r1, [r7, #8]
 8007436:	f002 f8a0 	bl	800957a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	425b      	negs	r3, r3
 8007444:	441a      	add	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d207      	bcs.n	8007466 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	425b      	negs	r3, r3
 8007460:	441a      	add	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d105      	bne.n	8007478 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	3b01      	subs	r3, #1
 8007476:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007480:	697b      	ldr	r3, [r7, #20]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d018      	beq.n	80074ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a4:	441a      	add	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d303      	bcc.n	80074be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68d9      	ldr	r1, [r3, #12]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	461a      	mov	r2, r3
 80074c8:	6838      	ldr	r0, [r7, #0]
 80074ca:	f002 f856 	bl	800957a <memcpy>
	}
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80074de:	f001 fc4d 	bl	8008d7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074ea:	e011      	b.n	8007510 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d012      	beq.n	800751a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3324      	adds	r3, #36	; 0x24
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fd99 	bl	8008030 <xTaskRemoveFromEventList>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007504:	f000 fe70 	bl	80081e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	3b01      	subs	r3, #1
 800750c:	b2db      	uxtb	r3, r3
 800750e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dce9      	bgt.n	80074ec <prvUnlockQueue+0x16>
 8007518:	e000      	b.n	800751c <prvUnlockQueue+0x46>
					break;
 800751a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	22ff      	movs	r2, #255	; 0xff
 8007520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007524:	f001 fc5a 	bl	8008ddc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007528:	f001 fc28 	bl	8008d7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007532:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007534:	e011      	b.n	800755a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d012      	beq.n	8007564 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3310      	adds	r3, #16
 8007542:	4618      	mov	r0, r3
 8007544:	f000 fd74 	bl	8008030 <xTaskRemoveFromEventList>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800754e:	f000 fe4b 	bl	80081e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007552:	7bbb      	ldrb	r3, [r7, #14]
 8007554:	3b01      	subs	r3, #1
 8007556:	b2db      	uxtb	r3, r3
 8007558:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800755a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800755e:	2b00      	cmp	r3, #0
 8007560:	dce9      	bgt.n	8007536 <prvUnlockQueue+0x60>
 8007562:	e000      	b.n	8007566 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007564:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	22ff      	movs	r2, #255	; 0xff
 800756a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800756e:	f001 fc35 	bl	8008ddc <vPortExitCritical>
}
 8007572:	bf00      	nop
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007582:	f001 fbfb 	bl	8008d7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	2b00      	cmp	r3, #0
 800758c:	d102      	bne.n	8007594 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800758e:	2301      	movs	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	e001      	b.n	8007598 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007594:	2300      	movs	r3, #0
 8007596:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007598:	f001 fc20 	bl	8008ddc <vPortExitCritical>

	return xReturn;
 800759c:	68fb      	ldr	r3, [r7, #12]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075ae:	f001 fbe5 	bl	8008d7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d102      	bne.n	80075c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075be:	2301      	movs	r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	e001      	b.n	80075c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075c8:	f001 fc08 	bl	8008ddc <vPortExitCritical>

	return xReturn;
 80075cc:	68fb      	ldr	r3, [r7, #12]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	e014      	b.n	8007612 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075e8:	4a0e      	ldr	r2, [pc, #56]	; (8007624 <vQueueAddToRegistry+0x4c>)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10b      	bne.n	800760c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075f4:	490b      	ldr	r1, [pc, #44]	; (8007624 <vQueueAddToRegistry+0x4c>)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075fe:	4a09      	ldr	r2, [pc, #36]	; (8007624 <vQueueAddToRegistry+0x4c>)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	4413      	add	r3, r2
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800760a:	e006      	b.n	800761a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3301      	adds	r3, #1
 8007610:	60fb      	str	r3, [r7, #12]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b07      	cmp	r3, #7
 8007616:	d9e7      	bls.n	80075e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	bc80      	pop	{r7}
 8007622:	4770      	bx	lr
 8007624:	20003b4c 	.word	0x20003b4c

08007628 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007630:	2300      	movs	r3, #0
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	e016      	b.n	8007664 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007636:	4a10      	ldr	r2, [pc, #64]	; (8007678 <vQueueUnregisterQueue+0x50>)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	4413      	add	r3, r2
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	429a      	cmp	r2, r3
 8007644:	d10b      	bne.n	800765e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007646:	4a0c      	ldr	r2, [pc, #48]	; (8007678 <vQueueUnregisterQueue+0x50>)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2100      	movs	r1, #0
 800764c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007650:	4a09      	ldr	r2, [pc, #36]	; (8007678 <vQueueUnregisterQueue+0x50>)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	4413      	add	r3, r2
 8007658:	2200      	movs	r2, #0
 800765a:	605a      	str	r2, [r3, #4]
				break;
 800765c:	e006      	b.n	800766c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3301      	adds	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b07      	cmp	r3, #7
 8007668:	d9e5      	bls.n	8007636 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800766a:	bf00      	nop
 800766c:	bf00      	nop
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	20003b4c 	.word	0x20003b4c

0800767c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800768c:	f001 fb76 	bl	8008d7c <vPortEnterCritical>
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007696:	b25b      	sxtb	r3, r3
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d103      	bne.n	80076a6 <vQueueWaitForMessageRestricted+0x2a>
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ac:	b25b      	sxtb	r3, r3
 80076ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b2:	d103      	bne.n	80076bc <vQueueWaitForMessageRestricted+0x40>
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076bc:	f001 fb8e 	bl	8008ddc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d106      	bne.n	80076d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	3324      	adds	r3, #36	; 0x24
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 fc81 	bl	8007fd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80076d6:	6978      	ldr	r0, [r7, #20]
 80076d8:	f7ff fefd 	bl	80074d6 <prvUnlockQueue>
	}
 80076dc:	bf00      	nop
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08e      	sub	sp, #56	; 0x38
 80076e8:	af04      	add	r7, sp, #16
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80076f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <xTaskCreateStatic+0x2a>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	623b      	str	r3, [r7, #32]
}
 800770a:	bf00      	nop
 800770c:	e7fe      	b.n	800770c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <xTaskCreateStatic+0x46>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	61fb      	str	r3, [r7, #28]
}
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800772a:	23bc      	movs	r3, #188	; 0xbc
 800772c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	2bbc      	cmp	r3, #188	; 0xbc
 8007732:	d00a      	beq.n	800774a <xTaskCreateStatic+0x66>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	61bb      	str	r3, [r7, #24]
}
 8007746:	bf00      	nop
 8007748:	e7fe      	b.n	8007748 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	2b00      	cmp	r3, #0
 800774e:	d01e      	beq.n	800778e <xTaskCreateStatic+0xaa>
 8007750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007752:	2b00      	cmp	r3, #0
 8007754:	d01b      	beq.n	800778e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007758:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800775e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	2202      	movs	r2, #2
 8007764:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007768:	2300      	movs	r3, #0
 800776a:	9303      	str	r3, [sp, #12]
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	9302      	str	r3, [sp, #8]
 8007770:	f107 0314 	add.w	r3, r7, #20
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	68b9      	ldr	r1, [r7, #8]
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 f851 	bl	8007828 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007788:	f000 f8ec 	bl	8007964 <prvAddNewTaskToReadyList>
 800778c:	e001      	b.n	8007792 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007792:	697b      	ldr	r3, [r7, #20]
	}
 8007794:	4618      	mov	r0, r3
 8007796:	3728      	adds	r7, #40	; 0x28
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08c      	sub	sp, #48	; 0x30
 80077a0:	af04      	add	r7, sp, #16
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	4613      	mov	r3, r2
 80077aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ac:	88fb      	ldrh	r3, [r7, #6]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f001 fbe3 	bl	8008f7c <pvPortMalloc>
 80077b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00e      	beq.n	80077dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80077be:	20bc      	movs	r0, #188	; 0xbc
 80077c0:	f001 fbdc 	bl	8008f7c <pvPortMalloc>
 80077c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	631a      	str	r2, [r3, #48]	; 0x30
 80077d2:	e005      	b.n	80077e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80077d4:	6978      	ldr	r0, [r7, #20]
 80077d6:	f001 fc95 	bl	8009104 <vPortFree>
 80077da:	e001      	b.n	80077e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d017      	beq.n	8007816 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077ee:	88fa      	ldrh	r2, [r7, #6]
 80077f0:	2300      	movs	r3, #0
 80077f2:	9303      	str	r3, [sp, #12]
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	9302      	str	r3, [sp, #8]
 80077f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fa:	9301      	str	r3, [sp, #4]
 80077fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	68b9      	ldr	r1, [r7, #8]
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 f80f 	bl	8007828 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800780a:	69f8      	ldr	r0, [r7, #28]
 800780c:	f000 f8aa 	bl	8007964 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007810:	2301      	movs	r3, #1
 8007812:	61bb      	str	r3, [r7, #24]
 8007814:	e002      	b.n	800781c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007816:	f04f 33ff 	mov.w	r3, #4294967295
 800781a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800781c:	69bb      	ldr	r3, [r7, #24]
	}
 800781e:	4618      	mov	r0, r3
 8007820:	3720      	adds	r7, #32
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	461a      	mov	r2, r3
 8007840:	21a5      	movs	r1, #165	; 0xa5
 8007842:	f001 fea8 	bl	8009596 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007850:	3b01      	subs	r3, #1
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	f023 0307 	bic.w	r3, r3, #7
 800785e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <prvInitialiseNewTask+0x58>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	617b      	str	r3, [r7, #20]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007880:	2300      	movs	r3, #0
 8007882:	61fb      	str	r3, [r7, #28]
 8007884:	e012      	b.n	80078ac <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	4413      	add	r3, r2
 800788c:	7819      	ldrb	r1, [r3, #0]
 800788e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	4413      	add	r3, r2
 8007894:	3334      	adds	r3, #52	; 0x34
 8007896:	460a      	mov	r2, r1
 8007898:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	4413      	add	r3, r2
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d006      	beq.n	80078b4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	3301      	adds	r3, #1
 80078aa:	61fb      	str	r3, [r7, #28]
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	2b0f      	cmp	r3, #15
 80078b0:	d9e9      	bls.n	8007886 <prvInitialiseNewTask+0x5e>
 80078b2:	e000      	b.n	80078b6 <prvInitialiseNewTask+0x8e>
		{
			break;
 80078b4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	2b37      	cmp	r3, #55	; 0x37
 80078c2:	d901      	bls.n	80078c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078c4:	2337      	movs	r3, #55	; 0x37
 80078c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80078c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80078ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80078d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d6:	2200      	movs	r2, #0
 80078d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	3304      	adds	r3, #4
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff f895 	bl	8006a0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	3318      	adds	r3, #24
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7ff f890 	bl	8006a0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007902:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800790c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790e:	2200      	movs	r2, #0
 8007910:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	3354      	adds	r3, #84	; 0x54
 8007918:	2260      	movs	r2, #96	; 0x60
 800791a:	2100      	movs	r1, #0
 800791c:	4618      	mov	r0, r3
 800791e:	f001 fe3a 	bl	8009596 <memset>
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	4a0c      	ldr	r2, [pc, #48]	; (8007958 <prvInitialiseNewTask+0x130>)
 8007926:	659a      	str	r2, [r3, #88]	; 0x58
 8007928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792a:	4a0c      	ldr	r2, [pc, #48]	; (800795c <prvInitialiseNewTask+0x134>)
 800792c:	65da      	str	r2, [r3, #92]	; 0x5c
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	4a0b      	ldr	r2, [pc, #44]	; (8007960 <prvInitialiseNewTask+0x138>)
 8007932:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	68f9      	ldr	r1, [r7, #12]
 8007938:	69b8      	ldr	r0, [r7, #24]
 800793a:	f001 f931 	bl	8008ba0 <pxPortInitialiseStack>
 800793e:	4602      	mov	r2, r0
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800794e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007950:	bf00      	nop
 8007952:	3720      	adds	r7, #32
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	0800e06c 	.word	0x0800e06c
 800795c:	0800e08c 	.word	0x0800e08c
 8007960:	0800e04c 	.word	0x0800e04c

08007964 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800796c:	f001 fa06 	bl	8008d7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007970:	4b2d      	ldr	r3, [pc, #180]	; (8007a28 <prvAddNewTaskToReadyList+0xc4>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3301      	adds	r3, #1
 8007976:	4a2c      	ldr	r2, [pc, #176]	; (8007a28 <prvAddNewTaskToReadyList+0xc4>)
 8007978:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800797a:	4b2c      	ldr	r3, [pc, #176]	; (8007a2c <prvAddNewTaskToReadyList+0xc8>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d109      	bne.n	8007996 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007982:	4a2a      	ldr	r2, [pc, #168]	; (8007a2c <prvAddNewTaskToReadyList+0xc8>)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007988:	4b27      	ldr	r3, [pc, #156]	; (8007a28 <prvAddNewTaskToReadyList+0xc4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d110      	bne.n	80079b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007990:	f000 fc4e 	bl	8008230 <prvInitialiseTaskLists>
 8007994:	e00d      	b.n	80079b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007996:	4b26      	ldr	r3, [pc, #152]	; (8007a30 <prvAddNewTaskToReadyList+0xcc>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d109      	bne.n	80079b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800799e:	4b23      	ldr	r3, [pc, #140]	; (8007a2c <prvAddNewTaskToReadyList+0xc8>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d802      	bhi.n	80079b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80079ac:	4a1f      	ldr	r2, [pc, #124]	; (8007a2c <prvAddNewTaskToReadyList+0xc8>)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80079b2:	4b20      	ldr	r3, [pc, #128]	; (8007a34 <prvAddNewTaskToReadyList+0xd0>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3301      	adds	r3, #1
 80079b8:	4a1e      	ldr	r2, [pc, #120]	; (8007a34 <prvAddNewTaskToReadyList+0xd0>)
 80079ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80079bc:	4b1d      	ldr	r3, [pc, #116]	; (8007a34 <prvAddNewTaskToReadyList+0xd0>)
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c8:	4b1b      	ldr	r3, [pc, #108]	; (8007a38 <prvAddNewTaskToReadyList+0xd4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d903      	bls.n	80079d8 <prvAddNewTaskToReadyList+0x74>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	4a18      	ldr	r2, [pc, #96]	; (8007a38 <prvAddNewTaskToReadyList+0xd4>)
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079dc:	4613      	mov	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4a15      	ldr	r2, [pc, #84]	; (8007a3c <prvAddNewTaskToReadyList+0xd8>)
 80079e6:	441a      	add	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4619      	mov	r1, r3
 80079ee:	4610      	mov	r0, r2
 80079f0:	f7ff f819 	bl	8006a26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079f4:	f001 f9f2 	bl	8008ddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079f8:	4b0d      	ldr	r3, [pc, #52]	; (8007a30 <prvAddNewTaskToReadyList+0xcc>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00e      	beq.n	8007a1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a00:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <prvAddNewTaskToReadyList+0xc8>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d207      	bcs.n	8007a1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a0e:	4b0c      	ldr	r3, [pc, #48]	; (8007a40 <prvAddNewTaskToReadyList+0xdc>)
 8007a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a1e:	bf00      	nop
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000e74 	.word	0x20000e74
 8007a2c:	200009a0 	.word	0x200009a0
 8007a30:	20000e80 	.word	0x20000e80
 8007a34:	20000e90 	.word	0x20000e90
 8007a38:	20000e7c 	.word	0x20000e7c
 8007a3c:	200009a4 	.word	0x200009a4
 8007a40:	e000ed04 	.word	0xe000ed04

08007a44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d017      	beq.n	8007a86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a56:	4b13      	ldr	r3, [pc, #76]	; (8007aa4 <vTaskDelay+0x60>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <vTaskDelay+0x30>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	60bb      	str	r3, [r7, #8]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a74:	f000 f88a 	bl	8007b8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a78:	2100      	movs	r1, #0
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fd2a 	bl	80084d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a80:	f000 f892 	bl	8007ba8 <xTaskResumeAll>
 8007a84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d107      	bne.n	8007a9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007a8c:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <vTaskDelay+0x64>)
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a9c:	bf00      	nop
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20000e9c 	.word	0x20000e9c
 8007aa8:	e000ed04 	.word	0xe000ed04

08007aac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08a      	sub	sp, #40	; 0x28
 8007ab0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007aba:	463a      	mov	r2, r7
 8007abc:	1d39      	adds	r1, r7, #4
 8007abe:	f107 0308 	add.w	r3, r7, #8
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe ff52 	bl	800696c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	9202      	str	r2, [sp, #8]
 8007ad0:	9301      	str	r3, [sp, #4]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	460a      	mov	r2, r1
 8007ada:	4924      	ldr	r1, [pc, #144]	; (8007b6c <vTaskStartScheduler+0xc0>)
 8007adc:	4824      	ldr	r0, [pc, #144]	; (8007b70 <vTaskStartScheduler+0xc4>)
 8007ade:	f7ff fe01 	bl	80076e4 <xTaskCreateStatic>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4a23      	ldr	r2, [pc, #140]	; (8007b74 <vTaskStartScheduler+0xc8>)
 8007ae6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ae8:	4b22      	ldr	r3, [pc, #136]	; (8007b74 <vTaskStartScheduler+0xc8>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007af0:	2301      	movs	r3, #1
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	e001      	b.n	8007afa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007af6:	2300      	movs	r3, #0
 8007af8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d102      	bne.n	8007b06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b00:	f000 fd3c 	bl	800857c <xTimerCreateTimerTask>
 8007b04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d11b      	bne.n	8007b44 <vTaskStartScheduler+0x98>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	613b      	str	r3, [r7, #16]
}
 8007b1e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b20:	4b15      	ldr	r3, [pc, #84]	; (8007b78 <vTaskStartScheduler+0xcc>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3354      	adds	r3, #84	; 0x54
 8007b26:	4a15      	ldr	r2, [pc, #84]	; (8007b7c <vTaskStartScheduler+0xd0>)
 8007b28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b2a:	4b15      	ldr	r3, [pc, #84]	; (8007b80 <vTaskStartScheduler+0xd4>)
 8007b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b32:	4b14      	ldr	r3, [pc, #80]	; (8007b84 <vTaskStartScheduler+0xd8>)
 8007b34:	2201      	movs	r2, #1
 8007b36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007b38:	4b13      	ldr	r3, [pc, #76]	; (8007b88 <vTaskStartScheduler+0xdc>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b3e:	f001 f8ab 	bl	8008c98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b42:	e00e      	b.n	8007b62 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4a:	d10a      	bne.n	8007b62 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	60fb      	str	r3, [r7, #12]
}
 8007b5e:	bf00      	nop
 8007b60:	e7fe      	b.n	8007b60 <vTaskStartScheduler+0xb4>
}
 8007b62:	bf00      	nop
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	0800df70 	.word	0x0800df70
 8007b70:	08008201 	.word	0x08008201
 8007b74:	20000e98 	.word	0x20000e98
 8007b78:	200009a0 	.word	0x200009a0
 8007b7c:	2000000c 	.word	0x2000000c
 8007b80:	20000e94 	.word	0x20000e94
 8007b84:	20000e80 	.word	0x20000e80
 8007b88:	20000e78 	.word	0x20000e78

08007b8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007b90:	4b04      	ldr	r3, [pc, #16]	; (8007ba4 <vTaskSuspendAll+0x18>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3301      	adds	r3, #1
 8007b96:	4a03      	ldr	r2, [pc, #12]	; (8007ba4 <vTaskSuspendAll+0x18>)
 8007b98:	6013      	str	r3, [r2, #0]
}
 8007b9a:	bf00      	nop
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bc80      	pop	{r7}
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	20000e9c 	.word	0x20000e9c

08007ba8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007bb6:	4b42      	ldr	r3, [pc, #264]	; (8007cc0 <xTaskResumeAll+0x118>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10a      	bne.n	8007bd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	603b      	str	r3, [r7, #0]
}
 8007bd0:	bf00      	nop
 8007bd2:	e7fe      	b.n	8007bd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bd4:	f001 f8d2 	bl	8008d7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bd8:	4b39      	ldr	r3, [pc, #228]	; (8007cc0 <xTaskResumeAll+0x118>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	4a38      	ldr	r2, [pc, #224]	; (8007cc0 <xTaskResumeAll+0x118>)
 8007be0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007be2:	4b37      	ldr	r3, [pc, #220]	; (8007cc0 <xTaskResumeAll+0x118>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d162      	bne.n	8007cb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bea:	4b36      	ldr	r3, [pc, #216]	; (8007cc4 <xTaskResumeAll+0x11c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d05e      	beq.n	8007cb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bf2:	e02f      	b.n	8007c54 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007bf4:	4b34      	ldr	r3, [pc, #208]	; (8007cc8 <xTaskResumeAll+0x120>)
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3318      	adds	r3, #24
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fe ff6b 	bl	8006adc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3304      	adds	r3, #4
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe ff66 	bl	8006adc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c14:	4b2d      	ldr	r3, [pc, #180]	; (8007ccc <xTaskResumeAll+0x124>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d903      	bls.n	8007c24 <xTaskResumeAll+0x7c>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	4a2a      	ldr	r2, [pc, #168]	; (8007ccc <xTaskResumeAll+0x124>)
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c28:	4613      	mov	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4a27      	ldr	r2, [pc, #156]	; (8007cd0 <xTaskResumeAll+0x128>)
 8007c32:	441a      	add	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3304      	adds	r3, #4
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	f7fe fef3 	bl	8006a26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c44:	4b23      	ldr	r3, [pc, #140]	; (8007cd4 <xTaskResumeAll+0x12c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d302      	bcc.n	8007c54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007c4e:	4b22      	ldr	r3, [pc, #136]	; (8007cd8 <xTaskResumeAll+0x130>)
 8007c50:	2201      	movs	r2, #1
 8007c52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c54:	4b1c      	ldr	r3, [pc, #112]	; (8007cc8 <xTaskResumeAll+0x120>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1cb      	bne.n	8007bf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c62:	f000 fb87 	bl	8008374 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007c66:	4b1d      	ldr	r3, [pc, #116]	; (8007cdc <xTaskResumeAll+0x134>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d010      	beq.n	8007c94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c72:	f000 f845 	bl	8007d00 <xTaskIncrementTick>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007c7c:	4b16      	ldr	r3, [pc, #88]	; (8007cd8 <xTaskResumeAll+0x130>)
 8007c7e:	2201      	movs	r2, #1
 8007c80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1f1      	bne.n	8007c72 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007c8e:	4b13      	ldr	r3, [pc, #76]	; (8007cdc <xTaskResumeAll+0x134>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c94:	4b10      	ldr	r3, [pc, #64]	; (8007cd8 <xTaskResumeAll+0x130>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d009      	beq.n	8007cb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ca0:	4b0f      	ldr	r3, [pc, #60]	; (8007ce0 <xTaskResumeAll+0x138>)
 8007ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca6:	601a      	str	r2, [r3, #0]
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cb0:	f001 f894 	bl	8008ddc <vPortExitCritical>

	return xAlreadyYielded;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000e9c 	.word	0x20000e9c
 8007cc4:	20000e74 	.word	0x20000e74
 8007cc8:	20000e34 	.word	0x20000e34
 8007ccc:	20000e7c 	.word	0x20000e7c
 8007cd0:	200009a4 	.word	0x200009a4
 8007cd4:	200009a0 	.word	0x200009a0
 8007cd8:	20000e88 	.word	0x20000e88
 8007cdc:	20000e84 	.word	0x20000e84
 8007ce0:	e000ed04 	.word	0xe000ed04

08007ce4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007cea:	4b04      	ldr	r3, [pc, #16]	; (8007cfc <xTaskGetTickCount+0x18>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007cf0:	687b      	ldr	r3, [r7, #4]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bc80      	pop	{r7}
 8007cfa:	4770      	bx	lr
 8007cfc:	20000e78 	.word	0x20000e78

08007d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d06:	2300      	movs	r3, #0
 8007d08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d0a:	4b51      	ldr	r3, [pc, #324]	; (8007e50 <xTaskIncrementTick+0x150>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f040 808e 	bne.w	8007e30 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d14:	4b4f      	ldr	r3, [pc, #316]	; (8007e54 <xTaskIncrementTick+0x154>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d1c:	4a4d      	ldr	r2, [pc, #308]	; (8007e54 <xTaskIncrementTick+0x154>)
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d120      	bne.n	8007d6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d28:	4b4b      	ldr	r3, [pc, #300]	; (8007e58 <xTaskIncrementTick+0x158>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <xTaskIncrementTick+0x48>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	603b      	str	r3, [r7, #0]
}
 8007d44:	bf00      	nop
 8007d46:	e7fe      	b.n	8007d46 <xTaskIncrementTick+0x46>
 8007d48:	4b43      	ldr	r3, [pc, #268]	; (8007e58 <xTaskIncrementTick+0x158>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	60fb      	str	r3, [r7, #12]
 8007d4e:	4b43      	ldr	r3, [pc, #268]	; (8007e5c <xTaskIncrementTick+0x15c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a41      	ldr	r2, [pc, #260]	; (8007e58 <xTaskIncrementTick+0x158>)
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	4a41      	ldr	r2, [pc, #260]	; (8007e5c <xTaskIncrementTick+0x15c>)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	4b40      	ldr	r3, [pc, #256]	; (8007e60 <xTaskIncrementTick+0x160>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3301      	adds	r3, #1
 8007d62:	4a3f      	ldr	r2, [pc, #252]	; (8007e60 <xTaskIncrementTick+0x160>)
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	f000 fb05 	bl	8008374 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d6a:	4b3e      	ldr	r3, [pc, #248]	; (8007e64 <xTaskIncrementTick+0x164>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d34e      	bcc.n	8007e12 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d74:	4b38      	ldr	r3, [pc, #224]	; (8007e58 <xTaskIncrementTick+0x158>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <xTaskIncrementTick+0x82>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e000      	b.n	8007d84 <xTaskIncrementTick+0x84>
 8007d82:	2300      	movs	r3, #0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d004      	beq.n	8007d92 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d88:	4b36      	ldr	r3, [pc, #216]	; (8007e64 <xTaskIncrementTick+0x164>)
 8007d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8e:	601a      	str	r2, [r3, #0]
					break;
 8007d90:	e03f      	b.n	8007e12 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d92:	4b31      	ldr	r3, [pc, #196]	; (8007e58 <xTaskIncrementTick+0x158>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d203      	bcs.n	8007db2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007daa:	4a2e      	ldr	r2, [pc, #184]	; (8007e64 <xTaskIncrementTick+0x164>)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6013      	str	r3, [r2, #0]
						break;
 8007db0:	e02f      	b.n	8007e12 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	3304      	adds	r3, #4
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe fe90 	bl	8006adc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d004      	beq.n	8007dce <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	3318      	adds	r3, #24
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe fe87 	bl	8006adc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd2:	4b25      	ldr	r3, [pc, #148]	; (8007e68 <xTaskIncrementTick+0x168>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d903      	bls.n	8007de2 <xTaskIncrementTick+0xe2>
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dde:	4a22      	ldr	r2, [pc, #136]	; (8007e68 <xTaskIncrementTick+0x168>)
 8007de0:	6013      	str	r3, [r2, #0]
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4a1f      	ldr	r2, [pc, #124]	; (8007e6c <xTaskIncrementTick+0x16c>)
 8007df0:	441a      	add	r2, r3
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4619      	mov	r1, r3
 8007df8:	4610      	mov	r0, r2
 8007dfa:	f7fe fe14 	bl	8006a26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e02:	4b1b      	ldr	r3, [pc, #108]	; (8007e70 <xTaskIncrementTick+0x170>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d3b3      	bcc.n	8007d74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e10:	e7b0      	b.n	8007d74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e12:	4b17      	ldr	r3, [pc, #92]	; (8007e70 <xTaskIncrementTick+0x170>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e18:	4914      	ldr	r1, [pc, #80]	; (8007e6c <xTaskIncrementTick+0x16c>)
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	440b      	add	r3, r1
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d907      	bls.n	8007e3a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	617b      	str	r3, [r7, #20]
 8007e2e:	e004      	b.n	8007e3a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e30:	4b10      	ldr	r3, [pc, #64]	; (8007e74 <xTaskIncrementTick+0x174>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3301      	adds	r3, #1
 8007e36:	4a0f      	ldr	r2, [pc, #60]	; (8007e74 <xTaskIncrementTick+0x174>)
 8007e38:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007e3a:	4b0f      	ldr	r3, [pc, #60]	; (8007e78 <xTaskIncrementTick+0x178>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007e42:	2301      	movs	r3, #1
 8007e44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e46:	697b      	ldr	r3, [r7, #20]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	20000e9c 	.word	0x20000e9c
 8007e54:	20000e78 	.word	0x20000e78
 8007e58:	20000e2c 	.word	0x20000e2c
 8007e5c:	20000e30 	.word	0x20000e30
 8007e60:	20000e8c 	.word	0x20000e8c
 8007e64:	20000e94 	.word	0x20000e94
 8007e68:	20000e7c 	.word	0x20000e7c
 8007e6c:	200009a4 	.word	0x200009a4
 8007e70:	200009a0 	.word	0x200009a0
 8007e74:	20000e84 	.word	0x20000e84
 8007e78:	20000e88 	.word	0x20000e88

08007e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e82:	4b3d      	ldr	r3, [pc, #244]	; (8007f78 <vTaskSwitchContext+0xfc>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e8a:	4b3c      	ldr	r3, [pc, #240]	; (8007f7c <vTaskSwitchContext+0x100>)
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e90:	e06d      	b.n	8007f6e <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 8007e92:	4b3a      	ldr	r3, [pc, #232]	; (8007f7c <vTaskSwitchContext+0x100>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007e98:	4b39      	ldr	r3, [pc, #228]	; (8007f80 <vTaskSwitchContext+0x104>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9e:	613b      	str	r3, [r7, #16]
 8007ea0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d111      	bne.n	8007ed4 <vTaskSwitchContext+0x58>
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d10b      	bne.n	8007ed4 <vTaskSwitchContext+0x58>
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d105      	bne.n	8007ed4 <vTaskSwitchContext+0x58>
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	330c      	adds	r3, #12
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d008      	beq.n	8007ee6 <vTaskSwitchContext+0x6a>
 8007ed4:	4b2a      	ldr	r3, [pc, #168]	; (8007f80 <vTaskSwitchContext+0x104>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	4b29      	ldr	r3, [pc, #164]	; (8007f80 <vTaskSwitchContext+0x104>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3334      	adds	r3, #52	; 0x34
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	f7f9 f9f9 	bl	80012d8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007ee6:	4b27      	ldr	r3, [pc, #156]	; (8007f84 <vTaskSwitchContext+0x108>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	e010      	b.n	8007f10 <vTaskSwitchContext+0x94>
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <vTaskSwitchContext+0x8e>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	607b      	str	r3, [r7, #4]
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <vTaskSwitchContext+0x8c>
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	491d      	ldr	r1, [pc, #116]	; (8007f88 <vTaskSwitchContext+0x10c>)
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d0e4      	beq.n	8007eee <vTaskSwitchContext+0x72>
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4a16      	ldr	r2, [pc, #88]	; (8007f88 <vTaskSwitchContext+0x10c>)
 8007f30:	4413      	add	r3, r2
 8007f32:	60bb      	str	r3, [r7, #8]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	605a      	str	r2, [r3, #4]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	3308      	adds	r3, #8
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d104      	bne.n	8007f54 <vTaskSwitchContext+0xd8>
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	605a      	str	r2, [r3, #4]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	4a09      	ldr	r2, [pc, #36]	; (8007f80 <vTaskSwitchContext+0x104>)
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	4a09      	ldr	r2, [pc, #36]	; (8007f84 <vTaskSwitchContext+0x108>)
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f64:	4b06      	ldr	r3, [pc, #24]	; (8007f80 <vTaskSwitchContext+0x104>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3354      	adds	r3, #84	; 0x54
 8007f6a:	4a08      	ldr	r2, [pc, #32]	; (8007f8c <vTaskSwitchContext+0x110>)
 8007f6c:	6013      	str	r3, [r2, #0]
}
 8007f6e:	bf00      	nop
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20000e9c 	.word	0x20000e9c
 8007f7c:	20000e88 	.word	0x20000e88
 8007f80:	200009a0 	.word	0x200009a0
 8007f84:	20000e7c 	.word	0x20000e7c
 8007f88:	200009a4 	.word	0x200009a4
 8007f8c:	2000000c 	.word	0x2000000c

08007f90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10a      	bne.n	8007fb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	60fb      	str	r3, [r7, #12]
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fb6:	4b07      	ldr	r3, [pc, #28]	; (8007fd4 <vTaskPlaceOnEventList+0x44>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3318      	adds	r3, #24
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fe fd54 	bl	8006a6c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	6838      	ldr	r0, [r7, #0]
 8007fc8:	f000 fa84 	bl	80084d4 <prvAddCurrentTaskToDelayedList>
}
 8007fcc:	bf00      	nop
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	200009a0 	.word	0x200009a0

08007fd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10a      	bne.n	8008000 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	617b      	str	r3, [r7, #20]
}
 8007ffc:	bf00      	nop
 8007ffe:	e7fe      	b.n	8007ffe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008000:	4b0a      	ldr	r3, [pc, #40]	; (800802c <vTaskPlaceOnEventListRestricted+0x54>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3318      	adds	r3, #24
 8008006:	4619      	mov	r1, r3
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f7fe fd0c 	bl	8006a26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008014:	f04f 33ff 	mov.w	r3, #4294967295
 8008018:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	68b8      	ldr	r0, [r7, #8]
 800801e:	f000 fa59 	bl	80084d4 <prvAddCurrentTaskToDelayedList>
	}
 8008022:	bf00      	nop
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	200009a0 	.word	0x200009a0

08008030 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	60fb      	str	r3, [r7, #12]
}
 8008058:	bf00      	nop
 800805a:	e7fe      	b.n	800805a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	3318      	adds	r3, #24
 8008060:	4618      	mov	r0, r3
 8008062:	f7fe fd3b 	bl	8006adc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008066:	4b1e      	ldr	r3, [pc, #120]	; (80080e0 <xTaskRemoveFromEventList+0xb0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d11d      	bne.n	80080aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	3304      	adds	r3, #4
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fd32 	bl	8006adc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807c:	4b19      	ldr	r3, [pc, #100]	; (80080e4 <xTaskRemoveFromEventList+0xb4>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d903      	bls.n	800808c <xTaskRemoveFromEventList+0x5c>
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008088:	4a16      	ldr	r2, [pc, #88]	; (80080e4 <xTaskRemoveFromEventList+0xb4>)
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008090:	4613      	mov	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4a13      	ldr	r2, [pc, #76]	; (80080e8 <xTaskRemoveFromEventList+0xb8>)
 800809a:	441a      	add	r2, r3
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	3304      	adds	r3, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f7fe fcbf 	bl	8006a26 <vListInsertEnd>
 80080a8:	e005      	b.n	80080b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	3318      	adds	r3, #24
 80080ae:	4619      	mov	r1, r3
 80080b0:	480e      	ldr	r0, [pc, #56]	; (80080ec <xTaskRemoveFromEventList+0xbc>)
 80080b2:	f7fe fcb8 	bl	8006a26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ba:	4b0d      	ldr	r3, [pc, #52]	; (80080f0 <xTaskRemoveFromEventList+0xc0>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d905      	bls.n	80080d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80080c4:	2301      	movs	r3, #1
 80080c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80080c8:	4b0a      	ldr	r3, [pc, #40]	; (80080f4 <xTaskRemoveFromEventList+0xc4>)
 80080ca:	2201      	movs	r2, #1
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	e001      	b.n	80080d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80080d0:	2300      	movs	r3, #0
 80080d2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80080d4:	697b      	ldr	r3, [r7, #20]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	20000e9c 	.word	0x20000e9c
 80080e4:	20000e7c 	.word	0x20000e7c
 80080e8:	200009a4 	.word	0x200009a4
 80080ec:	20000e34 	.word	0x20000e34
 80080f0:	200009a0 	.word	0x200009a0
 80080f4:	20000e88 	.word	0x20000e88

080080f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008100:	4b06      	ldr	r3, [pc, #24]	; (800811c <vTaskInternalSetTimeOutState+0x24>)
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008108:	4b05      	ldr	r3, [pc, #20]	; (8008120 <vTaskInternalSetTimeOutState+0x28>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	605a      	str	r2, [r3, #4]
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	bc80      	pop	{r7}
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20000e8c 	.word	0x20000e8c
 8008120:	20000e78 	.word	0x20000e78

08008124 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10a      	bne.n	800814a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	613b      	str	r3, [r7, #16]
}
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10a      	bne.n	8008166 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	60fb      	str	r3, [r7, #12]
}
 8008162:	bf00      	nop
 8008164:	e7fe      	b.n	8008164 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008166:	f000 fe09 	bl	8008d7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800816a:	4b1d      	ldr	r3, [pc, #116]	; (80081e0 <xTaskCheckForTimeOut+0xbc>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008182:	d102      	bne.n	800818a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008184:	2300      	movs	r3, #0
 8008186:	61fb      	str	r3, [r7, #28]
 8008188:	e023      	b.n	80081d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4b15      	ldr	r3, [pc, #84]	; (80081e4 <xTaskCheckForTimeOut+0xc0>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	429a      	cmp	r2, r3
 8008194:	d007      	beq.n	80081a6 <xTaskCheckForTimeOut+0x82>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	69ba      	ldr	r2, [r7, #24]
 800819c:	429a      	cmp	r2, r3
 800819e:	d302      	bcc.n	80081a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80081a0:	2301      	movs	r3, #1
 80081a2:	61fb      	str	r3, [r7, #28]
 80081a4:	e015      	b.n	80081d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d20b      	bcs.n	80081c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	1ad2      	subs	r2, r2, r3
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff ff9b 	bl	80080f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80081c2:	2300      	movs	r3, #0
 80081c4:	61fb      	str	r3, [r7, #28]
 80081c6:	e004      	b.n	80081d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80081ce:	2301      	movs	r3, #1
 80081d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80081d2:	f000 fe03 	bl	8008ddc <vPortExitCritical>

	return xReturn;
 80081d6:	69fb      	ldr	r3, [r7, #28]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3720      	adds	r7, #32
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20000e78 	.word	0x20000e78
 80081e4:	20000e8c 	.word	0x20000e8c

080081e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80081e8:	b480      	push	{r7}
 80081ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081ec:	4b03      	ldr	r3, [pc, #12]	; (80081fc <vTaskMissedYield+0x14>)
 80081ee:	2201      	movs	r2, #1
 80081f0:	601a      	str	r2, [r3, #0]
}
 80081f2:	bf00      	nop
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	20000e88 	.word	0x20000e88

08008200 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008208:	f000 f852 	bl	80082b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800820c:	4b06      	ldr	r3, [pc, #24]	; (8008228 <prvIdleTask+0x28>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d9f9      	bls.n	8008208 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008214:	4b05      	ldr	r3, [pc, #20]	; (800822c <prvIdleTask+0x2c>)
 8008216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008224:	e7f0      	b.n	8008208 <prvIdleTask+0x8>
 8008226:	bf00      	nop
 8008228:	200009a4 	.word	0x200009a4
 800822c:	e000ed04 	.word	0xe000ed04

08008230 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008236:	2300      	movs	r3, #0
 8008238:	607b      	str	r3, [r7, #4]
 800823a:	e00c      	b.n	8008256 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	4613      	mov	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4a12      	ldr	r2, [pc, #72]	; (8008290 <prvInitialiseTaskLists+0x60>)
 8008248:	4413      	add	r3, r2
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe fbc0 	bl	80069d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	3301      	adds	r3, #1
 8008254:	607b      	str	r3, [r7, #4]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b37      	cmp	r3, #55	; 0x37
 800825a:	d9ef      	bls.n	800823c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800825c:	480d      	ldr	r0, [pc, #52]	; (8008294 <prvInitialiseTaskLists+0x64>)
 800825e:	f7fe fbb7 	bl	80069d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008262:	480d      	ldr	r0, [pc, #52]	; (8008298 <prvInitialiseTaskLists+0x68>)
 8008264:	f7fe fbb4 	bl	80069d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008268:	480c      	ldr	r0, [pc, #48]	; (800829c <prvInitialiseTaskLists+0x6c>)
 800826a:	f7fe fbb1 	bl	80069d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800826e:	480c      	ldr	r0, [pc, #48]	; (80082a0 <prvInitialiseTaskLists+0x70>)
 8008270:	f7fe fbae 	bl	80069d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008274:	480b      	ldr	r0, [pc, #44]	; (80082a4 <prvInitialiseTaskLists+0x74>)
 8008276:	f7fe fbab 	bl	80069d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800827a:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <prvInitialiseTaskLists+0x78>)
 800827c:	4a05      	ldr	r2, [pc, #20]	; (8008294 <prvInitialiseTaskLists+0x64>)
 800827e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008280:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <prvInitialiseTaskLists+0x7c>)
 8008282:	4a05      	ldr	r2, [pc, #20]	; (8008298 <prvInitialiseTaskLists+0x68>)
 8008284:	601a      	str	r2, [r3, #0]
}
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	200009a4 	.word	0x200009a4
 8008294:	20000e04 	.word	0x20000e04
 8008298:	20000e18 	.word	0x20000e18
 800829c:	20000e34 	.word	0x20000e34
 80082a0:	20000e48 	.word	0x20000e48
 80082a4:	20000e60 	.word	0x20000e60
 80082a8:	20000e2c 	.word	0x20000e2c
 80082ac:	20000e30 	.word	0x20000e30

080082b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082b6:	e019      	b.n	80082ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80082b8:	f000 fd60 	bl	8008d7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80082bc:	4b10      	ldr	r3, [pc, #64]	; (8008300 <prvCheckTasksWaitingTermination+0x50>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3304      	adds	r3, #4
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fe fc07 	bl	8006adc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80082ce:	4b0d      	ldr	r3, [pc, #52]	; (8008304 <prvCheckTasksWaitingTermination+0x54>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	4a0b      	ldr	r2, [pc, #44]	; (8008304 <prvCheckTasksWaitingTermination+0x54>)
 80082d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80082d8:	4b0b      	ldr	r3, [pc, #44]	; (8008308 <prvCheckTasksWaitingTermination+0x58>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3b01      	subs	r3, #1
 80082de:	4a0a      	ldr	r2, [pc, #40]	; (8008308 <prvCheckTasksWaitingTermination+0x58>)
 80082e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80082e2:	f000 fd7b 	bl	8008ddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f810 	bl	800830c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082ec:	4b06      	ldr	r3, [pc, #24]	; (8008308 <prvCheckTasksWaitingTermination+0x58>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1e1      	bne.n	80082b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082f4:	bf00      	nop
 80082f6:	bf00      	nop
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20000e48 	.word	0x20000e48
 8008304:	20000e74 	.word	0x20000e74
 8008308:	20000e5c 	.word	0x20000e5c

0800830c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	3354      	adds	r3, #84	; 0x54
 8008318:	4618      	mov	r0, r3
 800831a:	f002 f81f 	bl	800a35c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008324:	2b00      	cmp	r3, #0
 8008326:	d108      	bne.n	800833a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832c:	4618      	mov	r0, r3
 800832e:	f000 fee9 	bl	8009104 <vPortFree>
				vPortFree( pxTCB );
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fee6 	bl	8009104 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008338:	e018      	b.n	800836c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008340:	2b01      	cmp	r3, #1
 8008342:	d103      	bne.n	800834c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fedd 	bl	8009104 <vPortFree>
	}
 800834a:	e00f      	b.n	800836c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008352:	2b02      	cmp	r3, #2
 8008354:	d00a      	beq.n	800836c <prvDeleteTCB+0x60>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	60fb      	str	r3, [r7, #12]
}
 8008368:	bf00      	nop
 800836a:	e7fe      	b.n	800836a <prvDeleteTCB+0x5e>
	}
 800836c:	bf00      	nop
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800837a:	4b0e      	ldr	r3, [pc, #56]	; (80083b4 <prvResetNextTaskUnblockTime+0x40>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <prvResetNextTaskUnblockTime+0x14>
 8008384:	2301      	movs	r3, #1
 8008386:	e000      	b.n	800838a <prvResetNextTaskUnblockTime+0x16>
 8008388:	2300      	movs	r3, #0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800838e:	4b0a      	ldr	r3, [pc, #40]	; (80083b8 <prvResetNextTaskUnblockTime+0x44>)
 8008390:	f04f 32ff 	mov.w	r2, #4294967295
 8008394:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008396:	e008      	b.n	80083aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008398:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <prvResetNextTaskUnblockTime+0x40>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	4a04      	ldr	r2, [pc, #16]	; (80083b8 <prvResetNextTaskUnblockTime+0x44>)
 80083a8:	6013      	str	r3, [r2, #0]
}
 80083aa:	bf00      	nop
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bc80      	pop	{r7}
 80083b2:	4770      	bx	lr
 80083b4:	20000e2c 	.word	0x20000e2c
 80083b8:	20000e94 	.word	0x20000e94

080083bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80083c2:	4b0b      	ldr	r3, [pc, #44]	; (80083f0 <xTaskGetSchedulerState+0x34>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d102      	bne.n	80083d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083ca:	2301      	movs	r3, #1
 80083cc:	607b      	str	r3, [r7, #4]
 80083ce:	e008      	b.n	80083e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083d0:	4b08      	ldr	r3, [pc, #32]	; (80083f4 <xTaskGetSchedulerState+0x38>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d102      	bne.n	80083de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083d8:	2302      	movs	r3, #2
 80083da:	607b      	str	r3, [r7, #4]
 80083dc:	e001      	b.n	80083e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80083de:	2300      	movs	r3, #0
 80083e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80083e2:	687b      	ldr	r3, [r7, #4]
	}
 80083e4:	4618      	mov	r0, r3
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bc80      	pop	{r7}
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	20000e80 	.word	0x20000e80
 80083f4:	20000e9c 	.word	0x20000e9c

080083f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008404:	2300      	movs	r3, #0
 8008406:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d056      	beq.n	80084bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800840e:	4b2e      	ldr	r3, [pc, #184]	; (80084c8 <xTaskPriorityDisinherit+0xd0>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	429a      	cmp	r2, r3
 8008416:	d00a      	beq.n	800842e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	60fb      	str	r3, [r7, #12]
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10a      	bne.n	800844c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	60bb      	str	r3, [r7, #8]
}
 8008448:	bf00      	nop
 800844a:	e7fe      	b.n	800844a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008450:	1e5a      	subs	r2, r3, #1
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800845e:	429a      	cmp	r2, r3
 8008460:	d02c      	beq.n	80084bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008466:	2b00      	cmp	r3, #0
 8008468:	d128      	bne.n	80084bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	3304      	adds	r3, #4
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe fb34 	bl	8006adc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848c:	4b0f      	ldr	r3, [pc, #60]	; (80084cc <xTaskPriorityDisinherit+0xd4>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	429a      	cmp	r2, r3
 8008492:	d903      	bls.n	800849c <xTaskPriorityDisinherit+0xa4>
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	4a0c      	ldr	r2, [pc, #48]	; (80084cc <xTaskPriorityDisinherit+0xd4>)
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4a09      	ldr	r2, [pc, #36]	; (80084d0 <xTaskPriorityDisinherit+0xd8>)
 80084aa:	441a      	add	r2, r3
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	3304      	adds	r3, #4
 80084b0:	4619      	mov	r1, r3
 80084b2:	4610      	mov	r0, r2
 80084b4:	f7fe fab7 	bl	8006a26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80084b8:	2301      	movs	r3, #1
 80084ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084bc:	697b      	ldr	r3, [r7, #20]
	}
 80084be:	4618      	mov	r0, r3
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	200009a0 	.word	0x200009a0
 80084cc:	20000e7c 	.word	0x20000e7c
 80084d0:	200009a4 	.word	0x200009a4

080084d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084de:	4b21      	ldr	r3, [pc, #132]	; (8008564 <prvAddCurrentTaskToDelayedList+0x90>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084e4:	4b20      	ldr	r3, [pc, #128]	; (8008568 <prvAddCurrentTaskToDelayedList+0x94>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3304      	adds	r3, #4
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe faf6 	bl	8006adc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f6:	d10a      	bne.n	800850e <prvAddCurrentTaskToDelayedList+0x3a>
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d007      	beq.n	800850e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084fe:	4b1a      	ldr	r3, [pc, #104]	; (8008568 <prvAddCurrentTaskToDelayedList+0x94>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3304      	adds	r3, #4
 8008504:	4619      	mov	r1, r3
 8008506:	4819      	ldr	r0, [pc, #100]	; (800856c <prvAddCurrentTaskToDelayedList+0x98>)
 8008508:	f7fe fa8d 	bl	8006a26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800850c:	e026      	b.n	800855c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4413      	add	r3, r2
 8008514:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008516:	4b14      	ldr	r3, [pc, #80]	; (8008568 <prvAddCurrentTaskToDelayedList+0x94>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	429a      	cmp	r2, r3
 8008524:	d209      	bcs.n	800853a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008526:	4b12      	ldr	r3, [pc, #72]	; (8008570 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <prvAddCurrentTaskToDelayedList+0x94>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3304      	adds	r3, #4
 8008530:	4619      	mov	r1, r3
 8008532:	4610      	mov	r0, r2
 8008534:	f7fe fa9a 	bl	8006a6c <vListInsert>
}
 8008538:	e010      	b.n	800855c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800853a:	4b0e      	ldr	r3, [pc, #56]	; (8008574 <prvAddCurrentTaskToDelayedList+0xa0>)
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	4b0a      	ldr	r3, [pc, #40]	; (8008568 <prvAddCurrentTaskToDelayedList+0x94>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3304      	adds	r3, #4
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f7fe fa90 	bl	8006a6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800854c:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <prvAddCurrentTaskToDelayedList+0xa4>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	429a      	cmp	r2, r3
 8008554:	d202      	bcs.n	800855c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008556:	4a08      	ldr	r2, [pc, #32]	; (8008578 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	6013      	str	r3, [r2, #0]
}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20000e78 	.word	0x20000e78
 8008568:	200009a0 	.word	0x200009a0
 800856c:	20000e60 	.word	0x20000e60
 8008570:	20000e30 	.word	0x20000e30
 8008574:	20000e2c 	.word	0x20000e2c
 8008578:	20000e94 	.word	0x20000e94

0800857c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08a      	sub	sp, #40	; 0x28
 8008580:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008582:	2300      	movs	r3, #0
 8008584:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008586:	f000 facb 	bl	8008b20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800858a:	4b1c      	ldr	r3, [pc, #112]	; (80085fc <xTimerCreateTimerTask+0x80>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d021      	beq.n	80085d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008592:	2300      	movs	r3, #0
 8008594:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008596:	2300      	movs	r3, #0
 8008598:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800859a:	1d3a      	adds	r2, r7, #4
 800859c:	f107 0108 	add.w	r1, r7, #8
 80085a0:	f107 030c 	add.w	r3, r7, #12
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fe f9f9 	bl	800699c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80085aa:	6879      	ldr	r1, [r7, #4]
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	9202      	str	r2, [sp, #8]
 80085b2:	9301      	str	r3, [sp, #4]
 80085b4:	2302      	movs	r3, #2
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	2300      	movs	r3, #0
 80085ba:	460a      	mov	r2, r1
 80085bc:	4910      	ldr	r1, [pc, #64]	; (8008600 <xTimerCreateTimerTask+0x84>)
 80085be:	4811      	ldr	r0, [pc, #68]	; (8008604 <xTimerCreateTimerTask+0x88>)
 80085c0:	f7ff f890 	bl	80076e4 <xTaskCreateStatic>
 80085c4:	4603      	mov	r3, r0
 80085c6:	4a10      	ldr	r2, [pc, #64]	; (8008608 <xTimerCreateTimerTask+0x8c>)
 80085c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80085ca:	4b0f      	ldr	r3, [pc, #60]	; (8008608 <xTimerCreateTimerTask+0x8c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80085d2:	2301      	movs	r3, #1
 80085d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10a      	bne.n	80085f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80085dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	613b      	str	r3, [r7, #16]
}
 80085ee:	bf00      	nop
 80085f0:	e7fe      	b.n	80085f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80085f2:	697b      	ldr	r3, [r7, #20]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	20000ed0 	.word	0x20000ed0
 8008600:	0800df78 	.word	0x0800df78
 8008604:	08008729 	.word	0x08008729
 8008608:	20000ed4 	.word	0x20000ed4

0800860c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08a      	sub	sp, #40	; 0x28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800861a:	2300      	movs	r3, #0
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	623b      	str	r3, [r7, #32]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800863a:	4b1a      	ldr	r3, [pc, #104]	; (80086a4 <xTimerGenericCommand+0x98>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d02a      	beq.n	8008698 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2b05      	cmp	r3, #5
 8008652:	dc18      	bgt.n	8008686 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008654:	f7ff feb2 	bl	80083bc <xTaskGetSchedulerState>
 8008658:	4603      	mov	r3, r0
 800865a:	2b02      	cmp	r3, #2
 800865c:	d109      	bne.n	8008672 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800865e:	4b11      	ldr	r3, [pc, #68]	; (80086a4 <xTimerGenericCommand+0x98>)
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	f107 0110 	add.w	r1, r7, #16
 8008666:	2300      	movs	r3, #0
 8008668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800866a:	f7fe fc0b 	bl	8006e84 <xQueueGenericSend>
 800866e:	6278      	str	r0, [r7, #36]	; 0x24
 8008670:	e012      	b.n	8008698 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008672:	4b0c      	ldr	r3, [pc, #48]	; (80086a4 <xTimerGenericCommand+0x98>)
 8008674:	6818      	ldr	r0, [r3, #0]
 8008676:	f107 0110 	add.w	r1, r7, #16
 800867a:	2300      	movs	r3, #0
 800867c:	2200      	movs	r2, #0
 800867e:	f7fe fc01 	bl	8006e84 <xQueueGenericSend>
 8008682:	6278      	str	r0, [r7, #36]	; 0x24
 8008684:	e008      	b.n	8008698 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008686:	4b07      	ldr	r3, [pc, #28]	; (80086a4 <xTimerGenericCommand+0x98>)
 8008688:	6818      	ldr	r0, [r3, #0]
 800868a:	f107 0110 	add.w	r1, r7, #16
 800868e:	2300      	movs	r3, #0
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	f7fe fcf5 	bl	8007080 <xQueueGenericSendFromISR>
 8008696:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800869a:	4618      	mov	r0, r3
 800869c:	3728      	adds	r7, #40	; 0x28
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20000ed0 	.word	0x20000ed0

080086a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af02      	add	r7, sp, #8
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086b2:	4b1c      	ldr	r3, [pc, #112]	; (8008724 <prvProcessExpiredTimer+0x7c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	3304      	adds	r3, #4
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fe fa0b 	bl	8006adc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d122      	bne.n	8008714 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	699a      	ldr	r2, [r3, #24]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	18d1      	adds	r1, r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	6978      	ldr	r0, [r7, #20]
 80086dc:	f000 f8c8 	bl	8008870 <prvInsertTimerInActiveList>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d016      	beq.n	8008714 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086e6:	2300      	movs	r3, #0
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	2300      	movs	r3, #0
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	2100      	movs	r1, #0
 80086f0:	6978      	ldr	r0, [r7, #20]
 80086f2:	f7ff ff8b 	bl	800860c <xTimerGenericCommand>
 80086f6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10a      	bne.n	8008714 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	60fb      	str	r3, [r7, #12]
}
 8008710:	bf00      	nop
 8008712:	e7fe      	b.n	8008712 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	6978      	ldr	r0, [r7, #20]
 800871a:	4798      	blx	r3
}
 800871c:	bf00      	nop
 800871e:	3718      	adds	r7, #24
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	20000ec8 	.word	0x20000ec8

08008728 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008730:	f107 0308 	add.w	r3, r7, #8
 8008734:	4618      	mov	r0, r3
 8008736:	f000 f857 	bl	80087e8 <prvGetNextExpireTime>
 800873a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	4619      	mov	r1, r3
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 f803 	bl	800874c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008746:	f000 f8d5 	bl	80088f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800874a:	e7f1      	b.n	8008730 <prvTimerTask+0x8>

0800874c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008756:	f7ff fa19 	bl	8007b8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800875a:	f107 0308 	add.w	r3, r7, #8
 800875e:	4618      	mov	r0, r3
 8008760:	f000 f866 	bl	8008830 <prvSampleTimeNow>
 8008764:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d130      	bne.n	80087ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <prvProcessTimerOrBlockTask+0x3c>
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	429a      	cmp	r2, r3
 8008778:	d806      	bhi.n	8008788 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800877a:	f7ff fa15 	bl	8007ba8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800877e:	68f9      	ldr	r1, [r7, #12]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff ff91 	bl	80086a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008786:	e024      	b.n	80087d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d008      	beq.n	80087a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800878e:	4b13      	ldr	r3, [pc, #76]	; (80087dc <prvProcessTimerOrBlockTask+0x90>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	bf0c      	ite	eq
 8008798:	2301      	moveq	r3, #1
 800879a:	2300      	movne	r3, #0
 800879c:	b2db      	uxtb	r3, r3
 800879e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80087a0:	4b0f      	ldr	r3, [pc, #60]	; (80087e0 <prvProcessTimerOrBlockTask+0x94>)
 80087a2:	6818      	ldr	r0, [r3, #0]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	4619      	mov	r1, r3
 80087ae:	f7fe ff65 	bl	800767c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80087b2:	f7ff f9f9 	bl	8007ba8 <xTaskResumeAll>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10a      	bne.n	80087d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80087bc:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <prvProcessTimerOrBlockTask+0x98>)
 80087be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	f3bf 8f6f 	isb	sy
}
 80087cc:	e001      	b.n	80087d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80087ce:	f7ff f9eb 	bl	8007ba8 <xTaskResumeAll>
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	20000ecc 	.word	0x20000ecc
 80087e0:	20000ed0 	.word	0x20000ed0
 80087e4:	e000ed04 	.word	0xe000ed04

080087e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80087f0:	4b0e      	ldr	r3, [pc, #56]	; (800882c <prvGetNextExpireTime+0x44>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bf0c      	ite	eq
 80087fa:	2301      	moveq	r3, #1
 80087fc:	2300      	movne	r3, #0
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	461a      	mov	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d105      	bne.n	800881a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800880e:	4b07      	ldr	r3, [pc, #28]	; (800882c <prvGetNextExpireTime+0x44>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	e001      	b.n	800881e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800881e:	68fb      	ldr	r3, [r7, #12]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	bc80      	pop	{r7}
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	20000ec8 	.word	0x20000ec8

08008830 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008838:	f7ff fa54 	bl	8007ce4 <xTaskGetTickCount>
 800883c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800883e:	4b0b      	ldr	r3, [pc, #44]	; (800886c <prvSampleTimeNow+0x3c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	429a      	cmp	r2, r3
 8008846:	d205      	bcs.n	8008854 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008848:	f000 f908 	bl	8008a5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	e002      	b.n	800885a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800885a:	4a04      	ldr	r2, [pc, #16]	; (800886c <prvSampleTimeNow+0x3c>)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008860:	68fb      	ldr	r3, [r7, #12]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	20000ed8 	.word	0x20000ed8

08008870 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800887e:	2300      	movs	r3, #0
 8008880:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	429a      	cmp	r2, r3
 8008894:	d812      	bhi.n	80088bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	1ad2      	subs	r2, r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d302      	bcc.n	80088aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80088a4:	2301      	movs	r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e01b      	b.n	80088e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80088aa:	4b10      	ldr	r3, [pc, #64]	; (80088ec <prvInsertTimerInActiveList+0x7c>)
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3304      	adds	r3, #4
 80088b2:	4619      	mov	r1, r3
 80088b4:	4610      	mov	r0, r2
 80088b6:	f7fe f8d9 	bl	8006a6c <vListInsert>
 80088ba:	e012      	b.n	80088e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d206      	bcs.n	80088d2 <prvInsertTimerInActiveList+0x62>
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d302      	bcc.n	80088d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80088cc:	2301      	movs	r3, #1
 80088ce:	617b      	str	r3, [r7, #20]
 80088d0:	e007      	b.n	80088e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088d2:	4b07      	ldr	r3, [pc, #28]	; (80088f0 <prvInsertTimerInActiveList+0x80>)
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3304      	adds	r3, #4
 80088da:	4619      	mov	r1, r3
 80088dc:	4610      	mov	r0, r2
 80088de:	f7fe f8c5 	bl	8006a6c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80088e2:	697b      	ldr	r3, [r7, #20]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	20000ecc 	.word	0x20000ecc
 80088f0:	20000ec8 	.word	0x20000ec8

080088f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b08e      	sub	sp, #56	; 0x38
 80088f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088fa:	e09d      	b.n	8008a38 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	da18      	bge.n	8008934 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008902:	1d3b      	adds	r3, r7, #4
 8008904:	3304      	adds	r3, #4
 8008906:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10a      	bne.n	8008924 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	61fb      	str	r3, [r7, #28]
}
 8008920:	bf00      	nop
 8008922:	e7fe      	b.n	8008922 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800892a:	6850      	ldr	r0, [r2, #4]
 800892c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800892e:	6892      	ldr	r2, [r2, #8]
 8008930:	4611      	mov	r1, r2
 8008932:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	db7d      	blt.n	8008a36 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800893e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d004      	beq.n	8008950 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	3304      	adds	r3, #4
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe f8c6 	bl	8006adc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008950:	463b      	mov	r3, r7
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff ff6c 	bl	8008830 <prvSampleTimeNow>
 8008958:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b09      	cmp	r3, #9
 800895e:	d86b      	bhi.n	8008a38 <prvProcessReceivedCommands+0x144>
 8008960:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <prvProcessReceivedCommands+0x74>)
 8008962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008966:	bf00      	nop
 8008968:	08008991 	.word	0x08008991
 800896c:	08008991 	.word	0x08008991
 8008970:	08008991 	.word	0x08008991
 8008974:	08008a39 	.word	0x08008a39
 8008978:	080089ed 	.word	0x080089ed
 800897c:	08008a25 	.word	0x08008a25
 8008980:	08008991 	.word	0x08008991
 8008984:	08008991 	.word	0x08008991
 8008988:	08008a39 	.word	0x08008a39
 800898c:	080089ed 	.word	0x080089ed
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	18d1      	adds	r1, r2, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800899e:	f7ff ff67 	bl	8008870 <prvInsertTimerInActiveList>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d047      	beq.n	8008a38 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80089b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d13f      	bne.n	8008a38 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	441a      	add	r2, r3
 80089c0:	2300      	movs	r3, #0
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	2300      	movs	r3, #0
 80089c6:	2100      	movs	r1, #0
 80089c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ca:	f7ff fe1f 	bl	800860c <xTimerGenericCommand>
 80089ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d130      	bne.n	8008a38 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80089d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	61bb      	str	r3, [r7, #24]
}
 80089e8:	bf00      	nop
 80089ea:	e7fe      	b.n	80089ea <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10a      	bne.n	8008a10 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	617b      	str	r3, [r7, #20]
}
 8008a0c:	bf00      	nop
 8008a0e:	e7fe      	b.n	8008a0e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	699a      	ldr	r2, [r3, #24]
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	18d1      	adds	r1, r2, r3
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a1e:	f7ff ff27 	bl	8008870 <prvInsertTimerInActiveList>
					break;
 8008a22:	e009      	b.n	8008a38 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d104      	bne.n	8008a38 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a30:	f000 fb68 	bl	8009104 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a34:	e000      	b.n	8008a38 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008a36:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a38:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <prvProcessReceivedCommands+0x164>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	1d39      	adds	r1, r7, #4
 8008a3e:	2200      	movs	r2, #0
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fe fbb5 	bl	80071b0 <xQueueReceive>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f47f af57 	bne.w	80088fc <prvProcessReceivedCommands+0x8>
	}
}
 8008a4e:	bf00      	nop
 8008a50:	bf00      	nop
 8008a52:	3730      	adds	r7, #48	; 0x30
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	20000ed0 	.word	0x20000ed0

08008a5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a62:	e045      	b.n	8008af0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a64:	4b2c      	ldr	r3, [pc, #176]	; (8008b18 <prvSwitchTimerLists+0xbc>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a6e:	4b2a      	ldr	r3, [pc, #168]	; (8008b18 <prvSwitchTimerLists+0xbc>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fe f82d 	bl	8006adc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d12e      	bne.n	8008af0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	4413      	add	r3, r2
 8008a9a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d90e      	bls.n	8008ac2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ab0:	4b19      	ldr	r3, [pc, #100]	; (8008b18 <prvSwitchTimerLists+0xbc>)
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4610      	mov	r0, r2
 8008abc:	f7fd ffd6 	bl	8006a6c <vListInsert>
 8008ac0:	e016      	b.n	8008af0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	2100      	movs	r1, #0
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f7ff fd9d 	bl	800860c <xTimerGenericCommand>
 8008ad2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10a      	bne.n	8008af0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	603b      	str	r3, [r7, #0]
}
 8008aec:	bf00      	nop
 8008aee:	e7fe      	b.n	8008aee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008af0:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <prvSwitchTimerLists+0xbc>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1b4      	bne.n	8008a64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008afa:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <prvSwitchTimerLists+0xbc>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b00:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <prvSwitchTimerLists+0xc0>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a04      	ldr	r2, [pc, #16]	; (8008b18 <prvSwitchTimerLists+0xbc>)
 8008b06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b08:	4a04      	ldr	r2, [pc, #16]	; (8008b1c <prvSwitchTimerLists+0xc0>)
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	6013      	str	r3, [r2, #0]
}
 8008b0e:	bf00      	nop
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20000ec8 	.word	0x20000ec8
 8008b1c:	20000ecc 	.word	0x20000ecc

08008b20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b26:	f000 f929 	bl	8008d7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b2a:	4b15      	ldr	r3, [pc, #84]	; (8008b80 <prvCheckForValidListAndQueue+0x60>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d120      	bne.n	8008b74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b32:	4814      	ldr	r0, [pc, #80]	; (8008b84 <prvCheckForValidListAndQueue+0x64>)
 8008b34:	f7fd ff4c 	bl	80069d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b38:	4813      	ldr	r0, [pc, #76]	; (8008b88 <prvCheckForValidListAndQueue+0x68>)
 8008b3a:	f7fd ff49 	bl	80069d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b3e:	4b13      	ldr	r3, [pc, #76]	; (8008b8c <prvCheckForValidListAndQueue+0x6c>)
 8008b40:	4a10      	ldr	r2, [pc, #64]	; (8008b84 <prvCheckForValidListAndQueue+0x64>)
 8008b42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b44:	4b12      	ldr	r3, [pc, #72]	; (8008b90 <prvCheckForValidListAndQueue+0x70>)
 8008b46:	4a10      	ldr	r2, [pc, #64]	; (8008b88 <prvCheckForValidListAndQueue+0x68>)
 8008b48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	4b11      	ldr	r3, [pc, #68]	; (8008b94 <prvCheckForValidListAndQueue+0x74>)
 8008b50:	4a11      	ldr	r2, [pc, #68]	; (8008b98 <prvCheckForValidListAndQueue+0x78>)
 8008b52:	2110      	movs	r1, #16
 8008b54:	200a      	movs	r0, #10
 8008b56:	f7fe f853 	bl	8006c00 <xQueueGenericCreateStatic>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	4a08      	ldr	r2, [pc, #32]	; (8008b80 <prvCheckForValidListAndQueue+0x60>)
 8008b5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b60:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <prvCheckForValidListAndQueue+0x60>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d005      	beq.n	8008b74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b68:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <prvCheckForValidListAndQueue+0x60>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	490b      	ldr	r1, [pc, #44]	; (8008b9c <prvCheckForValidListAndQueue+0x7c>)
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe fd32 	bl	80075d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b74:	f000 f932 	bl	8008ddc <vPortExitCritical>
}
 8008b78:	bf00      	nop
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	20000ed0 	.word	0x20000ed0
 8008b84:	20000ea0 	.word	0x20000ea0
 8008b88:	20000eb4 	.word	0x20000eb4
 8008b8c:	20000ec8 	.word	0x20000ec8
 8008b90:	20000ecc 	.word	0x20000ecc
 8008b94:	20000f7c 	.word	0x20000f7c
 8008b98:	20000edc 	.word	0x20000edc
 8008b9c:	0800df80 	.word	0x0800df80

08008ba0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3b04      	subs	r3, #4
 8008bb0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	3b04      	subs	r3, #4
 8008bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	f023 0201 	bic.w	r2, r3, #1
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3b04      	subs	r3, #4
 8008bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bd0:	4a08      	ldr	r2, [pc, #32]	; (8008bf4 <pxPortInitialiseStack+0x54>)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3b14      	subs	r3, #20
 8008bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3b20      	subs	r3, #32
 8008be6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008be8:	68fb      	ldr	r3, [r7, #12]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bc80      	pop	{r7}
 8008bf2:	4770      	bx	lr
 8008bf4:	08008bf9 	.word	0x08008bf9

08008bf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c02:	4b12      	ldr	r3, [pc, #72]	; (8008c4c <prvTaskExitError+0x54>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0a:	d00a      	beq.n	8008c22 <prvTaskExitError+0x2a>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	60fb      	str	r3, [r7, #12]
}
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <prvTaskExitError+0x28>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	60bb      	str	r3, [r7, #8]
}
 8008c34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c36:	bf00      	nop
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d0fc      	beq.n	8008c38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c3e:	bf00      	nop
 8008c40:	bf00      	nop
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bc80      	pop	{r7}
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	20000008 	.word	0x20000008

08008c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c50:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <pxCurrentTCBConst2>)
 8008c52:	6819      	ldr	r1, [r3, #0]
 8008c54:	6808      	ldr	r0, [r1, #0]
 8008c56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c5a:	f380 8809 	msr	PSP, r0
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f04f 0000 	mov.w	r0, #0
 8008c66:	f380 8811 	msr	BASEPRI, r0
 8008c6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008c6e:	4770      	bx	lr

08008c70 <pxCurrentTCBConst2>:
 8008c70:	200009a0 	.word	0x200009a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop

08008c78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008c78:	4806      	ldr	r0, [pc, #24]	; (8008c94 <prvPortStartFirstTask+0x1c>)
 8008c7a:	6800      	ldr	r0, [r0, #0]
 8008c7c:	6800      	ldr	r0, [r0, #0]
 8008c7e:	f380 8808 	msr	MSP, r0
 8008c82:	b662      	cpsie	i
 8008c84:	b661      	cpsie	f
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	df00      	svc	0
 8008c90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c92:	bf00      	nop
 8008c94:	e000ed08 	.word	0xe000ed08

08008c98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c9e:	4b32      	ldr	r3, [pc, #200]	; (8008d68 <xPortStartScheduler+0xd0>)
 8008ca0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	22ff      	movs	r2, #255	; 0xff
 8008cae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	4b2a      	ldr	r3, [pc, #168]	; (8008d6c <xPortStartScheduler+0xd4>)
 8008cc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cc6:	4b2a      	ldr	r3, [pc, #168]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008cc8:	2207      	movs	r2, #7
 8008cca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ccc:	e009      	b.n	8008ce2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008cce:	4b28      	ldr	r3, [pc, #160]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	4a26      	ldr	r2, [pc, #152]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008cd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ce2:	78fb      	ldrb	r3, [r7, #3]
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cea:	2b80      	cmp	r3, #128	; 0x80
 8008cec:	d0ef      	beq.n	8008cce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cee:	4b20      	ldr	r3, [pc, #128]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f1c3 0307 	rsb	r3, r3, #7
 8008cf6:	2b04      	cmp	r3, #4
 8008cf8:	d00a      	beq.n	8008d10 <xPortStartScheduler+0x78>
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	60bb      	str	r3, [r7, #8]
}
 8008d0c:	bf00      	nop
 8008d0e:	e7fe      	b.n	8008d0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d10:	4b17      	ldr	r3, [pc, #92]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	021b      	lsls	r3, r3, #8
 8008d16:	4a16      	ldr	r2, [pc, #88]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008d18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d1a:	4b15      	ldr	r3, [pc, #84]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d22:	4a13      	ldr	r2, [pc, #76]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008d24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d2e:	4b11      	ldr	r3, [pc, #68]	; (8008d74 <xPortStartScheduler+0xdc>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a10      	ldr	r2, [pc, #64]	; (8008d74 <xPortStartScheduler+0xdc>)
 8008d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	; (8008d74 <xPortStartScheduler+0xdc>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a0d      	ldr	r2, [pc, #52]	; (8008d74 <xPortStartScheduler+0xdc>)
 8008d40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d46:	f000 f8b9 	bl	8008ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d4a:	4b0b      	ldr	r3, [pc, #44]	; (8008d78 <xPortStartScheduler+0xe0>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d50:	f7ff ff92 	bl	8008c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d54:	f7ff f892 	bl	8007e7c <vTaskSwitchContext>
	prvTaskExitError();
 8008d58:	f7ff ff4e 	bl	8008bf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	e000e400 	.word	0xe000e400
 8008d6c:	20000fcc 	.word	0x20000fcc
 8008d70:	20000fd0 	.word	0x20000fd0
 8008d74:	e000ed20 	.word	0xe000ed20
 8008d78:	20000008 	.word	0x20000008

08008d7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	607b      	str	r3, [r7, #4]
}
 8008d94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d96:	4b0f      	ldr	r3, [pc, #60]	; (8008dd4 <vPortEnterCritical+0x58>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	4a0d      	ldr	r2, [pc, #52]	; (8008dd4 <vPortEnterCritical+0x58>)
 8008d9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008da0:	4b0c      	ldr	r3, [pc, #48]	; (8008dd4 <vPortEnterCritical+0x58>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d10f      	bne.n	8008dc8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008da8:	4b0b      	ldr	r3, [pc, #44]	; (8008dd8 <vPortEnterCritical+0x5c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	603b      	str	r3, [r7, #0]
}
 8008dc4:	bf00      	nop
 8008dc6:	e7fe      	b.n	8008dc6 <vPortEnterCritical+0x4a>
	}
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bc80      	pop	{r7}
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20000008 	.word	0x20000008
 8008dd8:	e000ed04 	.word	0xe000ed04

08008ddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008de2:	4b11      	ldr	r3, [pc, #68]	; (8008e28 <vPortExitCritical+0x4c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <vPortExitCritical+0x24>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	607b      	str	r3, [r7, #4]
}
 8008dfc:	bf00      	nop
 8008dfe:	e7fe      	b.n	8008dfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e00:	4b09      	ldr	r3, [pc, #36]	; (8008e28 <vPortExitCritical+0x4c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	4a08      	ldr	r2, [pc, #32]	; (8008e28 <vPortExitCritical+0x4c>)
 8008e08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e0a:	4b07      	ldr	r3, [pc, #28]	; (8008e28 <vPortExitCritical+0x4c>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d105      	bne.n	8008e1e <vPortExitCritical+0x42>
 8008e12:	2300      	movs	r3, #0
 8008e14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	f383 8811 	msr	BASEPRI, r3
}
 8008e1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bc80      	pop	{r7}
 8008e26:	4770      	bx	lr
 8008e28:	20000008 	.word	0x20000008
 8008e2c:	00000000 	.word	0x00000000

08008e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e30:	f3ef 8009 	mrs	r0, PSP
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <pxCurrentTCBConst>)
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e40:	6010      	str	r0, [r2, #0]
 8008e42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008e46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e4a:	f380 8811 	msr	BASEPRI, r0
 8008e4e:	f7ff f815 	bl	8007e7c <vTaskSwitchContext>
 8008e52:	f04f 0000 	mov.w	r0, #0
 8008e56:	f380 8811 	msr	BASEPRI, r0
 8008e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008e5e:	6819      	ldr	r1, [r3, #0]
 8008e60:	6808      	ldr	r0, [r1, #0]
 8008e62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e66:	f380 8809 	msr	PSP, r0
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	4770      	bx	lr

08008e70 <pxCurrentTCBConst>:
 8008e70:	200009a0 	.word	0x200009a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop

08008e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	607b      	str	r3, [r7, #4]
}
 8008e90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e92:	f7fe ff35 	bl	8007d00 <xTaskIncrementTick>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e9c:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <SysTick_Handler+0x40>)
 8008e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f383 8811 	msr	BASEPRI, r3
}
 8008eae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	e000ed04 	.word	0xe000ed04

08008ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ec0:	4b0a      	ldr	r3, [pc, #40]	; (8008eec <vPortSetupTimerInterrupt+0x30>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ec6:	4b0a      	ldr	r3, [pc, #40]	; (8008ef0 <vPortSetupTimerInterrupt+0x34>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ecc:	4b09      	ldr	r3, [pc, #36]	; (8008ef4 <vPortSetupTimerInterrupt+0x38>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a09      	ldr	r2, [pc, #36]	; (8008ef8 <vPortSetupTimerInterrupt+0x3c>)
 8008ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed6:	0b5b      	lsrs	r3, r3, #13
 8008ed8:	4a08      	ldr	r2, [pc, #32]	; (8008efc <vPortSetupTimerInterrupt+0x40>)
 8008eda:	3b01      	subs	r3, #1
 8008edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ede:	4b03      	ldr	r3, [pc, #12]	; (8008eec <vPortSetupTimerInterrupt+0x30>)
 8008ee0:	2207      	movs	r2, #7
 8008ee2:	601a      	str	r2, [r3, #0]
}
 8008ee4:	bf00      	nop
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bc80      	pop	{r7}
 8008eea:	4770      	bx	lr
 8008eec:	e000e010 	.word	0xe000e010
 8008ef0:	e000e018 	.word	0xe000e018
 8008ef4:	20000000 	.word	0x20000000
 8008ef8:	d1b71759 	.word	0xd1b71759
 8008efc:	e000e014 	.word	0xe000e014

08008f00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f06:	f3ef 8305 	mrs	r3, IPSR
 8008f0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2b0f      	cmp	r3, #15
 8008f10:	d914      	bls.n	8008f3c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f12:	4a16      	ldr	r2, [pc, #88]	; (8008f6c <vPortValidateInterruptPriority+0x6c>)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4413      	add	r3, r2
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f1c:	4b14      	ldr	r3, [pc, #80]	; (8008f70 <vPortValidateInterruptPriority+0x70>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	7afa      	ldrb	r2, [r7, #11]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d20a      	bcs.n	8008f3c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	607b      	str	r3, [r7, #4]
}
 8008f38:	bf00      	nop
 8008f3a:	e7fe      	b.n	8008f3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f3c:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <vPortValidateInterruptPriority+0x74>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f44:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <vPortValidateInterruptPriority+0x78>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d90a      	bls.n	8008f62 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	603b      	str	r3, [r7, #0]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <vPortValidateInterruptPriority+0x60>
	}
 8008f62:	bf00      	nop
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bc80      	pop	{r7}
 8008f6a:	4770      	bx	lr
 8008f6c:	e000e3f0 	.word	0xe000e3f0
 8008f70:	20000fcc 	.word	0x20000fcc
 8008f74:	e000ed0c 	.word	0xe000ed0c
 8008f78:	20000fd0 	.word	0x20000fd0

08008f7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08a      	sub	sp, #40	; 0x28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f84:	2300      	movs	r3, #0
 8008f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f88:	f7fe fe00 	bl	8007b8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f8c:	4b58      	ldr	r3, [pc, #352]	; (80090f0 <pvPortMalloc+0x174>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f94:	f000 f910 	bl	80091b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f98:	4b56      	ldr	r3, [pc, #344]	; (80090f4 <pvPortMalloc+0x178>)
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f040 808e 	bne.w	80090c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d01d      	beq.n	8008fe8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008fac:	2208      	movs	r2, #8
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f003 0307 	and.w	r3, r3, #7
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d014      	beq.n	8008fe8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f023 0307 	bic.w	r3, r3, #7
 8008fc4:	3308      	adds	r3, #8
 8008fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f003 0307 	and.w	r3, r3, #7
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <pvPortMalloc+0x6c>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	617b      	str	r3, [r7, #20]
}
 8008fe4:	bf00      	nop
 8008fe6:	e7fe      	b.n	8008fe6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d069      	beq.n	80090c2 <pvPortMalloc+0x146>
 8008fee:	4b42      	ldr	r3, [pc, #264]	; (80090f8 <pvPortMalloc+0x17c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d864      	bhi.n	80090c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ff8:	4b40      	ldr	r3, [pc, #256]	; (80090fc <pvPortMalloc+0x180>)
 8008ffa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ffc:	4b3f      	ldr	r3, [pc, #252]	; (80090fc <pvPortMalloc+0x180>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009002:	e004      	b.n	800900e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	429a      	cmp	r2, r3
 8009016:	d903      	bls.n	8009020 <pvPortMalloc+0xa4>
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1f1      	bne.n	8009004 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009020:	4b33      	ldr	r3, [pc, #204]	; (80090f0 <pvPortMalloc+0x174>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009026:	429a      	cmp	r2, r3
 8009028:	d04b      	beq.n	80090c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2208      	movs	r2, #8
 8009030:	4413      	add	r3, r2
 8009032:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	1ad2      	subs	r2, r2, r3
 8009044:	2308      	movs	r3, #8
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	429a      	cmp	r2, r3
 800904a:	d91f      	bls.n	800908c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800904c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4413      	add	r3, r2
 8009052:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	f003 0307 	and.w	r3, r3, #7
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00a      	beq.n	8009074 <pvPortMalloc+0xf8>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	613b      	str	r3, [r7, #16]
}
 8009070:	bf00      	nop
 8009072:	e7fe      	b.n	8009072 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	1ad2      	subs	r2, r2, r3
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009086:	69b8      	ldr	r0, [r7, #24]
 8009088:	f000 f8f8 	bl	800927c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800908c:	4b1a      	ldr	r3, [pc, #104]	; (80090f8 <pvPortMalloc+0x17c>)
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	4a18      	ldr	r2, [pc, #96]	; (80090f8 <pvPortMalloc+0x17c>)
 8009098:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800909a:	4b17      	ldr	r3, [pc, #92]	; (80090f8 <pvPortMalloc+0x17c>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	4b18      	ldr	r3, [pc, #96]	; (8009100 <pvPortMalloc+0x184>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d203      	bcs.n	80090ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090a6:	4b14      	ldr	r3, [pc, #80]	; (80090f8 <pvPortMalloc+0x17c>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a15      	ldr	r2, [pc, #84]	; (8009100 <pvPortMalloc+0x184>)
 80090ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	4b10      	ldr	r3, [pc, #64]	; (80090f4 <pvPortMalloc+0x178>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	431a      	orrs	r2, r3
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090c2:	f7fe fd71 	bl	8007ba8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00a      	beq.n	80090e6 <pvPortMalloc+0x16a>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	60fb      	str	r3, [r7, #12]
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <pvPortMalloc+0x168>
	return pvReturn;
 80090e6:	69fb      	ldr	r3, [r7, #28]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3728      	adds	r7, #40	; 0x28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	200036ec 	.word	0x200036ec
 80090f4:	200036f8 	.word	0x200036f8
 80090f8:	200036f0 	.word	0x200036f0
 80090fc:	200036e4 	.word	0x200036e4
 8009100:	200036f4 	.word	0x200036f4

08009104 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d048      	beq.n	80091a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009116:	2308      	movs	r3, #8
 8009118:	425b      	negs	r3, r3
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	4413      	add	r3, r2
 800911e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	4b21      	ldr	r3, [pc, #132]	; (80091b0 <vPortFree+0xac>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4013      	ands	r3, r2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10a      	bne.n	8009148 <vPortFree+0x44>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	60fb      	str	r3, [r7, #12]
}
 8009144:	bf00      	nop
 8009146:	e7fe      	b.n	8009146 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00a      	beq.n	8009166 <vPortFree+0x62>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	60bb      	str	r3, [r7, #8]
}
 8009162:	bf00      	nop
 8009164:	e7fe      	b.n	8009164 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	4b11      	ldr	r3, [pc, #68]	; (80091b0 <vPortFree+0xac>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4013      	ands	r3, r2
 8009170:	2b00      	cmp	r3, #0
 8009172:	d019      	beq.n	80091a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d115      	bne.n	80091a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	685a      	ldr	r2, [r3, #4]
 8009180:	4b0b      	ldr	r3, [pc, #44]	; (80091b0 <vPortFree+0xac>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	43db      	mvns	r3, r3
 8009186:	401a      	ands	r2, r3
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800918c:	f7fe fcfe 	bl	8007b8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	4b07      	ldr	r3, [pc, #28]	; (80091b4 <vPortFree+0xb0>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4413      	add	r3, r2
 800919a:	4a06      	ldr	r2, [pc, #24]	; (80091b4 <vPortFree+0xb0>)
 800919c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800919e:	6938      	ldr	r0, [r7, #16]
 80091a0:	f000 f86c 	bl	800927c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80091a4:	f7fe fd00 	bl	8007ba8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091a8:	bf00      	nop
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	200036f8 	.word	0x200036f8
 80091b4:	200036f0 	.word	0x200036f0

080091b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091be:	f242 7310 	movw	r3, #10000	; 0x2710
 80091c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091c4:	4b27      	ldr	r3, [pc, #156]	; (8009264 <prvHeapInit+0xac>)
 80091c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f003 0307 	and.w	r3, r3, #7
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00c      	beq.n	80091ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3307      	adds	r3, #7
 80091d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f023 0307 	bic.w	r3, r3, #7
 80091de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	4a1f      	ldr	r2, [pc, #124]	; (8009264 <prvHeapInit+0xac>)
 80091e8:	4413      	add	r3, r2
 80091ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091f0:	4a1d      	ldr	r2, [pc, #116]	; (8009268 <prvHeapInit+0xb0>)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091f6:	4b1c      	ldr	r3, [pc, #112]	; (8009268 <prvHeapInit+0xb0>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	4413      	add	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009204:	2208      	movs	r2, #8
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	1a9b      	subs	r3, r3, r2
 800920a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f023 0307 	bic.w	r3, r3, #7
 8009212:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4a15      	ldr	r2, [pc, #84]	; (800926c <prvHeapInit+0xb4>)
 8009218:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800921a:	4b14      	ldr	r3, [pc, #80]	; (800926c <prvHeapInit+0xb4>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2200      	movs	r2, #0
 8009220:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009222:	4b12      	ldr	r3, [pc, #72]	; (800926c <prvHeapInit+0xb4>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2200      	movs	r2, #0
 8009228:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	1ad2      	subs	r2, r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009238:	4b0c      	ldr	r3, [pc, #48]	; (800926c <prvHeapInit+0xb4>)
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	4a0a      	ldr	r2, [pc, #40]	; (8009270 <prvHeapInit+0xb8>)
 8009246:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	4a09      	ldr	r2, [pc, #36]	; (8009274 <prvHeapInit+0xbc>)
 800924e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009250:	4b09      	ldr	r3, [pc, #36]	; (8009278 <prvHeapInit+0xc0>)
 8009252:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009256:	601a      	str	r2, [r3, #0]
}
 8009258:	bf00      	nop
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	bc80      	pop	{r7}
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	20000fd4 	.word	0x20000fd4
 8009268:	200036e4 	.word	0x200036e4
 800926c:	200036ec 	.word	0x200036ec
 8009270:	200036f4 	.word	0x200036f4
 8009274:	200036f0 	.word	0x200036f0
 8009278:	200036f8 	.word	0x200036f8

0800927c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009284:	4b27      	ldr	r3, [pc, #156]	; (8009324 <prvInsertBlockIntoFreeList+0xa8>)
 8009286:	60fb      	str	r3, [r7, #12]
 8009288:	e002      	b.n	8009290 <prvInsertBlockIntoFreeList+0x14>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60fb      	str	r3, [r7, #12]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	429a      	cmp	r2, r3
 8009298:	d8f7      	bhi.n	800928a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	4413      	add	r3, r2
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d108      	bne.n	80092be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	441a      	add	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	441a      	add	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d118      	bne.n	8009304 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	4b14      	ldr	r3, [pc, #80]	; (8009328 <prvInsertBlockIntoFreeList+0xac>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d00d      	beq.n	80092fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	441a      	add	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	e008      	b.n	800930c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092fa:	4b0b      	ldr	r3, [pc, #44]	; (8009328 <prvInsertBlockIntoFreeList+0xac>)
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	e003      	b.n	800930c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	429a      	cmp	r2, r3
 8009312:	d002      	beq.n	800931a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800931a:	bf00      	nop
 800931c:	3714      	adds	r7, #20
 800931e:	46bd      	mov	sp, r7
 8009320:	bc80      	pop	{r7}
 8009322:	4770      	bx	lr
 8009324:	200036e4 	.word	0x200036e4
 8009328:	200036ec 	.word	0x200036ec

0800932c <atof>:
 800932c:	2100      	movs	r1, #0
 800932e:	f001 bf5d 	b.w	800b1ec <strtod>
	...

08009334 <__errno>:
 8009334:	4b01      	ldr	r3, [pc, #4]	; (800933c <__errno+0x8>)
 8009336:	6818      	ldr	r0, [r3, #0]
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	2000000c 	.word	0x2000000c

08009340 <std>:
 8009340:	2300      	movs	r3, #0
 8009342:	b510      	push	{r4, lr}
 8009344:	4604      	mov	r4, r0
 8009346:	e9c0 3300 	strd	r3, r3, [r0]
 800934a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800934e:	6083      	str	r3, [r0, #8]
 8009350:	8181      	strh	r1, [r0, #12]
 8009352:	6643      	str	r3, [r0, #100]	; 0x64
 8009354:	81c2      	strh	r2, [r0, #14]
 8009356:	6183      	str	r3, [r0, #24]
 8009358:	4619      	mov	r1, r3
 800935a:	2208      	movs	r2, #8
 800935c:	305c      	adds	r0, #92	; 0x5c
 800935e:	f000 f91a 	bl	8009596 <memset>
 8009362:	4b05      	ldr	r3, [pc, #20]	; (8009378 <std+0x38>)
 8009364:	6224      	str	r4, [r4, #32]
 8009366:	6263      	str	r3, [r4, #36]	; 0x24
 8009368:	4b04      	ldr	r3, [pc, #16]	; (800937c <std+0x3c>)
 800936a:	62a3      	str	r3, [r4, #40]	; 0x28
 800936c:	4b04      	ldr	r3, [pc, #16]	; (8009380 <std+0x40>)
 800936e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009370:	4b04      	ldr	r3, [pc, #16]	; (8009384 <std+0x44>)
 8009372:	6323      	str	r3, [r4, #48]	; 0x30
 8009374:	bd10      	pop	{r4, pc}
 8009376:	bf00      	nop
 8009378:	0800a4e5 	.word	0x0800a4e5
 800937c:	0800a507 	.word	0x0800a507
 8009380:	0800a53f 	.word	0x0800a53f
 8009384:	0800a563 	.word	0x0800a563

08009388 <_cleanup_r>:
 8009388:	4901      	ldr	r1, [pc, #4]	; (8009390 <_cleanup_r+0x8>)
 800938a:	f000 b8af 	b.w	80094ec <_fwalk_reent>
 800938e:	bf00      	nop
 8009390:	0800c269 	.word	0x0800c269

08009394 <__sfmoreglue>:
 8009394:	b570      	push	{r4, r5, r6, lr}
 8009396:	2568      	movs	r5, #104	; 0x68
 8009398:	1e4a      	subs	r2, r1, #1
 800939a:	4355      	muls	r5, r2
 800939c:	460e      	mov	r6, r1
 800939e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093a2:	f000 f901 	bl	80095a8 <_malloc_r>
 80093a6:	4604      	mov	r4, r0
 80093a8:	b140      	cbz	r0, 80093bc <__sfmoreglue+0x28>
 80093aa:	2100      	movs	r1, #0
 80093ac:	e9c0 1600 	strd	r1, r6, [r0]
 80093b0:	300c      	adds	r0, #12
 80093b2:	60a0      	str	r0, [r4, #8]
 80093b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093b8:	f000 f8ed 	bl	8009596 <memset>
 80093bc:	4620      	mov	r0, r4
 80093be:	bd70      	pop	{r4, r5, r6, pc}

080093c0 <__sfp_lock_acquire>:
 80093c0:	4801      	ldr	r0, [pc, #4]	; (80093c8 <__sfp_lock_acquire+0x8>)
 80093c2:	f000 b8d8 	b.w	8009576 <__retarget_lock_acquire_recursive>
 80093c6:	bf00      	nop
 80093c8:	20003b94 	.word	0x20003b94

080093cc <__sfp_lock_release>:
 80093cc:	4801      	ldr	r0, [pc, #4]	; (80093d4 <__sfp_lock_release+0x8>)
 80093ce:	f000 b8d3 	b.w	8009578 <__retarget_lock_release_recursive>
 80093d2:	bf00      	nop
 80093d4:	20003b94 	.word	0x20003b94

080093d8 <__sinit_lock_acquire>:
 80093d8:	4801      	ldr	r0, [pc, #4]	; (80093e0 <__sinit_lock_acquire+0x8>)
 80093da:	f000 b8cc 	b.w	8009576 <__retarget_lock_acquire_recursive>
 80093de:	bf00      	nop
 80093e0:	20003b8f 	.word	0x20003b8f

080093e4 <__sinit_lock_release>:
 80093e4:	4801      	ldr	r0, [pc, #4]	; (80093ec <__sinit_lock_release+0x8>)
 80093e6:	f000 b8c7 	b.w	8009578 <__retarget_lock_release_recursive>
 80093ea:	bf00      	nop
 80093ec:	20003b8f 	.word	0x20003b8f

080093f0 <__sinit>:
 80093f0:	b510      	push	{r4, lr}
 80093f2:	4604      	mov	r4, r0
 80093f4:	f7ff fff0 	bl	80093d8 <__sinit_lock_acquire>
 80093f8:	69a3      	ldr	r3, [r4, #24]
 80093fa:	b11b      	cbz	r3, 8009404 <__sinit+0x14>
 80093fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009400:	f7ff bff0 	b.w	80093e4 <__sinit_lock_release>
 8009404:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009408:	6523      	str	r3, [r4, #80]	; 0x50
 800940a:	4b13      	ldr	r3, [pc, #76]	; (8009458 <__sinit+0x68>)
 800940c:	4a13      	ldr	r2, [pc, #76]	; (800945c <__sinit+0x6c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	62a2      	str	r2, [r4, #40]	; 0x28
 8009412:	42a3      	cmp	r3, r4
 8009414:	bf08      	it	eq
 8009416:	2301      	moveq	r3, #1
 8009418:	4620      	mov	r0, r4
 800941a:	bf08      	it	eq
 800941c:	61a3      	streq	r3, [r4, #24]
 800941e:	f000 f81f 	bl	8009460 <__sfp>
 8009422:	6060      	str	r0, [r4, #4]
 8009424:	4620      	mov	r0, r4
 8009426:	f000 f81b 	bl	8009460 <__sfp>
 800942a:	60a0      	str	r0, [r4, #8]
 800942c:	4620      	mov	r0, r4
 800942e:	f000 f817 	bl	8009460 <__sfp>
 8009432:	2200      	movs	r2, #0
 8009434:	2104      	movs	r1, #4
 8009436:	60e0      	str	r0, [r4, #12]
 8009438:	6860      	ldr	r0, [r4, #4]
 800943a:	f7ff ff81 	bl	8009340 <std>
 800943e:	2201      	movs	r2, #1
 8009440:	2109      	movs	r1, #9
 8009442:	68a0      	ldr	r0, [r4, #8]
 8009444:	f7ff ff7c 	bl	8009340 <std>
 8009448:	2202      	movs	r2, #2
 800944a:	2112      	movs	r1, #18
 800944c:	68e0      	ldr	r0, [r4, #12]
 800944e:	f7ff ff77 	bl	8009340 <std>
 8009452:	2301      	movs	r3, #1
 8009454:	61a3      	str	r3, [r4, #24]
 8009456:	e7d1      	b.n	80093fc <__sinit+0xc>
 8009458:	0800e0ac 	.word	0x0800e0ac
 800945c:	08009389 	.word	0x08009389

08009460 <__sfp>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	4607      	mov	r7, r0
 8009464:	f7ff ffac 	bl	80093c0 <__sfp_lock_acquire>
 8009468:	4b1e      	ldr	r3, [pc, #120]	; (80094e4 <__sfp+0x84>)
 800946a:	681e      	ldr	r6, [r3, #0]
 800946c:	69b3      	ldr	r3, [r6, #24]
 800946e:	b913      	cbnz	r3, 8009476 <__sfp+0x16>
 8009470:	4630      	mov	r0, r6
 8009472:	f7ff ffbd 	bl	80093f0 <__sinit>
 8009476:	3648      	adds	r6, #72	; 0x48
 8009478:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800947c:	3b01      	subs	r3, #1
 800947e:	d503      	bpl.n	8009488 <__sfp+0x28>
 8009480:	6833      	ldr	r3, [r6, #0]
 8009482:	b30b      	cbz	r3, 80094c8 <__sfp+0x68>
 8009484:	6836      	ldr	r6, [r6, #0]
 8009486:	e7f7      	b.n	8009478 <__sfp+0x18>
 8009488:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800948c:	b9d5      	cbnz	r5, 80094c4 <__sfp+0x64>
 800948e:	4b16      	ldr	r3, [pc, #88]	; (80094e8 <__sfp+0x88>)
 8009490:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009494:	60e3      	str	r3, [r4, #12]
 8009496:	6665      	str	r5, [r4, #100]	; 0x64
 8009498:	f000 f86c 	bl	8009574 <__retarget_lock_init_recursive>
 800949c:	f7ff ff96 	bl	80093cc <__sfp_lock_release>
 80094a0:	2208      	movs	r2, #8
 80094a2:	4629      	mov	r1, r5
 80094a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094ac:	6025      	str	r5, [r4, #0]
 80094ae:	61a5      	str	r5, [r4, #24]
 80094b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094b4:	f000 f86f 	bl	8009596 <memset>
 80094b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094c0:	4620      	mov	r0, r4
 80094c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c4:	3468      	adds	r4, #104	; 0x68
 80094c6:	e7d9      	b.n	800947c <__sfp+0x1c>
 80094c8:	2104      	movs	r1, #4
 80094ca:	4638      	mov	r0, r7
 80094cc:	f7ff ff62 	bl	8009394 <__sfmoreglue>
 80094d0:	4604      	mov	r4, r0
 80094d2:	6030      	str	r0, [r6, #0]
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d1d5      	bne.n	8009484 <__sfp+0x24>
 80094d8:	f7ff ff78 	bl	80093cc <__sfp_lock_release>
 80094dc:	230c      	movs	r3, #12
 80094de:	603b      	str	r3, [r7, #0]
 80094e0:	e7ee      	b.n	80094c0 <__sfp+0x60>
 80094e2:	bf00      	nop
 80094e4:	0800e0ac 	.word	0x0800e0ac
 80094e8:	ffff0001 	.word	0xffff0001

080094ec <_fwalk_reent>:
 80094ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094f0:	4606      	mov	r6, r0
 80094f2:	4688      	mov	r8, r1
 80094f4:	2700      	movs	r7, #0
 80094f6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094fe:	f1b9 0901 	subs.w	r9, r9, #1
 8009502:	d505      	bpl.n	8009510 <_fwalk_reent+0x24>
 8009504:	6824      	ldr	r4, [r4, #0]
 8009506:	2c00      	cmp	r4, #0
 8009508:	d1f7      	bne.n	80094fa <_fwalk_reent+0xe>
 800950a:	4638      	mov	r0, r7
 800950c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009510:	89ab      	ldrh	r3, [r5, #12]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d907      	bls.n	8009526 <_fwalk_reent+0x3a>
 8009516:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800951a:	3301      	adds	r3, #1
 800951c:	d003      	beq.n	8009526 <_fwalk_reent+0x3a>
 800951e:	4629      	mov	r1, r5
 8009520:	4630      	mov	r0, r6
 8009522:	47c0      	blx	r8
 8009524:	4307      	orrs	r7, r0
 8009526:	3568      	adds	r5, #104	; 0x68
 8009528:	e7e9      	b.n	80094fe <_fwalk_reent+0x12>
	...

0800952c <__libc_init_array>:
 800952c:	b570      	push	{r4, r5, r6, lr}
 800952e:	2600      	movs	r6, #0
 8009530:	4d0c      	ldr	r5, [pc, #48]	; (8009564 <__libc_init_array+0x38>)
 8009532:	4c0d      	ldr	r4, [pc, #52]	; (8009568 <__libc_init_array+0x3c>)
 8009534:	1b64      	subs	r4, r4, r5
 8009536:	10a4      	asrs	r4, r4, #2
 8009538:	42a6      	cmp	r6, r4
 800953a:	d109      	bne.n	8009550 <__libc_init_array+0x24>
 800953c:	f004 fc6a 	bl	800de14 <_init>
 8009540:	2600      	movs	r6, #0
 8009542:	4d0a      	ldr	r5, [pc, #40]	; (800956c <__libc_init_array+0x40>)
 8009544:	4c0a      	ldr	r4, [pc, #40]	; (8009570 <__libc_init_array+0x44>)
 8009546:	1b64      	subs	r4, r4, r5
 8009548:	10a4      	asrs	r4, r4, #2
 800954a:	42a6      	cmp	r6, r4
 800954c:	d105      	bne.n	800955a <__libc_init_array+0x2e>
 800954e:	bd70      	pop	{r4, r5, r6, pc}
 8009550:	f855 3b04 	ldr.w	r3, [r5], #4
 8009554:	4798      	blx	r3
 8009556:	3601      	adds	r6, #1
 8009558:	e7ee      	b.n	8009538 <__libc_init_array+0xc>
 800955a:	f855 3b04 	ldr.w	r3, [r5], #4
 800955e:	4798      	blx	r3
 8009560:	3601      	adds	r6, #1
 8009562:	e7f2      	b.n	800954a <__libc_init_array+0x1e>
 8009564:	0800e560 	.word	0x0800e560
 8009568:	0800e560 	.word	0x0800e560
 800956c:	0800e560 	.word	0x0800e560
 8009570:	0800e564 	.word	0x0800e564

08009574 <__retarget_lock_init_recursive>:
 8009574:	4770      	bx	lr

08009576 <__retarget_lock_acquire_recursive>:
 8009576:	4770      	bx	lr

08009578 <__retarget_lock_release_recursive>:
 8009578:	4770      	bx	lr

0800957a <memcpy>:
 800957a:	440a      	add	r2, r1
 800957c:	4291      	cmp	r1, r2
 800957e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009582:	d100      	bne.n	8009586 <memcpy+0xc>
 8009584:	4770      	bx	lr
 8009586:	b510      	push	{r4, lr}
 8009588:	f811 4b01 	ldrb.w	r4, [r1], #1
 800958c:	4291      	cmp	r1, r2
 800958e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009592:	d1f9      	bne.n	8009588 <memcpy+0xe>
 8009594:	bd10      	pop	{r4, pc}

08009596 <memset>:
 8009596:	4603      	mov	r3, r0
 8009598:	4402      	add	r2, r0
 800959a:	4293      	cmp	r3, r2
 800959c:	d100      	bne.n	80095a0 <memset+0xa>
 800959e:	4770      	bx	lr
 80095a0:	f803 1b01 	strb.w	r1, [r3], #1
 80095a4:	e7f9      	b.n	800959a <memset+0x4>
	...

080095a8 <_malloc_r>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	1ccd      	adds	r5, r1, #3
 80095ac:	f025 0503 	bic.w	r5, r5, #3
 80095b0:	3508      	adds	r5, #8
 80095b2:	2d0c      	cmp	r5, #12
 80095b4:	bf38      	it	cc
 80095b6:	250c      	movcc	r5, #12
 80095b8:	2d00      	cmp	r5, #0
 80095ba:	4606      	mov	r6, r0
 80095bc:	db01      	blt.n	80095c2 <_malloc_r+0x1a>
 80095be:	42a9      	cmp	r1, r5
 80095c0:	d903      	bls.n	80095ca <_malloc_r+0x22>
 80095c2:	230c      	movs	r3, #12
 80095c4:	6033      	str	r3, [r6, #0]
 80095c6:	2000      	movs	r0, #0
 80095c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ca:	f003 fa3f 	bl	800ca4c <__malloc_lock>
 80095ce:	4921      	ldr	r1, [pc, #132]	; (8009654 <_malloc_r+0xac>)
 80095d0:	680a      	ldr	r2, [r1, #0]
 80095d2:	4614      	mov	r4, r2
 80095d4:	b99c      	cbnz	r4, 80095fe <_malloc_r+0x56>
 80095d6:	4f20      	ldr	r7, [pc, #128]	; (8009658 <_malloc_r+0xb0>)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	b923      	cbnz	r3, 80095e6 <_malloc_r+0x3e>
 80095dc:	4621      	mov	r1, r4
 80095de:	4630      	mov	r0, r6
 80095e0:	f000 ff18 	bl	800a414 <_sbrk_r>
 80095e4:	6038      	str	r0, [r7, #0]
 80095e6:	4629      	mov	r1, r5
 80095e8:	4630      	mov	r0, r6
 80095ea:	f000 ff13 	bl	800a414 <_sbrk_r>
 80095ee:	1c43      	adds	r3, r0, #1
 80095f0:	d123      	bne.n	800963a <_malloc_r+0x92>
 80095f2:	230c      	movs	r3, #12
 80095f4:	4630      	mov	r0, r6
 80095f6:	6033      	str	r3, [r6, #0]
 80095f8:	f003 fa2e 	bl	800ca58 <__malloc_unlock>
 80095fc:	e7e3      	b.n	80095c6 <_malloc_r+0x1e>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	1b5b      	subs	r3, r3, r5
 8009602:	d417      	bmi.n	8009634 <_malloc_r+0x8c>
 8009604:	2b0b      	cmp	r3, #11
 8009606:	d903      	bls.n	8009610 <_malloc_r+0x68>
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	441c      	add	r4, r3
 800960c:	6025      	str	r5, [r4, #0]
 800960e:	e004      	b.n	800961a <_malloc_r+0x72>
 8009610:	6863      	ldr	r3, [r4, #4]
 8009612:	42a2      	cmp	r2, r4
 8009614:	bf0c      	ite	eq
 8009616:	600b      	streq	r3, [r1, #0]
 8009618:	6053      	strne	r3, [r2, #4]
 800961a:	4630      	mov	r0, r6
 800961c:	f003 fa1c 	bl	800ca58 <__malloc_unlock>
 8009620:	f104 000b 	add.w	r0, r4, #11
 8009624:	1d23      	adds	r3, r4, #4
 8009626:	f020 0007 	bic.w	r0, r0, #7
 800962a:	1ac2      	subs	r2, r0, r3
 800962c:	d0cc      	beq.n	80095c8 <_malloc_r+0x20>
 800962e:	1a1b      	subs	r3, r3, r0
 8009630:	50a3      	str	r3, [r4, r2]
 8009632:	e7c9      	b.n	80095c8 <_malloc_r+0x20>
 8009634:	4622      	mov	r2, r4
 8009636:	6864      	ldr	r4, [r4, #4]
 8009638:	e7cc      	b.n	80095d4 <_malloc_r+0x2c>
 800963a:	1cc4      	adds	r4, r0, #3
 800963c:	f024 0403 	bic.w	r4, r4, #3
 8009640:	42a0      	cmp	r0, r4
 8009642:	d0e3      	beq.n	800960c <_malloc_r+0x64>
 8009644:	1a21      	subs	r1, r4, r0
 8009646:	4630      	mov	r0, r6
 8009648:	f000 fee4 	bl	800a414 <_sbrk_r>
 800964c:	3001      	adds	r0, #1
 800964e:	d1dd      	bne.n	800960c <_malloc_r+0x64>
 8009650:	e7cf      	b.n	80095f2 <_malloc_r+0x4a>
 8009652:	bf00      	nop
 8009654:	200036fc 	.word	0x200036fc
 8009658:	20003700 	.word	0x20003700

0800965c <__cvt>:
 800965c:	2b00      	cmp	r3, #0
 800965e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009662:	461f      	mov	r7, r3
 8009664:	bfbb      	ittet	lt
 8009666:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800966a:	461f      	movlt	r7, r3
 800966c:	2300      	movge	r3, #0
 800966e:	232d      	movlt	r3, #45	; 0x2d
 8009670:	b088      	sub	sp, #32
 8009672:	4614      	mov	r4, r2
 8009674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009676:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009678:	7013      	strb	r3, [r2, #0]
 800967a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800967c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009680:	f023 0820 	bic.w	r8, r3, #32
 8009684:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009688:	d005      	beq.n	8009696 <__cvt+0x3a>
 800968a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800968e:	d100      	bne.n	8009692 <__cvt+0x36>
 8009690:	3501      	adds	r5, #1
 8009692:	2302      	movs	r3, #2
 8009694:	e000      	b.n	8009698 <__cvt+0x3c>
 8009696:	2303      	movs	r3, #3
 8009698:	aa07      	add	r2, sp, #28
 800969a:	9204      	str	r2, [sp, #16]
 800969c:	aa06      	add	r2, sp, #24
 800969e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80096a2:	e9cd 3500 	strd	r3, r5, [sp]
 80096a6:	4622      	mov	r2, r4
 80096a8:	463b      	mov	r3, r7
 80096aa:	f001 ff69 	bl	800b580 <_dtoa_r>
 80096ae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096b2:	4606      	mov	r6, r0
 80096b4:	d102      	bne.n	80096bc <__cvt+0x60>
 80096b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096b8:	07db      	lsls	r3, r3, #31
 80096ba:	d522      	bpl.n	8009702 <__cvt+0xa6>
 80096bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096c0:	eb06 0905 	add.w	r9, r6, r5
 80096c4:	d110      	bne.n	80096e8 <__cvt+0x8c>
 80096c6:	7833      	ldrb	r3, [r6, #0]
 80096c8:	2b30      	cmp	r3, #48	; 0x30
 80096ca:	d10a      	bne.n	80096e2 <__cvt+0x86>
 80096cc:	2200      	movs	r2, #0
 80096ce:	2300      	movs	r3, #0
 80096d0:	4620      	mov	r0, r4
 80096d2:	4639      	mov	r1, r7
 80096d4:	f7f7 f968 	bl	80009a8 <__aeabi_dcmpeq>
 80096d8:	b918      	cbnz	r0, 80096e2 <__cvt+0x86>
 80096da:	f1c5 0501 	rsb	r5, r5, #1
 80096de:	f8ca 5000 	str.w	r5, [sl]
 80096e2:	f8da 3000 	ldr.w	r3, [sl]
 80096e6:	4499      	add	r9, r3
 80096e8:	2200      	movs	r2, #0
 80096ea:	2300      	movs	r3, #0
 80096ec:	4620      	mov	r0, r4
 80096ee:	4639      	mov	r1, r7
 80096f0:	f7f7 f95a 	bl	80009a8 <__aeabi_dcmpeq>
 80096f4:	b108      	cbz	r0, 80096fa <__cvt+0x9e>
 80096f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80096fa:	2230      	movs	r2, #48	; 0x30
 80096fc:	9b07      	ldr	r3, [sp, #28]
 80096fe:	454b      	cmp	r3, r9
 8009700:	d307      	bcc.n	8009712 <__cvt+0xb6>
 8009702:	4630      	mov	r0, r6
 8009704:	9b07      	ldr	r3, [sp, #28]
 8009706:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009708:	1b9b      	subs	r3, r3, r6
 800970a:	6013      	str	r3, [r2, #0]
 800970c:	b008      	add	sp, #32
 800970e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009712:	1c59      	adds	r1, r3, #1
 8009714:	9107      	str	r1, [sp, #28]
 8009716:	701a      	strb	r2, [r3, #0]
 8009718:	e7f0      	b.n	80096fc <__cvt+0xa0>

0800971a <__exponent>:
 800971a:	4603      	mov	r3, r0
 800971c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800971e:	2900      	cmp	r1, #0
 8009720:	f803 2b02 	strb.w	r2, [r3], #2
 8009724:	bfb6      	itet	lt
 8009726:	222d      	movlt	r2, #45	; 0x2d
 8009728:	222b      	movge	r2, #43	; 0x2b
 800972a:	4249      	neglt	r1, r1
 800972c:	2909      	cmp	r1, #9
 800972e:	7042      	strb	r2, [r0, #1]
 8009730:	dd2b      	ble.n	800978a <__exponent+0x70>
 8009732:	f10d 0407 	add.w	r4, sp, #7
 8009736:	46a4      	mov	ip, r4
 8009738:	270a      	movs	r7, #10
 800973a:	fb91 f6f7 	sdiv	r6, r1, r7
 800973e:	460a      	mov	r2, r1
 8009740:	46a6      	mov	lr, r4
 8009742:	fb07 1516 	mls	r5, r7, r6, r1
 8009746:	2a63      	cmp	r2, #99	; 0x63
 8009748:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800974c:	4631      	mov	r1, r6
 800974e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009752:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009756:	dcf0      	bgt.n	800973a <__exponent+0x20>
 8009758:	3130      	adds	r1, #48	; 0x30
 800975a:	f1ae 0502 	sub.w	r5, lr, #2
 800975e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009762:	4629      	mov	r1, r5
 8009764:	1c44      	adds	r4, r0, #1
 8009766:	4561      	cmp	r1, ip
 8009768:	d30a      	bcc.n	8009780 <__exponent+0x66>
 800976a:	f10d 0209 	add.w	r2, sp, #9
 800976e:	eba2 020e 	sub.w	r2, r2, lr
 8009772:	4565      	cmp	r5, ip
 8009774:	bf88      	it	hi
 8009776:	2200      	movhi	r2, #0
 8009778:	4413      	add	r3, r2
 800977a:	1a18      	subs	r0, r3, r0
 800977c:	b003      	add	sp, #12
 800977e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009780:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009784:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009788:	e7ed      	b.n	8009766 <__exponent+0x4c>
 800978a:	2330      	movs	r3, #48	; 0x30
 800978c:	3130      	adds	r1, #48	; 0x30
 800978e:	7083      	strb	r3, [r0, #2]
 8009790:	70c1      	strb	r1, [r0, #3]
 8009792:	1d03      	adds	r3, r0, #4
 8009794:	e7f1      	b.n	800977a <__exponent+0x60>
	...

08009798 <_printf_float>:
 8009798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979c:	b091      	sub	sp, #68	; 0x44
 800979e:	460c      	mov	r4, r1
 80097a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80097a4:	4616      	mov	r6, r2
 80097a6:	461f      	mov	r7, r3
 80097a8:	4605      	mov	r5, r0
 80097aa:	f003 f911 	bl	800c9d0 <_localeconv_r>
 80097ae:	6803      	ldr	r3, [r0, #0]
 80097b0:	4618      	mov	r0, r3
 80097b2:	9309      	str	r3, [sp, #36]	; 0x24
 80097b4:	f7f6 fccc 	bl	8000150 <strlen>
 80097b8:	2300      	movs	r3, #0
 80097ba:	930e      	str	r3, [sp, #56]	; 0x38
 80097bc:	f8d8 3000 	ldr.w	r3, [r8]
 80097c0:	900a      	str	r0, [sp, #40]	; 0x28
 80097c2:	3307      	adds	r3, #7
 80097c4:	f023 0307 	bic.w	r3, r3, #7
 80097c8:	f103 0208 	add.w	r2, r3, #8
 80097cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80097d0:	f8d4 b000 	ldr.w	fp, [r4]
 80097d4:	f8c8 2000 	str.w	r2, [r8]
 80097d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097e0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80097e4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80097e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80097ea:	f04f 32ff 	mov.w	r2, #4294967295
 80097ee:	4640      	mov	r0, r8
 80097f0:	4b9c      	ldr	r3, [pc, #624]	; (8009a64 <_printf_float+0x2cc>)
 80097f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097f4:	f7f7 f90a 	bl	8000a0c <__aeabi_dcmpun>
 80097f8:	bb70      	cbnz	r0, 8009858 <_printf_float+0xc0>
 80097fa:	f04f 32ff 	mov.w	r2, #4294967295
 80097fe:	4640      	mov	r0, r8
 8009800:	4b98      	ldr	r3, [pc, #608]	; (8009a64 <_printf_float+0x2cc>)
 8009802:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009804:	f7f7 f8e4 	bl	80009d0 <__aeabi_dcmple>
 8009808:	bb30      	cbnz	r0, 8009858 <_printf_float+0xc0>
 800980a:	2200      	movs	r2, #0
 800980c:	2300      	movs	r3, #0
 800980e:	4640      	mov	r0, r8
 8009810:	4651      	mov	r1, sl
 8009812:	f7f7 f8d3 	bl	80009bc <__aeabi_dcmplt>
 8009816:	b110      	cbz	r0, 800981e <_printf_float+0x86>
 8009818:	232d      	movs	r3, #45	; 0x2d
 800981a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800981e:	4b92      	ldr	r3, [pc, #584]	; (8009a68 <_printf_float+0x2d0>)
 8009820:	4892      	ldr	r0, [pc, #584]	; (8009a6c <_printf_float+0x2d4>)
 8009822:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009826:	bf94      	ite	ls
 8009828:	4698      	movls	r8, r3
 800982a:	4680      	movhi	r8, r0
 800982c:	2303      	movs	r3, #3
 800982e:	f04f 0a00 	mov.w	sl, #0
 8009832:	6123      	str	r3, [r4, #16]
 8009834:	f02b 0304 	bic.w	r3, fp, #4
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	4633      	mov	r3, r6
 800983c:	4621      	mov	r1, r4
 800983e:	4628      	mov	r0, r5
 8009840:	9700      	str	r7, [sp, #0]
 8009842:	aa0f      	add	r2, sp, #60	; 0x3c
 8009844:	f000 f9d4 	bl	8009bf0 <_printf_common>
 8009848:	3001      	adds	r0, #1
 800984a:	f040 8090 	bne.w	800996e <_printf_float+0x1d6>
 800984e:	f04f 30ff 	mov.w	r0, #4294967295
 8009852:	b011      	add	sp, #68	; 0x44
 8009854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009858:	4642      	mov	r2, r8
 800985a:	4653      	mov	r3, sl
 800985c:	4640      	mov	r0, r8
 800985e:	4651      	mov	r1, sl
 8009860:	f7f7 f8d4 	bl	8000a0c <__aeabi_dcmpun>
 8009864:	b148      	cbz	r0, 800987a <_printf_float+0xe2>
 8009866:	f1ba 0f00 	cmp.w	sl, #0
 800986a:	bfb8      	it	lt
 800986c:	232d      	movlt	r3, #45	; 0x2d
 800986e:	4880      	ldr	r0, [pc, #512]	; (8009a70 <_printf_float+0x2d8>)
 8009870:	bfb8      	it	lt
 8009872:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009876:	4b7f      	ldr	r3, [pc, #508]	; (8009a74 <_printf_float+0x2dc>)
 8009878:	e7d3      	b.n	8009822 <_printf_float+0x8a>
 800987a:	6863      	ldr	r3, [r4, #4]
 800987c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009880:	1c5a      	adds	r2, r3, #1
 8009882:	d142      	bne.n	800990a <_printf_float+0x172>
 8009884:	2306      	movs	r3, #6
 8009886:	6063      	str	r3, [r4, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	9206      	str	r2, [sp, #24]
 800988c:	aa0e      	add	r2, sp, #56	; 0x38
 800988e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009892:	aa0d      	add	r2, sp, #52	; 0x34
 8009894:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009898:	9203      	str	r2, [sp, #12]
 800989a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800989e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80098a2:	6023      	str	r3, [r4, #0]
 80098a4:	6863      	ldr	r3, [r4, #4]
 80098a6:	4642      	mov	r2, r8
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	4628      	mov	r0, r5
 80098ac:	4653      	mov	r3, sl
 80098ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80098b0:	f7ff fed4 	bl	800965c <__cvt>
 80098b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098b6:	4680      	mov	r8, r0
 80098b8:	2947      	cmp	r1, #71	; 0x47
 80098ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80098bc:	d108      	bne.n	80098d0 <_printf_float+0x138>
 80098be:	1cc8      	adds	r0, r1, #3
 80098c0:	db02      	blt.n	80098c8 <_printf_float+0x130>
 80098c2:	6863      	ldr	r3, [r4, #4]
 80098c4:	4299      	cmp	r1, r3
 80098c6:	dd40      	ble.n	800994a <_printf_float+0x1b2>
 80098c8:	f1a9 0902 	sub.w	r9, r9, #2
 80098cc:	fa5f f989 	uxtb.w	r9, r9
 80098d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80098d4:	d81f      	bhi.n	8009916 <_printf_float+0x17e>
 80098d6:	464a      	mov	r2, r9
 80098d8:	3901      	subs	r1, #1
 80098da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098de:	910d      	str	r1, [sp, #52]	; 0x34
 80098e0:	f7ff ff1b 	bl	800971a <__exponent>
 80098e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098e6:	4682      	mov	sl, r0
 80098e8:	1813      	adds	r3, r2, r0
 80098ea:	2a01      	cmp	r2, #1
 80098ec:	6123      	str	r3, [r4, #16]
 80098ee:	dc02      	bgt.n	80098f6 <_printf_float+0x15e>
 80098f0:	6822      	ldr	r2, [r4, #0]
 80098f2:	07d2      	lsls	r2, r2, #31
 80098f4:	d501      	bpl.n	80098fa <_printf_float+0x162>
 80098f6:	3301      	adds	r3, #1
 80098f8:	6123      	str	r3, [r4, #16]
 80098fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d09b      	beq.n	800983a <_printf_float+0xa2>
 8009902:	232d      	movs	r3, #45	; 0x2d
 8009904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009908:	e797      	b.n	800983a <_printf_float+0xa2>
 800990a:	2947      	cmp	r1, #71	; 0x47
 800990c:	d1bc      	bne.n	8009888 <_printf_float+0xf0>
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1ba      	bne.n	8009888 <_printf_float+0xf0>
 8009912:	2301      	movs	r3, #1
 8009914:	e7b7      	b.n	8009886 <_printf_float+0xee>
 8009916:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800991a:	d118      	bne.n	800994e <_printf_float+0x1b6>
 800991c:	2900      	cmp	r1, #0
 800991e:	6863      	ldr	r3, [r4, #4]
 8009920:	dd0b      	ble.n	800993a <_printf_float+0x1a2>
 8009922:	6121      	str	r1, [r4, #16]
 8009924:	b913      	cbnz	r3, 800992c <_printf_float+0x194>
 8009926:	6822      	ldr	r2, [r4, #0]
 8009928:	07d0      	lsls	r0, r2, #31
 800992a:	d502      	bpl.n	8009932 <_printf_float+0x19a>
 800992c:	3301      	adds	r3, #1
 800992e:	440b      	add	r3, r1
 8009930:	6123      	str	r3, [r4, #16]
 8009932:	f04f 0a00 	mov.w	sl, #0
 8009936:	65a1      	str	r1, [r4, #88]	; 0x58
 8009938:	e7df      	b.n	80098fa <_printf_float+0x162>
 800993a:	b913      	cbnz	r3, 8009942 <_printf_float+0x1aa>
 800993c:	6822      	ldr	r2, [r4, #0]
 800993e:	07d2      	lsls	r2, r2, #31
 8009940:	d501      	bpl.n	8009946 <_printf_float+0x1ae>
 8009942:	3302      	adds	r3, #2
 8009944:	e7f4      	b.n	8009930 <_printf_float+0x198>
 8009946:	2301      	movs	r3, #1
 8009948:	e7f2      	b.n	8009930 <_printf_float+0x198>
 800994a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800994e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009950:	4299      	cmp	r1, r3
 8009952:	db05      	blt.n	8009960 <_printf_float+0x1c8>
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	6121      	str	r1, [r4, #16]
 8009958:	07d8      	lsls	r0, r3, #31
 800995a:	d5ea      	bpl.n	8009932 <_printf_float+0x19a>
 800995c:	1c4b      	adds	r3, r1, #1
 800995e:	e7e7      	b.n	8009930 <_printf_float+0x198>
 8009960:	2900      	cmp	r1, #0
 8009962:	bfcc      	ite	gt
 8009964:	2201      	movgt	r2, #1
 8009966:	f1c1 0202 	rsble	r2, r1, #2
 800996a:	4413      	add	r3, r2
 800996c:	e7e0      	b.n	8009930 <_printf_float+0x198>
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	055a      	lsls	r2, r3, #21
 8009972:	d407      	bmi.n	8009984 <_printf_float+0x1ec>
 8009974:	6923      	ldr	r3, [r4, #16]
 8009976:	4642      	mov	r2, r8
 8009978:	4631      	mov	r1, r6
 800997a:	4628      	mov	r0, r5
 800997c:	47b8      	blx	r7
 800997e:	3001      	adds	r0, #1
 8009980:	d12b      	bne.n	80099da <_printf_float+0x242>
 8009982:	e764      	b.n	800984e <_printf_float+0xb6>
 8009984:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009988:	f240 80dd 	bls.w	8009b46 <_printf_float+0x3ae>
 800998c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009990:	2200      	movs	r2, #0
 8009992:	2300      	movs	r3, #0
 8009994:	f7f7 f808 	bl	80009a8 <__aeabi_dcmpeq>
 8009998:	2800      	cmp	r0, #0
 800999a:	d033      	beq.n	8009a04 <_printf_float+0x26c>
 800999c:	2301      	movs	r3, #1
 800999e:	4631      	mov	r1, r6
 80099a0:	4628      	mov	r0, r5
 80099a2:	4a35      	ldr	r2, [pc, #212]	; (8009a78 <_printf_float+0x2e0>)
 80099a4:	47b8      	blx	r7
 80099a6:	3001      	adds	r0, #1
 80099a8:	f43f af51 	beq.w	800984e <_printf_float+0xb6>
 80099ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80099b0:	429a      	cmp	r2, r3
 80099b2:	db02      	blt.n	80099ba <_printf_float+0x222>
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	07d8      	lsls	r0, r3, #31
 80099b8:	d50f      	bpl.n	80099da <_printf_float+0x242>
 80099ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099be:	4631      	mov	r1, r6
 80099c0:	4628      	mov	r0, r5
 80099c2:	47b8      	blx	r7
 80099c4:	3001      	adds	r0, #1
 80099c6:	f43f af42 	beq.w	800984e <_printf_float+0xb6>
 80099ca:	f04f 0800 	mov.w	r8, #0
 80099ce:	f104 091a 	add.w	r9, r4, #26
 80099d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099d4:	3b01      	subs	r3, #1
 80099d6:	4543      	cmp	r3, r8
 80099d8:	dc09      	bgt.n	80099ee <_printf_float+0x256>
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	079b      	lsls	r3, r3, #30
 80099de:	f100 8102 	bmi.w	8009be6 <_printf_float+0x44e>
 80099e2:	68e0      	ldr	r0, [r4, #12]
 80099e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099e6:	4298      	cmp	r0, r3
 80099e8:	bfb8      	it	lt
 80099ea:	4618      	movlt	r0, r3
 80099ec:	e731      	b.n	8009852 <_printf_float+0xba>
 80099ee:	2301      	movs	r3, #1
 80099f0:	464a      	mov	r2, r9
 80099f2:	4631      	mov	r1, r6
 80099f4:	4628      	mov	r0, r5
 80099f6:	47b8      	blx	r7
 80099f8:	3001      	adds	r0, #1
 80099fa:	f43f af28 	beq.w	800984e <_printf_float+0xb6>
 80099fe:	f108 0801 	add.w	r8, r8, #1
 8009a02:	e7e6      	b.n	80099d2 <_printf_float+0x23a>
 8009a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	dc38      	bgt.n	8009a7c <_printf_float+0x2e4>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4628      	mov	r0, r5
 8009a10:	4a19      	ldr	r2, [pc, #100]	; (8009a78 <_printf_float+0x2e0>)
 8009a12:	47b8      	blx	r7
 8009a14:	3001      	adds	r0, #1
 8009a16:	f43f af1a 	beq.w	800984e <_printf_float+0xb6>
 8009a1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	d102      	bne.n	8009a28 <_printf_float+0x290>
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	07d9      	lsls	r1, r3, #31
 8009a26:	d5d8      	bpl.n	80099da <_printf_float+0x242>
 8009a28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	4628      	mov	r0, r5
 8009a30:	47b8      	blx	r7
 8009a32:	3001      	adds	r0, #1
 8009a34:	f43f af0b 	beq.w	800984e <_printf_float+0xb6>
 8009a38:	f04f 0900 	mov.w	r9, #0
 8009a3c:	f104 0a1a 	add.w	sl, r4, #26
 8009a40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a42:	425b      	negs	r3, r3
 8009a44:	454b      	cmp	r3, r9
 8009a46:	dc01      	bgt.n	8009a4c <_printf_float+0x2b4>
 8009a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a4a:	e794      	b.n	8009976 <_printf_float+0x1de>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	4652      	mov	r2, sl
 8009a50:	4631      	mov	r1, r6
 8009a52:	4628      	mov	r0, r5
 8009a54:	47b8      	blx	r7
 8009a56:	3001      	adds	r0, #1
 8009a58:	f43f aef9 	beq.w	800984e <_printf_float+0xb6>
 8009a5c:	f109 0901 	add.w	r9, r9, #1
 8009a60:	e7ee      	b.n	8009a40 <_printf_float+0x2a8>
 8009a62:	bf00      	nop
 8009a64:	7fefffff 	.word	0x7fefffff
 8009a68:	0800e0b0 	.word	0x0800e0b0
 8009a6c:	0800e0b4 	.word	0x0800e0b4
 8009a70:	0800e0bc 	.word	0x0800e0bc
 8009a74:	0800e0b8 	.word	0x0800e0b8
 8009a78:	0800e0c0 	.word	0x0800e0c0
 8009a7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a80:	429a      	cmp	r2, r3
 8009a82:	bfa8      	it	ge
 8009a84:	461a      	movge	r2, r3
 8009a86:	2a00      	cmp	r2, #0
 8009a88:	4691      	mov	r9, r2
 8009a8a:	dc37      	bgt.n	8009afc <_printf_float+0x364>
 8009a8c:	f04f 0b00 	mov.w	fp, #0
 8009a90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a94:	f104 021a 	add.w	r2, r4, #26
 8009a98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009a9c:	ebaa 0309 	sub.w	r3, sl, r9
 8009aa0:	455b      	cmp	r3, fp
 8009aa2:	dc33      	bgt.n	8009b0c <_printf_float+0x374>
 8009aa4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	db3b      	blt.n	8009b24 <_printf_float+0x38c>
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	07da      	lsls	r2, r3, #31
 8009ab0:	d438      	bmi.n	8009b24 <_printf_float+0x38c>
 8009ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ab4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009ab6:	eba2 030a 	sub.w	r3, r2, sl
 8009aba:	eba2 0901 	sub.w	r9, r2, r1
 8009abe:	4599      	cmp	r9, r3
 8009ac0:	bfa8      	it	ge
 8009ac2:	4699      	movge	r9, r3
 8009ac4:	f1b9 0f00 	cmp.w	r9, #0
 8009ac8:	dc34      	bgt.n	8009b34 <_printf_float+0x39c>
 8009aca:	f04f 0800 	mov.w	r8, #0
 8009ace:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ad2:	f104 0a1a 	add.w	sl, r4, #26
 8009ad6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009ada:	1a9b      	subs	r3, r3, r2
 8009adc:	eba3 0309 	sub.w	r3, r3, r9
 8009ae0:	4543      	cmp	r3, r8
 8009ae2:	f77f af7a 	ble.w	80099da <_printf_float+0x242>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	4652      	mov	r2, sl
 8009aea:	4631      	mov	r1, r6
 8009aec:	4628      	mov	r0, r5
 8009aee:	47b8      	blx	r7
 8009af0:	3001      	adds	r0, #1
 8009af2:	f43f aeac 	beq.w	800984e <_printf_float+0xb6>
 8009af6:	f108 0801 	add.w	r8, r8, #1
 8009afa:	e7ec      	b.n	8009ad6 <_printf_float+0x33e>
 8009afc:	4613      	mov	r3, r2
 8009afe:	4631      	mov	r1, r6
 8009b00:	4642      	mov	r2, r8
 8009b02:	4628      	mov	r0, r5
 8009b04:	47b8      	blx	r7
 8009b06:	3001      	adds	r0, #1
 8009b08:	d1c0      	bne.n	8009a8c <_printf_float+0x2f4>
 8009b0a:	e6a0      	b.n	800984e <_printf_float+0xb6>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	4631      	mov	r1, r6
 8009b10:	4628      	mov	r0, r5
 8009b12:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b14:	47b8      	blx	r7
 8009b16:	3001      	adds	r0, #1
 8009b18:	f43f ae99 	beq.w	800984e <_printf_float+0xb6>
 8009b1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b1e:	f10b 0b01 	add.w	fp, fp, #1
 8009b22:	e7b9      	b.n	8009a98 <_printf_float+0x300>
 8009b24:	4631      	mov	r1, r6
 8009b26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	47b8      	blx	r7
 8009b2e:	3001      	adds	r0, #1
 8009b30:	d1bf      	bne.n	8009ab2 <_printf_float+0x31a>
 8009b32:	e68c      	b.n	800984e <_printf_float+0xb6>
 8009b34:	464b      	mov	r3, r9
 8009b36:	4631      	mov	r1, r6
 8009b38:	4628      	mov	r0, r5
 8009b3a:	eb08 020a 	add.w	r2, r8, sl
 8009b3e:	47b8      	blx	r7
 8009b40:	3001      	adds	r0, #1
 8009b42:	d1c2      	bne.n	8009aca <_printf_float+0x332>
 8009b44:	e683      	b.n	800984e <_printf_float+0xb6>
 8009b46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b48:	2a01      	cmp	r2, #1
 8009b4a:	dc01      	bgt.n	8009b50 <_printf_float+0x3b8>
 8009b4c:	07db      	lsls	r3, r3, #31
 8009b4e:	d537      	bpl.n	8009bc0 <_printf_float+0x428>
 8009b50:	2301      	movs	r3, #1
 8009b52:	4642      	mov	r2, r8
 8009b54:	4631      	mov	r1, r6
 8009b56:	4628      	mov	r0, r5
 8009b58:	47b8      	blx	r7
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	f43f ae77 	beq.w	800984e <_printf_float+0xb6>
 8009b60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b64:	4631      	mov	r1, r6
 8009b66:	4628      	mov	r0, r5
 8009b68:	47b8      	blx	r7
 8009b6a:	3001      	adds	r0, #1
 8009b6c:	f43f ae6f 	beq.w	800984e <_printf_float+0xb6>
 8009b70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b74:	2200      	movs	r2, #0
 8009b76:	2300      	movs	r3, #0
 8009b78:	f7f6 ff16 	bl	80009a8 <__aeabi_dcmpeq>
 8009b7c:	b9d8      	cbnz	r0, 8009bb6 <_printf_float+0x41e>
 8009b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b80:	f108 0201 	add.w	r2, r8, #1
 8009b84:	3b01      	subs	r3, #1
 8009b86:	4631      	mov	r1, r6
 8009b88:	4628      	mov	r0, r5
 8009b8a:	47b8      	blx	r7
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d10e      	bne.n	8009bae <_printf_float+0x416>
 8009b90:	e65d      	b.n	800984e <_printf_float+0xb6>
 8009b92:	2301      	movs	r3, #1
 8009b94:	464a      	mov	r2, r9
 8009b96:	4631      	mov	r1, r6
 8009b98:	4628      	mov	r0, r5
 8009b9a:	47b8      	blx	r7
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	f43f ae56 	beq.w	800984e <_printf_float+0xb6>
 8009ba2:	f108 0801 	add.w	r8, r8, #1
 8009ba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	4543      	cmp	r3, r8
 8009bac:	dcf1      	bgt.n	8009b92 <_printf_float+0x3fa>
 8009bae:	4653      	mov	r3, sl
 8009bb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bb4:	e6e0      	b.n	8009978 <_printf_float+0x1e0>
 8009bb6:	f04f 0800 	mov.w	r8, #0
 8009bba:	f104 091a 	add.w	r9, r4, #26
 8009bbe:	e7f2      	b.n	8009ba6 <_printf_float+0x40e>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	4642      	mov	r2, r8
 8009bc4:	e7df      	b.n	8009b86 <_printf_float+0x3ee>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	464a      	mov	r2, r9
 8009bca:	4631      	mov	r1, r6
 8009bcc:	4628      	mov	r0, r5
 8009bce:	47b8      	blx	r7
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	f43f ae3c 	beq.w	800984e <_printf_float+0xb6>
 8009bd6:	f108 0801 	add.w	r8, r8, #1
 8009bda:	68e3      	ldr	r3, [r4, #12]
 8009bdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009bde:	1a5b      	subs	r3, r3, r1
 8009be0:	4543      	cmp	r3, r8
 8009be2:	dcf0      	bgt.n	8009bc6 <_printf_float+0x42e>
 8009be4:	e6fd      	b.n	80099e2 <_printf_float+0x24a>
 8009be6:	f04f 0800 	mov.w	r8, #0
 8009bea:	f104 0919 	add.w	r9, r4, #25
 8009bee:	e7f4      	b.n	8009bda <_printf_float+0x442>

08009bf0 <_printf_common>:
 8009bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	4699      	mov	r9, r3
 8009bf8:	688a      	ldr	r2, [r1, #8]
 8009bfa:	690b      	ldr	r3, [r1, #16]
 8009bfc:	4607      	mov	r7, r0
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	bfb8      	it	lt
 8009c02:	4613      	movlt	r3, r2
 8009c04:	6033      	str	r3, [r6, #0]
 8009c06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c10:	b10a      	cbz	r2, 8009c16 <_printf_common+0x26>
 8009c12:	3301      	adds	r3, #1
 8009c14:	6033      	str	r3, [r6, #0]
 8009c16:	6823      	ldr	r3, [r4, #0]
 8009c18:	0699      	lsls	r1, r3, #26
 8009c1a:	bf42      	ittt	mi
 8009c1c:	6833      	ldrmi	r3, [r6, #0]
 8009c1e:	3302      	addmi	r3, #2
 8009c20:	6033      	strmi	r3, [r6, #0]
 8009c22:	6825      	ldr	r5, [r4, #0]
 8009c24:	f015 0506 	ands.w	r5, r5, #6
 8009c28:	d106      	bne.n	8009c38 <_printf_common+0x48>
 8009c2a:	f104 0a19 	add.w	sl, r4, #25
 8009c2e:	68e3      	ldr	r3, [r4, #12]
 8009c30:	6832      	ldr	r2, [r6, #0]
 8009c32:	1a9b      	subs	r3, r3, r2
 8009c34:	42ab      	cmp	r3, r5
 8009c36:	dc28      	bgt.n	8009c8a <_printf_common+0x9a>
 8009c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c3c:	1e13      	subs	r3, r2, #0
 8009c3e:	6822      	ldr	r2, [r4, #0]
 8009c40:	bf18      	it	ne
 8009c42:	2301      	movne	r3, #1
 8009c44:	0692      	lsls	r2, r2, #26
 8009c46:	d42d      	bmi.n	8009ca4 <_printf_common+0xb4>
 8009c48:	4649      	mov	r1, r9
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c50:	47c0      	blx	r8
 8009c52:	3001      	adds	r0, #1
 8009c54:	d020      	beq.n	8009c98 <_printf_common+0xa8>
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	68e5      	ldr	r5, [r4, #12]
 8009c5a:	f003 0306 	and.w	r3, r3, #6
 8009c5e:	2b04      	cmp	r3, #4
 8009c60:	bf18      	it	ne
 8009c62:	2500      	movne	r5, #0
 8009c64:	6832      	ldr	r2, [r6, #0]
 8009c66:	f04f 0600 	mov.w	r6, #0
 8009c6a:	68a3      	ldr	r3, [r4, #8]
 8009c6c:	bf08      	it	eq
 8009c6e:	1aad      	subeq	r5, r5, r2
 8009c70:	6922      	ldr	r2, [r4, #16]
 8009c72:	bf08      	it	eq
 8009c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	bfc4      	itt	gt
 8009c7c:	1a9b      	subgt	r3, r3, r2
 8009c7e:	18ed      	addgt	r5, r5, r3
 8009c80:	341a      	adds	r4, #26
 8009c82:	42b5      	cmp	r5, r6
 8009c84:	d11a      	bne.n	8009cbc <_printf_common+0xcc>
 8009c86:	2000      	movs	r0, #0
 8009c88:	e008      	b.n	8009c9c <_printf_common+0xac>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4652      	mov	r2, sl
 8009c8e:	4649      	mov	r1, r9
 8009c90:	4638      	mov	r0, r7
 8009c92:	47c0      	blx	r8
 8009c94:	3001      	adds	r0, #1
 8009c96:	d103      	bne.n	8009ca0 <_printf_common+0xb0>
 8009c98:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca0:	3501      	adds	r5, #1
 8009ca2:	e7c4      	b.n	8009c2e <_printf_common+0x3e>
 8009ca4:	2030      	movs	r0, #48	; 0x30
 8009ca6:	18e1      	adds	r1, r4, r3
 8009ca8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cac:	1c5a      	adds	r2, r3, #1
 8009cae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cb2:	4422      	add	r2, r4
 8009cb4:	3302      	adds	r3, #2
 8009cb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cba:	e7c5      	b.n	8009c48 <_printf_common+0x58>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	4622      	mov	r2, r4
 8009cc0:	4649      	mov	r1, r9
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	47c0      	blx	r8
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	d0e6      	beq.n	8009c98 <_printf_common+0xa8>
 8009cca:	3601      	adds	r6, #1
 8009ccc:	e7d9      	b.n	8009c82 <_printf_common+0x92>
	...

08009cd0 <_printf_i>:
 8009cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	7e27      	ldrb	r7, [r4, #24]
 8009cd8:	4691      	mov	r9, r2
 8009cda:	2f78      	cmp	r7, #120	; 0x78
 8009cdc:	4680      	mov	r8, r0
 8009cde:	469a      	mov	sl, r3
 8009ce0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ce2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ce6:	d807      	bhi.n	8009cf8 <_printf_i+0x28>
 8009ce8:	2f62      	cmp	r7, #98	; 0x62
 8009cea:	d80a      	bhi.n	8009d02 <_printf_i+0x32>
 8009cec:	2f00      	cmp	r7, #0
 8009cee:	f000 80d9 	beq.w	8009ea4 <_printf_i+0x1d4>
 8009cf2:	2f58      	cmp	r7, #88	; 0x58
 8009cf4:	f000 80a4 	beq.w	8009e40 <_printf_i+0x170>
 8009cf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d00:	e03a      	b.n	8009d78 <_printf_i+0xa8>
 8009d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d06:	2b15      	cmp	r3, #21
 8009d08:	d8f6      	bhi.n	8009cf8 <_printf_i+0x28>
 8009d0a:	a001      	add	r0, pc, #4	; (adr r0, 8009d10 <_printf_i+0x40>)
 8009d0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009d10:	08009d69 	.word	0x08009d69
 8009d14:	08009d7d 	.word	0x08009d7d
 8009d18:	08009cf9 	.word	0x08009cf9
 8009d1c:	08009cf9 	.word	0x08009cf9
 8009d20:	08009cf9 	.word	0x08009cf9
 8009d24:	08009cf9 	.word	0x08009cf9
 8009d28:	08009d7d 	.word	0x08009d7d
 8009d2c:	08009cf9 	.word	0x08009cf9
 8009d30:	08009cf9 	.word	0x08009cf9
 8009d34:	08009cf9 	.word	0x08009cf9
 8009d38:	08009cf9 	.word	0x08009cf9
 8009d3c:	08009e8b 	.word	0x08009e8b
 8009d40:	08009dad 	.word	0x08009dad
 8009d44:	08009e6d 	.word	0x08009e6d
 8009d48:	08009cf9 	.word	0x08009cf9
 8009d4c:	08009cf9 	.word	0x08009cf9
 8009d50:	08009ead 	.word	0x08009ead
 8009d54:	08009cf9 	.word	0x08009cf9
 8009d58:	08009dad 	.word	0x08009dad
 8009d5c:	08009cf9 	.word	0x08009cf9
 8009d60:	08009cf9 	.word	0x08009cf9
 8009d64:	08009e75 	.word	0x08009e75
 8009d68:	680b      	ldr	r3, [r1, #0]
 8009d6a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d6e:	1d1a      	adds	r2, r3, #4
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	600a      	str	r2, [r1, #0]
 8009d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e0a4      	b.n	8009ec6 <_printf_i+0x1f6>
 8009d7c:	6825      	ldr	r5, [r4, #0]
 8009d7e:	6808      	ldr	r0, [r1, #0]
 8009d80:	062e      	lsls	r6, r5, #24
 8009d82:	f100 0304 	add.w	r3, r0, #4
 8009d86:	d50a      	bpl.n	8009d9e <_printf_i+0xce>
 8009d88:	6805      	ldr	r5, [r0, #0]
 8009d8a:	600b      	str	r3, [r1, #0]
 8009d8c:	2d00      	cmp	r5, #0
 8009d8e:	da03      	bge.n	8009d98 <_printf_i+0xc8>
 8009d90:	232d      	movs	r3, #45	; 0x2d
 8009d92:	426d      	negs	r5, r5
 8009d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d98:	230a      	movs	r3, #10
 8009d9a:	485e      	ldr	r0, [pc, #376]	; (8009f14 <_printf_i+0x244>)
 8009d9c:	e019      	b.n	8009dd2 <_printf_i+0x102>
 8009d9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009da2:	6805      	ldr	r5, [r0, #0]
 8009da4:	600b      	str	r3, [r1, #0]
 8009da6:	bf18      	it	ne
 8009da8:	b22d      	sxthne	r5, r5
 8009daa:	e7ef      	b.n	8009d8c <_printf_i+0xbc>
 8009dac:	680b      	ldr	r3, [r1, #0]
 8009dae:	6825      	ldr	r5, [r4, #0]
 8009db0:	1d18      	adds	r0, r3, #4
 8009db2:	6008      	str	r0, [r1, #0]
 8009db4:	0628      	lsls	r0, r5, #24
 8009db6:	d501      	bpl.n	8009dbc <_printf_i+0xec>
 8009db8:	681d      	ldr	r5, [r3, #0]
 8009dba:	e002      	b.n	8009dc2 <_printf_i+0xf2>
 8009dbc:	0669      	lsls	r1, r5, #25
 8009dbe:	d5fb      	bpl.n	8009db8 <_printf_i+0xe8>
 8009dc0:	881d      	ldrh	r5, [r3, #0]
 8009dc2:	2f6f      	cmp	r7, #111	; 0x6f
 8009dc4:	bf0c      	ite	eq
 8009dc6:	2308      	moveq	r3, #8
 8009dc8:	230a      	movne	r3, #10
 8009dca:	4852      	ldr	r0, [pc, #328]	; (8009f14 <_printf_i+0x244>)
 8009dcc:	2100      	movs	r1, #0
 8009dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dd2:	6866      	ldr	r6, [r4, #4]
 8009dd4:	2e00      	cmp	r6, #0
 8009dd6:	bfa8      	it	ge
 8009dd8:	6821      	ldrge	r1, [r4, #0]
 8009dda:	60a6      	str	r6, [r4, #8]
 8009ddc:	bfa4      	itt	ge
 8009dde:	f021 0104 	bicge.w	r1, r1, #4
 8009de2:	6021      	strge	r1, [r4, #0]
 8009de4:	b90d      	cbnz	r5, 8009dea <_printf_i+0x11a>
 8009de6:	2e00      	cmp	r6, #0
 8009de8:	d04d      	beq.n	8009e86 <_printf_i+0x1b6>
 8009dea:	4616      	mov	r6, r2
 8009dec:	fbb5 f1f3 	udiv	r1, r5, r3
 8009df0:	fb03 5711 	mls	r7, r3, r1, r5
 8009df4:	5dc7      	ldrb	r7, [r0, r7]
 8009df6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009dfa:	462f      	mov	r7, r5
 8009dfc:	42bb      	cmp	r3, r7
 8009dfe:	460d      	mov	r5, r1
 8009e00:	d9f4      	bls.n	8009dec <_printf_i+0x11c>
 8009e02:	2b08      	cmp	r3, #8
 8009e04:	d10b      	bne.n	8009e1e <_printf_i+0x14e>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	07df      	lsls	r7, r3, #31
 8009e0a:	d508      	bpl.n	8009e1e <_printf_i+0x14e>
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	6861      	ldr	r1, [r4, #4]
 8009e10:	4299      	cmp	r1, r3
 8009e12:	bfde      	ittt	le
 8009e14:	2330      	movle	r3, #48	; 0x30
 8009e16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e1e:	1b92      	subs	r2, r2, r6
 8009e20:	6122      	str	r2, [r4, #16]
 8009e22:	464b      	mov	r3, r9
 8009e24:	4621      	mov	r1, r4
 8009e26:	4640      	mov	r0, r8
 8009e28:	f8cd a000 	str.w	sl, [sp]
 8009e2c:	aa03      	add	r2, sp, #12
 8009e2e:	f7ff fedf 	bl	8009bf0 <_printf_common>
 8009e32:	3001      	adds	r0, #1
 8009e34:	d14c      	bne.n	8009ed0 <_printf_i+0x200>
 8009e36:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3a:	b004      	add	sp, #16
 8009e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e40:	4834      	ldr	r0, [pc, #208]	; (8009f14 <_printf_i+0x244>)
 8009e42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e46:	680e      	ldr	r6, [r1, #0]
 8009e48:	6823      	ldr	r3, [r4, #0]
 8009e4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009e4e:	061f      	lsls	r7, r3, #24
 8009e50:	600e      	str	r6, [r1, #0]
 8009e52:	d514      	bpl.n	8009e7e <_printf_i+0x1ae>
 8009e54:	07d9      	lsls	r1, r3, #31
 8009e56:	bf44      	itt	mi
 8009e58:	f043 0320 	orrmi.w	r3, r3, #32
 8009e5c:	6023      	strmi	r3, [r4, #0]
 8009e5e:	b91d      	cbnz	r5, 8009e68 <_printf_i+0x198>
 8009e60:	6823      	ldr	r3, [r4, #0]
 8009e62:	f023 0320 	bic.w	r3, r3, #32
 8009e66:	6023      	str	r3, [r4, #0]
 8009e68:	2310      	movs	r3, #16
 8009e6a:	e7af      	b.n	8009dcc <_printf_i+0xfc>
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	f043 0320 	orr.w	r3, r3, #32
 8009e72:	6023      	str	r3, [r4, #0]
 8009e74:	2378      	movs	r3, #120	; 0x78
 8009e76:	4828      	ldr	r0, [pc, #160]	; (8009f18 <_printf_i+0x248>)
 8009e78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e7c:	e7e3      	b.n	8009e46 <_printf_i+0x176>
 8009e7e:	065e      	lsls	r6, r3, #25
 8009e80:	bf48      	it	mi
 8009e82:	b2ad      	uxthmi	r5, r5
 8009e84:	e7e6      	b.n	8009e54 <_printf_i+0x184>
 8009e86:	4616      	mov	r6, r2
 8009e88:	e7bb      	b.n	8009e02 <_printf_i+0x132>
 8009e8a:	680b      	ldr	r3, [r1, #0]
 8009e8c:	6826      	ldr	r6, [r4, #0]
 8009e8e:	1d1d      	adds	r5, r3, #4
 8009e90:	6960      	ldr	r0, [r4, #20]
 8009e92:	600d      	str	r5, [r1, #0]
 8009e94:	0635      	lsls	r5, r6, #24
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	d501      	bpl.n	8009e9e <_printf_i+0x1ce>
 8009e9a:	6018      	str	r0, [r3, #0]
 8009e9c:	e002      	b.n	8009ea4 <_printf_i+0x1d4>
 8009e9e:	0671      	lsls	r1, r6, #25
 8009ea0:	d5fb      	bpl.n	8009e9a <_printf_i+0x1ca>
 8009ea2:	8018      	strh	r0, [r3, #0]
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	4616      	mov	r6, r2
 8009ea8:	6123      	str	r3, [r4, #16]
 8009eaa:	e7ba      	b.n	8009e22 <_printf_i+0x152>
 8009eac:	680b      	ldr	r3, [r1, #0]
 8009eae:	1d1a      	adds	r2, r3, #4
 8009eb0:	600a      	str	r2, [r1, #0]
 8009eb2:	681e      	ldr	r6, [r3, #0]
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	6862      	ldr	r2, [r4, #4]
 8009eba:	f002 fdb9 	bl	800ca30 <memchr>
 8009ebe:	b108      	cbz	r0, 8009ec4 <_printf_i+0x1f4>
 8009ec0:	1b80      	subs	r0, r0, r6
 8009ec2:	6060      	str	r0, [r4, #4]
 8009ec4:	6863      	ldr	r3, [r4, #4]
 8009ec6:	6123      	str	r3, [r4, #16]
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ece:	e7a8      	b.n	8009e22 <_printf_i+0x152>
 8009ed0:	4632      	mov	r2, r6
 8009ed2:	4649      	mov	r1, r9
 8009ed4:	4640      	mov	r0, r8
 8009ed6:	6923      	ldr	r3, [r4, #16]
 8009ed8:	47d0      	blx	sl
 8009eda:	3001      	adds	r0, #1
 8009edc:	d0ab      	beq.n	8009e36 <_printf_i+0x166>
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	079b      	lsls	r3, r3, #30
 8009ee2:	d413      	bmi.n	8009f0c <_printf_i+0x23c>
 8009ee4:	68e0      	ldr	r0, [r4, #12]
 8009ee6:	9b03      	ldr	r3, [sp, #12]
 8009ee8:	4298      	cmp	r0, r3
 8009eea:	bfb8      	it	lt
 8009eec:	4618      	movlt	r0, r3
 8009eee:	e7a4      	b.n	8009e3a <_printf_i+0x16a>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	4632      	mov	r2, r6
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	4640      	mov	r0, r8
 8009ef8:	47d0      	blx	sl
 8009efa:	3001      	adds	r0, #1
 8009efc:	d09b      	beq.n	8009e36 <_printf_i+0x166>
 8009efe:	3501      	adds	r5, #1
 8009f00:	68e3      	ldr	r3, [r4, #12]
 8009f02:	9903      	ldr	r1, [sp, #12]
 8009f04:	1a5b      	subs	r3, r3, r1
 8009f06:	42ab      	cmp	r3, r5
 8009f08:	dcf2      	bgt.n	8009ef0 <_printf_i+0x220>
 8009f0a:	e7eb      	b.n	8009ee4 <_printf_i+0x214>
 8009f0c:	2500      	movs	r5, #0
 8009f0e:	f104 0619 	add.w	r6, r4, #25
 8009f12:	e7f5      	b.n	8009f00 <_printf_i+0x230>
 8009f14:	0800e0c2 	.word	0x0800e0c2
 8009f18:	0800e0d3 	.word	0x0800e0d3

08009f1c <_scanf_float>:
 8009f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	b087      	sub	sp, #28
 8009f22:	9303      	str	r3, [sp, #12]
 8009f24:	688b      	ldr	r3, [r1, #8]
 8009f26:	4617      	mov	r7, r2
 8009f28:	1e5a      	subs	r2, r3, #1
 8009f2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009f2e:	bf85      	ittet	hi
 8009f30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009f34:	195b      	addhi	r3, r3, r5
 8009f36:	2300      	movls	r3, #0
 8009f38:	9302      	strhi	r3, [sp, #8]
 8009f3a:	bf88      	it	hi
 8009f3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009f40:	468b      	mov	fp, r1
 8009f42:	f04f 0500 	mov.w	r5, #0
 8009f46:	bf8c      	ite	hi
 8009f48:	608b      	strhi	r3, [r1, #8]
 8009f4a:	9302      	strls	r3, [sp, #8]
 8009f4c:	680b      	ldr	r3, [r1, #0]
 8009f4e:	4680      	mov	r8, r0
 8009f50:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009f54:	f84b 3b1c 	str.w	r3, [fp], #28
 8009f58:	460c      	mov	r4, r1
 8009f5a:	465e      	mov	r6, fp
 8009f5c:	46aa      	mov	sl, r5
 8009f5e:	46a9      	mov	r9, r5
 8009f60:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009f64:	9501      	str	r5, [sp, #4]
 8009f66:	68a2      	ldr	r2, [r4, #8]
 8009f68:	b152      	cbz	r2, 8009f80 <_scanf_float+0x64>
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	2b4e      	cmp	r3, #78	; 0x4e
 8009f70:	d864      	bhi.n	800a03c <_scanf_float+0x120>
 8009f72:	2b40      	cmp	r3, #64	; 0x40
 8009f74:	d83c      	bhi.n	8009ff0 <_scanf_float+0xd4>
 8009f76:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009f7a:	b2c8      	uxtb	r0, r1
 8009f7c:	280e      	cmp	r0, #14
 8009f7e:	d93a      	bls.n	8009ff6 <_scanf_float+0xda>
 8009f80:	f1b9 0f00 	cmp.w	r9, #0
 8009f84:	d003      	beq.n	8009f8e <_scanf_float+0x72>
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f92:	f1ba 0f01 	cmp.w	sl, #1
 8009f96:	f200 8113 	bhi.w	800a1c0 <_scanf_float+0x2a4>
 8009f9a:	455e      	cmp	r6, fp
 8009f9c:	f200 8105 	bhi.w	800a1aa <_scanf_float+0x28e>
 8009fa0:	2501      	movs	r5, #1
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	b007      	add	sp, #28
 8009fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009faa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009fae:	2a0d      	cmp	r2, #13
 8009fb0:	d8e6      	bhi.n	8009f80 <_scanf_float+0x64>
 8009fb2:	a101      	add	r1, pc, #4	; (adr r1, 8009fb8 <_scanf_float+0x9c>)
 8009fb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009fb8:	0800a0f7 	.word	0x0800a0f7
 8009fbc:	08009f81 	.word	0x08009f81
 8009fc0:	08009f81 	.word	0x08009f81
 8009fc4:	08009f81 	.word	0x08009f81
 8009fc8:	0800a157 	.word	0x0800a157
 8009fcc:	0800a12f 	.word	0x0800a12f
 8009fd0:	08009f81 	.word	0x08009f81
 8009fd4:	08009f81 	.word	0x08009f81
 8009fd8:	0800a105 	.word	0x0800a105
 8009fdc:	08009f81 	.word	0x08009f81
 8009fe0:	08009f81 	.word	0x08009f81
 8009fe4:	08009f81 	.word	0x08009f81
 8009fe8:	08009f81 	.word	0x08009f81
 8009fec:	0800a0bd 	.word	0x0800a0bd
 8009ff0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009ff4:	e7db      	b.n	8009fae <_scanf_float+0x92>
 8009ff6:	290e      	cmp	r1, #14
 8009ff8:	d8c2      	bhi.n	8009f80 <_scanf_float+0x64>
 8009ffa:	a001      	add	r0, pc, #4	; (adr r0, 800a000 <_scanf_float+0xe4>)
 8009ffc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a000:	0800a0af 	.word	0x0800a0af
 800a004:	08009f81 	.word	0x08009f81
 800a008:	0800a0af 	.word	0x0800a0af
 800a00c:	0800a143 	.word	0x0800a143
 800a010:	08009f81 	.word	0x08009f81
 800a014:	0800a05d 	.word	0x0800a05d
 800a018:	0800a099 	.word	0x0800a099
 800a01c:	0800a099 	.word	0x0800a099
 800a020:	0800a099 	.word	0x0800a099
 800a024:	0800a099 	.word	0x0800a099
 800a028:	0800a099 	.word	0x0800a099
 800a02c:	0800a099 	.word	0x0800a099
 800a030:	0800a099 	.word	0x0800a099
 800a034:	0800a099 	.word	0x0800a099
 800a038:	0800a099 	.word	0x0800a099
 800a03c:	2b6e      	cmp	r3, #110	; 0x6e
 800a03e:	d809      	bhi.n	800a054 <_scanf_float+0x138>
 800a040:	2b60      	cmp	r3, #96	; 0x60
 800a042:	d8b2      	bhi.n	8009faa <_scanf_float+0x8e>
 800a044:	2b54      	cmp	r3, #84	; 0x54
 800a046:	d077      	beq.n	800a138 <_scanf_float+0x21c>
 800a048:	2b59      	cmp	r3, #89	; 0x59
 800a04a:	d199      	bne.n	8009f80 <_scanf_float+0x64>
 800a04c:	2d07      	cmp	r5, #7
 800a04e:	d197      	bne.n	8009f80 <_scanf_float+0x64>
 800a050:	2508      	movs	r5, #8
 800a052:	e029      	b.n	800a0a8 <_scanf_float+0x18c>
 800a054:	2b74      	cmp	r3, #116	; 0x74
 800a056:	d06f      	beq.n	800a138 <_scanf_float+0x21c>
 800a058:	2b79      	cmp	r3, #121	; 0x79
 800a05a:	e7f6      	b.n	800a04a <_scanf_float+0x12e>
 800a05c:	6821      	ldr	r1, [r4, #0]
 800a05e:	05c8      	lsls	r0, r1, #23
 800a060:	d51a      	bpl.n	800a098 <_scanf_float+0x17c>
 800a062:	9b02      	ldr	r3, [sp, #8]
 800a064:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a068:	6021      	str	r1, [r4, #0]
 800a06a:	f109 0901 	add.w	r9, r9, #1
 800a06e:	b11b      	cbz	r3, 800a078 <_scanf_float+0x15c>
 800a070:	3b01      	subs	r3, #1
 800a072:	3201      	adds	r2, #1
 800a074:	9302      	str	r3, [sp, #8]
 800a076:	60a2      	str	r2, [r4, #8]
 800a078:	68a3      	ldr	r3, [r4, #8]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	60a3      	str	r3, [r4, #8]
 800a07e:	6923      	ldr	r3, [r4, #16]
 800a080:	3301      	adds	r3, #1
 800a082:	6123      	str	r3, [r4, #16]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3b01      	subs	r3, #1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	607b      	str	r3, [r7, #4]
 800a08c:	f340 8084 	ble.w	800a198 <_scanf_float+0x27c>
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	3301      	adds	r3, #1
 800a094:	603b      	str	r3, [r7, #0]
 800a096:	e766      	b.n	8009f66 <_scanf_float+0x4a>
 800a098:	eb1a 0f05 	cmn.w	sl, r5
 800a09c:	f47f af70 	bne.w	8009f80 <_scanf_float+0x64>
 800a0a0:	6822      	ldr	r2, [r4, #0]
 800a0a2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a0a6:	6022      	str	r2, [r4, #0]
 800a0a8:	f806 3b01 	strb.w	r3, [r6], #1
 800a0ac:	e7e4      	b.n	800a078 <_scanf_float+0x15c>
 800a0ae:	6822      	ldr	r2, [r4, #0]
 800a0b0:	0610      	lsls	r0, r2, #24
 800a0b2:	f57f af65 	bpl.w	8009f80 <_scanf_float+0x64>
 800a0b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0ba:	e7f4      	b.n	800a0a6 <_scanf_float+0x18a>
 800a0bc:	f1ba 0f00 	cmp.w	sl, #0
 800a0c0:	d10e      	bne.n	800a0e0 <_scanf_float+0x1c4>
 800a0c2:	f1b9 0f00 	cmp.w	r9, #0
 800a0c6:	d10e      	bne.n	800a0e6 <_scanf_float+0x1ca>
 800a0c8:	6822      	ldr	r2, [r4, #0]
 800a0ca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a0ce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a0d2:	d108      	bne.n	800a0e6 <_scanf_float+0x1ca>
 800a0d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a0d8:	f04f 0a01 	mov.w	sl, #1
 800a0dc:	6022      	str	r2, [r4, #0]
 800a0de:	e7e3      	b.n	800a0a8 <_scanf_float+0x18c>
 800a0e0:	f1ba 0f02 	cmp.w	sl, #2
 800a0e4:	d055      	beq.n	800a192 <_scanf_float+0x276>
 800a0e6:	2d01      	cmp	r5, #1
 800a0e8:	d002      	beq.n	800a0f0 <_scanf_float+0x1d4>
 800a0ea:	2d04      	cmp	r5, #4
 800a0ec:	f47f af48 	bne.w	8009f80 <_scanf_float+0x64>
 800a0f0:	3501      	adds	r5, #1
 800a0f2:	b2ed      	uxtb	r5, r5
 800a0f4:	e7d8      	b.n	800a0a8 <_scanf_float+0x18c>
 800a0f6:	f1ba 0f01 	cmp.w	sl, #1
 800a0fa:	f47f af41 	bne.w	8009f80 <_scanf_float+0x64>
 800a0fe:	f04f 0a02 	mov.w	sl, #2
 800a102:	e7d1      	b.n	800a0a8 <_scanf_float+0x18c>
 800a104:	b97d      	cbnz	r5, 800a126 <_scanf_float+0x20a>
 800a106:	f1b9 0f00 	cmp.w	r9, #0
 800a10a:	f47f af3c 	bne.w	8009f86 <_scanf_float+0x6a>
 800a10e:	6822      	ldr	r2, [r4, #0]
 800a110:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a114:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a118:	f47f af39 	bne.w	8009f8e <_scanf_float+0x72>
 800a11c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a120:	2501      	movs	r5, #1
 800a122:	6022      	str	r2, [r4, #0]
 800a124:	e7c0      	b.n	800a0a8 <_scanf_float+0x18c>
 800a126:	2d03      	cmp	r5, #3
 800a128:	d0e2      	beq.n	800a0f0 <_scanf_float+0x1d4>
 800a12a:	2d05      	cmp	r5, #5
 800a12c:	e7de      	b.n	800a0ec <_scanf_float+0x1d0>
 800a12e:	2d02      	cmp	r5, #2
 800a130:	f47f af26 	bne.w	8009f80 <_scanf_float+0x64>
 800a134:	2503      	movs	r5, #3
 800a136:	e7b7      	b.n	800a0a8 <_scanf_float+0x18c>
 800a138:	2d06      	cmp	r5, #6
 800a13a:	f47f af21 	bne.w	8009f80 <_scanf_float+0x64>
 800a13e:	2507      	movs	r5, #7
 800a140:	e7b2      	b.n	800a0a8 <_scanf_float+0x18c>
 800a142:	6822      	ldr	r2, [r4, #0]
 800a144:	0591      	lsls	r1, r2, #22
 800a146:	f57f af1b 	bpl.w	8009f80 <_scanf_float+0x64>
 800a14a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a14e:	6022      	str	r2, [r4, #0]
 800a150:	f8cd 9004 	str.w	r9, [sp, #4]
 800a154:	e7a8      	b.n	800a0a8 <_scanf_float+0x18c>
 800a156:	6822      	ldr	r2, [r4, #0]
 800a158:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a15c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a160:	d006      	beq.n	800a170 <_scanf_float+0x254>
 800a162:	0550      	lsls	r0, r2, #21
 800a164:	f57f af0c 	bpl.w	8009f80 <_scanf_float+0x64>
 800a168:	f1b9 0f00 	cmp.w	r9, #0
 800a16c:	f43f af0f 	beq.w	8009f8e <_scanf_float+0x72>
 800a170:	0591      	lsls	r1, r2, #22
 800a172:	bf58      	it	pl
 800a174:	9901      	ldrpl	r1, [sp, #4]
 800a176:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a17a:	bf58      	it	pl
 800a17c:	eba9 0101 	subpl.w	r1, r9, r1
 800a180:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a184:	f04f 0900 	mov.w	r9, #0
 800a188:	bf58      	it	pl
 800a18a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a18e:	6022      	str	r2, [r4, #0]
 800a190:	e78a      	b.n	800a0a8 <_scanf_float+0x18c>
 800a192:	f04f 0a03 	mov.w	sl, #3
 800a196:	e787      	b.n	800a0a8 <_scanf_float+0x18c>
 800a198:	4639      	mov	r1, r7
 800a19a:	4640      	mov	r0, r8
 800a19c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a1a0:	4798      	blx	r3
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	f43f aedf 	beq.w	8009f66 <_scanf_float+0x4a>
 800a1a8:	e6ea      	b.n	8009f80 <_scanf_float+0x64>
 800a1aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1ae:	463a      	mov	r2, r7
 800a1b0:	4640      	mov	r0, r8
 800a1b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1b6:	4798      	blx	r3
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	6123      	str	r3, [r4, #16]
 800a1be:	e6ec      	b.n	8009f9a <_scanf_float+0x7e>
 800a1c0:	1e6b      	subs	r3, r5, #1
 800a1c2:	2b06      	cmp	r3, #6
 800a1c4:	d825      	bhi.n	800a212 <_scanf_float+0x2f6>
 800a1c6:	2d02      	cmp	r5, #2
 800a1c8:	d836      	bhi.n	800a238 <_scanf_float+0x31c>
 800a1ca:	455e      	cmp	r6, fp
 800a1cc:	f67f aee8 	bls.w	8009fa0 <_scanf_float+0x84>
 800a1d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1d4:	463a      	mov	r2, r7
 800a1d6:	4640      	mov	r0, r8
 800a1d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1dc:	4798      	blx	r3
 800a1de:	6923      	ldr	r3, [r4, #16]
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	6123      	str	r3, [r4, #16]
 800a1e4:	e7f1      	b.n	800a1ca <_scanf_float+0x2ae>
 800a1e6:	9802      	ldr	r0, [sp, #8]
 800a1e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1ec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a1f0:	463a      	mov	r2, r7
 800a1f2:	9002      	str	r0, [sp, #8]
 800a1f4:	4640      	mov	r0, r8
 800a1f6:	4798      	blx	r3
 800a1f8:	6923      	ldr	r3, [r4, #16]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	6123      	str	r3, [r4, #16]
 800a1fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a202:	fa5f fa8a 	uxtb.w	sl, sl
 800a206:	f1ba 0f02 	cmp.w	sl, #2
 800a20a:	d1ec      	bne.n	800a1e6 <_scanf_float+0x2ca>
 800a20c:	3d03      	subs	r5, #3
 800a20e:	b2ed      	uxtb	r5, r5
 800a210:	1b76      	subs	r6, r6, r5
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	05da      	lsls	r2, r3, #23
 800a216:	d52f      	bpl.n	800a278 <_scanf_float+0x35c>
 800a218:	055b      	lsls	r3, r3, #21
 800a21a:	d510      	bpl.n	800a23e <_scanf_float+0x322>
 800a21c:	455e      	cmp	r6, fp
 800a21e:	f67f aebf 	bls.w	8009fa0 <_scanf_float+0x84>
 800a222:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a226:	463a      	mov	r2, r7
 800a228:	4640      	mov	r0, r8
 800a22a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a22e:	4798      	blx	r3
 800a230:	6923      	ldr	r3, [r4, #16]
 800a232:	3b01      	subs	r3, #1
 800a234:	6123      	str	r3, [r4, #16]
 800a236:	e7f1      	b.n	800a21c <_scanf_float+0x300>
 800a238:	46aa      	mov	sl, r5
 800a23a:	9602      	str	r6, [sp, #8]
 800a23c:	e7df      	b.n	800a1fe <_scanf_float+0x2e2>
 800a23e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a242:	6923      	ldr	r3, [r4, #16]
 800a244:	2965      	cmp	r1, #101	; 0x65
 800a246:	f103 33ff 	add.w	r3, r3, #4294967295
 800a24a:	f106 35ff 	add.w	r5, r6, #4294967295
 800a24e:	6123      	str	r3, [r4, #16]
 800a250:	d00c      	beq.n	800a26c <_scanf_float+0x350>
 800a252:	2945      	cmp	r1, #69	; 0x45
 800a254:	d00a      	beq.n	800a26c <_scanf_float+0x350>
 800a256:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a25a:	463a      	mov	r2, r7
 800a25c:	4640      	mov	r0, r8
 800a25e:	4798      	blx	r3
 800a260:	6923      	ldr	r3, [r4, #16]
 800a262:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a266:	3b01      	subs	r3, #1
 800a268:	1eb5      	subs	r5, r6, #2
 800a26a:	6123      	str	r3, [r4, #16]
 800a26c:	463a      	mov	r2, r7
 800a26e:	4640      	mov	r0, r8
 800a270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a274:	4798      	blx	r3
 800a276:	462e      	mov	r6, r5
 800a278:	6825      	ldr	r5, [r4, #0]
 800a27a:	f015 0510 	ands.w	r5, r5, #16
 800a27e:	d159      	bne.n	800a334 <_scanf_float+0x418>
 800a280:	7035      	strb	r5, [r6, #0]
 800a282:	6823      	ldr	r3, [r4, #0]
 800a284:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a28c:	d11c      	bne.n	800a2c8 <_scanf_float+0x3ac>
 800a28e:	9b01      	ldr	r3, [sp, #4]
 800a290:	454b      	cmp	r3, r9
 800a292:	eba3 0209 	sub.w	r2, r3, r9
 800a296:	d124      	bne.n	800a2e2 <_scanf_float+0x3c6>
 800a298:	2200      	movs	r2, #0
 800a29a:	4659      	mov	r1, fp
 800a29c:	4640      	mov	r0, r8
 800a29e:	f000 ff9f 	bl	800b1e0 <_strtod_r>
 800a2a2:	f8d4 c000 	ldr.w	ip, [r4]
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	f01c 0f02 	tst.w	ip, #2
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	460f      	mov	r7, r1
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	d021      	beq.n	800a2f8 <_scanf_float+0x3dc>
 800a2b4:	9903      	ldr	r1, [sp, #12]
 800a2b6:	1d1a      	adds	r2, r3, #4
 800a2b8:	600a      	str	r2, [r1, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	e9c3 6700 	strd	r6, r7, [r3]
 800a2c0:	68e3      	ldr	r3, [r4, #12]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	60e3      	str	r3, [r4, #12]
 800a2c6:	e66c      	b.n	8009fa2 <_scanf_float+0x86>
 800a2c8:	9b04      	ldr	r3, [sp, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0e4      	beq.n	800a298 <_scanf_float+0x37c>
 800a2ce:	9905      	ldr	r1, [sp, #20]
 800a2d0:	230a      	movs	r3, #10
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	3101      	adds	r1, #1
 800a2d8:	f001 f876 	bl	800b3c8 <_strtol_r>
 800a2dc:	9b04      	ldr	r3, [sp, #16]
 800a2de:	9e05      	ldr	r6, [sp, #20]
 800a2e0:	1ac2      	subs	r2, r0, r3
 800a2e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a2e6:	429e      	cmp	r6, r3
 800a2e8:	bf28      	it	cs
 800a2ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	4911      	ldr	r1, [pc, #68]	; (800a338 <_scanf_float+0x41c>)
 800a2f2:	f000 f8d7 	bl	800a4a4 <siprintf>
 800a2f6:	e7cf      	b.n	800a298 <_scanf_float+0x37c>
 800a2f8:	f01c 0f04 	tst.w	ip, #4
 800a2fc:	f103 0e04 	add.w	lr, r3, #4
 800a300:	d003      	beq.n	800a30a <_scanf_float+0x3ee>
 800a302:	9903      	ldr	r1, [sp, #12]
 800a304:	f8c1 e000 	str.w	lr, [r1]
 800a308:	e7d7      	b.n	800a2ba <_scanf_float+0x39e>
 800a30a:	9a03      	ldr	r2, [sp, #12]
 800a30c:	f8c2 e000 	str.w	lr, [r2]
 800a310:	f8d3 8000 	ldr.w	r8, [r3]
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	f7f6 fb78 	bl	8000a0c <__aeabi_dcmpun>
 800a31c:	b128      	cbz	r0, 800a32a <_scanf_float+0x40e>
 800a31e:	4807      	ldr	r0, [pc, #28]	; (800a33c <_scanf_float+0x420>)
 800a320:	f000 f888 	bl	800a434 <nanf>
 800a324:	f8c8 0000 	str.w	r0, [r8]
 800a328:	e7ca      	b.n	800a2c0 <_scanf_float+0x3a4>
 800a32a:	4630      	mov	r0, r6
 800a32c:	4639      	mov	r1, r7
 800a32e:	f7f6 fbcb 	bl	8000ac8 <__aeabi_d2f>
 800a332:	e7f7      	b.n	800a324 <_scanf_float+0x408>
 800a334:	2500      	movs	r5, #0
 800a336:	e634      	b.n	8009fa2 <_scanf_float+0x86>
 800a338:	0800e0e4 	.word	0x0800e0e4
 800a33c:	0800e1f3 	.word	0x0800e1f3

0800a340 <cleanup_glue>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	460c      	mov	r4, r1
 800a344:	6809      	ldr	r1, [r1, #0]
 800a346:	4605      	mov	r5, r0
 800a348:	b109      	cbz	r1, 800a34e <cleanup_glue+0xe>
 800a34a:	f7ff fff9 	bl	800a340 <cleanup_glue>
 800a34e:	4621      	mov	r1, r4
 800a350:	4628      	mov	r0, r5
 800a352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a356:	f003 b84b 	b.w	800d3f0 <_free_r>
	...

0800a35c <_reclaim_reent>:
 800a35c:	4b2c      	ldr	r3, [pc, #176]	; (800a410 <_reclaim_reent+0xb4>)
 800a35e:	b570      	push	{r4, r5, r6, lr}
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4604      	mov	r4, r0
 800a364:	4283      	cmp	r3, r0
 800a366:	d051      	beq.n	800a40c <_reclaim_reent+0xb0>
 800a368:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a36a:	b143      	cbz	r3, 800a37e <_reclaim_reent+0x22>
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d14a      	bne.n	800a408 <_reclaim_reent+0xac>
 800a372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a374:	6819      	ldr	r1, [r3, #0]
 800a376:	b111      	cbz	r1, 800a37e <_reclaim_reent+0x22>
 800a378:	4620      	mov	r0, r4
 800a37a:	f003 f839 	bl	800d3f0 <_free_r>
 800a37e:	6961      	ldr	r1, [r4, #20]
 800a380:	b111      	cbz	r1, 800a388 <_reclaim_reent+0x2c>
 800a382:	4620      	mov	r0, r4
 800a384:	f003 f834 	bl	800d3f0 <_free_r>
 800a388:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a38a:	b111      	cbz	r1, 800a392 <_reclaim_reent+0x36>
 800a38c:	4620      	mov	r0, r4
 800a38e:	f003 f82f 	bl	800d3f0 <_free_r>
 800a392:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a394:	b111      	cbz	r1, 800a39c <_reclaim_reent+0x40>
 800a396:	4620      	mov	r0, r4
 800a398:	f003 f82a 	bl	800d3f0 <_free_r>
 800a39c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a39e:	b111      	cbz	r1, 800a3a6 <_reclaim_reent+0x4a>
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f003 f825 	bl	800d3f0 <_free_r>
 800a3a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a3a8:	b111      	cbz	r1, 800a3b0 <_reclaim_reent+0x54>
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f003 f820 	bl	800d3f0 <_free_r>
 800a3b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a3b2:	b111      	cbz	r1, 800a3ba <_reclaim_reent+0x5e>
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f003 f81b 	bl	800d3f0 <_free_r>
 800a3ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a3bc:	b111      	cbz	r1, 800a3c4 <_reclaim_reent+0x68>
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f003 f816 	bl	800d3f0 <_free_r>
 800a3c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3c6:	b111      	cbz	r1, 800a3ce <_reclaim_reent+0x72>
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f003 f811 	bl	800d3f0 <_free_r>
 800a3ce:	69a3      	ldr	r3, [r4, #24]
 800a3d0:	b1e3      	cbz	r3, 800a40c <_reclaim_reent+0xb0>
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a3d6:	4798      	blx	r3
 800a3d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a3da:	b1b9      	cbz	r1, 800a40c <_reclaim_reent+0xb0>
 800a3dc:	4620      	mov	r0, r4
 800a3de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3e2:	f7ff bfad 	b.w	800a340 <cleanup_glue>
 800a3e6:	5949      	ldr	r1, [r1, r5]
 800a3e8:	b941      	cbnz	r1, 800a3fc <_reclaim_reent+0xa0>
 800a3ea:	3504      	adds	r5, #4
 800a3ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ee:	2d80      	cmp	r5, #128	; 0x80
 800a3f0:	68d9      	ldr	r1, [r3, #12]
 800a3f2:	d1f8      	bne.n	800a3e6 <_reclaim_reent+0x8a>
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f002 fffb 	bl	800d3f0 <_free_r>
 800a3fa:	e7ba      	b.n	800a372 <_reclaim_reent+0x16>
 800a3fc:	680e      	ldr	r6, [r1, #0]
 800a3fe:	4620      	mov	r0, r4
 800a400:	f002 fff6 	bl	800d3f0 <_free_r>
 800a404:	4631      	mov	r1, r6
 800a406:	e7ef      	b.n	800a3e8 <_reclaim_reent+0x8c>
 800a408:	2500      	movs	r5, #0
 800a40a:	e7ef      	b.n	800a3ec <_reclaim_reent+0x90>
 800a40c:	bd70      	pop	{r4, r5, r6, pc}
 800a40e:	bf00      	nop
 800a410:	2000000c 	.word	0x2000000c

0800a414 <_sbrk_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	2300      	movs	r3, #0
 800a418:	4d05      	ldr	r5, [pc, #20]	; (800a430 <_sbrk_r+0x1c>)
 800a41a:	4604      	mov	r4, r0
 800a41c:	4608      	mov	r0, r1
 800a41e:	602b      	str	r3, [r5, #0]
 800a420:	f7f7 fdc0 	bl	8001fa4 <_sbrk>
 800a424:	1c43      	adds	r3, r0, #1
 800a426:	d102      	bne.n	800a42e <_sbrk_r+0x1a>
 800a428:	682b      	ldr	r3, [r5, #0]
 800a42a:	b103      	cbz	r3, 800a42e <_sbrk_r+0x1a>
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	bd38      	pop	{r3, r4, r5, pc}
 800a430:	20003b98 	.word	0x20003b98

0800a434 <nanf>:
 800a434:	4800      	ldr	r0, [pc, #0]	; (800a438 <nanf+0x4>)
 800a436:	4770      	bx	lr
 800a438:	7fc00000 	.word	0x7fc00000

0800a43c <sniprintf>:
 800a43c:	b40c      	push	{r2, r3}
 800a43e:	b530      	push	{r4, r5, lr}
 800a440:	4b17      	ldr	r3, [pc, #92]	; (800a4a0 <sniprintf+0x64>)
 800a442:	1e0c      	subs	r4, r1, #0
 800a444:	681d      	ldr	r5, [r3, #0]
 800a446:	b09d      	sub	sp, #116	; 0x74
 800a448:	da08      	bge.n	800a45c <sniprintf+0x20>
 800a44a:	238b      	movs	r3, #139	; 0x8b
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	602b      	str	r3, [r5, #0]
 800a452:	b01d      	add	sp, #116	; 0x74
 800a454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a458:	b002      	add	sp, #8
 800a45a:	4770      	bx	lr
 800a45c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a460:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a464:	bf0c      	ite	eq
 800a466:	4623      	moveq	r3, r4
 800a468:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a46c:	9304      	str	r3, [sp, #16]
 800a46e:	9307      	str	r3, [sp, #28]
 800a470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a474:	9002      	str	r0, [sp, #8]
 800a476:	9006      	str	r0, [sp, #24]
 800a478:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a47c:	4628      	mov	r0, r5
 800a47e:	ab21      	add	r3, sp, #132	; 0x84
 800a480:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a482:	a902      	add	r1, sp, #8
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	f003 f85b 	bl	800d540 <_svfiprintf_r>
 800a48a:	1c43      	adds	r3, r0, #1
 800a48c:	bfbc      	itt	lt
 800a48e:	238b      	movlt	r3, #139	; 0x8b
 800a490:	602b      	strlt	r3, [r5, #0]
 800a492:	2c00      	cmp	r4, #0
 800a494:	d0dd      	beq.n	800a452 <sniprintf+0x16>
 800a496:	2200      	movs	r2, #0
 800a498:	9b02      	ldr	r3, [sp, #8]
 800a49a:	701a      	strb	r2, [r3, #0]
 800a49c:	e7d9      	b.n	800a452 <sniprintf+0x16>
 800a49e:	bf00      	nop
 800a4a0:	2000000c 	.word	0x2000000c

0800a4a4 <siprintf>:
 800a4a4:	b40e      	push	{r1, r2, r3}
 800a4a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4aa:	b500      	push	{lr}
 800a4ac:	b09c      	sub	sp, #112	; 0x70
 800a4ae:	ab1d      	add	r3, sp, #116	; 0x74
 800a4b0:	9002      	str	r0, [sp, #8]
 800a4b2:	9006      	str	r0, [sp, #24]
 800a4b4:	9107      	str	r1, [sp, #28]
 800a4b6:	9104      	str	r1, [sp, #16]
 800a4b8:	4808      	ldr	r0, [pc, #32]	; (800a4dc <siprintf+0x38>)
 800a4ba:	4909      	ldr	r1, [pc, #36]	; (800a4e0 <siprintf+0x3c>)
 800a4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4c0:	9105      	str	r1, [sp, #20]
 800a4c2:	6800      	ldr	r0, [r0, #0]
 800a4c4:	a902      	add	r1, sp, #8
 800a4c6:	9301      	str	r3, [sp, #4]
 800a4c8:	f003 f83a 	bl	800d540 <_svfiprintf_r>
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	9b02      	ldr	r3, [sp, #8]
 800a4d0:	701a      	strb	r2, [r3, #0]
 800a4d2:	b01c      	add	sp, #112	; 0x70
 800a4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4d8:	b003      	add	sp, #12
 800a4da:	4770      	bx	lr
 800a4dc:	2000000c 	.word	0x2000000c
 800a4e0:	ffff0208 	.word	0xffff0208

0800a4e4 <__sread>:
 800a4e4:	b510      	push	{r4, lr}
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ec:	f003 fa80 	bl	800d9f0 <_read_r>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	bfab      	itete	ge
 800a4f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a4f8:	181b      	addge	r3, r3, r0
 800a4fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4fe:	bfac      	ite	ge
 800a500:	6563      	strge	r3, [r4, #84]	; 0x54
 800a502:	81a3      	strhlt	r3, [r4, #12]
 800a504:	bd10      	pop	{r4, pc}

0800a506 <__swrite>:
 800a506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a50a:	461f      	mov	r7, r3
 800a50c:	898b      	ldrh	r3, [r1, #12]
 800a50e:	4605      	mov	r5, r0
 800a510:	05db      	lsls	r3, r3, #23
 800a512:	460c      	mov	r4, r1
 800a514:	4616      	mov	r6, r2
 800a516:	d505      	bpl.n	800a524 <__swrite+0x1e>
 800a518:	2302      	movs	r3, #2
 800a51a:	2200      	movs	r2, #0
 800a51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a520:	f002 fa5a 	bl	800c9d8 <_lseek_r>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	4632      	mov	r2, r6
 800a528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a52c:	81a3      	strh	r3, [r4, #12]
 800a52e:	4628      	mov	r0, r5
 800a530:	463b      	mov	r3, r7
 800a532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a53a:	f000 bf51 	b.w	800b3e0 <_write_r>

0800a53e <__sseek>:
 800a53e:	b510      	push	{r4, lr}
 800a540:	460c      	mov	r4, r1
 800a542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a546:	f002 fa47 	bl	800c9d8 <_lseek_r>
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	89a3      	ldrh	r3, [r4, #12]
 800a54e:	bf15      	itete	ne
 800a550:	6560      	strne	r0, [r4, #84]	; 0x54
 800a552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a55a:	81a3      	strheq	r3, [r4, #12]
 800a55c:	bf18      	it	ne
 800a55e:	81a3      	strhne	r3, [r4, #12]
 800a560:	bd10      	pop	{r4, pc}

0800a562 <__sclose>:
 800a562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a566:	f000 bf6b 	b.w	800b440 <_close_r>

0800a56a <strchr>:
 800a56a:	4603      	mov	r3, r0
 800a56c:	b2c9      	uxtb	r1, r1
 800a56e:	4618      	mov	r0, r3
 800a570:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a574:	b112      	cbz	r2, 800a57c <strchr+0x12>
 800a576:	428a      	cmp	r2, r1
 800a578:	d1f9      	bne.n	800a56e <strchr+0x4>
 800a57a:	4770      	bx	lr
 800a57c:	2900      	cmp	r1, #0
 800a57e:	bf18      	it	ne
 800a580:	2000      	movne	r0, #0
 800a582:	4770      	bx	lr

0800a584 <strstr>:
 800a584:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a586:	780c      	ldrb	r4, [r1, #0]
 800a588:	b164      	cbz	r4, 800a5a4 <strstr+0x20>
 800a58a:	4603      	mov	r3, r0
 800a58c:	781a      	ldrb	r2, [r3, #0]
 800a58e:	4618      	mov	r0, r3
 800a590:	1c5e      	adds	r6, r3, #1
 800a592:	b90a      	cbnz	r2, 800a598 <strstr+0x14>
 800a594:	4610      	mov	r0, r2
 800a596:	e005      	b.n	800a5a4 <strstr+0x20>
 800a598:	4294      	cmp	r4, r2
 800a59a:	d108      	bne.n	800a5ae <strstr+0x2a>
 800a59c:	460d      	mov	r5, r1
 800a59e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a5a2:	b902      	cbnz	r2, 800a5a6 <strstr+0x22>
 800a5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5a6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a5aa:	4297      	cmp	r7, r2
 800a5ac:	d0f7      	beq.n	800a59e <strstr+0x1a>
 800a5ae:	4633      	mov	r3, r6
 800a5b0:	e7ec      	b.n	800a58c <strstr+0x8>

0800a5b2 <sulp>:
 800a5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b6:	460f      	mov	r7, r1
 800a5b8:	4690      	mov	r8, r2
 800a5ba:	f002 fdc3 	bl	800d144 <__ulp>
 800a5be:	4604      	mov	r4, r0
 800a5c0:	460d      	mov	r5, r1
 800a5c2:	f1b8 0f00 	cmp.w	r8, #0
 800a5c6:	d011      	beq.n	800a5ec <sulp+0x3a>
 800a5c8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a5cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	dd0b      	ble.n	800a5ec <sulp+0x3a>
 800a5d4:	2400      	movs	r4, #0
 800a5d6:	051b      	lsls	r3, r3, #20
 800a5d8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a5dc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a5e0:	4622      	mov	r2, r4
 800a5e2:	462b      	mov	r3, r5
 800a5e4:	f7f5 ff78 	bl	80004d8 <__aeabi_dmul>
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	460d      	mov	r5, r1
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f4:	0000      	movs	r0, r0
	...

0800a5f8 <_strtod_l>:
 800a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	469b      	mov	fp, r3
 800a5fe:	2300      	movs	r3, #0
 800a600:	b0a1      	sub	sp, #132	; 0x84
 800a602:	931c      	str	r3, [sp, #112]	; 0x70
 800a604:	4ba1      	ldr	r3, [pc, #644]	; (800a88c <_strtod_l+0x294>)
 800a606:	4682      	mov	sl, r0
 800a608:	681f      	ldr	r7, [r3, #0]
 800a60a:	460e      	mov	r6, r1
 800a60c:	4638      	mov	r0, r7
 800a60e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a610:	f7f5 fd9e 	bl	8000150 <strlen>
 800a614:	f04f 0800 	mov.w	r8, #0
 800a618:	4604      	mov	r4, r0
 800a61a:	f04f 0900 	mov.w	r9, #0
 800a61e:	961b      	str	r6, [sp, #108]	; 0x6c
 800a620:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a622:	781a      	ldrb	r2, [r3, #0]
 800a624:	2a2b      	cmp	r2, #43	; 0x2b
 800a626:	d04c      	beq.n	800a6c2 <_strtod_l+0xca>
 800a628:	d83a      	bhi.n	800a6a0 <_strtod_l+0xa8>
 800a62a:	2a0d      	cmp	r2, #13
 800a62c:	d833      	bhi.n	800a696 <_strtod_l+0x9e>
 800a62e:	2a08      	cmp	r2, #8
 800a630:	d833      	bhi.n	800a69a <_strtod_l+0xa2>
 800a632:	2a00      	cmp	r2, #0
 800a634:	d03d      	beq.n	800a6b2 <_strtod_l+0xba>
 800a636:	2300      	movs	r3, #0
 800a638:	930c      	str	r3, [sp, #48]	; 0x30
 800a63a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a63c:	782b      	ldrb	r3, [r5, #0]
 800a63e:	2b30      	cmp	r3, #48	; 0x30
 800a640:	f040 80af 	bne.w	800a7a2 <_strtod_l+0x1aa>
 800a644:	786b      	ldrb	r3, [r5, #1]
 800a646:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a64a:	2b58      	cmp	r3, #88	; 0x58
 800a64c:	d16c      	bne.n	800a728 <_strtod_l+0x130>
 800a64e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a650:	4650      	mov	r0, sl
 800a652:	9301      	str	r3, [sp, #4]
 800a654:	ab1c      	add	r3, sp, #112	; 0x70
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	4a8d      	ldr	r2, [pc, #564]	; (800a890 <_strtod_l+0x298>)
 800a65a:	f8cd b008 	str.w	fp, [sp, #8]
 800a65e:	ab1d      	add	r3, sp, #116	; 0x74
 800a660:	a91b      	add	r1, sp, #108	; 0x6c
 800a662:	f001 feb7 	bl	800c3d4 <__gethex>
 800a666:	f010 0607 	ands.w	r6, r0, #7
 800a66a:	4604      	mov	r4, r0
 800a66c:	d005      	beq.n	800a67a <_strtod_l+0x82>
 800a66e:	2e06      	cmp	r6, #6
 800a670:	d129      	bne.n	800a6c6 <_strtod_l+0xce>
 800a672:	2300      	movs	r3, #0
 800a674:	3501      	adds	r5, #1
 800a676:	951b      	str	r5, [sp, #108]	; 0x6c
 800a678:	930c      	str	r3, [sp, #48]	; 0x30
 800a67a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f040 8596 	bne.w	800b1ae <_strtod_l+0xbb6>
 800a682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a684:	b1d3      	cbz	r3, 800a6bc <_strtod_l+0xc4>
 800a686:	4642      	mov	r2, r8
 800a688:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a68c:	4610      	mov	r0, r2
 800a68e:	4619      	mov	r1, r3
 800a690:	b021      	add	sp, #132	; 0x84
 800a692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a696:	2a20      	cmp	r2, #32
 800a698:	d1cd      	bne.n	800a636 <_strtod_l+0x3e>
 800a69a:	3301      	adds	r3, #1
 800a69c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a69e:	e7bf      	b.n	800a620 <_strtod_l+0x28>
 800a6a0:	2a2d      	cmp	r2, #45	; 0x2d
 800a6a2:	d1c8      	bne.n	800a636 <_strtod_l+0x3e>
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	920c      	str	r2, [sp, #48]	; 0x30
 800a6a8:	1c5a      	adds	r2, r3, #1
 800a6aa:	921b      	str	r2, [sp, #108]	; 0x6c
 800a6ac:	785b      	ldrb	r3, [r3, #1]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1c3      	bne.n	800a63a <_strtod_l+0x42>
 800a6b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6b4:	961b      	str	r6, [sp, #108]	; 0x6c
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f040 8577 	bne.w	800b1aa <_strtod_l+0xbb2>
 800a6bc:	4642      	mov	r2, r8
 800a6be:	464b      	mov	r3, r9
 800a6c0:	e7e4      	b.n	800a68c <_strtod_l+0x94>
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	e7ef      	b.n	800a6a6 <_strtod_l+0xae>
 800a6c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a6c8:	b13a      	cbz	r2, 800a6da <_strtod_l+0xe2>
 800a6ca:	2135      	movs	r1, #53	; 0x35
 800a6cc:	a81e      	add	r0, sp, #120	; 0x78
 800a6ce:	f002 fe3d 	bl	800d34c <__copybits>
 800a6d2:	4650      	mov	r0, sl
 800a6d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a6d6:	f002 fa05 	bl	800cae4 <_Bfree>
 800a6da:	3e01      	subs	r6, #1
 800a6dc:	2e05      	cmp	r6, #5
 800a6de:	d807      	bhi.n	800a6f0 <_strtod_l+0xf8>
 800a6e0:	e8df f006 	tbb	[pc, r6]
 800a6e4:	1d180b0e 	.word	0x1d180b0e
 800a6e8:	030e      	.short	0x030e
 800a6ea:	f04f 0900 	mov.w	r9, #0
 800a6ee:	46c8      	mov	r8, r9
 800a6f0:	0721      	lsls	r1, r4, #28
 800a6f2:	d5c2      	bpl.n	800a67a <_strtod_l+0x82>
 800a6f4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a6f8:	e7bf      	b.n	800a67a <_strtod_l+0x82>
 800a6fa:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800a6fe:	e7f7      	b.n	800a6f0 <_strtod_l+0xf8>
 800a700:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a702:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800a706:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a70a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a70e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a712:	e7ed      	b.n	800a6f0 <_strtod_l+0xf8>
 800a714:	f04f 0800 	mov.w	r8, #0
 800a718:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a894 <_strtod_l+0x29c>
 800a71c:	e7e8      	b.n	800a6f0 <_strtod_l+0xf8>
 800a71e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a722:	f04f 38ff 	mov.w	r8, #4294967295
 800a726:	e7e3      	b.n	800a6f0 <_strtod_l+0xf8>
 800a728:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a72a:	1c5a      	adds	r2, r3, #1
 800a72c:	921b      	str	r2, [sp, #108]	; 0x6c
 800a72e:	785b      	ldrb	r3, [r3, #1]
 800a730:	2b30      	cmp	r3, #48	; 0x30
 800a732:	d0f9      	beq.n	800a728 <_strtod_l+0x130>
 800a734:	2b00      	cmp	r3, #0
 800a736:	d0a0      	beq.n	800a67a <_strtod_l+0x82>
 800a738:	2301      	movs	r3, #1
 800a73a:	9307      	str	r3, [sp, #28]
 800a73c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a73e:	220a      	movs	r2, #10
 800a740:	9308      	str	r3, [sp, #32]
 800a742:	2300      	movs	r3, #0
 800a744:	469b      	mov	fp, r3
 800a746:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a74a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a74c:	7805      	ldrb	r5, [r0, #0]
 800a74e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a752:	b2d9      	uxtb	r1, r3
 800a754:	2909      	cmp	r1, #9
 800a756:	d926      	bls.n	800a7a6 <_strtod_l+0x1ae>
 800a758:	4622      	mov	r2, r4
 800a75a:	4639      	mov	r1, r7
 800a75c:	f003 f960 	bl	800da20 <strncmp>
 800a760:	2800      	cmp	r0, #0
 800a762:	d032      	beq.n	800a7ca <_strtod_l+0x1d2>
 800a764:	2000      	movs	r0, #0
 800a766:	462b      	mov	r3, r5
 800a768:	465c      	mov	r4, fp
 800a76a:	4602      	mov	r2, r0
 800a76c:	9004      	str	r0, [sp, #16]
 800a76e:	2b65      	cmp	r3, #101	; 0x65
 800a770:	d001      	beq.n	800a776 <_strtod_l+0x17e>
 800a772:	2b45      	cmp	r3, #69	; 0x45
 800a774:	d113      	bne.n	800a79e <_strtod_l+0x1a6>
 800a776:	b91c      	cbnz	r4, 800a780 <_strtod_l+0x188>
 800a778:	9b07      	ldr	r3, [sp, #28]
 800a77a:	4303      	orrs	r3, r0
 800a77c:	d099      	beq.n	800a6b2 <_strtod_l+0xba>
 800a77e:	2400      	movs	r4, #0
 800a780:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a782:	1c73      	adds	r3, r6, #1
 800a784:	931b      	str	r3, [sp, #108]	; 0x6c
 800a786:	7873      	ldrb	r3, [r6, #1]
 800a788:	2b2b      	cmp	r3, #43	; 0x2b
 800a78a:	d078      	beq.n	800a87e <_strtod_l+0x286>
 800a78c:	2b2d      	cmp	r3, #45	; 0x2d
 800a78e:	d07b      	beq.n	800a888 <_strtod_l+0x290>
 800a790:	2700      	movs	r7, #0
 800a792:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a796:	2909      	cmp	r1, #9
 800a798:	f240 8082 	bls.w	800a8a0 <_strtod_l+0x2a8>
 800a79c:	961b      	str	r6, [sp, #108]	; 0x6c
 800a79e:	2500      	movs	r5, #0
 800a7a0:	e09e      	b.n	800a8e0 <_strtod_l+0x2e8>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	e7c9      	b.n	800a73a <_strtod_l+0x142>
 800a7a6:	f1bb 0f08 	cmp.w	fp, #8
 800a7aa:	bfd5      	itete	le
 800a7ac:	9906      	ldrle	r1, [sp, #24]
 800a7ae:	9905      	ldrgt	r1, [sp, #20]
 800a7b0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a7b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a7b8:	f100 0001 	add.w	r0, r0, #1
 800a7bc:	bfd4      	ite	le
 800a7be:	9306      	strle	r3, [sp, #24]
 800a7c0:	9305      	strgt	r3, [sp, #20]
 800a7c2:	f10b 0b01 	add.w	fp, fp, #1
 800a7c6:	901b      	str	r0, [sp, #108]	; 0x6c
 800a7c8:	e7bf      	b.n	800a74a <_strtod_l+0x152>
 800a7ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7cc:	191a      	adds	r2, r3, r4
 800a7ce:	921b      	str	r2, [sp, #108]	; 0x6c
 800a7d0:	5d1b      	ldrb	r3, [r3, r4]
 800a7d2:	f1bb 0f00 	cmp.w	fp, #0
 800a7d6:	d036      	beq.n	800a846 <_strtod_l+0x24e>
 800a7d8:	465c      	mov	r4, fp
 800a7da:	9004      	str	r0, [sp, #16]
 800a7dc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a7e0:	2a09      	cmp	r2, #9
 800a7e2:	d912      	bls.n	800a80a <_strtod_l+0x212>
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	e7c2      	b.n	800a76e <_strtod_l+0x176>
 800a7e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	1c5a      	adds	r2, r3, #1
 800a7ee:	921b      	str	r2, [sp, #108]	; 0x6c
 800a7f0:	785b      	ldrb	r3, [r3, #1]
 800a7f2:	2b30      	cmp	r3, #48	; 0x30
 800a7f4:	d0f8      	beq.n	800a7e8 <_strtod_l+0x1f0>
 800a7f6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a7fa:	2a08      	cmp	r2, #8
 800a7fc:	f200 84dc 	bhi.w	800b1b8 <_strtod_l+0xbc0>
 800a800:	9004      	str	r0, [sp, #16]
 800a802:	2000      	movs	r0, #0
 800a804:	4604      	mov	r4, r0
 800a806:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a808:	9208      	str	r2, [sp, #32]
 800a80a:	3b30      	subs	r3, #48	; 0x30
 800a80c:	f100 0201 	add.w	r2, r0, #1
 800a810:	d013      	beq.n	800a83a <_strtod_l+0x242>
 800a812:	9904      	ldr	r1, [sp, #16]
 800a814:	1905      	adds	r5, r0, r4
 800a816:	4411      	add	r1, r2
 800a818:	9104      	str	r1, [sp, #16]
 800a81a:	4622      	mov	r2, r4
 800a81c:	210a      	movs	r1, #10
 800a81e:	42aa      	cmp	r2, r5
 800a820:	d113      	bne.n	800a84a <_strtod_l+0x252>
 800a822:	1822      	adds	r2, r4, r0
 800a824:	2a08      	cmp	r2, #8
 800a826:	f104 0401 	add.w	r4, r4, #1
 800a82a:	4404      	add	r4, r0
 800a82c:	dc1b      	bgt.n	800a866 <_strtod_l+0x26e>
 800a82e:	220a      	movs	r2, #10
 800a830:	9906      	ldr	r1, [sp, #24]
 800a832:	fb02 3301 	mla	r3, r2, r1, r3
 800a836:	9306      	str	r3, [sp, #24]
 800a838:	2200      	movs	r2, #0
 800a83a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a83c:	4610      	mov	r0, r2
 800a83e:	1c59      	adds	r1, r3, #1
 800a840:	911b      	str	r1, [sp, #108]	; 0x6c
 800a842:	785b      	ldrb	r3, [r3, #1]
 800a844:	e7ca      	b.n	800a7dc <_strtod_l+0x1e4>
 800a846:	4658      	mov	r0, fp
 800a848:	e7d3      	b.n	800a7f2 <_strtod_l+0x1fa>
 800a84a:	2a08      	cmp	r2, #8
 800a84c:	dc04      	bgt.n	800a858 <_strtod_l+0x260>
 800a84e:	9f06      	ldr	r7, [sp, #24]
 800a850:	434f      	muls	r7, r1
 800a852:	9706      	str	r7, [sp, #24]
 800a854:	3201      	adds	r2, #1
 800a856:	e7e2      	b.n	800a81e <_strtod_l+0x226>
 800a858:	1c57      	adds	r7, r2, #1
 800a85a:	2f10      	cmp	r7, #16
 800a85c:	bfde      	ittt	le
 800a85e:	9f05      	ldrle	r7, [sp, #20]
 800a860:	434f      	mulle	r7, r1
 800a862:	9705      	strle	r7, [sp, #20]
 800a864:	e7f6      	b.n	800a854 <_strtod_l+0x25c>
 800a866:	2c10      	cmp	r4, #16
 800a868:	bfdf      	itttt	le
 800a86a:	220a      	movle	r2, #10
 800a86c:	9905      	ldrle	r1, [sp, #20]
 800a86e:	fb02 3301 	mlale	r3, r2, r1, r3
 800a872:	9305      	strle	r3, [sp, #20]
 800a874:	e7e0      	b.n	800a838 <_strtod_l+0x240>
 800a876:	2300      	movs	r3, #0
 800a878:	2201      	movs	r2, #1
 800a87a:	9304      	str	r3, [sp, #16]
 800a87c:	e77c      	b.n	800a778 <_strtod_l+0x180>
 800a87e:	2700      	movs	r7, #0
 800a880:	1cb3      	adds	r3, r6, #2
 800a882:	931b      	str	r3, [sp, #108]	; 0x6c
 800a884:	78b3      	ldrb	r3, [r6, #2]
 800a886:	e784      	b.n	800a792 <_strtod_l+0x19a>
 800a888:	2701      	movs	r7, #1
 800a88a:	e7f9      	b.n	800a880 <_strtod_l+0x288>
 800a88c:	0800e3dc 	.word	0x0800e3dc
 800a890:	0800e0ec 	.word	0x0800e0ec
 800a894:	7ff00000 	.word	0x7ff00000
 800a898:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a89a:	1c59      	adds	r1, r3, #1
 800a89c:	911b      	str	r1, [sp, #108]	; 0x6c
 800a89e:	785b      	ldrb	r3, [r3, #1]
 800a8a0:	2b30      	cmp	r3, #48	; 0x30
 800a8a2:	d0f9      	beq.n	800a898 <_strtod_l+0x2a0>
 800a8a4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a8a8:	2908      	cmp	r1, #8
 800a8aa:	f63f af78 	bhi.w	800a79e <_strtod_l+0x1a6>
 800a8ae:	f04f 0e0a 	mov.w	lr, #10
 800a8b2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800a8b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8bc:	1c59      	adds	r1, r3, #1
 800a8be:	911b      	str	r1, [sp, #108]	; 0x6c
 800a8c0:	785b      	ldrb	r3, [r3, #1]
 800a8c2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800a8c6:	2d09      	cmp	r5, #9
 800a8c8:	d935      	bls.n	800a936 <_strtod_l+0x33e>
 800a8ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a8cc:	1b49      	subs	r1, r1, r5
 800a8ce:	2908      	cmp	r1, #8
 800a8d0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a8d4:	dc02      	bgt.n	800a8dc <_strtod_l+0x2e4>
 800a8d6:	4565      	cmp	r5, ip
 800a8d8:	bfa8      	it	ge
 800a8da:	4665      	movge	r5, ip
 800a8dc:	b107      	cbz	r7, 800a8e0 <_strtod_l+0x2e8>
 800a8de:	426d      	negs	r5, r5
 800a8e0:	2c00      	cmp	r4, #0
 800a8e2:	d14c      	bne.n	800a97e <_strtod_l+0x386>
 800a8e4:	9907      	ldr	r1, [sp, #28]
 800a8e6:	4301      	orrs	r1, r0
 800a8e8:	f47f aec7 	bne.w	800a67a <_strtod_l+0x82>
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	f47f aee0 	bne.w	800a6b2 <_strtod_l+0xba>
 800a8f2:	2b69      	cmp	r3, #105	; 0x69
 800a8f4:	d026      	beq.n	800a944 <_strtod_l+0x34c>
 800a8f6:	dc23      	bgt.n	800a940 <_strtod_l+0x348>
 800a8f8:	2b49      	cmp	r3, #73	; 0x49
 800a8fa:	d023      	beq.n	800a944 <_strtod_l+0x34c>
 800a8fc:	2b4e      	cmp	r3, #78	; 0x4e
 800a8fe:	f47f aed8 	bne.w	800a6b2 <_strtod_l+0xba>
 800a902:	499c      	ldr	r1, [pc, #624]	; (800ab74 <_strtod_l+0x57c>)
 800a904:	a81b      	add	r0, sp, #108	; 0x6c
 800a906:	f001 ffb3 	bl	800c870 <__match>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	f43f aed1 	beq.w	800a6b2 <_strtod_l+0xba>
 800a910:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	2b28      	cmp	r3, #40	; 0x28
 800a916:	d12c      	bne.n	800a972 <_strtod_l+0x37a>
 800a918:	4997      	ldr	r1, [pc, #604]	; (800ab78 <_strtod_l+0x580>)
 800a91a:	aa1e      	add	r2, sp, #120	; 0x78
 800a91c:	a81b      	add	r0, sp, #108	; 0x6c
 800a91e:	f001 ffbb 	bl	800c898 <__hexnan>
 800a922:	2805      	cmp	r0, #5
 800a924:	d125      	bne.n	800a972 <_strtod_l+0x37a>
 800a926:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a928:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a92c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a930:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a934:	e6a1      	b.n	800a67a <_strtod_l+0x82>
 800a936:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800a93a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a93e:	e7bc      	b.n	800a8ba <_strtod_l+0x2c2>
 800a940:	2b6e      	cmp	r3, #110	; 0x6e
 800a942:	e7dc      	b.n	800a8fe <_strtod_l+0x306>
 800a944:	498d      	ldr	r1, [pc, #564]	; (800ab7c <_strtod_l+0x584>)
 800a946:	a81b      	add	r0, sp, #108	; 0x6c
 800a948:	f001 ff92 	bl	800c870 <__match>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	f43f aeb0 	beq.w	800a6b2 <_strtod_l+0xba>
 800a952:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a954:	498a      	ldr	r1, [pc, #552]	; (800ab80 <_strtod_l+0x588>)
 800a956:	3b01      	subs	r3, #1
 800a958:	a81b      	add	r0, sp, #108	; 0x6c
 800a95a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a95c:	f001 ff88 	bl	800c870 <__match>
 800a960:	b910      	cbnz	r0, 800a968 <_strtod_l+0x370>
 800a962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a964:	3301      	adds	r3, #1
 800a966:	931b      	str	r3, [sp, #108]	; 0x6c
 800a968:	f04f 0800 	mov.w	r8, #0
 800a96c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800ab90 <_strtod_l+0x598>
 800a970:	e683      	b.n	800a67a <_strtod_l+0x82>
 800a972:	4884      	ldr	r0, [pc, #528]	; (800ab84 <_strtod_l+0x58c>)
 800a974:	f003 f84e 	bl	800da14 <nan>
 800a978:	4680      	mov	r8, r0
 800a97a:	4689      	mov	r9, r1
 800a97c:	e67d      	b.n	800a67a <_strtod_l+0x82>
 800a97e:	9b04      	ldr	r3, [sp, #16]
 800a980:	f1bb 0f00 	cmp.w	fp, #0
 800a984:	bf08      	it	eq
 800a986:	46a3      	moveq	fp, r4
 800a988:	1aeb      	subs	r3, r5, r3
 800a98a:	2c10      	cmp	r4, #16
 800a98c:	9806      	ldr	r0, [sp, #24]
 800a98e:	4626      	mov	r6, r4
 800a990:	9307      	str	r3, [sp, #28]
 800a992:	bfa8      	it	ge
 800a994:	2610      	movge	r6, #16
 800a996:	f7f5 fd25 	bl	80003e4 <__aeabi_ui2d>
 800a99a:	2c09      	cmp	r4, #9
 800a99c:	4680      	mov	r8, r0
 800a99e:	4689      	mov	r9, r1
 800a9a0:	dd13      	ble.n	800a9ca <_strtod_l+0x3d2>
 800a9a2:	4b79      	ldr	r3, [pc, #484]	; (800ab88 <_strtod_l+0x590>)
 800a9a4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a9a8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a9ac:	f7f5 fd94 	bl	80004d8 <__aeabi_dmul>
 800a9b0:	4680      	mov	r8, r0
 800a9b2:	9805      	ldr	r0, [sp, #20]
 800a9b4:	4689      	mov	r9, r1
 800a9b6:	f7f5 fd15 	bl	80003e4 <__aeabi_ui2d>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4640      	mov	r0, r8
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	f7f5 fbd3 	bl	800016c <__adddf3>
 800a9c6:	4680      	mov	r8, r0
 800a9c8:	4689      	mov	r9, r1
 800a9ca:	2c0f      	cmp	r4, #15
 800a9cc:	dc36      	bgt.n	800aa3c <_strtod_l+0x444>
 800a9ce:	9b07      	ldr	r3, [sp, #28]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f43f ae52 	beq.w	800a67a <_strtod_l+0x82>
 800a9d6:	dd22      	ble.n	800aa1e <_strtod_l+0x426>
 800a9d8:	2b16      	cmp	r3, #22
 800a9da:	dc09      	bgt.n	800a9f0 <_strtod_l+0x3f8>
 800a9dc:	4c6a      	ldr	r4, [pc, #424]	; (800ab88 <_strtod_l+0x590>)
 800a9de:	4642      	mov	r2, r8
 800a9e0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800a9e4:	464b      	mov	r3, r9
 800a9e6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a9ea:	f7f5 fd75 	bl	80004d8 <__aeabi_dmul>
 800a9ee:	e7c3      	b.n	800a978 <_strtod_l+0x380>
 800a9f0:	9a07      	ldr	r2, [sp, #28]
 800a9f2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	db20      	blt.n	800aa3c <_strtod_l+0x444>
 800a9fa:	4d63      	ldr	r5, [pc, #396]	; (800ab88 <_strtod_l+0x590>)
 800a9fc:	f1c4 040f 	rsb	r4, r4, #15
 800aa00:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800aa04:	4642      	mov	r2, r8
 800aa06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa0a:	464b      	mov	r3, r9
 800aa0c:	f7f5 fd64 	bl	80004d8 <__aeabi_dmul>
 800aa10:	9b07      	ldr	r3, [sp, #28]
 800aa12:	1b1c      	subs	r4, r3, r4
 800aa14:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800aa18:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa1c:	e7e5      	b.n	800a9ea <_strtod_l+0x3f2>
 800aa1e:	9b07      	ldr	r3, [sp, #28]
 800aa20:	3316      	adds	r3, #22
 800aa22:	db0b      	blt.n	800aa3c <_strtod_l+0x444>
 800aa24:	9b04      	ldr	r3, [sp, #16]
 800aa26:	4a58      	ldr	r2, [pc, #352]	; (800ab88 <_strtod_l+0x590>)
 800aa28:	1b5d      	subs	r5, r3, r5
 800aa2a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800aa2e:	4640      	mov	r0, r8
 800aa30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa34:	4649      	mov	r1, r9
 800aa36:	f7f5 fe79 	bl	800072c <__aeabi_ddiv>
 800aa3a:	e79d      	b.n	800a978 <_strtod_l+0x380>
 800aa3c:	9b07      	ldr	r3, [sp, #28]
 800aa3e:	1ba6      	subs	r6, r4, r6
 800aa40:	441e      	add	r6, r3
 800aa42:	2e00      	cmp	r6, #0
 800aa44:	dd71      	ble.n	800ab2a <_strtod_l+0x532>
 800aa46:	f016 030f 	ands.w	r3, r6, #15
 800aa4a:	d00a      	beq.n	800aa62 <_strtod_l+0x46a>
 800aa4c:	494e      	ldr	r1, [pc, #312]	; (800ab88 <_strtod_l+0x590>)
 800aa4e:	4642      	mov	r2, r8
 800aa50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa58:	464b      	mov	r3, r9
 800aa5a:	f7f5 fd3d 	bl	80004d8 <__aeabi_dmul>
 800aa5e:	4680      	mov	r8, r0
 800aa60:	4689      	mov	r9, r1
 800aa62:	f036 060f 	bics.w	r6, r6, #15
 800aa66:	d050      	beq.n	800ab0a <_strtod_l+0x512>
 800aa68:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800aa6c:	dd27      	ble.n	800aabe <_strtod_l+0x4c6>
 800aa6e:	f04f 0b00 	mov.w	fp, #0
 800aa72:	f8cd b010 	str.w	fp, [sp, #16]
 800aa76:	f8cd b020 	str.w	fp, [sp, #32]
 800aa7a:	f8cd b018 	str.w	fp, [sp, #24]
 800aa7e:	2322      	movs	r3, #34	; 0x22
 800aa80:	f04f 0800 	mov.w	r8, #0
 800aa84:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ab90 <_strtod_l+0x598>
 800aa88:	f8ca 3000 	str.w	r3, [sl]
 800aa8c:	9b08      	ldr	r3, [sp, #32]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	f43f adf3 	beq.w	800a67a <_strtod_l+0x82>
 800aa94:	4650      	mov	r0, sl
 800aa96:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa98:	f002 f824 	bl	800cae4 <_Bfree>
 800aa9c:	4650      	mov	r0, sl
 800aa9e:	9906      	ldr	r1, [sp, #24]
 800aaa0:	f002 f820 	bl	800cae4 <_Bfree>
 800aaa4:	4650      	mov	r0, sl
 800aaa6:	9904      	ldr	r1, [sp, #16]
 800aaa8:	f002 f81c 	bl	800cae4 <_Bfree>
 800aaac:	4650      	mov	r0, sl
 800aaae:	9908      	ldr	r1, [sp, #32]
 800aab0:	f002 f818 	bl	800cae4 <_Bfree>
 800aab4:	4659      	mov	r1, fp
 800aab6:	4650      	mov	r0, sl
 800aab8:	f002 f814 	bl	800cae4 <_Bfree>
 800aabc:	e5dd      	b.n	800a67a <_strtod_l+0x82>
 800aabe:	2300      	movs	r3, #0
 800aac0:	4640      	mov	r0, r8
 800aac2:	4649      	mov	r1, r9
 800aac4:	461f      	mov	r7, r3
 800aac6:	1136      	asrs	r6, r6, #4
 800aac8:	2e01      	cmp	r6, #1
 800aaca:	dc21      	bgt.n	800ab10 <_strtod_l+0x518>
 800aacc:	b10b      	cbz	r3, 800aad2 <_strtod_l+0x4da>
 800aace:	4680      	mov	r8, r0
 800aad0:	4689      	mov	r9, r1
 800aad2:	4b2e      	ldr	r3, [pc, #184]	; (800ab8c <_strtod_l+0x594>)
 800aad4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800aad8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aadc:	4642      	mov	r2, r8
 800aade:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aae2:	464b      	mov	r3, r9
 800aae4:	f7f5 fcf8 	bl	80004d8 <__aeabi_dmul>
 800aae8:	4b29      	ldr	r3, [pc, #164]	; (800ab90 <_strtod_l+0x598>)
 800aaea:	460a      	mov	r2, r1
 800aaec:	400b      	ands	r3, r1
 800aaee:	4929      	ldr	r1, [pc, #164]	; (800ab94 <_strtod_l+0x59c>)
 800aaf0:	4680      	mov	r8, r0
 800aaf2:	428b      	cmp	r3, r1
 800aaf4:	d8bb      	bhi.n	800aa6e <_strtod_l+0x476>
 800aaf6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aafa:	428b      	cmp	r3, r1
 800aafc:	bf86      	itte	hi
 800aafe:	f04f 38ff 	movhi.w	r8, #4294967295
 800ab02:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800ab98 <_strtod_l+0x5a0>
 800ab06:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	9305      	str	r3, [sp, #20]
 800ab0e:	e07e      	b.n	800ac0e <_strtod_l+0x616>
 800ab10:	07f2      	lsls	r2, r6, #31
 800ab12:	d507      	bpl.n	800ab24 <_strtod_l+0x52c>
 800ab14:	4b1d      	ldr	r3, [pc, #116]	; (800ab8c <_strtod_l+0x594>)
 800ab16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1e:	f7f5 fcdb 	bl	80004d8 <__aeabi_dmul>
 800ab22:	2301      	movs	r3, #1
 800ab24:	3701      	adds	r7, #1
 800ab26:	1076      	asrs	r6, r6, #1
 800ab28:	e7ce      	b.n	800aac8 <_strtod_l+0x4d0>
 800ab2a:	d0ee      	beq.n	800ab0a <_strtod_l+0x512>
 800ab2c:	4276      	negs	r6, r6
 800ab2e:	f016 020f 	ands.w	r2, r6, #15
 800ab32:	d00a      	beq.n	800ab4a <_strtod_l+0x552>
 800ab34:	4b14      	ldr	r3, [pc, #80]	; (800ab88 <_strtod_l+0x590>)
 800ab36:	4640      	mov	r0, r8
 800ab38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab42:	f7f5 fdf3 	bl	800072c <__aeabi_ddiv>
 800ab46:	4680      	mov	r8, r0
 800ab48:	4689      	mov	r9, r1
 800ab4a:	1136      	asrs	r6, r6, #4
 800ab4c:	d0dd      	beq.n	800ab0a <_strtod_l+0x512>
 800ab4e:	2e1f      	cmp	r6, #31
 800ab50:	dd24      	ble.n	800ab9c <_strtod_l+0x5a4>
 800ab52:	f04f 0b00 	mov.w	fp, #0
 800ab56:	f8cd b010 	str.w	fp, [sp, #16]
 800ab5a:	f8cd b020 	str.w	fp, [sp, #32]
 800ab5e:	f8cd b018 	str.w	fp, [sp, #24]
 800ab62:	2322      	movs	r3, #34	; 0x22
 800ab64:	f04f 0800 	mov.w	r8, #0
 800ab68:	f04f 0900 	mov.w	r9, #0
 800ab6c:	f8ca 3000 	str.w	r3, [sl]
 800ab70:	e78c      	b.n	800aa8c <_strtod_l+0x494>
 800ab72:	bf00      	nop
 800ab74:	0800e0bd 	.word	0x0800e0bd
 800ab78:	0800e100 	.word	0x0800e100
 800ab7c:	0800e0b5 	.word	0x0800e0b5
 800ab80:	0800e2f8 	.word	0x0800e2f8
 800ab84:	0800e1f3 	.word	0x0800e1f3
 800ab88:	0800e478 	.word	0x0800e478
 800ab8c:	0800e450 	.word	0x0800e450
 800ab90:	7ff00000 	.word	0x7ff00000
 800ab94:	7ca00000 	.word	0x7ca00000
 800ab98:	7fefffff 	.word	0x7fefffff
 800ab9c:	f016 0310 	ands.w	r3, r6, #16
 800aba0:	bf18      	it	ne
 800aba2:	236a      	movne	r3, #106	; 0x6a
 800aba4:	4640      	mov	r0, r8
 800aba6:	9305      	str	r3, [sp, #20]
 800aba8:	4649      	mov	r1, r9
 800abaa:	2300      	movs	r3, #0
 800abac:	4fb2      	ldr	r7, [pc, #712]	; (800ae78 <_strtod_l+0x880>)
 800abae:	07f2      	lsls	r2, r6, #31
 800abb0:	d504      	bpl.n	800abbc <_strtod_l+0x5c4>
 800abb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abb6:	f7f5 fc8f 	bl	80004d8 <__aeabi_dmul>
 800abba:	2301      	movs	r3, #1
 800abbc:	1076      	asrs	r6, r6, #1
 800abbe:	f107 0708 	add.w	r7, r7, #8
 800abc2:	d1f4      	bne.n	800abae <_strtod_l+0x5b6>
 800abc4:	b10b      	cbz	r3, 800abca <_strtod_l+0x5d2>
 800abc6:	4680      	mov	r8, r0
 800abc8:	4689      	mov	r9, r1
 800abca:	9b05      	ldr	r3, [sp, #20]
 800abcc:	b1bb      	cbz	r3, 800abfe <_strtod_l+0x606>
 800abce:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800abd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	4649      	mov	r1, r9
 800abda:	dd10      	ble.n	800abfe <_strtod_l+0x606>
 800abdc:	2b1f      	cmp	r3, #31
 800abde:	f340 812b 	ble.w	800ae38 <_strtod_l+0x840>
 800abe2:	2b34      	cmp	r3, #52	; 0x34
 800abe4:	bfd8      	it	le
 800abe6:	f04f 32ff 	movle.w	r2, #4294967295
 800abea:	f04f 0800 	mov.w	r8, #0
 800abee:	bfcf      	iteee	gt
 800abf0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800abf4:	3b20      	suble	r3, #32
 800abf6:	fa02 f303 	lslle.w	r3, r2, r3
 800abfa:	ea03 0901 	andle.w	r9, r3, r1
 800abfe:	2200      	movs	r2, #0
 800ac00:	2300      	movs	r3, #0
 800ac02:	4640      	mov	r0, r8
 800ac04:	4649      	mov	r1, r9
 800ac06:	f7f5 fecf 	bl	80009a8 <__aeabi_dcmpeq>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d1a1      	bne.n	800ab52 <_strtod_l+0x55a>
 800ac0e:	9b06      	ldr	r3, [sp, #24]
 800ac10:	465a      	mov	r2, fp
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	4650      	mov	r0, sl
 800ac16:	4623      	mov	r3, r4
 800ac18:	9908      	ldr	r1, [sp, #32]
 800ac1a:	f001 ffcf 	bl	800cbbc <__s2b>
 800ac1e:	9008      	str	r0, [sp, #32]
 800ac20:	2800      	cmp	r0, #0
 800ac22:	f43f af24 	beq.w	800aa6e <_strtod_l+0x476>
 800ac26:	9b04      	ldr	r3, [sp, #16]
 800ac28:	f04f 0b00 	mov.w	fp, #0
 800ac2c:	1b5d      	subs	r5, r3, r5
 800ac2e:	9b07      	ldr	r3, [sp, #28]
 800ac30:	f8cd b010 	str.w	fp, [sp, #16]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	bfb4      	ite	lt
 800ac38:	462b      	movlt	r3, r5
 800ac3a:	2300      	movge	r3, #0
 800ac3c:	930e      	str	r3, [sp, #56]	; 0x38
 800ac3e:	9b07      	ldr	r3, [sp, #28]
 800ac40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ac44:	9316      	str	r3, [sp, #88]	; 0x58
 800ac46:	9b08      	ldr	r3, [sp, #32]
 800ac48:	4650      	mov	r0, sl
 800ac4a:	6859      	ldr	r1, [r3, #4]
 800ac4c:	f001 ff0a 	bl	800ca64 <_Balloc>
 800ac50:	9006      	str	r0, [sp, #24]
 800ac52:	2800      	cmp	r0, #0
 800ac54:	f43f af13 	beq.w	800aa7e <_strtod_l+0x486>
 800ac58:	9b08      	ldr	r3, [sp, #32]
 800ac5a:	300c      	adds	r0, #12
 800ac5c:	691a      	ldr	r2, [r3, #16]
 800ac5e:	f103 010c 	add.w	r1, r3, #12
 800ac62:	3202      	adds	r2, #2
 800ac64:	0092      	lsls	r2, r2, #2
 800ac66:	f7fe fc88 	bl	800957a <memcpy>
 800ac6a:	ab1e      	add	r3, sp, #120	; 0x78
 800ac6c:	9301      	str	r3, [sp, #4]
 800ac6e:	ab1d      	add	r3, sp, #116	; 0x74
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	4642      	mov	r2, r8
 800ac74:	464b      	mov	r3, r9
 800ac76:	4650      	mov	r0, sl
 800ac78:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800ac7c:	f002 fadc 	bl	800d238 <__d2b>
 800ac80:	901c      	str	r0, [sp, #112]	; 0x70
 800ac82:	2800      	cmp	r0, #0
 800ac84:	f43f aefb 	beq.w	800aa7e <_strtod_l+0x486>
 800ac88:	2101      	movs	r1, #1
 800ac8a:	4650      	mov	r0, sl
 800ac8c:	f002 f82e 	bl	800ccec <__i2b>
 800ac90:	4603      	mov	r3, r0
 800ac92:	9004      	str	r0, [sp, #16]
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f43f aef2 	beq.w	800aa7e <_strtod_l+0x486>
 800ac9a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ac9c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ac9e:	2d00      	cmp	r5, #0
 800aca0:	bfab      	itete	ge
 800aca2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800aca4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800aca6:	18ee      	addge	r6, r5, r3
 800aca8:	1b5c      	sublt	r4, r3, r5
 800acaa:	9b05      	ldr	r3, [sp, #20]
 800acac:	bfa8      	it	ge
 800acae:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800acb0:	eba5 0503 	sub.w	r5, r5, r3
 800acb4:	4415      	add	r5, r2
 800acb6:	4b71      	ldr	r3, [pc, #452]	; (800ae7c <_strtod_l+0x884>)
 800acb8:	f105 35ff 	add.w	r5, r5, #4294967295
 800acbc:	bfb8      	it	lt
 800acbe:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800acc0:	429d      	cmp	r5, r3
 800acc2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800acc6:	f280 80c9 	bge.w	800ae5c <_strtod_l+0x864>
 800acca:	1b5b      	subs	r3, r3, r5
 800accc:	2b1f      	cmp	r3, #31
 800acce:	f04f 0701 	mov.w	r7, #1
 800acd2:	eba2 0203 	sub.w	r2, r2, r3
 800acd6:	f300 80b6 	bgt.w	800ae46 <_strtod_l+0x84e>
 800acda:	2500      	movs	r5, #0
 800acdc:	fa07 f303 	lsl.w	r3, r7, r3
 800ace0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ace2:	18b7      	adds	r7, r6, r2
 800ace4:	9b05      	ldr	r3, [sp, #20]
 800ace6:	42be      	cmp	r6, r7
 800ace8:	4414      	add	r4, r2
 800acea:	441c      	add	r4, r3
 800acec:	4633      	mov	r3, r6
 800acee:	bfa8      	it	ge
 800acf0:	463b      	movge	r3, r7
 800acf2:	42a3      	cmp	r3, r4
 800acf4:	bfa8      	it	ge
 800acf6:	4623      	movge	r3, r4
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	bfc2      	ittt	gt
 800acfc:	1aff      	subgt	r7, r7, r3
 800acfe:	1ae4      	subgt	r4, r4, r3
 800ad00:	1af6      	subgt	r6, r6, r3
 800ad02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	dd17      	ble.n	800ad38 <_strtod_l+0x740>
 800ad08:	461a      	mov	r2, r3
 800ad0a:	4650      	mov	r0, sl
 800ad0c:	9904      	ldr	r1, [sp, #16]
 800ad0e:	f002 f8a7 	bl	800ce60 <__pow5mult>
 800ad12:	9004      	str	r0, [sp, #16]
 800ad14:	2800      	cmp	r0, #0
 800ad16:	f43f aeb2 	beq.w	800aa7e <_strtod_l+0x486>
 800ad1a:	4601      	mov	r1, r0
 800ad1c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ad1e:	4650      	mov	r0, sl
 800ad20:	f001 fffa 	bl	800cd18 <__multiply>
 800ad24:	9009      	str	r0, [sp, #36]	; 0x24
 800ad26:	2800      	cmp	r0, #0
 800ad28:	f43f aea9 	beq.w	800aa7e <_strtod_l+0x486>
 800ad2c:	4650      	mov	r0, sl
 800ad2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad30:	f001 fed8 	bl	800cae4 <_Bfree>
 800ad34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad36:	931c      	str	r3, [sp, #112]	; 0x70
 800ad38:	2f00      	cmp	r7, #0
 800ad3a:	f300 8093 	bgt.w	800ae64 <_strtod_l+0x86c>
 800ad3e:	9b07      	ldr	r3, [sp, #28]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	dd08      	ble.n	800ad56 <_strtod_l+0x75e>
 800ad44:	4650      	mov	r0, sl
 800ad46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ad48:	9906      	ldr	r1, [sp, #24]
 800ad4a:	f002 f889 	bl	800ce60 <__pow5mult>
 800ad4e:	9006      	str	r0, [sp, #24]
 800ad50:	2800      	cmp	r0, #0
 800ad52:	f43f ae94 	beq.w	800aa7e <_strtod_l+0x486>
 800ad56:	2c00      	cmp	r4, #0
 800ad58:	dd08      	ble.n	800ad6c <_strtod_l+0x774>
 800ad5a:	4622      	mov	r2, r4
 800ad5c:	4650      	mov	r0, sl
 800ad5e:	9906      	ldr	r1, [sp, #24]
 800ad60:	f002 f8d8 	bl	800cf14 <__lshift>
 800ad64:	9006      	str	r0, [sp, #24]
 800ad66:	2800      	cmp	r0, #0
 800ad68:	f43f ae89 	beq.w	800aa7e <_strtod_l+0x486>
 800ad6c:	2e00      	cmp	r6, #0
 800ad6e:	dd08      	ble.n	800ad82 <_strtod_l+0x78a>
 800ad70:	4632      	mov	r2, r6
 800ad72:	4650      	mov	r0, sl
 800ad74:	9904      	ldr	r1, [sp, #16]
 800ad76:	f002 f8cd 	bl	800cf14 <__lshift>
 800ad7a:	9004      	str	r0, [sp, #16]
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	f43f ae7e 	beq.w	800aa7e <_strtod_l+0x486>
 800ad82:	4650      	mov	r0, sl
 800ad84:	9a06      	ldr	r2, [sp, #24]
 800ad86:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad88:	f002 f94c 	bl	800d024 <__mdiff>
 800ad8c:	4683      	mov	fp, r0
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	f43f ae75 	beq.w	800aa7e <_strtod_l+0x486>
 800ad94:	2400      	movs	r4, #0
 800ad96:	68c3      	ldr	r3, [r0, #12]
 800ad98:	9904      	ldr	r1, [sp, #16]
 800ad9a:	60c4      	str	r4, [r0, #12]
 800ad9c:	930d      	str	r3, [sp, #52]	; 0x34
 800ad9e:	f002 f925 	bl	800cfec <__mcmp>
 800ada2:	42a0      	cmp	r0, r4
 800ada4:	da70      	bge.n	800ae88 <_strtod_l+0x890>
 800ada6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ada8:	ea53 0308 	orrs.w	r3, r3, r8
 800adac:	f040 8096 	bne.w	800aedc <_strtod_l+0x8e4>
 800adb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f040 8091 	bne.w	800aedc <_strtod_l+0x8e4>
 800adba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800adbe:	0d1b      	lsrs	r3, r3, #20
 800adc0:	051b      	lsls	r3, r3, #20
 800adc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800adc6:	f240 8089 	bls.w	800aedc <_strtod_l+0x8e4>
 800adca:	f8db 3014 	ldr.w	r3, [fp, #20]
 800adce:	b923      	cbnz	r3, 800adda <_strtod_l+0x7e2>
 800add0:	f8db 3010 	ldr.w	r3, [fp, #16]
 800add4:	2b01      	cmp	r3, #1
 800add6:	f340 8081 	ble.w	800aedc <_strtod_l+0x8e4>
 800adda:	4659      	mov	r1, fp
 800addc:	2201      	movs	r2, #1
 800adde:	4650      	mov	r0, sl
 800ade0:	f002 f898 	bl	800cf14 <__lshift>
 800ade4:	9904      	ldr	r1, [sp, #16]
 800ade6:	4683      	mov	fp, r0
 800ade8:	f002 f900 	bl	800cfec <__mcmp>
 800adec:	2800      	cmp	r0, #0
 800adee:	dd75      	ble.n	800aedc <_strtod_l+0x8e4>
 800adf0:	9905      	ldr	r1, [sp, #20]
 800adf2:	464b      	mov	r3, r9
 800adf4:	4a22      	ldr	r2, [pc, #136]	; (800ae80 <_strtod_l+0x888>)
 800adf6:	2900      	cmp	r1, #0
 800adf8:	f000 8091 	beq.w	800af1e <_strtod_l+0x926>
 800adfc:	ea02 0109 	and.w	r1, r2, r9
 800ae00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ae04:	f300 808b 	bgt.w	800af1e <_strtod_l+0x926>
 800ae08:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ae0c:	f77f aea9 	ble.w	800ab62 <_strtod_l+0x56a>
 800ae10:	2300      	movs	r3, #0
 800ae12:	4a1c      	ldr	r2, [pc, #112]	; (800ae84 <_strtod_l+0x88c>)
 800ae14:	4640      	mov	r0, r8
 800ae16:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ae1a:	4649      	mov	r1, r9
 800ae1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ae20:	f7f5 fb5a 	bl	80004d8 <__aeabi_dmul>
 800ae24:	460b      	mov	r3, r1
 800ae26:	4303      	orrs	r3, r0
 800ae28:	bf08      	it	eq
 800ae2a:	2322      	moveq	r3, #34	; 0x22
 800ae2c:	4680      	mov	r8, r0
 800ae2e:	4689      	mov	r9, r1
 800ae30:	bf08      	it	eq
 800ae32:	f8ca 3000 	streq.w	r3, [sl]
 800ae36:	e62d      	b.n	800aa94 <_strtod_l+0x49c>
 800ae38:	f04f 32ff 	mov.w	r2, #4294967295
 800ae3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae40:	ea03 0808 	and.w	r8, r3, r8
 800ae44:	e6db      	b.n	800abfe <_strtod_l+0x606>
 800ae46:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ae4a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ae4e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ae52:	35e2      	adds	r5, #226	; 0xe2
 800ae54:	fa07 f505 	lsl.w	r5, r7, r5
 800ae58:	970f      	str	r7, [sp, #60]	; 0x3c
 800ae5a:	e742      	b.n	800ace2 <_strtod_l+0x6ea>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	2500      	movs	r5, #0
 800ae60:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae62:	e73e      	b.n	800ace2 <_strtod_l+0x6ea>
 800ae64:	463a      	mov	r2, r7
 800ae66:	4650      	mov	r0, sl
 800ae68:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae6a:	f002 f853 	bl	800cf14 <__lshift>
 800ae6e:	901c      	str	r0, [sp, #112]	; 0x70
 800ae70:	2800      	cmp	r0, #0
 800ae72:	f47f af64 	bne.w	800ad3e <_strtod_l+0x746>
 800ae76:	e602      	b.n	800aa7e <_strtod_l+0x486>
 800ae78:	0800e118 	.word	0x0800e118
 800ae7c:	fffffc02 	.word	0xfffffc02
 800ae80:	7ff00000 	.word	0x7ff00000
 800ae84:	39500000 	.word	0x39500000
 800ae88:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ae8c:	d166      	bne.n	800af5c <_strtod_l+0x964>
 800ae8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae94:	b35a      	cbz	r2, 800aeee <_strtod_l+0x8f6>
 800ae96:	4a9c      	ldr	r2, [pc, #624]	; (800b108 <_strtod_l+0xb10>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d12c      	bne.n	800aef6 <_strtod_l+0x8fe>
 800ae9c:	9b05      	ldr	r3, [sp, #20]
 800ae9e:	4640      	mov	r0, r8
 800aea0:	b303      	cbz	r3, 800aee4 <_strtod_l+0x8ec>
 800aea2:	464b      	mov	r3, r9
 800aea4:	4a99      	ldr	r2, [pc, #612]	; (800b10c <_strtod_l+0xb14>)
 800aea6:	f04f 31ff 	mov.w	r1, #4294967295
 800aeaa:	401a      	ands	r2, r3
 800aeac:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800aeb0:	d81b      	bhi.n	800aeea <_strtod_l+0x8f2>
 800aeb2:	0d12      	lsrs	r2, r2, #20
 800aeb4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aeb8:	fa01 f303 	lsl.w	r3, r1, r3
 800aebc:	4298      	cmp	r0, r3
 800aebe:	d11a      	bne.n	800aef6 <_strtod_l+0x8fe>
 800aec0:	4b93      	ldr	r3, [pc, #588]	; (800b110 <_strtod_l+0xb18>)
 800aec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d102      	bne.n	800aece <_strtod_l+0x8d6>
 800aec8:	3001      	adds	r0, #1
 800aeca:	f43f add8 	beq.w	800aa7e <_strtod_l+0x486>
 800aece:	f04f 0800 	mov.w	r8, #0
 800aed2:	4b8e      	ldr	r3, [pc, #568]	; (800b10c <_strtod_l+0xb14>)
 800aed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aed6:	401a      	ands	r2, r3
 800aed8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800aedc:	9b05      	ldr	r3, [sp, #20]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d196      	bne.n	800ae10 <_strtod_l+0x818>
 800aee2:	e5d7      	b.n	800aa94 <_strtod_l+0x49c>
 800aee4:	f04f 33ff 	mov.w	r3, #4294967295
 800aee8:	e7e8      	b.n	800aebc <_strtod_l+0x8c4>
 800aeea:	460b      	mov	r3, r1
 800aeec:	e7e6      	b.n	800aebc <_strtod_l+0x8c4>
 800aeee:	ea53 0308 	orrs.w	r3, r3, r8
 800aef2:	f43f af7d 	beq.w	800adf0 <_strtod_l+0x7f8>
 800aef6:	b1e5      	cbz	r5, 800af32 <_strtod_l+0x93a>
 800aef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aefa:	421d      	tst	r5, r3
 800aefc:	d0ee      	beq.n	800aedc <_strtod_l+0x8e4>
 800aefe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af00:	4640      	mov	r0, r8
 800af02:	4649      	mov	r1, r9
 800af04:	9a05      	ldr	r2, [sp, #20]
 800af06:	b1c3      	cbz	r3, 800af3a <_strtod_l+0x942>
 800af08:	f7ff fb53 	bl	800a5b2 <sulp>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af14:	f7f5 f92a 	bl	800016c <__adddf3>
 800af18:	4680      	mov	r8, r0
 800af1a:	4689      	mov	r9, r1
 800af1c:	e7de      	b.n	800aedc <_strtod_l+0x8e4>
 800af1e:	4013      	ands	r3, r2
 800af20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800af24:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800af28:	f04f 38ff 	mov.w	r8, #4294967295
 800af2c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800af30:	e7d4      	b.n	800aedc <_strtod_l+0x8e4>
 800af32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af34:	ea13 0f08 	tst.w	r3, r8
 800af38:	e7e0      	b.n	800aefc <_strtod_l+0x904>
 800af3a:	f7ff fb3a 	bl	800a5b2 <sulp>
 800af3e:	4602      	mov	r2, r0
 800af40:	460b      	mov	r3, r1
 800af42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af46:	f7f5 f90f 	bl	8000168 <__aeabi_dsub>
 800af4a:	2200      	movs	r2, #0
 800af4c:	2300      	movs	r3, #0
 800af4e:	4680      	mov	r8, r0
 800af50:	4689      	mov	r9, r1
 800af52:	f7f5 fd29 	bl	80009a8 <__aeabi_dcmpeq>
 800af56:	2800      	cmp	r0, #0
 800af58:	d0c0      	beq.n	800aedc <_strtod_l+0x8e4>
 800af5a:	e602      	b.n	800ab62 <_strtod_l+0x56a>
 800af5c:	4658      	mov	r0, fp
 800af5e:	9904      	ldr	r1, [sp, #16]
 800af60:	f002 f9c6 	bl	800d2f0 <__ratio>
 800af64:	2200      	movs	r2, #0
 800af66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af6a:	4606      	mov	r6, r0
 800af6c:	460f      	mov	r7, r1
 800af6e:	f7f5 fd2f 	bl	80009d0 <__aeabi_dcmple>
 800af72:	2800      	cmp	r0, #0
 800af74:	d075      	beq.n	800b062 <_strtod_l+0xa6a>
 800af76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d047      	beq.n	800b00c <_strtod_l+0xa14>
 800af7c:	2600      	movs	r6, #0
 800af7e:	4f65      	ldr	r7, [pc, #404]	; (800b114 <_strtod_l+0xb1c>)
 800af80:	4d64      	ldr	r5, [pc, #400]	; (800b114 <_strtod_l+0xb1c>)
 800af82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af88:	0d1b      	lsrs	r3, r3, #20
 800af8a:	051b      	lsls	r3, r3, #20
 800af8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800af8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af90:	4b61      	ldr	r3, [pc, #388]	; (800b118 <_strtod_l+0xb20>)
 800af92:	429a      	cmp	r2, r3
 800af94:	f040 80c8 	bne.w	800b128 <_strtod_l+0xb30>
 800af98:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af9c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800afa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa2:	4640      	mov	r0, r8
 800afa4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800afa8:	4649      	mov	r1, r9
 800afaa:	f002 f8cb 	bl	800d144 <__ulp>
 800afae:	4602      	mov	r2, r0
 800afb0:	460b      	mov	r3, r1
 800afb2:	4630      	mov	r0, r6
 800afb4:	4639      	mov	r1, r7
 800afb6:	f7f5 fa8f 	bl	80004d8 <__aeabi_dmul>
 800afba:	4642      	mov	r2, r8
 800afbc:	464b      	mov	r3, r9
 800afbe:	f7f5 f8d5 	bl	800016c <__adddf3>
 800afc2:	460b      	mov	r3, r1
 800afc4:	4951      	ldr	r1, [pc, #324]	; (800b10c <_strtod_l+0xb14>)
 800afc6:	4a55      	ldr	r2, [pc, #340]	; (800b11c <_strtod_l+0xb24>)
 800afc8:	4019      	ands	r1, r3
 800afca:	4291      	cmp	r1, r2
 800afcc:	4680      	mov	r8, r0
 800afce:	d95e      	bls.n	800b08e <_strtod_l+0xa96>
 800afd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afd2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d103      	bne.n	800afe2 <_strtod_l+0x9ea>
 800afda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afdc:	3301      	adds	r3, #1
 800afde:	f43f ad4e 	beq.w	800aa7e <_strtod_l+0x486>
 800afe2:	f04f 38ff 	mov.w	r8, #4294967295
 800afe6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b110 <_strtod_l+0xb18>
 800afea:	4650      	mov	r0, sl
 800afec:	991c      	ldr	r1, [sp, #112]	; 0x70
 800afee:	f001 fd79 	bl	800cae4 <_Bfree>
 800aff2:	4650      	mov	r0, sl
 800aff4:	9906      	ldr	r1, [sp, #24]
 800aff6:	f001 fd75 	bl	800cae4 <_Bfree>
 800affa:	4650      	mov	r0, sl
 800affc:	9904      	ldr	r1, [sp, #16]
 800affe:	f001 fd71 	bl	800cae4 <_Bfree>
 800b002:	4659      	mov	r1, fp
 800b004:	4650      	mov	r0, sl
 800b006:	f001 fd6d 	bl	800cae4 <_Bfree>
 800b00a:	e61c      	b.n	800ac46 <_strtod_l+0x64e>
 800b00c:	f1b8 0f00 	cmp.w	r8, #0
 800b010:	d119      	bne.n	800b046 <_strtod_l+0xa4e>
 800b012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b018:	b9e3      	cbnz	r3, 800b054 <_strtod_l+0xa5c>
 800b01a:	2200      	movs	r2, #0
 800b01c:	4630      	mov	r0, r6
 800b01e:	4639      	mov	r1, r7
 800b020:	4b3c      	ldr	r3, [pc, #240]	; (800b114 <_strtod_l+0xb1c>)
 800b022:	f7f5 fccb 	bl	80009bc <__aeabi_dcmplt>
 800b026:	b9c8      	cbnz	r0, 800b05c <_strtod_l+0xa64>
 800b028:	2200      	movs	r2, #0
 800b02a:	4630      	mov	r0, r6
 800b02c:	4639      	mov	r1, r7
 800b02e:	4b3c      	ldr	r3, [pc, #240]	; (800b120 <_strtod_l+0xb28>)
 800b030:	f7f5 fa52 	bl	80004d8 <__aeabi_dmul>
 800b034:	4604      	mov	r4, r0
 800b036:	460d      	mov	r5, r1
 800b038:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b03c:	9418      	str	r4, [sp, #96]	; 0x60
 800b03e:	9319      	str	r3, [sp, #100]	; 0x64
 800b040:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800b044:	e79d      	b.n	800af82 <_strtod_l+0x98a>
 800b046:	f1b8 0f01 	cmp.w	r8, #1
 800b04a:	d103      	bne.n	800b054 <_strtod_l+0xa5c>
 800b04c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f43f ad87 	beq.w	800ab62 <_strtod_l+0x56a>
 800b054:	2600      	movs	r6, #0
 800b056:	2400      	movs	r4, #0
 800b058:	4f32      	ldr	r7, [pc, #200]	; (800b124 <_strtod_l+0xb2c>)
 800b05a:	e791      	b.n	800af80 <_strtod_l+0x988>
 800b05c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b05e:	4d30      	ldr	r5, [pc, #192]	; (800b120 <_strtod_l+0xb28>)
 800b060:	e7ea      	b.n	800b038 <_strtod_l+0xa40>
 800b062:	4b2f      	ldr	r3, [pc, #188]	; (800b120 <_strtod_l+0xb28>)
 800b064:	2200      	movs	r2, #0
 800b066:	4630      	mov	r0, r6
 800b068:	4639      	mov	r1, r7
 800b06a:	f7f5 fa35 	bl	80004d8 <__aeabi_dmul>
 800b06e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b070:	4604      	mov	r4, r0
 800b072:	460d      	mov	r5, r1
 800b074:	b933      	cbnz	r3, 800b084 <_strtod_l+0xa8c>
 800b076:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b07a:	9010      	str	r0, [sp, #64]	; 0x40
 800b07c:	9311      	str	r3, [sp, #68]	; 0x44
 800b07e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b082:	e77e      	b.n	800af82 <_strtod_l+0x98a>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b08c:	e7f7      	b.n	800b07e <_strtod_l+0xa86>
 800b08e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b092:	9b05      	ldr	r3, [sp, #20]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1a8      	bne.n	800afea <_strtod_l+0x9f2>
 800b098:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b09c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b09e:	0d1b      	lsrs	r3, r3, #20
 800b0a0:	051b      	lsls	r3, r3, #20
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d1a1      	bne.n	800afea <_strtod_l+0x9f2>
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	f7f5 ffdb 	bl	8001064 <__aeabi_d2lz>
 800b0ae:	f7f5 f9e5 	bl	800047c <__aeabi_l2d>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	f7f5 f855 	bl	8000168 <__aeabi_dsub>
 800b0be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0c4:	ea43 0308 	orr.w	r3, r3, r8
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	460d      	mov	r5, r1
 800b0ce:	d066      	beq.n	800b19e <_strtod_l+0xba6>
 800b0d0:	a309      	add	r3, pc, #36	; (adr r3, 800b0f8 <_strtod_l+0xb00>)
 800b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d6:	f7f5 fc71 	bl	80009bc <__aeabi_dcmplt>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	f47f acda 	bne.w	800aa94 <_strtod_l+0x49c>
 800b0e0:	a307      	add	r3, pc, #28	; (adr r3, 800b100 <_strtod_l+0xb08>)
 800b0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	f7f5 fc85 	bl	80009f8 <__aeabi_dcmpgt>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f43f af7b 	beq.w	800afea <_strtod_l+0x9f2>
 800b0f4:	e4ce      	b.n	800aa94 <_strtod_l+0x49c>
 800b0f6:	bf00      	nop
 800b0f8:	94a03595 	.word	0x94a03595
 800b0fc:	3fdfffff 	.word	0x3fdfffff
 800b100:	35afe535 	.word	0x35afe535
 800b104:	3fe00000 	.word	0x3fe00000
 800b108:	000fffff 	.word	0x000fffff
 800b10c:	7ff00000 	.word	0x7ff00000
 800b110:	7fefffff 	.word	0x7fefffff
 800b114:	3ff00000 	.word	0x3ff00000
 800b118:	7fe00000 	.word	0x7fe00000
 800b11c:	7c9fffff 	.word	0x7c9fffff
 800b120:	3fe00000 	.word	0x3fe00000
 800b124:	bff00000 	.word	0xbff00000
 800b128:	9b05      	ldr	r3, [sp, #20]
 800b12a:	b313      	cbz	r3, 800b172 <_strtod_l+0xb7a>
 800b12c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b12e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b132:	d81e      	bhi.n	800b172 <_strtod_l+0xb7a>
 800b134:	a326      	add	r3, pc, #152	; (adr r3, 800b1d0 <_strtod_l+0xbd8>)
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13a:	4620      	mov	r0, r4
 800b13c:	4629      	mov	r1, r5
 800b13e:	f7f5 fc47 	bl	80009d0 <__aeabi_dcmple>
 800b142:	b190      	cbz	r0, 800b16a <_strtod_l+0xb72>
 800b144:	4629      	mov	r1, r5
 800b146:	4620      	mov	r0, r4
 800b148:	f7f5 fc9e 	bl	8000a88 <__aeabi_d2uiz>
 800b14c:	2801      	cmp	r0, #1
 800b14e:	bf38      	it	cc
 800b150:	2001      	movcc	r0, #1
 800b152:	f7f5 f947 	bl	80003e4 <__aeabi_ui2d>
 800b156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b158:	4604      	mov	r4, r0
 800b15a:	460d      	mov	r5, r1
 800b15c:	b9d3      	cbnz	r3, 800b194 <_strtod_l+0xb9c>
 800b15e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b162:	9012      	str	r0, [sp, #72]	; 0x48
 800b164:	9313      	str	r3, [sp, #76]	; 0x4c
 800b166:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b16a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b16c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b170:	1a9f      	subs	r7, r3, r2
 800b172:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b176:	f001 ffe5 	bl	800d144 <__ulp>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	4630      	mov	r0, r6
 800b180:	4639      	mov	r1, r7
 800b182:	f7f5 f9a9 	bl	80004d8 <__aeabi_dmul>
 800b186:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b18a:	f7f4 ffef 	bl	800016c <__adddf3>
 800b18e:	4680      	mov	r8, r0
 800b190:	4689      	mov	r9, r1
 800b192:	e77e      	b.n	800b092 <_strtod_l+0xa9a>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b19c:	e7e3      	b.n	800b166 <_strtod_l+0xb6e>
 800b19e:	a30e      	add	r3, pc, #56	; (adr r3, 800b1d8 <_strtod_l+0xbe0>)
 800b1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a4:	f7f5 fc0a 	bl	80009bc <__aeabi_dcmplt>
 800b1a8:	e7a1      	b.n	800b0ee <_strtod_l+0xaf6>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	930c      	str	r3, [sp, #48]	; 0x30
 800b1ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	f7ff ba65 	b.w	800a682 <_strtod_l+0x8a>
 800b1b8:	2b65      	cmp	r3, #101	; 0x65
 800b1ba:	f43f ab5c 	beq.w	800a876 <_strtod_l+0x27e>
 800b1be:	2b45      	cmp	r3, #69	; 0x45
 800b1c0:	f43f ab59 	beq.w	800a876 <_strtod_l+0x27e>
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f7ff bb8d 	b.w	800a8e4 <_strtod_l+0x2ec>
 800b1ca:	bf00      	nop
 800b1cc:	f3af 8000 	nop.w
 800b1d0:	ffc00000 	.word	0xffc00000
 800b1d4:	41dfffff 	.word	0x41dfffff
 800b1d8:	94a03595 	.word	0x94a03595
 800b1dc:	3fcfffff 	.word	0x3fcfffff

0800b1e0 <_strtod_r>:
 800b1e0:	4b01      	ldr	r3, [pc, #4]	; (800b1e8 <_strtod_r+0x8>)
 800b1e2:	f7ff ba09 	b.w	800a5f8 <_strtod_l>
 800b1e6:	bf00      	nop
 800b1e8:	20000074 	.word	0x20000074

0800b1ec <strtod>:
 800b1ec:	460a      	mov	r2, r1
 800b1ee:	4601      	mov	r1, r0
 800b1f0:	4802      	ldr	r0, [pc, #8]	; (800b1fc <strtod+0x10>)
 800b1f2:	4b03      	ldr	r3, [pc, #12]	; (800b200 <strtod+0x14>)
 800b1f4:	6800      	ldr	r0, [r0, #0]
 800b1f6:	f7ff b9ff 	b.w	800a5f8 <_strtod_l>
 800b1fa:	bf00      	nop
 800b1fc:	2000000c 	.word	0x2000000c
 800b200:	20000074 	.word	0x20000074

0800b204 <strtok>:
 800b204:	4b16      	ldr	r3, [pc, #88]	; (800b260 <strtok+0x5c>)
 800b206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b20a:	681f      	ldr	r7, [r3, #0]
 800b20c:	4605      	mov	r5, r0
 800b20e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800b210:	460e      	mov	r6, r1
 800b212:	b9ec      	cbnz	r4, 800b250 <strtok+0x4c>
 800b214:	2050      	movs	r0, #80	; 0x50
 800b216:	f001 fbf1 	bl	800c9fc <malloc>
 800b21a:	4602      	mov	r2, r0
 800b21c:	65b8      	str	r0, [r7, #88]	; 0x58
 800b21e:	b920      	cbnz	r0, 800b22a <strtok+0x26>
 800b220:	2157      	movs	r1, #87	; 0x57
 800b222:	4b10      	ldr	r3, [pc, #64]	; (800b264 <strtok+0x60>)
 800b224:	4810      	ldr	r0, [pc, #64]	; (800b268 <strtok+0x64>)
 800b226:	f000 f8ed 	bl	800b404 <__assert_func>
 800b22a:	e9c0 4400 	strd	r4, r4, [r0]
 800b22e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b232:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b236:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b23a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b23e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b242:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b246:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b24a:	6184      	str	r4, [r0, #24]
 800b24c:	7704      	strb	r4, [r0, #28]
 800b24e:	6244      	str	r4, [r0, #36]	; 0x24
 800b250:	4631      	mov	r1, r6
 800b252:	4628      	mov	r0, r5
 800b254:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b256:	2301      	movs	r3, #1
 800b258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b25c:	f000 b806 	b.w	800b26c <__strtok_r>
 800b260:	2000000c 	.word	0x2000000c
 800b264:	0800e140 	.word	0x0800e140
 800b268:	0800e157 	.word	0x0800e157

0800b26c <__strtok_r>:
 800b26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b26e:	b908      	cbnz	r0, 800b274 <__strtok_r+0x8>
 800b270:	6810      	ldr	r0, [r2, #0]
 800b272:	b188      	cbz	r0, 800b298 <__strtok_r+0x2c>
 800b274:	4604      	mov	r4, r0
 800b276:	460f      	mov	r7, r1
 800b278:	4620      	mov	r0, r4
 800b27a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b27e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b282:	b91e      	cbnz	r6, 800b28c <__strtok_r+0x20>
 800b284:	b965      	cbnz	r5, 800b2a0 <__strtok_r+0x34>
 800b286:	4628      	mov	r0, r5
 800b288:	6015      	str	r5, [r2, #0]
 800b28a:	e005      	b.n	800b298 <__strtok_r+0x2c>
 800b28c:	42b5      	cmp	r5, r6
 800b28e:	d1f6      	bne.n	800b27e <__strtok_r+0x12>
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1f0      	bne.n	800b276 <__strtok_r+0xa>
 800b294:	6014      	str	r4, [r2, #0]
 800b296:	7003      	strb	r3, [r0, #0]
 800b298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b29a:	461c      	mov	r4, r3
 800b29c:	e00c      	b.n	800b2b8 <__strtok_r+0x4c>
 800b29e:	b915      	cbnz	r5, 800b2a6 <__strtok_r+0x3a>
 800b2a0:	460e      	mov	r6, r1
 800b2a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2a6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b2aa:	42ab      	cmp	r3, r5
 800b2ac:	d1f7      	bne.n	800b29e <__strtok_r+0x32>
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d0f3      	beq.n	800b29a <__strtok_r+0x2e>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b2b8:	6014      	str	r4, [r2, #0]
 800b2ba:	e7ed      	b.n	800b298 <__strtok_r+0x2c>

0800b2bc <_strtol_l.isra.0>:
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c2:	4686      	mov	lr, r0
 800b2c4:	d001      	beq.n	800b2ca <_strtol_l.isra.0+0xe>
 800b2c6:	2b24      	cmp	r3, #36	; 0x24
 800b2c8:	d906      	bls.n	800b2d8 <_strtol_l.isra.0+0x1c>
 800b2ca:	f7fe f833 	bl	8009334 <__errno>
 800b2ce:	2316      	movs	r3, #22
 800b2d0:	6003      	str	r3, [r0, #0]
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d8:	468c      	mov	ip, r1
 800b2da:	4e3a      	ldr	r6, [pc, #232]	; (800b3c4 <_strtol_l.isra.0+0x108>)
 800b2dc:	4660      	mov	r0, ip
 800b2de:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b2e2:	5da5      	ldrb	r5, [r4, r6]
 800b2e4:	f015 0508 	ands.w	r5, r5, #8
 800b2e8:	d1f8      	bne.n	800b2dc <_strtol_l.isra.0+0x20>
 800b2ea:	2c2d      	cmp	r4, #45	; 0x2d
 800b2ec:	d133      	bne.n	800b356 <_strtol_l.isra.0+0x9a>
 800b2ee:	f04f 0801 	mov.w	r8, #1
 800b2f2:	f89c 4000 	ldrb.w	r4, [ip]
 800b2f6:	f100 0c02 	add.w	ip, r0, #2
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d05d      	beq.n	800b3ba <_strtol_l.isra.0+0xfe>
 800b2fe:	2b10      	cmp	r3, #16
 800b300:	d10c      	bne.n	800b31c <_strtol_l.isra.0+0x60>
 800b302:	2c30      	cmp	r4, #48	; 0x30
 800b304:	d10a      	bne.n	800b31c <_strtol_l.isra.0+0x60>
 800b306:	f89c 0000 	ldrb.w	r0, [ip]
 800b30a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b30e:	2858      	cmp	r0, #88	; 0x58
 800b310:	d14e      	bne.n	800b3b0 <_strtol_l.isra.0+0xf4>
 800b312:	2310      	movs	r3, #16
 800b314:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b318:	f10c 0c02 	add.w	ip, ip, #2
 800b31c:	2500      	movs	r5, #0
 800b31e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800b322:	3f01      	subs	r7, #1
 800b324:	fbb7 f9f3 	udiv	r9, r7, r3
 800b328:	4628      	mov	r0, r5
 800b32a:	fb03 7a19 	mls	sl, r3, r9, r7
 800b32e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b332:	2e09      	cmp	r6, #9
 800b334:	d818      	bhi.n	800b368 <_strtol_l.isra.0+0xac>
 800b336:	4634      	mov	r4, r6
 800b338:	42a3      	cmp	r3, r4
 800b33a:	dd24      	ble.n	800b386 <_strtol_l.isra.0+0xca>
 800b33c:	2d00      	cmp	r5, #0
 800b33e:	db1f      	blt.n	800b380 <_strtol_l.isra.0+0xc4>
 800b340:	4581      	cmp	r9, r0
 800b342:	d31d      	bcc.n	800b380 <_strtol_l.isra.0+0xc4>
 800b344:	d101      	bne.n	800b34a <_strtol_l.isra.0+0x8e>
 800b346:	45a2      	cmp	sl, r4
 800b348:	db1a      	blt.n	800b380 <_strtol_l.isra.0+0xc4>
 800b34a:	2501      	movs	r5, #1
 800b34c:	fb00 4003 	mla	r0, r0, r3, r4
 800b350:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b354:	e7eb      	b.n	800b32e <_strtol_l.isra.0+0x72>
 800b356:	2c2b      	cmp	r4, #43	; 0x2b
 800b358:	bf08      	it	eq
 800b35a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b35e:	46a8      	mov	r8, r5
 800b360:	bf08      	it	eq
 800b362:	f100 0c02 	addeq.w	ip, r0, #2
 800b366:	e7c8      	b.n	800b2fa <_strtol_l.isra.0+0x3e>
 800b368:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b36c:	2e19      	cmp	r6, #25
 800b36e:	d801      	bhi.n	800b374 <_strtol_l.isra.0+0xb8>
 800b370:	3c37      	subs	r4, #55	; 0x37
 800b372:	e7e1      	b.n	800b338 <_strtol_l.isra.0+0x7c>
 800b374:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b378:	2e19      	cmp	r6, #25
 800b37a:	d804      	bhi.n	800b386 <_strtol_l.isra.0+0xca>
 800b37c:	3c57      	subs	r4, #87	; 0x57
 800b37e:	e7db      	b.n	800b338 <_strtol_l.isra.0+0x7c>
 800b380:	f04f 35ff 	mov.w	r5, #4294967295
 800b384:	e7e4      	b.n	800b350 <_strtol_l.isra.0+0x94>
 800b386:	2d00      	cmp	r5, #0
 800b388:	da08      	bge.n	800b39c <_strtol_l.isra.0+0xe0>
 800b38a:	2322      	movs	r3, #34	; 0x22
 800b38c:	4638      	mov	r0, r7
 800b38e:	f8ce 3000 	str.w	r3, [lr]
 800b392:	2a00      	cmp	r2, #0
 800b394:	d09e      	beq.n	800b2d4 <_strtol_l.isra.0+0x18>
 800b396:	f10c 31ff 	add.w	r1, ip, #4294967295
 800b39a:	e007      	b.n	800b3ac <_strtol_l.isra.0+0xf0>
 800b39c:	f1b8 0f00 	cmp.w	r8, #0
 800b3a0:	d000      	beq.n	800b3a4 <_strtol_l.isra.0+0xe8>
 800b3a2:	4240      	negs	r0, r0
 800b3a4:	2a00      	cmp	r2, #0
 800b3a6:	d095      	beq.n	800b2d4 <_strtol_l.isra.0+0x18>
 800b3a8:	2d00      	cmp	r5, #0
 800b3aa:	d1f4      	bne.n	800b396 <_strtol_l.isra.0+0xda>
 800b3ac:	6011      	str	r1, [r2, #0]
 800b3ae:	e791      	b.n	800b2d4 <_strtol_l.isra.0+0x18>
 800b3b0:	2430      	movs	r4, #48	; 0x30
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1b2      	bne.n	800b31c <_strtol_l.isra.0+0x60>
 800b3b6:	2308      	movs	r3, #8
 800b3b8:	e7b0      	b.n	800b31c <_strtol_l.isra.0+0x60>
 800b3ba:	2c30      	cmp	r4, #48	; 0x30
 800b3bc:	d0a3      	beq.n	800b306 <_strtol_l.isra.0+0x4a>
 800b3be:	230a      	movs	r3, #10
 800b3c0:	e7ac      	b.n	800b31c <_strtol_l.isra.0+0x60>
 800b3c2:	bf00      	nop
 800b3c4:	0800e1f5 	.word	0x0800e1f5

0800b3c8 <_strtol_r>:
 800b3c8:	f7ff bf78 	b.w	800b2bc <_strtol_l.isra.0>

0800b3cc <strtol>:
 800b3cc:	4613      	mov	r3, r2
 800b3ce:	460a      	mov	r2, r1
 800b3d0:	4601      	mov	r1, r0
 800b3d2:	4802      	ldr	r0, [pc, #8]	; (800b3dc <strtol+0x10>)
 800b3d4:	6800      	ldr	r0, [r0, #0]
 800b3d6:	f7ff bf71 	b.w	800b2bc <_strtol_l.isra.0>
 800b3da:	bf00      	nop
 800b3dc:	2000000c 	.word	0x2000000c

0800b3e0 <_write_r>:
 800b3e0:	b538      	push	{r3, r4, r5, lr}
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	4608      	mov	r0, r1
 800b3e6:	4611      	mov	r1, r2
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	4d05      	ldr	r5, [pc, #20]	; (800b400 <_write_r+0x20>)
 800b3ec:	602a      	str	r2, [r5, #0]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	f7f6 fd8c 	bl	8001f0c <_write>
 800b3f4:	1c43      	adds	r3, r0, #1
 800b3f6:	d102      	bne.n	800b3fe <_write_r+0x1e>
 800b3f8:	682b      	ldr	r3, [r5, #0]
 800b3fa:	b103      	cbz	r3, 800b3fe <_write_r+0x1e>
 800b3fc:	6023      	str	r3, [r4, #0]
 800b3fe:	bd38      	pop	{r3, r4, r5, pc}
 800b400:	20003b98 	.word	0x20003b98

0800b404 <__assert_func>:
 800b404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b406:	4614      	mov	r4, r2
 800b408:	461a      	mov	r2, r3
 800b40a:	4b09      	ldr	r3, [pc, #36]	; (800b430 <__assert_func+0x2c>)
 800b40c:	4605      	mov	r5, r0
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	68d8      	ldr	r0, [r3, #12]
 800b412:	b14c      	cbz	r4, 800b428 <__assert_func+0x24>
 800b414:	4b07      	ldr	r3, [pc, #28]	; (800b434 <__assert_func+0x30>)
 800b416:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b41a:	9100      	str	r1, [sp, #0]
 800b41c:	462b      	mov	r3, r5
 800b41e:	4906      	ldr	r1, [pc, #24]	; (800b438 <__assert_func+0x34>)
 800b420:	f000 ff5e 	bl	800c2e0 <fiprintf>
 800b424:	f002 fbdc 	bl	800dbe0 <abort>
 800b428:	4b04      	ldr	r3, [pc, #16]	; (800b43c <__assert_func+0x38>)
 800b42a:	461c      	mov	r4, r3
 800b42c:	e7f3      	b.n	800b416 <__assert_func+0x12>
 800b42e:	bf00      	nop
 800b430:	2000000c 	.word	0x2000000c
 800b434:	0800e1b8 	.word	0x0800e1b8
 800b438:	0800e1c5 	.word	0x0800e1c5
 800b43c:	0800e1f3 	.word	0x0800e1f3

0800b440 <_close_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	2300      	movs	r3, #0
 800b444:	4d05      	ldr	r5, [pc, #20]	; (800b45c <_close_r+0x1c>)
 800b446:	4604      	mov	r4, r0
 800b448:	4608      	mov	r0, r1
 800b44a:	602b      	str	r3, [r5, #0]
 800b44c:	f7f6 fd7a 	bl	8001f44 <_close>
 800b450:	1c43      	adds	r3, r0, #1
 800b452:	d102      	bne.n	800b45a <_close_r+0x1a>
 800b454:	682b      	ldr	r3, [r5, #0]
 800b456:	b103      	cbz	r3, 800b45a <_close_r+0x1a>
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	bd38      	pop	{r3, r4, r5, pc}
 800b45c:	20003b98 	.word	0x20003b98

0800b460 <quorem>:
 800b460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	6903      	ldr	r3, [r0, #16]
 800b466:	690c      	ldr	r4, [r1, #16]
 800b468:	4607      	mov	r7, r0
 800b46a:	42a3      	cmp	r3, r4
 800b46c:	f2c0 8083 	blt.w	800b576 <quorem+0x116>
 800b470:	3c01      	subs	r4, #1
 800b472:	f100 0514 	add.w	r5, r0, #20
 800b476:	f101 0814 	add.w	r8, r1, #20
 800b47a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b47e:	9301      	str	r3, [sp, #4]
 800b480:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b484:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b488:	3301      	adds	r3, #1
 800b48a:	429a      	cmp	r2, r3
 800b48c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b490:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b494:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b498:	d332      	bcc.n	800b500 <quorem+0xa0>
 800b49a:	f04f 0e00 	mov.w	lr, #0
 800b49e:	4640      	mov	r0, r8
 800b4a0:	46ac      	mov	ip, r5
 800b4a2:	46f2      	mov	sl, lr
 800b4a4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b4a8:	b293      	uxth	r3, r2
 800b4aa:	fb06 e303 	mla	r3, r6, r3, lr
 800b4ae:	0c12      	lsrs	r2, r2, #16
 800b4b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b4b4:	fb06 e202 	mla	r2, r6, r2, lr
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	ebaa 0303 	sub.w	r3, sl, r3
 800b4be:	f8dc a000 	ldr.w	sl, [ip]
 800b4c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4c6:	fa1f fa8a 	uxth.w	sl, sl
 800b4ca:	4453      	add	r3, sl
 800b4cc:	fa1f fa82 	uxth.w	sl, r2
 800b4d0:	f8dc 2000 	ldr.w	r2, [ip]
 800b4d4:	4581      	cmp	r9, r0
 800b4d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b4da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4e8:	f84c 3b04 	str.w	r3, [ip], #4
 800b4ec:	d2da      	bcs.n	800b4a4 <quorem+0x44>
 800b4ee:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4f2:	b92b      	cbnz	r3, 800b500 <quorem+0xa0>
 800b4f4:	9b01      	ldr	r3, [sp, #4]
 800b4f6:	3b04      	subs	r3, #4
 800b4f8:	429d      	cmp	r5, r3
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	d32f      	bcc.n	800b55e <quorem+0xfe>
 800b4fe:	613c      	str	r4, [r7, #16]
 800b500:	4638      	mov	r0, r7
 800b502:	f001 fd73 	bl	800cfec <__mcmp>
 800b506:	2800      	cmp	r0, #0
 800b508:	db25      	blt.n	800b556 <quorem+0xf6>
 800b50a:	4628      	mov	r0, r5
 800b50c:	f04f 0c00 	mov.w	ip, #0
 800b510:	3601      	adds	r6, #1
 800b512:	f858 1b04 	ldr.w	r1, [r8], #4
 800b516:	f8d0 e000 	ldr.w	lr, [r0]
 800b51a:	b28b      	uxth	r3, r1
 800b51c:	ebac 0303 	sub.w	r3, ip, r3
 800b520:	fa1f f28e 	uxth.w	r2, lr
 800b524:	4413      	add	r3, r2
 800b526:	0c0a      	lsrs	r2, r1, #16
 800b528:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b52c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b530:	b29b      	uxth	r3, r3
 800b532:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b536:	45c1      	cmp	r9, r8
 800b538:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b53c:	f840 3b04 	str.w	r3, [r0], #4
 800b540:	d2e7      	bcs.n	800b512 <quorem+0xb2>
 800b542:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b54a:	b922      	cbnz	r2, 800b556 <quorem+0xf6>
 800b54c:	3b04      	subs	r3, #4
 800b54e:	429d      	cmp	r5, r3
 800b550:	461a      	mov	r2, r3
 800b552:	d30a      	bcc.n	800b56a <quorem+0x10a>
 800b554:	613c      	str	r4, [r7, #16]
 800b556:	4630      	mov	r0, r6
 800b558:	b003      	add	sp, #12
 800b55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55e:	6812      	ldr	r2, [r2, #0]
 800b560:	3b04      	subs	r3, #4
 800b562:	2a00      	cmp	r2, #0
 800b564:	d1cb      	bne.n	800b4fe <quorem+0x9e>
 800b566:	3c01      	subs	r4, #1
 800b568:	e7c6      	b.n	800b4f8 <quorem+0x98>
 800b56a:	6812      	ldr	r2, [r2, #0]
 800b56c:	3b04      	subs	r3, #4
 800b56e:	2a00      	cmp	r2, #0
 800b570:	d1f0      	bne.n	800b554 <quorem+0xf4>
 800b572:	3c01      	subs	r4, #1
 800b574:	e7eb      	b.n	800b54e <quorem+0xee>
 800b576:	2000      	movs	r0, #0
 800b578:	e7ee      	b.n	800b558 <quorem+0xf8>
 800b57a:	0000      	movs	r0, r0
 800b57c:	0000      	movs	r0, r0
	...

0800b580 <_dtoa_r>:
 800b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b584:	4616      	mov	r6, r2
 800b586:	461f      	mov	r7, r3
 800b588:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b58a:	b099      	sub	sp, #100	; 0x64
 800b58c:	4605      	mov	r5, r0
 800b58e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b592:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b596:	b974      	cbnz	r4, 800b5b6 <_dtoa_r+0x36>
 800b598:	2010      	movs	r0, #16
 800b59a:	f001 fa2f 	bl	800c9fc <malloc>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	6268      	str	r0, [r5, #36]	; 0x24
 800b5a2:	b920      	cbnz	r0, 800b5ae <_dtoa_r+0x2e>
 800b5a4:	21ea      	movs	r1, #234	; 0xea
 800b5a6:	4bae      	ldr	r3, [pc, #696]	; (800b860 <_dtoa_r+0x2e0>)
 800b5a8:	48ae      	ldr	r0, [pc, #696]	; (800b864 <_dtoa_r+0x2e4>)
 800b5aa:	f7ff ff2b 	bl	800b404 <__assert_func>
 800b5ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5b2:	6004      	str	r4, [r0, #0]
 800b5b4:	60c4      	str	r4, [r0, #12]
 800b5b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5b8:	6819      	ldr	r1, [r3, #0]
 800b5ba:	b151      	cbz	r1, 800b5d2 <_dtoa_r+0x52>
 800b5bc:	685a      	ldr	r2, [r3, #4]
 800b5be:	2301      	movs	r3, #1
 800b5c0:	4093      	lsls	r3, r2
 800b5c2:	604a      	str	r2, [r1, #4]
 800b5c4:	608b      	str	r3, [r1, #8]
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	f001 fa8c 	bl	800cae4 <_Bfree>
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	1e3b      	subs	r3, r7, #0
 800b5d4:	bfaf      	iteee	ge
 800b5d6:	2300      	movge	r3, #0
 800b5d8:	2201      	movlt	r2, #1
 800b5da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b5de:	9305      	strlt	r3, [sp, #20]
 800b5e0:	bfa8      	it	ge
 800b5e2:	f8c8 3000 	strge.w	r3, [r8]
 800b5e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b5ea:	4b9f      	ldr	r3, [pc, #636]	; (800b868 <_dtoa_r+0x2e8>)
 800b5ec:	bfb8      	it	lt
 800b5ee:	f8c8 2000 	strlt.w	r2, [r8]
 800b5f2:	ea33 0309 	bics.w	r3, r3, r9
 800b5f6:	d119      	bne.n	800b62c <_dtoa_r+0xac>
 800b5f8:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b5fe:	6013      	str	r3, [r2, #0]
 800b600:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b604:	4333      	orrs	r3, r6
 800b606:	f000 8580 	beq.w	800c10a <_dtoa_r+0xb8a>
 800b60a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b60c:	b953      	cbnz	r3, 800b624 <_dtoa_r+0xa4>
 800b60e:	4b97      	ldr	r3, [pc, #604]	; (800b86c <_dtoa_r+0x2ec>)
 800b610:	e022      	b.n	800b658 <_dtoa_r+0xd8>
 800b612:	4b97      	ldr	r3, [pc, #604]	; (800b870 <_dtoa_r+0x2f0>)
 800b614:	9308      	str	r3, [sp, #32]
 800b616:	3308      	adds	r3, #8
 800b618:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b61a:	6013      	str	r3, [r2, #0]
 800b61c:	9808      	ldr	r0, [sp, #32]
 800b61e:	b019      	add	sp, #100	; 0x64
 800b620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b624:	4b91      	ldr	r3, [pc, #580]	; (800b86c <_dtoa_r+0x2ec>)
 800b626:	9308      	str	r3, [sp, #32]
 800b628:	3303      	adds	r3, #3
 800b62a:	e7f5      	b.n	800b618 <_dtoa_r+0x98>
 800b62c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b630:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b634:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b638:	2200      	movs	r2, #0
 800b63a:	2300      	movs	r3, #0
 800b63c:	f7f5 f9b4 	bl	80009a8 <__aeabi_dcmpeq>
 800b640:	4680      	mov	r8, r0
 800b642:	b158      	cbz	r0, 800b65c <_dtoa_r+0xdc>
 800b644:	2301      	movs	r3, #1
 800b646:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b648:	6013      	str	r3, [r2, #0]
 800b64a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f000 8559 	beq.w	800c104 <_dtoa_r+0xb84>
 800b652:	4888      	ldr	r0, [pc, #544]	; (800b874 <_dtoa_r+0x2f4>)
 800b654:	6018      	str	r0, [r3, #0]
 800b656:	1e43      	subs	r3, r0, #1
 800b658:	9308      	str	r3, [sp, #32]
 800b65a:	e7df      	b.n	800b61c <_dtoa_r+0x9c>
 800b65c:	ab16      	add	r3, sp, #88	; 0x58
 800b65e:	9301      	str	r3, [sp, #4]
 800b660:	ab17      	add	r3, sp, #92	; 0x5c
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	4628      	mov	r0, r5
 800b666:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b66a:	f001 fde5 	bl	800d238 <__d2b>
 800b66e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b672:	4682      	mov	sl, r0
 800b674:	2c00      	cmp	r4, #0
 800b676:	d07e      	beq.n	800b776 <_dtoa_r+0x1f6>
 800b678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b67c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b67e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b682:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b686:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b68a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b68e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b692:	2200      	movs	r2, #0
 800b694:	4b78      	ldr	r3, [pc, #480]	; (800b878 <_dtoa_r+0x2f8>)
 800b696:	f7f4 fd67 	bl	8000168 <__aeabi_dsub>
 800b69a:	a36b      	add	r3, pc, #428	; (adr r3, 800b848 <_dtoa_r+0x2c8>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f7f4 ff1a 	bl	80004d8 <__aeabi_dmul>
 800b6a4:	a36a      	add	r3, pc, #424	; (adr r3, 800b850 <_dtoa_r+0x2d0>)
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	f7f4 fd5f 	bl	800016c <__adddf3>
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	460f      	mov	r7, r1
 800b6b4:	f7f4 fea6 	bl	8000404 <__aeabi_i2d>
 800b6b8:	a367      	add	r3, pc, #412	; (adr r3, 800b858 <_dtoa_r+0x2d8>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	f7f4 ff0b 	bl	80004d8 <__aeabi_dmul>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	f7f4 fd4f 	bl	800016c <__adddf3>
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	460f      	mov	r7, r1
 800b6d2:	f7f5 f9b1 	bl	8000a38 <__aeabi_d2iz>
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	4681      	mov	r9, r0
 800b6da:	2300      	movs	r3, #0
 800b6dc:	4630      	mov	r0, r6
 800b6de:	4639      	mov	r1, r7
 800b6e0:	f7f5 f96c 	bl	80009bc <__aeabi_dcmplt>
 800b6e4:	b148      	cbz	r0, 800b6fa <_dtoa_r+0x17a>
 800b6e6:	4648      	mov	r0, r9
 800b6e8:	f7f4 fe8c 	bl	8000404 <__aeabi_i2d>
 800b6ec:	4632      	mov	r2, r6
 800b6ee:	463b      	mov	r3, r7
 800b6f0:	f7f5 f95a 	bl	80009a8 <__aeabi_dcmpeq>
 800b6f4:	b908      	cbnz	r0, 800b6fa <_dtoa_r+0x17a>
 800b6f6:	f109 39ff 	add.w	r9, r9, #4294967295
 800b6fa:	f1b9 0f16 	cmp.w	r9, #22
 800b6fe:	d857      	bhi.n	800b7b0 <_dtoa_r+0x230>
 800b700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b704:	4b5d      	ldr	r3, [pc, #372]	; (800b87c <_dtoa_r+0x2fc>)
 800b706:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	f7f5 f955 	bl	80009bc <__aeabi_dcmplt>
 800b712:	2800      	cmp	r0, #0
 800b714:	d04e      	beq.n	800b7b4 <_dtoa_r+0x234>
 800b716:	2300      	movs	r3, #0
 800b718:	f109 39ff 	add.w	r9, r9, #4294967295
 800b71c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b71e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b720:	1b1c      	subs	r4, r3, r4
 800b722:	1e63      	subs	r3, r4, #1
 800b724:	9309      	str	r3, [sp, #36]	; 0x24
 800b726:	bf49      	itett	mi
 800b728:	f1c4 0301 	rsbmi	r3, r4, #1
 800b72c:	2300      	movpl	r3, #0
 800b72e:	9306      	strmi	r3, [sp, #24]
 800b730:	2300      	movmi	r3, #0
 800b732:	bf54      	ite	pl
 800b734:	9306      	strpl	r3, [sp, #24]
 800b736:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b738:	f1b9 0f00 	cmp.w	r9, #0
 800b73c:	db3c      	blt.n	800b7b8 <_dtoa_r+0x238>
 800b73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b740:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b744:	444b      	add	r3, r9
 800b746:	9309      	str	r3, [sp, #36]	; 0x24
 800b748:	2300      	movs	r3, #0
 800b74a:	930a      	str	r3, [sp, #40]	; 0x28
 800b74c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b74e:	2b09      	cmp	r3, #9
 800b750:	d86c      	bhi.n	800b82c <_dtoa_r+0x2ac>
 800b752:	2b05      	cmp	r3, #5
 800b754:	bfc4      	itt	gt
 800b756:	3b04      	subgt	r3, #4
 800b758:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b75a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b75c:	bfc8      	it	gt
 800b75e:	2400      	movgt	r4, #0
 800b760:	f1a3 0302 	sub.w	r3, r3, #2
 800b764:	bfd8      	it	le
 800b766:	2401      	movle	r4, #1
 800b768:	2b03      	cmp	r3, #3
 800b76a:	f200 808b 	bhi.w	800b884 <_dtoa_r+0x304>
 800b76e:	e8df f003 	tbb	[pc, r3]
 800b772:	4f2d      	.short	0x4f2d
 800b774:	5b4d      	.short	0x5b4d
 800b776:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b77a:	441c      	add	r4, r3
 800b77c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b780:	2b20      	cmp	r3, #32
 800b782:	bfc3      	ittte	gt
 800b784:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b788:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b78c:	fa09 f303 	lslgt.w	r3, r9, r3
 800b790:	f1c3 0320 	rsble	r3, r3, #32
 800b794:	bfc6      	itte	gt
 800b796:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b79a:	4318      	orrgt	r0, r3
 800b79c:	fa06 f003 	lslle.w	r0, r6, r3
 800b7a0:	f7f4 fe20 	bl	80003e4 <__aeabi_ui2d>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b7aa:	3c01      	subs	r4, #1
 800b7ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800b7ae:	e770      	b.n	800b692 <_dtoa_r+0x112>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e7b3      	b.n	800b71c <_dtoa_r+0x19c>
 800b7b4:	900f      	str	r0, [sp, #60]	; 0x3c
 800b7b6:	e7b2      	b.n	800b71e <_dtoa_r+0x19e>
 800b7b8:	9b06      	ldr	r3, [sp, #24]
 800b7ba:	eba3 0309 	sub.w	r3, r3, r9
 800b7be:	9306      	str	r3, [sp, #24]
 800b7c0:	f1c9 0300 	rsb	r3, r9, #0
 800b7c4:	930a      	str	r3, [sp, #40]	; 0x28
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	930e      	str	r3, [sp, #56]	; 0x38
 800b7ca:	e7bf      	b.n	800b74c <_dtoa_r+0x1cc>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	dc59      	bgt.n	800b88a <_dtoa_r+0x30a>
 800b7d6:	f04f 0b01 	mov.w	fp, #1
 800b7da:	465b      	mov	r3, fp
 800b7dc:	f8cd b008 	str.w	fp, [sp, #8]
 800b7e0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b7e8:	6042      	str	r2, [r0, #4]
 800b7ea:	2204      	movs	r2, #4
 800b7ec:	f102 0614 	add.w	r6, r2, #20
 800b7f0:	429e      	cmp	r6, r3
 800b7f2:	6841      	ldr	r1, [r0, #4]
 800b7f4:	d94f      	bls.n	800b896 <_dtoa_r+0x316>
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f001 f934 	bl	800ca64 <_Balloc>
 800b7fc:	9008      	str	r0, [sp, #32]
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d14d      	bne.n	800b89e <_dtoa_r+0x31e>
 800b802:	4602      	mov	r2, r0
 800b804:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b808:	4b1d      	ldr	r3, [pc, #116]	; (800b880 <_dtoa_r+0x300>)
 800b80a:	e6cd      	b.n	800b5a8 <_dtoa_r+0x28>
 800b80c:	2301      	movs	r3, #1
 800b80e:	e7de      	b.n	800b7ce <_dtoa_r+0x24e>
 800b810:	2300      	movs	r3, #0
 800b812:	930b      	str	r3, [sp, #44]	; 0x2c
 800b814:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b816:	eb09 0b03 	add.w	fp, r9, r3
 800b81a:	f10b 0301 	add.w	r3, fp, #1
 800b81e:	2b01      	cmp	r3, #1
 800b820:	9302      	str	r3, [sp, #8]
 800b822:	bfb8      	it	lt
 800b824:	2301      	movlt	r3, #1
 800b826:	e7dd      	b.n	800b7e4 <_dtoa_r+0x264>
 800b828:	2301      	movs	r3, #1
 800b82a:	e7f2      	b.n	800b812 <_dtoa_r+0x292>
 800b82c:	2401      	movs	r4, #1
 800b82e:	2300      	movs	r3, #0
 800b830:	940b      	str	r4, [sp, #44]	; 0x2c
 800b832:	9322      	str	r3, [sp, #136]	; 0x88
 800b834:	f04f 3bff 	mov.w	fp, #4294967295
 800b838:	2200      	movs	r2, #0
 800b83a:	2312      	movs	r3, #18
 800b83c:	f8cd b008 	str.w	fp, [sp, #8]
 800b840:	9223      	str	r2, [sp, #140]	; 0x8c
 800b842:	e7cf      	b.n	800b7e4 <_dtoa_r+0x264>
 800b844:	f3af 8000 	nop.w
 800b848:	636f4361 	.word	0x636f4361
 800b84c:	3fd287a7 	.word	0x3fd287a7
 800b850:	8b60c8b3 	.word	0x8b60c8b3
 800b854:	3fc68a28 	.word	0x3fc68a28
 800b858:	509f79fb 	.word	0x509f79fb
 800b85c:	3fd34413 	.word	0x3fd34413
 800b860:	0800e140 	.word	0x0800e140
 800b864:	0800e302 	.word	0x0800e302
 800b868:	7ff00000 	.word	0x7ff00000
 800b86c:	0800e2fe 	.word	0x0800e2fe
 800b870:	0800e2f5 	.word	0x0800e2f5
 800b874:	0800e0c1 	.word	0x0800e0c1
 800b878:	3ff80000 	.word	0x3ff80000
 800b87c:	0800e478 	.word	0x0800e478
 800b880:	0800e361 	.word	0x0800e361
 800b884:	2301      	movs	r3, #1
 800b886:	930b      	str	r3, [sp, #44]	; 0x2c
 800b888:	e7d4      	b.n	800b834 <_dtoa_r+0x2b4>
 800b88a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800b88e:	465b      	mov	r3, fp
 800b890:	f8cd b008 	str.w	fp, [sp, #8]
 800b894:	e7a6      	b.n	800b7e4 <_dtoa_r+0x264>
 800b896:	3101      	adds	r1, #1
 800b898:	6041      	str	r1, [r0, #4]
 800b89a:	0052      	lsls	r2, r2, #1
 800b89c:	e7a6      	b.n	800b7ec <_dtoa_r+0x26c>
 800b89e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8a0:	9a08      	ldr	r2, [sp, #32]
 800b8a2:	601a      	str	r2, [r3, #0]
 800b8a4:	9b02      	ldr	r3, [sp, #8]
 800b8a6:	2b0e      	cmp	r3, #14
 800b8a8:	f200 80a8 	bhi.w	800b9fc <_dtoa_r+0x47c>
 800b8ac:	2c00      	cmp	r4, #0
 800b8ae:	f000 80a5 	beq.w	800b9fc <_dtoa_r+0x47c>
 800b8b2:	f1b9 0f00 	cmp.w	r9, #0
 800b8b6:	dd34      	ble.n	800b922 <_dtoa_r+0x3a2>
 800b8b8:	4a9a      	ldr	r2, [pc, #616]	; (800bb24 <_dtoa_r+0x5a4>)
 800b8ba:	f009 030f 	and.w	r3, r9, #15
 800b8be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8c2:	f419 7f80 	tst.w	r9, #256	; 0x100
 800b8c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b8ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b8ce:	ea4f 1429 	mov.w	r4, r9, asr #4
 800b8d2:	d016      	beq.n	800b902 <_dtoa_r+0x382>
 800b8d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b8d8:	4b93      	ldr	r3, [pc, #588]	; (800bb28 <_dtoa_r+0x5a8>)
 800b8da:	2703      	movs	r7, #3
 800b8dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8e0:	f7f4 ff24 	bl	800072c <__aeabi_ddiv>
 800b8e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8e8:	f004 040f 	and.w	r4, r4, #15
 800b8ec:	4e8e      	ldr	r6, [pc, #568]	; (800bb28 <_dtoa_r+0x5a8>)
 800b8ee:	b954      	cbnz	r4, 800b906 <_dtoa_r+0x386>
 800b8f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b8f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8f8:	f7f4 ff18 	bl	800072c <__aeabi_ddiv>
 800b8fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b900:	e029      	b.n	800b956 <_dtoa_r+0x3d6>
 800b902:	2702      	movs	r7, #2
 800b904:	e7f2      	b.n	800b8ec <_dtoa_r+0x36c>
 800b906:	07e1      	lsls	r1, r4, #31
 800b908:	d508      	bpl.n	800b91c <_dtoa_r+0x39c>
 800b90a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b90e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b912:	f7f4 fde1 	bl	80004d8 <__aeabi_dmul>
 800b916:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b91a:	3701      	adds	r7, #1
 800b91c:	1064      	asrs	r4, r4, #1
 800b91e:	3608      	adds	r6, #8
 800b920:	e7e5      	b.n	800b8ee <_dtoa_r+0x36e>
 800b922:	f000 80a5 	beq.w	800ba70 <_dtoa_r+0x4f0>
 800b926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b92a:	f1c9 0400 	rsb	r4, r9, #0
 800b92e:	4b7d      	ldr	r3, [pc, #500]	; (800bb24 <_dtoa_r+0x5a4>)
 800b930:	f004 020f 	and.w	r2, r4, #15
 800b934:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	f7f4 fdcc 	bl	80004d8 <__aeabi_dmul>
 800b940:	2702      	movs	r7, #2
 800b942:	2300      	movs	r3, #0
 800b944:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b948:	4e77      	ldr	r6, [pc, #476]	; (800bb28 <_dtoa_r+0x5a8>)
 800b94a:	1124      	asrs	r4, r4, #4
 800b94c:	2c00      	cmp	r4, #0
 800b94e:	f040 8084 	bne.w	800ba5a <_dtoa_r+0x4da>
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1d2      	bne.n	800b8fc <_dtoa_r+0x37c>
 800b956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f000 808b 	beq.w	800ba74 <_dtoa_r+0x4f4>
 800b95e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b962:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b966:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b96a:	2200      	movs	r2, #0
 800b96c:	4b6f      	ldr	r3, [pc, #444]	; (800bb2c <_dtoa_r+0x5ac>)
 800b96e:	f7f5 f825 	bl	80009bc <__aeabi_dcmplt>
 800b972:	2800      	cmp	r0, #0
 800b974:	d07e      	beq.n	800ba74 <_dtoa_r+0x4f4>
 800b976:	9b02      	ldr	r3, [sp, #8]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d07b      	beq.n	800ba74 <_dtoa_r+0x4f4>
 800b97c:	f1bb 0f00 	cmp.w	fp, #0
 800b980:	dd38      	ble.n	800b9f4 <_dtoa_r+0x474>
 800b982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b986:	2200      	movs	r2, #0
 800b988:	4b69      	ldr	r3, [pc, #420]	; (800bb30 <_dtoa_r+0x5b0>)
 800b98a:	f7f4 fda5 	bl	80004d8 <__aeabi_dmul>
 800b98e:	465c      	mov	r4, fp
 800b990:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b994:	f109 38ff 	add.w	r8, r9, #4294967295
 800b998:	3701      	adds	r7, #1
 800b99a:	4638      	mov	r0, r7
 800b99c:	f7f4 fd32 	bl	8000404 <__aeabi_i2d>
 800b9a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9a4:	f7f4 fd98 	bl	80004d8 <__aeabi_dmul>
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	4b62      	ldr	r3, [pc, #392]	; (800bb34 <_dtoa_r+0x5b4>)
 800b9ac:	f7f4 fbde 	bl	800016c <__adddf3>
 800b9b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b9b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b9b8:	9611      	str	r6, [sp, #68]	; 0x44
 800b9ba:	2c00      	cmp	r4, #0
 800b9bc:	d15d      	bne.n	800ba7a <_dtoa_r+0x4fa>
 800b9be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	4b5c      	ldr	r3, [pc, #368]	; (800bb38 <_dtoa_r+0x5b8>)
 800b9c6:	f7f4 fbcf 	bl	8000168 <__aeabi_dsub>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b9d2:	4633      	mov	r3, r6
 800b9d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b9d6:	f7f5 f80f 	bl	80009f8 <__aeabi_dcmpgt>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	f040 829e 	bne.w	800bf1c <_dtoa_r+0x99c>
 800b9e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b9e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b9ea:	f7f4 ffe7 	bl	80009bc <__aeabi_dcmplt>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	f040 8292 	bne.w	800bf18 <_dtoa_r+0x998>
 800b9f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b9f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b9fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f2c0 8153 	blt.w	800bcaa <_dtoa_r+0x72a>
 800ba04:	f1b9 0f0e 	cmp.w	r9, #14
 800ba08:	f300 814f 	bgt.w	800bcaa <_dtoa_r+0x72a>
 800ba0c:	4b45      	ldr	r3, [pc, #276]	; (800bb24 <_dtoa_r+0x5a4>)
 800ba0e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ba12:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba16:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ba1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f280 80db 	bge.w	800bbd8 <_dtoa_r+0x658>
 800ba22:	9b02      	ldr	r3, [sp, #8]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f300 80d7 	bgt.w	800bbd8 <_dtoa_r+0x658>
 800ba2a:	f040 8274 	bne.w	800bf16 <_dtoa_r+0x996>
 800ba2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba32:	2200      	movs	r2, #0
 800ba34:	4b40      	ldr	r3, [pc, #256]	; (800bb38 <_dtoa_r+0x5b8>)
 800ba36:	f7f4 fd4f 	bl	80004d8 <__aeabi_dmul>
 800ba3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba3e:	f7f4 ffd1 	bl	80009e4 <__aeabi_dcmpge>
 800ba42:	9c02      	ldr	r4, [sp, #8]
 800ba44:	4626      	mov	r6, r4
 800ba46:	2800      	cmp	r0, #0
 800ba48:	f040 824a 	bne.w	800bee0 <_dtoa_r+0x960>
 800ba4c:	2331      	movs	r3, #49	; 0x31
 800ba4e:	9f08      	ldr	r7, [sp, #32]
 800ba50:	f109 0901 	add.w	r9, r9, #1
 800ba54:	f807 3b01 	strb.w	r3, [r7], #1
 800ba58:	e246      	b.n	800bee8 <_dtoa_r+0x968>
 800ba5a:	07e2      	lsls	r2, r4, #31
 800ba5c:	d505      	bpl.n	800ba6a <_dtoa_r+0x4ea>
 800ba5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba62:	f7f4 fd39 	bl	80004d8 <__aeabi_dmul>
 800ba66:	2301      	movs	r3, #1
 800ba68:	3701      	adds	r7, #1
 800ba6a:	1064      	asrs	r4, r4, #1
 800ba6c:	3608      	adds	r6, #8
 800ba6e:	e76d      	b.n	800b94c <_dtoa_r+0x3cc>
 800ba70:	2702      	movs	r7, #2
 800ba72:	e770      	b.n	800b956 <_dtoa_r+0x3d6>
 800ba74:	46c8      	mov	r8, r9
 800ba76:	9c02      	ldr	r4, [sp, #8]
 800ba78:	e78f      	b.n	800b99a <_dtoa_r+0x41a>
 800ba7a:	9908      	ldr	r1, [sp, #32]
 800ba7c:	4b29      	ldr	r3, [pc, #164]	; (800bb24 <_dtoa_r+0x5a4>)
 800ba7e:	4421      	add	r1, r4
 800ba80:	9112      	str	r1, [sp, #72]	; 0x48
 800ba82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ba8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba90:	2900      	cmp	r1, #0
 800ba92:	d055      	beq.n	800bb40 <_dtoa_r+0x5c0>
 800ba94:	2000      	movs	r0, #0
 800ba96:	4929      	ldr	r1, [pc, #164]	; (800bb3c <_dtoa_r+0x5bc>)
 800ba98:	f7f4 fe48 	bl	800072c <__aeabi_ddiv>
 800ba9c:	463b      	mov	r3, r7
 800ba9e:	4632      	mov	r2, r6
 800baa0:	f7f4 fb62 	bl	8000168 <__aeabi_dsub>
 800baa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800baa8:	9f08      	ldr	r7, [sp, #32]
 800baaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800baae:	f7f4 ffc3 	bl	8000a38 <__aeabi_d2iz>
 800bab2:	4604      	mov	r4, r0
 800bab4:	f7f4 fca6 	bl	8000404 <__aeabi_i2d>
 800bab8:	4602      	mov	r2, r0
 800baba:	460b      	mov	r3, r1
 800babc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bac0:	f7f4 fb52 	bl	8000168 <__aeabi_dsub>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	3430      	adds	r4, #48	; 0x30
 800baca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bace:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bad2:	f807 4b01 	strb.w	r4, [r7], #1
 800bad6:	f7f4 ff71 	bl	80009bc <__aeabi_dcmplt>
 800bada:	2800      	cmp	r0, #0
 800badc:	d174      	bne.n	800bbc8 <_dtoa_r+0x648>
 800bade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bae2:	2000      	movs	r0, #0
 800bae4:	4911      	ldr	r1, [pc, #68]	; (800bb2c <_dtoa_r+0x5ac>)
 800bae6:	f7f4 fb3f 	bl	8000168 <__aeabi_dsub>
 800baea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800baee:	f7f4 ff65 	bl	80009bc <__aeabi_dcmplt>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	f040 80b6 	bne.w	800bc64 <_dtoa_r+0x6e4>
 800baf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bafa:	429f      	cmp	r7, r3
 800bafc:	f43f af7a 	beq.w	800b9f4 <_dtoa_r+0x474>
 800bb00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb04:	2200      	movs	r2, #0
 800bb06:	4b0a      	ldr	r3, [pc, #40]	; (800bb30 <_dtoa_r+0x5b0>)
 800bb08:	f7f4 fce6 	bl	80004d8 <__aeabi_dmul>
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bb12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb16:	4b06      	ldr	r3, [pc, #24]	; (800bb30 <_dtoa_r+0x5b0>)
 800bb18:	f7f4 fcde 	bl	80004d8 <__aeabi_dmul>
 800bb1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb20:	e7c3      	b.n	800baaa <_dtoa_r+0x52a>
 800bb22:	bf00      	nop
 800bb24:	0800e478 	.word	0x0800e478
 800bb28:	0800e450 	.word	0x0800e450
 800bb2c:	3ff00000 	.word	0x3ff00000
 800bb30:	40240000 	.word	0x40240000
 800bb34:	401c0000 	.word	0x401c0000
 800bb38:	40140000 	.word	0x40140000
 800bb3c:	3fe00000 	.word	0x3fe00000
 800bb40:	4630      	mov	r0, r6
 800bb42:	4639      	mov	r1, r7
 800bb44:	f7f4 fcc8 	bl	80004d8 <__aeabi_dmul>
 800bb48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bb4e:	9c08      	ldr	r4, [sp, #32]
 800bb50:	9314      	str	r3, [sp, #80]	; 0x50
 800bb52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb56:	f7f4 ff6f 	bl	8000a38 <__aeabi_d2iz>
 800bb5a:	9015      	str	r0, [sp, #84]	; 0x54
 800bb5c:	f7f4 fc52 	bl	8000404 <__aeabi_i2d>
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb68:	f7f4 fafe 	bl	8000168 <__aeabi_dsub>
 800bb6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb6e:	4606      	mov	r6, r0
 800bb70:	3330      	adds	r3, #48	; 0x30
 800bb72:	f804 3b01 	strb.w	r3, [r4], #1
 800bb76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb78:	460f      	mov	r7, r1
 800bb7a:	429c      	cmp	r4, r3
 800bb7c:	f04f 0200 	mov.w	r2, #0
 800bb80:	d124      	bne.n	800bbcc <_dtoa_r+0x64c>
 800bb82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb86:	4bb3      	ldr	r3, [pc, #716]	; (800be54 <_dtoa_r+0x8d4>)
 800bb88:	f7f4 faf0 	bl	800016c <__adddf3>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4630      	mov	r0, r6
 800bb92:	4639      	mov	r1, r7
 800bb94:	f7f4 ff30 	bl	80009f8 <__aeabi_dcmpgt>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d162      	bne.n	800bc62 <_dtoa_r+0x6e2>
 800bb9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bba0:	2000      	movs	r0, #0
 800bba2:	49ac      	ldr	r1, [pc, #688]	; (800be54 <_dtoa_r+0x8d4>)
 800bba4:	f7f4 fae0 	bl	8000168 <__aeabi_dsub>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	4630      	mov	r0, r6
 800bbae:	4639      	mov	r1, r7
 800bbb0:	f7f4 ff04 	bl	80009bc <__aeabi_dcmplt>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	f43f af1d 	beq.w	800b9f4 <_dtoa_r+0x474>
 800bbba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bbbc:	1e7b      	subs	r3, r7, #1
 800bbbe:	9314      	str	r3, [sp, #80]	; 0x50
 800bbc0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bbc4:	2b30      	cmp	r3, #48	; 0x30
 800bbc6:	d0f8      	beq.n	800bbba <_dtoa_r+0x63a>
 800bbc8:	46c1      	mov	r9, r8
 800bbca:	e03a      	b.n	800bc42 <_dtoa_r+0x6c2>
 800bbcc:	4ba2      	ldr	r3, [pc, #648]	; (800be58 <_dtoa_r+0x8d8>)
 800bbce:	f7f4 fc83 	bl	80004d8 <__aeabi_dmul>
 800bbd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbd6:	e7bc      	b.n	800bb52 <_dtoa_r+0x5d2>
 800bbd8:	9f08      	ldr	r7, [sp, #32]
 800bbda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bbde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbe2:	f7f4 fda3 	bl	800072c <__aeabi_ddiv>
 800bbe6:	f7f4 ff27 	bl	8000a38 <__aeabi_d2iz>
 800bbea:	4604      	mov	r4, r0
 800bbec:	f7f4 fc0a 	bl	8000404 <__aeabi_i2d>
 800bbf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bbf4:	f7f4 fc70 	bl	80004d8 <__aeabi_dmul>
 800bbf8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	4602      	mov	r2, r0
 800bc00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc04:	f7f4 fab0 	bl	8000168 <__aeabi_dsub>
 800bc08:	f807 6b01 	strb.w	r6, [r7], #1
 800bc0c:	9e08      	ldr	r6, [sp, #32]
 800bc0e:	9b02      	ldr	r3, [sp, #8]
 800bc10:	1bbe      	subs	r6, r7, r6
 800bc12:	42b3      	cmp	r3, r6
 800bc14:	d13a      	bne.n	800bc8c <_dtoa_r+0x70c>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	f7f4 faa7 	bl	800016c <__adddf3>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc2a:	f7f4 fee5 	bl	80009f8 <__aeabi_dcmpgt>
 800bc2e:	bb58      	cbnz	r0, 800bc88 <_dtoa_r+0x708>
 800bc30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc38:	f7f4 feb6 	bl	80009a8 <__aeabi_dcmpeq>
 800bc3c:	b108      	cbz	r0, 800bc42 <_dtoa_r+0x6c2>
 800bc3e:	07e1      	lsls	r1, r4, #31
 800bc40:	d422      	bmi.n	800bc88 <_dtoa_r+0x708>
 800bc42:	4628      	mov	r0, r5
 800bc44:	4651      	mov	r1, sl
 800bc46:	f000 ff4d 	bl	800cae4 <_Bfree>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	703b      	strb	r3, [r7, #0]
 800bc4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bc50:	f109 0001 	add.w	r0, r9, #1
 800bc54:	6018      	str	r0, [r3, #0]
 800bc56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f43f acdf 	beq.w	800b61c <_dtoa_r+0x9c>
 800bc5e:	601f      	str	r7, [r3, #0]
 800bc60:	e4dc      	b.n	800b61c <_dtoa_r+0x9c>
 800bc62:	4627      	mov	r7, r4
 800bc64:	463b      	mov	r3, r7
 800bc66:	461f      	mov	r7, r3
 800bc68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc6c:	2a39      	cmp	r2, #57	; 0x39
 800bc6e:	d107      	bne.n	800bc80 <_dtoa_r+0x700>
 800bc70:	9a08      	ldr	r2, [sp, #32]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d1f7      	bne.n	800bc66 <_dtoa_r+0x6e6>
 800bc76:	2230      	movs	r2, #48	; 0x30
 800bc78:	9908      	ldr	r1, [sp, #32]
 800bc7a:	f108 0801 	add.w	r8, r8, #1
 800bc7e:	700a      	strb	r2, [r1, #0]
 800bc80:	781a      	ldrb	r2, [r3, #0]
 800bc82:	3201      	adds	r2, #1
 800bc84:	701a      	strb	r2, [r3, #0]
 800bc86:	e79f      	b.n	800bbc8 <_dtoa_r+0x648>
 800bc88:	46c8      	mov	r8, r9
 800bc8a:	e7eb      	b.n	800bc64 <_dtoa_r+0x6e4>
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	4b72      	ldr	r3, [pc, #456]	; (800be58 <_dtoa_r+0x8d8>)
 800bc90:	f7f4 fc22 	bl	80004d8 <__aeabi_dmul>
 800bc94:	4602      	mov	r2, r0
 800bc96:	460b      	mov	r3, r1
 800bc98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	2300      	movs	r3, #0
 800bca0:	f7f4 fe82 	bl	80009a8 <__aeabi_dcmpeq>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d098      	beq.n	800bbda <_dtoa_r+0x65a>
 800bca8:	e7cb      	b.n	800bc42 <_dtoa_r+0x6c2>
 800bcaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bcac:	2a00      	cmp	r2, #0
 800bcae:	f000 80cd 	beq.w	800be4c <_dtoa_r+0x8cc>
 800bcb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bcb4:	2a01      	cmp	r2, #1
 800bcb6:	f300 80af 	bgt.w	800be18 <_dtoa_r+0x898>
 800bcba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bcbc:	2a00      	cmp	r2, #0
 800bcbe:	f000 80a7 	beq.w	800be10 <_dtoa_r+0x890>
 800bcc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bcc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bcc8:	9f06      	ldr	r7, [sp, #24]
 800bcca:	9a06      	ldr	r2, [sp, #24]
 800bccc:	2101      	movs	r1, #1
 800bcce:	441a      	add	r2, r3
 800bcd0:	9206      	str	r2, [sp, #24]
 800bcd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	441a      	add	r2, r3
 800bcd8:	9209      	str	r2, [sp, #36]	; 0x24
 800bcda:	f001 f807 	bl	800ccec <__i2b>
 800bcde:	4606      	mov	r6, r0
 800bce0:	2f00      	cmp	r7, #0
 800bce2:	dd0c      	ble.n	800bcfe <_dtoa_r+0x77e>
 800bce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	dd09      	ble.n	800bcfe <_dtoa_r+0x77e>
 800bcea:	42bb      	cmp	r3, r7
 800bcec:	bfa8      	it	ge
 800bcee:	463b      	movge	r3, r7
 800bcf0:	9a06      	ldr	r2, [sp, #24]
 800bcf2:	1aff      	subs	r7, r7, r3
 800bcf4:	1ad2      	subs	r2, r2, r3
 800bcf6:	9206      	str	r2, [sp, #24]
 800bcf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcfa:	1ad3      	subs	r3, r2, r3
 800bcfc:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd00:	b1f3      	cbz	r3, 800bd40 <_dtoa_r+0x7c0>
 800bd02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	f000 80a9 	beq.w	800be5c <_dtoa_r+0x8dc>
 800bd0a:	2c00      	cmp	r4, #0
 800bd0c:	dd10      	ble.n	800bd30 <_dtoa_r+0x7b0>
 800bd0e:	4631      	mov	r1, r6
 800bd10:	4622      	mov	r2, r4
 800bd12:	4628      	mov	r0, r5
 800bd14:	f001 f8a4 	bl	800ce60 <__pow5mult>
 800bd18:	4652      	mov	r2, sl
 800bd1a:	4601      	mov	r1, r0
 800bd1c:	4606      	mov	r6, r0
 800bd1e:	4628      	mov	r0, r5
 800bd20:	f000 fffa 	bl	800cd18 <__multiply>
 800bd24:	4680      	mov	r8, r0
 800bd26:	4651      	mov	r1, sl
 800bd28:	4628      	mov	r0, r5
 800bd2a:	f000 fedb 	bl	800cae4 <_Bfree>
 800bd2e:	46c2      	mov	sl, r8
 800bd30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd32:	1b1a      	subs	r2, r3, r4
 800bd34:	d004      	beq.n	800bd40 <_dtoa_r+0x7c0>
 800bd36:	4651      	mov	r1, sl
 800bd38:	4628      	mov	r0, r5
 800bd3a:	f001 f891 	bl	800ce60 <__pow5mult>
 800bd3e:	4682      	mov	sl, r0
 800bd40:	2101      	movs	r1, #1
 800bd42:	4628      	mov	r0, r5
 800bd44:	f000 ffd2 	bl	800ccec <__i2b>
 800bd48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f340 8087 	ble.w	800be60 <_dtoa_r+0x8e0>
 800bd52:	461a      	mov	r2, r3
 800bd54:	4601      	mov	r1, r0
 800bd56:	4628      	mov	r0, r5
 800bd58:	f001 f882 	bl	800ce60 <__pow5mult>
 800bd5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd5e:	4604      	mov	r4, r0
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	f340 8080 	ble.w	800be66 <_dtoa_r+0x8e6>
 800bd66:	f04f 0800 	mov.w	r8, #0
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd70:	6918      	ldr	r0, [r3, #16]
 800bd72:	f000 ff6d 	bl	800cc50 <__hi0bits>
 800bd76:	f1c0 0020 	rsb	r0, r0, #32
 800bd7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd7c:	4418      	add	r0, r3
 800bd7e:	f010 001f 	ands.w	r0, r0, #31
 800bd82:	f000 8092 	beq.w	800beaa <_dtoa_r+0x92a>
 800bd86:	f1c0 0320 	rsb	r3, r0, #32
 800bd8a:	2b04      	cmp	r3, #4
 800bd8c:	f340 808a 	ble.w	800bea4 <_dtoa_r+0x924>
 800bd90:	f1c0 001c 	rsb	r0, r0, #28
 800bd94:	9b06      	ldr	r3, [sp, #24]
 800bd96:	4407      	add	r7, r0
 800bd98:	4403      	add	r3, r0
 800bd9a:	9306      	str	r3, [sp, #24]
 800bd9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd9e:	4403      	add	r3, r0
 800bda0:	9309      	str	r3, [sp, #36]	; 0x24
 800bda2:	9b06      	ldr	r3, [sp, #24]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	dd05      	ble.n	800bdb4 <_dtoa_r+0x834>
 800bda8:	4651      	mov	r1, sl
 800bdaa:	461a      	mov	r2, r3
 800bdac:	4628      	mov	r0, r5
 800bdae:	f001 f8b1 	bl	800cf14 <__lshift>
 800bdb2:	4682      	mov	sl, r0
 800bdb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	dd05      	ble.n	800bdc6 <_dtoa_r+0x846>
 800bdba:	4621      	mov	r1, r4
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	f001 f8a8 	bl	800cf14 <__lshift>
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d070      	beq.n	800beae <_dtoa_r+0x92e>
 800bdcc:	4621      	mov	r1, r4
 800bdce:	4650      	mov	r0, sl
 800bdd0:	f001 f90c 	bl	800cfec <__mcmp>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	da6a      	bge.n	800beae <_dtoa_r+0x92e>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	4651      	mov	r1, sl
 800bddc:	220a      	movs	r2, #10
 800bdde:	4628      	mov	r0, r5
 800bde0:	f000 fea2 	bl	800cb28 <__multadd>
 800bde4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bde6:	4682      	mov	sl, r0
 800bde8:	f109 39ff 	add.w	r9, r9, #4294967295
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f000 8193 	beq.w	800c118 <_dtoa_r+0xb98>
 800bdf2:	4631      	mov	r1, r6
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	220a      	movs	r2, #10
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	f000 fe95 	bl	800cb28 <__multadd>
 800bdfe:	f1bb 0f00 	cmp.w	fp, #0
 800be02:	4606      	mov	r6, r0
 800be04:	f300 8093 	bgt.w	800bf2e <_dtoa_r+0x9ae>
 800be08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	dc57      	bgt.n	800bebe <_dtoa_r+0x93e>
 800be0e:	e08e      	b.n	800bf2e <_dtoa_r+0x9ae>
 800be10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800be12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be16:	e756      	b.n	800bcc6 <_dtoa_r+0x746>
 800be18:	9b02      	ldr	r3, [sp, #8]
 800be1a:	1e5c      	subs	r4, r3, #1
 800be1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be1e:	42a3      	cmp	r3, r4
 800be20:	bfb7      	itett	lt
 800be22:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800be24:	1b1c      	subge	r4, r3, r4
 800be26:	1ae2      	sublt	r2, r4, r3
 800be28:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800be2a:	bfbe      	ittt	lt
 800be2c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800be2e:	189b      	addlt	r3, r3, r2
 800be30:	930e      	strlt	r3, [sp, #56]	; 0x38
 800be32:	9b02      	ldr	r3, [sp, #8]
 800be34:	bfb8      	it	lt
 800be36:	2400      	movlt	r4, #0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	bfbb      	ittet	lt
 800be3c:	9b06      	ldrlt	r3, [sp, #24]
 800be3e:	9a02      	ldrlt	r2, [sp, #8]
 800be40:	9f06      	ldrge	r7, [sp, #24]
 800be42:	1a9f      	sublt	r7, r3, r2
 800be44:	bfac      	ite	ge
 800be46:	9b02      	ldrge	r3, [sp, #8]
 800be48:	2300      	movlt	r3, #0
 800be4a:	e73e      	b.n	800bcca <_dtoa_r+0x74a>
 800be4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800be4e:	9f06      	ldr	r7, [sp, #24]
 800be50:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800be52:	e745      	b.n	800bce0 <_dtoa_r+0x760>
 800be54:	3fe00000 	.word	0x3fe00000
 800be58:	40240000 	.word	0x40240000
 800be5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be5e:	e76a      	b.n	800bd36 <_dtoa_r+0x7b6>
 800be60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be62:	2b01      	cmp	r3, #1
 800be64:	dc19      	bgt.n	800be9a <_dtoa_r+0x91a>
 800be66:	9b04      	ldr	r3, [sp, #16]
 800be68:	b9bb      	cbnz	r3, 800be9a <_dtoa_r+0x91a>
 800be6a:	9b05      	ldr	r3, [sp, #20]
 800be6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be70:	b99b      	cbnz	r3, 800be9a <_dtoa_r+0x91a>
 800be72:	9b05      	ldr	r3, [sp, #20]
 800be74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be78:	0d1b      	lsrs	r3, r3, #20
 800be7a:	051b      	lsls	r3, r3, #20
 800be7c:	b183      	cbz	r3, 800bea0 <_dtoa_r+0x920>
 800be7e:	f04f 0801 	mov.w	r8, #1
 800be82:	9b06      	ldr	r3, [sp, #24]
 800be84:	3301      	adds	r3, #1
 800be86:	9306      	str	r3, [sp, #24]
 800be88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be8a:	3301      	adds	r3, #1
 800be8c:	9309      	str	r3, [sp, #36]	; 0x24
 800be8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be90:	2b00      	cmp	r3, #0
 800be92:	f47f af6a 	bne.w	800bd6a <_dtoa_r+0x7ea>
 800be96:	2001      	movs	r0, #1
 800be98:	e76f      	b.n	800bd7a <_dtoa_r+0x7fa>
 800be9a:	f04f 0800 	mov.w	r8, #0
 800be9e:	e7f6      	b.n	800be8e <_dtoa_r+0x90e>
 800bea0:	4698      	mov	r8, r3
 800bea2:	e7f4      	b.n	800be8e <_dtoa_r+0x90e>
 800bea4:	f43f af7d 	beq.w	800bda2 <_dtoa_r+0x822>
 800bea8:	4618      	mov	r0, r3
 800beaa:	301c      	adds	r0, #28
 800beac:	e772      	b.n	800bd94 <_dtoa_r+0x814>
 800beae:	9b02      	ldr	r3, [sp, #8]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	dc36      	bgt.n	800bf22 <_dtoa_r+0x9a2>
 800beb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800beb6:	2b02      	cmp	r3, #2
 800beb8:	dd33      	ble.n	800bf22 <_dtoa_r+0x9a2>
 800beba:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bebe:	f1bb 0f00 	cmp.w	fp, #0
 800bec2:	d10d      	bne.n	800bee0 <_dtoa_r+0x960>
 800bec4:	4621      	mov	r1, r4
 800bec6:	465b      	mov	r3, fp
 800bec8:	2205      	movs	r2, #5
 800beca:	4628      	mov	r0, r5
 800becc:	f000 fe2c 	bl	800cb28 <__multadd>
 800bed0:	4601      	mov	r1, r0
 800bed2:	4604      	mov	r4, r0
 800bed4:	4650      	mov	r0, sl
 800bed6:	f001 f889 	bl	800cfec <__mcmp>
 800beda:	2800      	cmp	r0, #0
 800bedc:	f73f adb6 	bgt.w	800ba4c <_dtoa_r+0x4cc>
 800bee0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bee2:	9f08      	ldr	r7, [sp, #32]
 800bee4:	ea6f 0903 	mvn.w	r9, r3
 800bee8:	f04f 0800 	mov.w	r8, #0
 800beec:	4621      	mov	r1, r4
 800beee:	4628      	mov	r0, r5
 800bef0:	f000 fdf8 	bl	800cae4 <_Bfree>
 800bef4:	2e00      	cmp	r6, #0
 800bef6:	f43f aea4 	beq.w	800bc42 <_dtoa_r+0x6c2>
 800befa:	f1b8 0f00 	cmp.w	r8, #0
 800befe:	d005      	beq.n	800bf0c <_dtoa_r+0x98c>
 800bf00:	45b0      	cmp	r8, r6
 800bf02:	d003      	beq.n	800bf0c <_dtoa_r+0x98c>
 800bf04:	4641      	mov	r1, r8
 800bf06:	4628      	mov	r0, r5
 800bf08:	f000 fdec 	bl	800cae4 <_Bfree>
 800bf0c:	4631      	mov	r1, r6
 800bf0e:	4628      	mov	r0, r5
 800bf10:	f000 fde8 	bl	800cae4 <_Bfree>
 800bf14:	e695      	b.n	800bc42 <_dtoa_r+0x6c2>
 800bf16:	2400      	movs	r4, #0
 800bf18:	4626      	mov	r6, r4
 800bf1a:	e7e1      	b.n	800bee0 <_dtoa_r+0x960>
 800bf1c:	46c1      	mov	r9, r8
 800bf1e:	4626      	mov	r6, r4
 800bf20:	e594      	b.n	800ba4c <_dtoa_r+0x4cc>
 800bf22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf24:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f000 80fc 	beq.w	800c126 <_dtoa_r+0xba6>
 800bf2e:	2f00      	cmp	r7, #0
 800bf30:	dd05      	ble.n	800bf3e <_dtoa_r+0x9be>
 800bf32:	4631      	mov	r1, r6
 800bf34:	463a      	mov	r2, r7
 800bf36:	4628      	mov	r0, r5
 800bf38:	f000 ffec 	bl	800cf14 <__lshift>
 800bf3c:	4606      	mov	r6, r0
 800bf3e:	f1b8 0f00 	cmp.w	r8, #0
 800bf42:	d05c      	beq.n	800bffe <_dtoa_r+0xa7e>
 800bf44:	4628      	mov	r0, r5
 800bf46:	6871      	ldr	r1, [r6, #4]
 800bf48:	f000 fd8c 	bl	800ca64 <_Balloc>
 800bf4c:	4607      	mov	r7, r0
 800bf4e:	b928      	cbnz	r0, 800bf5c <_dtoa_r+0x9dc>
 800bf50:	4602      	mov	r2, r0
 800bf52:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf56:	4b7e      	ldr	r3, [pc, #504]	; (800c150 <_dtoa_r+0xbd0>)
 800bf58:	f7ff bb26 	b.w	800b5a8 <_dtoa_r+0x28>
 800bf5c:	6932      	ldr	r2, [r6, #16]
 800bf5e:	f106 010c 	add.w	r1, r6, #12
 800bf62:	3202      	adds	r2, #2
 800bf64:	0092      	lsls	r2, r2, #2
 800bf66:	300c      	adds	r0, #12
 800bf68:	f7fd fb07 	bl	800957a <memcpy>
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	4639      	mov	r1, r7
 800bf70:	4628      	mov	r0, r5
 800bf72:	f000 ffcf 	bl	800cf14 <__lshift>
 800bf76:	46b0      	mov	r8, r6
 800bf78:	4606      	mov	r6, r0
 800bf7a:	9b08      	ldr	r3, [sp, #32]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	9302      	str	r3, [sp, #8]
 800bf80:	9b08      	ldr	r3, [sp, #32]
 800bf82:	445b      	add	r3, fp
 800bf84:	930a      	str	r3, [sp, #40]	; 0x28
 800bf86:	9b04      	ldr	r3, [sp, #16]
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf8e:	9b02      	ldr	r3, [sp, #8]
 800bf90:	4621      	mov	r1, r4
 800bf92:	4650      	mov	r0, sl
 800bf94:	f103 3bff 	add.w	fp, r3, #4294967295
 800bf98:	f7ff fa62 	bl	800b460 <quorem>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	4641      	mov	r1, r8
 800bfa0:	3330      	adds	r3, #48	; 0x30
 800bfa2:	9004      	str	r0, [sp, #16]
 800bfa4:	4650      	mov	r0, sl
 800bfa6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfa8:	f001 f820 	bl	800cfec <__mcmp>
 800bfac:	4632      	mov	r2, r6
 800bfae:	9006      	str	r0, [sp, #24]
 800bfb0:	4621      	mov	r1, r4
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	f001 f836 	bl	800d024 <__mdiff>
 800bfb8:	68c2      	ldr	r2, [r0, #12]
 800bfba:	4607      	mov	r7, r0
 800bfbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfbe:	bb02      	cbnz	r2, 800c002 <_dtoa_r+0xa82>
 800bfc0:	4601      	mov	r1, r0
 800bfc2:	4650      	mov	r0, sl
 800bfc4:	f001 f812 	bl	800cfec <__mcmp>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfcc:	4639      	mov	r1, r7
 800bfce:	4628      	mov	r0, r5
 800bfd0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800bfd4:	f000 fd86 	bl	800cae4 <_Bfree>
 800bfd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bfda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfdc:	9f02      	ldr	r7, [sp, #8]
 800bfde:	ea43 0102 	orr.w	r1, r3, r2
 800bfe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfe4:	430b      	orrs	r3, r1
 800bfe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfe8:	d10d      	bne.n	800c006 <_dtoa_r+0xa86>
 800bfea:	2b39      	cmp	r3, #57	; 0x39
 800bfec:	d027      	beq.n	800c03e <_dtoa_r+0xabe>
 800bfee:	9a06      	ldr	r2, [sp, #24]
 800bff0:	2a00      	cmp	r2, #0
 800bff2:	dd01      	ble.n	800bff8 <_dtoa_r+0xa78>
 800bff4:	9b04      	ldr	r3, [sp, #16]
 800bff6:	3331      	adds	r3, #49	; 0x31
 800bff8:	f88b 3000 	strb.w	r3, [fp]
 800bffc:	e776      	b.n	800beec <_dtoa_r+0x96c>
 800bffe:	4630      	mov	r0, r6
 800c000:	e7b9      	b.n	800bf76 <_dtoa_r+0x9f6>
 800c002:	2201      	movs	r2, #1
 800c004:	e7e2      	b.n	800bfcc <_dtoa_r+0xa4c>
 800c006:	9906      	ldr	r1, [sp, #24]
 800c008:	2900      	cmp	r1, #0
 800c00a:	db04      	blt.n	800c016 <_dtoa_r+0xa96>
 800c00c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c00e:	4301      	orrs	r1, r0
 800c010:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c012:	4301      	orrs	r1, r0
 800c014:	d120      	bne.n	800c058 <_dtoa_r+0xad8>
 800c016:	2a00      	cmp	r2, #0
 800c018:	ddee      	ble.n	800bff8 <_dtoa_r+0xa78>
 800c01a:	4651      	mov	r1, sl
 800c01c:	2201      	movs	r2, #1
 800c01e:	4628      	mov	r0, r5
 800c020:	9302      	str	r3, [sp, #8]
 800c022:	f000 ff77 	bl	800cf14 <__lshift>
 800c026:	4621      	mov	r1, r4
 800c028:	4682      	mov	sl, r0
 800c02a:	f000 ffdf 	bl	800cfec <__mcmp>
 800c02e:	2800      	cmp	r0, #0
 800c030:	9b02      	ldr	r3, [sp, #8]
 800c032:	dc02      	bgt.n	800c03a <_dtoa_r+0xaba>
 800c034:	d1e0      	bne.n	800bff8 <_dtoa_r+0xa78>
 800c036:	07da      	lsls	r2, r3, #31
 800c038:	d5de      	bpl.n	800bff8 <_dtoa_r+0xa78>
 800c03a:	2b39      	cmp	r3, #57	; 0x39
 800c03c:	d1da      	bne.n	800bff4 <_dtoa_r+0xa74>
 800c03e:	2339      	movs	r3, #57	; 0x39
 800c040:	f88b 3000 	strb.w	r3, [fp]
 800c044:	463b      	mov	r3, r7
 800c046:	461f      	mov	r7, r3
 800c048:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c04c:	3b01      	subs	r3, #1
 800c04e:	2a39      	cmp	r2, #57	; 0x39
 800c050:	d050      	beq.n	800c0f4 <_dtoa_r+0xb74>
 800c052:	3201      	adds	r2, #1
 800c054:	701a      	strb	r2, [r3, #0]
 800c056:	e749      	b.n	800beec <_dtoa_r+0x96c>
 800c058:	2a00      	cmp	r2, #0
 800c05a:	dd03      	ble.n	800c064 <_dtoa_r+0xae4>
 800c05c:	2b39      	cmp	r3, #57	; 0x39
 800c05e:	d0ee      	beq.n	800c03e <_dtoa_r+0xabe>
 800c060:	3301      	adds	r3, #1
 800c062:	e7c9      	b.n	800bff8 <_dtoa_r+0xa78>
 800c064:	9a02      	ldr	r2, [sp, #8]
 800c066:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c068:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c06c:	428a      	cmp	r2, r1
 800c06e:	d02a      	beq.n	800c0c6 <_dtoa_r+0xb46>
 800c070:	4651      	mov	r1, sl
 800c072:	2300      	movs	r3, #0
 800c074:	220a      	movs	r2, #10
 800c076:	4628      	mov	r0, r5
 800c078:	f000 fd56 	bl	800cb28 <__multadd>
 800c07c:	45b0      	cmp	r8, r6
 800c07e:	4682      	mov	sl, r0
 800c080:	f04f 0300 	mov.w	r3, #0
 800c084:	f04f 020a 	mov.w	r2, #10
 800c088:	4641      	mov	r1, r8
 800c08a:	4628      	mov	r0, r5
 800c08c:	d107      	bne.n	800c09e <_dtoa_r+0xb1e>
 800c08e:	f000 fd4b 	bl	800cb28 <__multadd>
 800c092:	4680      	mov	r8, r0
 800c094:	4606      	mov	r6, r0
 800c096:	9b02      	ldr	r3, [sp, #8]
 800c098:	3301      	adds	r3, #1
 800c09a:	9302      	str	r3, [sp, #8]
 800c09c:	e777      	b.n	800bf8e <_dtoa_r+0xa0e>
 800c09e:	f000 fd43 	bl	800cb28 <__multadd>
 800c0a2:	4631      	mov	r1, r6
 800c0a4:	4680      	mov	r8, r0
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	220a      	movs	r2, #10
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	f000 fd3c 	bl	800cb28 <__multadd>
 800c0b0:	4606      	mov	r6, r0
 800c0b2:	e7f0      	b.n	800c096 <_dtoa_r+0xb16>
 800c0b4:	f1bb 0f00 	cmp.w	fp, #0
 800c0b8:	bfcc      	ite	gt
 800c0ba:	465f      	movgt	r7, fp
 800c0bc:	2701      	movle	r7, #1
 800c0be:	f04f 0800 	mov.w	r8, #0
 800c0c2:	9a08      	ldr	r2, [sp, #32]
 800c0c4:	4417      	add	r7, r2
 800c0c6:	4651      	mov	r1, sl
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	9302      	str	r3, [sp, #8]
 800c0ce:	f000 ff21 	bl	800cf14 <__lshift>
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	4682      	mov	sl, r0
 800c0d6:	f000 ff89 	bl	800cfec <__mcmp>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	dcb2      	bgt.n	800c044 <_dtoa_r+0xac4>
 800c0de:	d102      	bne.n	800c0e6 <_dtoa_r+0xb66>
 800c0e0:	9b02      	ldr	r3, [sp, #8]
 800c0e2:	07db      	lsls	r3, r3, #31
 800c0e4:	d4ae      	bmi.n	800c044 <_dtoa_r+0xac4>
 800c0e6:	463b      	mov	r3, r7
 800c0e8:	461f      	mov	r7, r3
 800c0ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0ee:	2a30      	cmp	r2, #48	; 0x30
 800c0f0:	d0fa      	beq.n	800c0e8 <_dtoa_r+0xb68>
 800c0f2:	e6fb      	b.n	800beec <_dtoa_r+0x96c>
 800c0f4:	9a08      	ldr	r2, [sp, #32]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d1a5      	bne.n	800c046 <_dtoa_r+0xac6>
 800c0fa:	2331      	movs	r3, #49	; 0x31
 800c0fc:	f109 0901 	add.w	r9, r9, #1
 800c100:	7013      	strb	r3, [r2, #0]
 800c102:	e6f3      	b.n	800beec <_dtoa_r+0x96c>
 800c104:	4b13      	ldr	r3, [pc, #76]	; (800c154 <_dtoa_r+0xbd4>)
 800c106:	f7ff baa7 	b.w	800b658 <_dtoa_r+0xd8>
 800c10a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f47f aa80 	bne.w	800b612 <_dtoa_r+0x92>
 800c112:	4b11      	ldr	r3, [pc, #68]	; (800c158 <_dtoa_r+0xbd8>)
 800c114:	f7ff baa0 	b.w	800b658 <_dtoa_r+0xd8>
 800c118:	f1bb 0f00 	cmp.w	fp, #0
 800c11c:	dc03      	bgt.n	800c126 <_dtoa_r+0xba6>
 800c11e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c120:	2b02      	cmp	r3, #2
 800c122:	f73f aecc 	bgt.w	800bebe <_dtoa_r+0x93e>
 800c126:	9f08      	ldr	r7, [sp, #32]
 800c128:	4621      	mov	r1, r4
 800c12a:	4650      	mov	r0, sl
 800c12c:	f7ff f998 	bl	800b460 <quorem>
 800c130:	9a08      	ldr	r2, [sp, #32]
 800c132:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c136:	f807 3b01 	strb.w	r3, [r7], #1
 800c13a:	1aba      	subs	r2, r7, r2
 800c13c:	4593      	cmp	fp, r2
 800c13e:	ddb9      	ble.n	800c0b4 <_dtoa_r+0xb34>
 800c140:	4651      	mov	r1, sl
 800c142:	2300      	movs	r3, #0
 800c144:	220a      	movs	r2, #10
 800c146:	4628      	mov	r0, r5
 800c148:	f000 fcee 	bl	800cb28 <__multadd>
 800c14c:	4682      	mov	sl, r0
 800c14e:	e7eb      	b.n	800c128 <_dtoa_r+0xba8>
 800c150:	0800e361 	.word	0x0800e361
 800c154:	0800e0c0 	.word	0x0800e0c0
 800c158:	0800e2f5 	.word	0x0800e2f5

0800c15c <__sflush_r>:
 800c15c:	898a      	ldrh	r2, [r1, #12]
 800c15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c162:	4605      	mov	r5, r0
 800c164:	0710      	lsls	r0, r2, #28
 800c166:	460c      	mov	r4, r1
 800c168:	d458      	bmi.n	800c21c <__sflush_r+0xc0>
 800c16a:	684b      	ldr	r3, [r1, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	dc05      	bgt.n	800c17c <__sflush_r+0x20>
 800c170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c172:	2b00      	cmp	r3, #0
 800c174:	dc02      	bgt.n	800c17c <__sflush_r+0x20>
 800c176:	2000      	movs	r0, #0
 800c178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c17c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c17e:	2e00      	cmp	r6, #0
 800c180:	d0f9      	beq.n	800c176 <__sflush_r+0x1a>
 800c182:	2300      	movs	r3, #0
 800c184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c188:	682f      	ldr	r7, [r5, #0]
 800c18a:	602b      	str	r3, [r5, #0]
 800c18c:	d032      	beq.n	800c1f4 <__sflush_r+0x98>
 800c18e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c190:	89a3      	ldrh	r3, [r4, #12]
 800c192:	075a      	lsls	r2, r3, #29
 800c194:	d505      	bpl.n	800c1a2 <__sflush_r+0x46>
 800c196:	6863      	ldr	r3, [r4, #4]
 800c198:	1ac0      	subs	r0, r0, r3
 800c19a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c19c:	b10b      	cbz	r3, 800c1a2 <__sflush_r+0x46>
 800c19e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1a0:	1ac0      	subs	r0, r0, r3
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	6a21      	ldr	r1, [r4, #32]
 800c1ac:	47b0      	blx	r6
 800c1ae:	1c43      	adds	r3, r0, #1
 800c1b0:	89a3      	ldrh	r3, [r4, #12]
 800c1b2:	d106      	bne.n	800c1c2 <__sflush_r+0x66>
 800c1b4:	6829      	ldr	r1, [r5, #0]
 800c1b6:	291d      	cmp	r1, #29
 800c1b8:	d82c      	bhi.n	800c214 <__sflush_r+0xb8>
 800c1ba:	4a2a      	ldr	r2, [pc, #168]	; (800c264 <__sflush_r+0x108>)
 800c1bc:	40ca      	lsrs	r2, r1
 800c1be:	07d6      	lsls	r6, r2, #31
 800c1c0:	d528      	bpl.n	800c214 <__sflush_r+0xb8>
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	6062      	str	r2, [r4, #4]
 800c1c6:	6922      	ldr	r2, [r4, #16]
 800c1c8:	04d9      	lsls	r1, r3, #19
 800c1ca:	6022      	str	r2, [r4, #0]
 800c1cc:	d504      	bpl.n	800c1d8 <__sflush_r+0x7c>
 800c1ce:	1c42      	adds	r2, r0, #1
 800c1d0:	d101      	bne.n	800c1d6 <__sflush_r+0x7a>
 800c1d2:	682b      	ldr	r3, [r5, #0]
 800c1d4:	b903      	cbnz	r3, 800c1d8 <__sflush_r+0x7c>
 800c1d6:	6560      	str	r0, [r4, #84]	; 0x54
 800c1d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1da:	602f      	str	r7, [r5, #0]
 800c1dc:	2900      	cmp	r1, #0
 800c1de:	d0ca      	beq.n	800c176 <__sflush_r+0x1a>
 800c1e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1e4:	4299      	cmp	r1, r3
 800c1e6:	d002      	beq.n	800c1ee <__sflush_r+0x92>
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	f001 f901 	bl	800d3f0 <_free_r>
 800c1ee:	2000      	movs	r0, #0
 800c1f0:	6360      	str	r0, [r4, #52]	; 0x34
 800c1f2:	e7c1      	b.n	800c178 <__sflush_r+0x1c>
 800c1f4:	6a21      	ldr	r1, [r4, #32]
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	47b0      	blx	r6
 800c1fc:	1c41      	adds	r1, r0, #1
 800c1fe:	d1c7      	bne.n	800c190 <__sflush_r+0x34>
 800c200:	682b      	ldr	r3, [r5, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d0c4      	beq.n	800c190 <__sflush_r+0x34>
 800c206:	2b1d      	cmp	r3, #29
 800c208:	d001      	beq.n	800c20e <__sflush_r+0xb2>
 800c20a:	2b16      	cmp	r3, #22
 800c20c:	d101      	bne.n	800c212 <__sflush_r+0xb6>
 800c20e:	602f      	str	r7, [r5, #0]
 800c210:	e7b1      	b.n	800c176 <__sflush_r+0x1a>
 800c212:	89a3      	ldrh	r3, [r4, #12]
 800c214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c218:	81a3      	strh	r3, [r4, #12]
 800c21a:	e7ad      	b.n	800c178 <__sflush_r+0x1c>
 800c21c:	690f      	ldr	r7, [r1, #16]
 800c21e:	2f00      	cmp	r7, #0
 800c220:	d0a9      	beq.n	800c176 <__sflush_r+0x1a>
 800c222:	0793      	lsls	r3, r2, #30
 800c224:	bf18      	it	ne
 800c226:	2300      	movne	r3, #0
 800c228:	680e      	ldr	r6, [r1, #0]
 800c22a:	bf08      	it	eq
 800c22c:	694b      	ldreq	r3, [r1, #20]
 800c22e:	eba6 0807 	sub.w	r8, r6, r7
 800c232:	600f      	str	r7, [r1, #0]
 800c234:	608b      	str	r3, [r1, #8]
 800c236:	f1b8 0f00 	cmp.w	r8, #0
 800c23a:	dd9c      	ble.n	800c176 <__sflush_r+0x1a>
 800c23c:	4643      	mov	r3, r8
 800c23e:	463a      	mov	r2, r7
 800c240:	4628      	mov	r0, r5
 800c242:	6a21      	ldr	r1, [r4, #32]
 800c244:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c246:	47b0      	blx	r6
 800c248:	2800      	cmp	r0, #0
 800c24a:	dc06      	bgt.n	800c25a <__sflush_r+0xfe>
 800c24c:	89a3      	ldrh	r3, [r4, #12]
 800c24e:	f04f 30ff 	mov.w	r0, #4294967295
 800c252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c256:	81a3      	strh	r3, [r4, #12]
 800c258:	e78e      	b.n	800c178 <__sflush_r+0x1c>
 800c25a:	4407      	add	r7, r0
 800c25c:	eba8 0800 	sub.w	r8, r8, r0
 800c260:	e7e9      	b.n	800c236 <__sflush_r+0xda>
 800c262:	bf00      	nop
 800c264:	20400001 	.word	0x20400001

0800c268 <_fflush_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	690b      	ldr	r3, [r1, #16]
 800c26c:	4605      	mov	r5, r0
 800c26e:	460c      	mov	r4, r1
 800c270:	b913      	cbnz	r3, 800c278 <_fflush_r+0x10>
 800c272:	2500      	movs	r5, #0
 800c274:	4628      	mov	r0, r5
 800c276:	bd38      	pop	{r3, r4, r5, pc}
 800c278:	b118      	cbz	r0, 800c282 <_fflush_r+0x1a>
 800c27a:	6983      	ldr	r3, [r0, #24]
 800c27c:	b90b      	cbnz	r3, 800c282 <_fflush_r+0x1a>
 800c27e:	f7fd f8b7 	bl	80093f0 <__sinit>
 800c282:	4b14      	ldr	r3, [pc, #80]	; (800c2d4 <_fflush_r+0x6c>)
 800c284:	429c      	cmp	r4, r3
 800c286:	d11b      	bne.n	800c2c0 <_fflush_r+0x58>
 800c288:	686c      	ldr	r4, [r5, #4]
 800c28a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d0ef      	beq.n	800c272 <_fflush_r+0xa>
 800c292:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c294:	07d0      	lsls	r0, r2, #31
 800c296:	d404      	bmi.n	800c2a2 <_fflush_r+0x3a>
 800c298:	0599      	lsls	r1, r3, #22
 800c29a:	d402      	bmi.n	800c2a2 <_fflush_r+0x3a>
 800c29c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c29e:	f7fd f96a 	bl	8009576 <__retarget_lock_acquire_recursive>
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	f7ff ff59 	bl	800c15c <__sflush_r>
 800c2aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	07da      	lsls	r2, r3, #31
 800c2b0:	d4e0      	bmi.n	800c274 <_fflush_r+0xc>
 800c2b2:	89a3      	ldrh	r3, [r4, #12]
 800c2b4:	059b      	lsls	r3, r3, #22
 800c2b6:	d4dd      	bmi.n	800c274 <_fflush_r+0xc>
 800c2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2ba:	f7fd f95d 	bl	8009578 <__retarget_lock_release_recursive>
 800c2be:	e7d9      	b.n	800c274 <_fflush_r+0xc>
 800c2c0:	4b05      	ldr	r3, [pc, #20]	; (800c2d8 <_fflush_r+0x70>)
 800c2c2:	429c      	cmp	r4, r3
 800c2c4:	d101      	bne.n	800c2ca <_fflush_r+0x62>
 800c2c6:	68ac      	ldr	r4, [r5, #8]
 800c2c8:	e7df      	b.n	800c28a <_fflush_r+0x22>
 800c2ca:	4b04      	ldr	r3, [pc, #16]	; (800c2dc <_fflush_r+0x74>)
 800c2cc:	429c      	cmp	r4, r3
 800c2ce:	bf08      	it	eq
 800c2d0:	68ec      	ldreq	r4, [r5, #12]
 800c2d2:	e7da      	b.n	800c28a <_fflush_r+0x22>
 800c2d4:	0800e06c 	.word	0x0800e06c
 800c2d8:	0800e08c 	.word	0x0800e08c
 800c2dc:	0800e04c 	.word	0x0800e04c

0800c2e0 <fiprintf>:
 800c2e0:	b40e      	push	{r1, r2, r3}
 800c2e2:	b503      	push	{r0, r1, lr}
 800c2e4:	4601      	mov	r1, r0
 800c2e6:	ab03      	add	r3, sp, #12
 800c2e8:	4805      	ldr	r0, [pc, #20]	; (800c300 <fiprintf+0x20>)
 800c2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ee:	6800      	ldr	r0, [r0, #0]
 800c2f0:	9301      	str	r3, [sp, #4]
 800c2f2:	f001 fa4d 	bl	800d790 <_vfiprintf_r>
 800c2f6:	b002      	add	sp, #8
 800c2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2fc:	b003      	add	sp, #12
 800c2fe:	4770      	bx	lr
 800c300:	2000000c 	.word	0x2000000c

0800c304 <rshift>:
 800c304:	6903      	ldr	r3, [r0, #16]
 800c306:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c30a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c30e:	f100 0414 	add.w	r4, r0, #20
 800c312:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c316:	dd46      	ble.n	800c3a6 <rshift+0xa2>
 800c318:	f011 011f 	ands.w	r1, r1, #31
 800c31c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c320:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c324:	d10c      	bne.n	800c340 <rshift+0x3c>
 800c326:	4629      	mov	r1, r5
 800c328:	f100 0710 	add.w	r7, r0, #16
 800c32c:	42b1      	cmp	r1, r6
 800c32e:	d335      	bcc.n	800c39c <rshift+0x98>
 800c330:	1a9b      	subs	r3, r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	1eea      	subs	r2, r5, #3
 800c336:	4296      	cmp	r6, r2
 800c338:	bf38      	it	cc
 800c33a:	2300      	movcc	r3, #0
 800c33c:	4423      	add	r3, r4
 800c33e:	e015      	b.n	800c36c <rshift+0x68>
 800c340:	46a1      	mov	r9, r4
 800c342:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c346:	f1c1 0820 	rsb	r8, r1, #32
 800c34a:	40cf      	lsrs	r7, r1
 800c34c:	f105 0e04 	add.w	lr, r5, #4
 800c350:	4576      	cmp	r6, lr
 800c352:	46f4      	mov	ip, lr
 800c354:	d816      	bhi.n	800c384 <rshift+0x80>
 800c356:	1a9b      	subs	r3, r3, r2
 800c358:	009a      	lsls	r2, r3, #2
 800c35a:	3a04      	subs	r2, #4
 800c35c:	3501      	adds	r5, #1
 800c35e:	42ae      	cmp	r6, r5
 800c360:	bf38      	it	cc
 800c362:	2200      	movcc	r2, #0
 800c364:	18a3      	adds	r3, r4, r2
 800c366:	50a7      	str	r7, [r4, r2]
 800c368:	b107      	cbz	r7, 800c36c <rshift+0x68>
 800c36a:	3304      	adds	r3, #4
 800c36c:	42a3      	cmp	r3, r4
 800c36e:	eba3 0204 	sub.w	r2, r3, r4
 800c372:	bf08      	it	eq
 800c374:	2300      	moveq	r3, #0
 800c376:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c37a:	6102      	str	r2, [r0, #16]
 800c37c:	bf08      	it	eq
 800c37e:	6143      	streq	r3, [r0, #20]
 800c380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c384:	f8dc c000 	ldr.w	ip, [ip]
 800c388:	fa0c fc08 	lsl.w	ip, ip, r8
 800c38c:	ea4c 0707 	orr.w	r7, ip, r7
 800c390:	f849 7b04 	str.w	r7, [r9], #4
 800c394:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c398:	40cf      	lsrs	r7, r1
 800c39a:	e7d9      	b.n	800c350 <rshift+0x4c>
 800c39c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c3a0:	f847 cf04 	str.w	ip, [r7, #4]!
 800c3a4:	e7c2      	b.n	800c32c <rshift+0x28>
 800c3a6:	4623      	mov	r3, r4
 800c3a8:	e7e0      	b.n	800c36c <rshift+0x68>

0800c3aa <__hexdig_fun>:
 800c3aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c3ae:	2b09      	cmp	r3, #9
 800c3b0:	d802      	bhi.n	800c3b8 <__hexdig_fun+0xe>
 800c3b2:	3820      	subs	r0, #32
 800c3b4:	b2c0      	uxtb	r0, r0
 800c3b6:	4770      	bx	lr
 800c3b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c3bc:	2b05      	cmp	r3, #5
 800c3be:	d801      	bhi.n	800c3c4 <__hexdig_fun+0x1a>
 800c3c0:	3847      	subs	r0, #71	; 0x47
 800c3c2:	e7f7      	b.n	800c3b4 <__hexdig_fun+0xa>
 800c3c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c3c8:	2b05      	cmp	r3, #5
 800c3ca:	d801      	bhi.n	800c3d0 <__hexdig_fun+0x26>
 800c3cc:	3827      	subs	r0, #39	; 0x27
 800c3ce:	e7f1      	b.n	800c3b4 <__hexdig_fun+0xa>
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	4770      	bx	lr

0800c3d4 <__gethex>:
 800c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d8:	b08b      	sub	sp, #44	; 0x2c
 800c3da:	9306      	str	r3, [sp, #24]
 800c3dc:	4bb9      	ldr	r3, [pc, #740]	; (800c6c4 <__gethex+0x2f0>)
 800c3de:	9002      	str	r0, [sp, #8]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	468b      	mov	fp, r1
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	4690      	mov	r8, r2
 800c3e8:	9303      	str	r3, [sp, #12]
 800c3ea:	f7f3 feb1 	bl	8000150 <strlen>
 800c3ee:	4682      	mov	sl, r0
 800c3f0:	9b03      	ldr	r3, [sp, #12]
 800c3f2:	f8db 2000 	ldr.w	r2, [fp]
 800c3f6:	4403      	add	r3, r0
 800c3f8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c3fc:	9307      	str	r3, [sp, #28]
 800c3fe:	1c93      	adds	r3, r2, #2
 800c400:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c404:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c408:	32fe      	adds	r2, #254	; 0xfe
 800c40a:	18d1      	adds	r1, r2, r3
 800c40c:	461f      	mov	r7, r3
 800c40e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c412:	9101      	str	r1, [sp, #4]
 800c414:	2830      	cmp	r0, #48	; 0x30
 800c416:	d0f8      	beq.n	800c40a <__gethex+0x36>
 800c418:	f7ff ffc7 	bl	800c3aa <__hexdig_fun>
 800c41c:	4604      	mov	r4, r0
 800c41e:	2800      	cmp	r0, #0
 800c420:	d13a      	bne.n	800c498 <__gethex+0xc4>
 800c422:	4652      	mov	r2, sl
 800c424:	4638      	mov	r0, r7
 800c426:	9903      	ldr	r1, [sp, #12]
 800c428:	f001 fafa 	bl	800da20 <strncmp>
 800c42c:	4605      	mov	r5, r0
 800c42e:	2800      	cmp	r0, #0
 800c430:	d166      	bne.n	800c500 <__gethex+0x12c>
 800c432:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c436:	eb07 060a 	add.w	r6, r7, sl
 800c43a:	f7ff ffb6 	bl	800c3aa <__hexdig_fun>
 800c43e:	2800      	cmp	r0, #0
 800c440:	d060      	beq.n	800c504 <__gethex+0x130>
 800c442:	4633      	mov	r3, r6
 800c444:	7818      	ldrb	r0, [r3, #0]
 800c446:	461f      	mov	r7, r3
 800c448:	2830      	cmp	r0, #48	; 0x30
 800c44a:	f103 0301 	add.w	r3, r3, #1
 800c44e:	d0f9      	beq.n	800c444 <__gethex+0x70>
 800c450:	f7ff ffab 	bl	800c3aa <__hexdig_fun>
 800c454:	2301      	movs	r3, #1
 800c456:	fab0 f480 	clz	r4, r0
 800c45a:	4635      	mov	r5, r6
 800c45c:	0964      	lsrs	r4, r4, #5
 800c45e:	9301      	str	r3, [sp, #4]
 800c460:	463a      	mov	r2, r7
 800c462:	4616      	mov	r6, r2
 800c464:	7830      	ldrb	r0, [r6, #0]
 800c466:	3201      	adds	r2, #1
 800c468:	f7ff ff9f 	bl	800c3aa <__hexdig_fun>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d1f8      	bne.n	800c462 <__gethex+0x8e>
 800c470:	4652      	mov	r2, sl
 800c472:	4630      	mov	r0, r6
 800c474:	9903      	ldr	r1, [sp, #12]
 800c476:	f001 fad3 	bl	800da20 <strncmp>
 800c47a:	b980      	cbnz	r0, 800c49e <__gethex+0xca>
 800c47c:	b94d      	cbnz	r5, 800c492 <__gethex+0xbe>
 800c47e:	eb06 050a 	add.w	r5, r6, sl
 800c482:	462a      	mov	r2, r5
 800c484:	4616      	mov	r6, r2
 800c486:	7830      	ldrb	r0, [r6, #0]
 800c488:	3201      	adds	r2, #1
 800c48a:	f7ff ff8e 	bl	800c3aa <__hexdig_fun>
 800c48e:	2800      	cmp	r0, #0
 800c490:	d1f8      	bne.n	800c484 <__gethex+0xb0>
 800c492:	1bad      	subs	r5, r5, r6
 800c494:	00ad      	lsls	r5, r5, #2
 800c496:	e004      	b.n	800c4a2 <__gethex+0xce>
 800c498:	2400      	movs	r4, #0
 800c49a:	4625      	mov	r5, r4
 800c49c:	e7e0      	b.n	800c460 <__gethex+0x8c>
 800c49e:	2d00      	cmp	r5, #0
 800c4a0:	d1f7      	bne.n	800c492 <__gethex+0xbe>
 800c4a2:	7833      	ldrb	r3, [r6, #0]
 800c4a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c4a8:	2b50      	cmp	r3, #80	; 0x50
 800c4aa:	d139      	bne.n	800c520 <__gethex+0x14c>
 800c4ac:	7873      	ldrb	r3, [r6, #1]
 800c4ae:	2b2b      	cmp	r3, #43	; 0x2b
 800c4b0:	d02a      	beq.n	800c508 <__gethex+0x134>
 800c4b2:	2b2d      	cmp	r3, #45	; 0x2d
 800c4b4:	d02c      	beq.n	800c510 <__gethex+0x13c>
 800c4b6:	f04f 0900 	mov.w	r9, #0
 800c4ba:	1c71      	adds	r1, r6, #1
 800c4bc:	7808      	ldrb	r0, [r1, #0]
 800c4be:	f7ff ff74 	bl	800c3aa <__hexdig_fun>
 800c4c2:	1e43      	subs	r3, r0, #1
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	2b18      	cmp	r3, #24
 800c4c8:	d82a      	bhi.n	800c520 <__gethex+0x14c>
 800c4ca:	f1a0 0210 	sub.w	r2, r0, #16
 800c4ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c4d2:	f7ff ff6a 	bl	800c3aa <__hexdig_fun>
 800c4d6:	1e43      	subs	r3, r0, #1
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b18      	cmp	r3, #24
 800c4dc:	d91b      	bls.n	800c516 <__gethex+0x142>
 800c4de:	f1b9 0f00 	cmp.w	r9, #0
 800c4e2:	d000      	beq.n	800c4e6 <__gethex+0x112>
 800c4e4:	4252      	negs	r2, r2
 800c4e6:	4415      	add	r5, r2
 800c4e8:	f8cb 1000 	str.w	r1, [fp]
 800c4ec:	b1d4      	cbz	r4, 800c524 <__gethex+0x150>
 800c4ee:	9b01      	ldr	r3, [sp, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	bf14      	ite	ne
 800c4f4:	2700      	movne	r7, #0
 800c4f6:	2706      	moveq	r7, #6
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	b00b      	add	sp, #44	; 0x2c
 800c4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c500:	463e      	mov	r6, r7
 800c502:	4625      	mov	r5, r4
 800c504:	2401      	movs	r4, #1
 800c506:	e7cc      	b.n	800c4a2 <__gethex+0xce>
 800c508:	f04f 0900 	mov.w	r9, #0
 800c50c:	1cb1      	adds	r1, r6, #2
 800c50e:	e7d5      	b.n	800c4bc <__gethex+0xe8>
 800c510:	f04f 0901 	mov.w	r9, #1
 800c514:	e7fa      	b.n	800c50c <__gethex+0x138>
 800c516:	230a      	movs	r3, #10
 800c518:	fb03 0202 	mla	r2, r3, r2, r0
 800c51c:	3a10      	subs	r2, #16
 800c51e:	e7d6      	b.n	800c4ce <__gethex+0xfa>
 800c520:	4631      	mov	r1, r6
 800c522:	e7e1      	b.n	800c4e8 <__gethex+0x114>
 800c524:	4621      	mov	r1, r4
 800c526:	1bf3      	subs	r3, r6, r7
 800c528:	3b01      	subs	r3, #1
 800c52a:	2b07      	cmp	r3, #7
 800c52c:	dc0a      	bgt.n	800c544 <__gethex+0x170>
 800c52e:	9802      	ldr	r0, [sp, #8]
 800c530:	f000 fa98 	bl	800ca64 <_Balloc>
 800c534:	4604      	mov	r4, r0
 800c536:	b940      	cbnz	r0, 800c54a <__gethex+0x176>
 800c538:	4602      	mov	r2, r0
 800c53a:	21de      	movs	r1, #222	; 0xde
 800c53c:	4b62      	ldr	r3, [pc, #392]	; (800c6c8 <__gethex+0x2f4>)
 800c53e:	4863      	ldr	r0, [pc, #396]	; (800c6cc <__gethex+0x2f8>)
 800c540:	f7fe ff60 	bl	800b404 <__assert_func>
 800c544:	3101      	adds	r1, #1
 800c546:	105b      	asrs	r3, r3, #1
 800c548:	e7ef      	b.n	800c52a <__gethex+0x156>
 800c54a:	f04f 0b00 	mov.w	fp, #0
 800c54e:	f100 0914 	add.w	r9, r0, #20
 800c552:	f1ca 0301 	rsb	r3, sl, #1
 800c556:	f8cd 9010 	str.w	r9, [sp, #16]
 800c55a:	f8cd b004 	str.w	fp, [sp, #4]
 800c55e:	9308      	str	r3, [sp, #32]
 800c560:	42b7      	cmp	r7, r6
 800c562:	d33f      	bcc.n	800c5e4 <__gethex+0x210>
 800c564:	9f04      	ldr	r7, [sp, #16]
 800c566:	9b01      	ldr	r3, [sp, #4]
 800c568:	f847 3b04 	str.w	r3, [r7], #4
 800c56c:	eba7 0709 	sub.w	r7, r7, r9
 800c570:	10bf      	asrs	r7, r7, #2
 800c572:	6127      	str	r7, [r4, #16]
 800c574:	4618      	mov	r0, r3
 800c576:	f000 fb6b 	bl	800cc50 <__hi0bits>
 800c57a:	017f      	lsls	r7, r7, #5
 800c57c:	f8d8 6000 	ldr.w	r6, [r8]
 800c580:	1a3f      	subs	r7, r7, r0
 800c582:	42b7      	cmp	r7, r6
 800c584:	dd62      	ble.n	800c64c <__gethex+0x278>
 800c586:	1bbf      	subs	r7, r7, r6
 800c588:	4639      	mov	r1, r7
 800c58a:	4620      	mov	r0, r4
 800c58c:	f000 ff01 	bl	800d392 <__any_on>
 800c590:	4682      	mov	sl, r0
 800c592:	b1a8      	cbz	r0, 800c5c0 <__gethex+0x1ec>
 800c594:	f04f 0a01 	mov.w	sl, #1
 800c598:	1e7b      	subs	r3, r7, #1
 800c59a:	1159      	asrs	r1, r3, #5
 800c59c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c5a0:	f003 021f 	and.w	r2, r3, #31
 800c5a4:	fa0a f202 	lsl.w	r2, sl, r2
 800c5a8:	420a      	tst	r2, r1
 800c5aa:	d009      	beq.n	800c5c0 <__gethex+0x1ec>
 800c5ac:	4553      	cmp	r3, sl
 800c5ae:	dd05      	ble.n	800c5bc <__gethex+0x1e8>
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	1eb9      	subs	r1, r7, #2
 800c5b4:	f000 feed 	bl	800d392 <__any_on>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d144      	bne.n	800c646 <__gethex+0x272>
 800c5bc:	f04f 0a02 	mov.w	sl, #2
 800c5c0:	4639      	mov	r1, r7
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f7ff fe9e 	bl	800c304 <rshift>
 800c5c8:	443d      	add	r5, r7
 800c5ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5ce:	42ab      	cmp	r3, r5
 800c5d0:	da4a      	bge.n	800c668 <__gethex+0x294>
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	9802      	ldr	r0, [sp, #8]
 800c5d6:	f000 fa85 	bl	800cae4 <_Bfree>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c5de:	27a3      	movs	r7, #163	; 0xa3
 800c5e0:	6013      	str	r3, [r2, #0]
 800c5e2:	e789      	b.n	800c4f8 <__gethex+0x124>
 800c5e4:	1e73      	subs	r3, r6, #1
 800c5e6:	9a07      	ldr	r2, [sp, #28]
 800c5e8:	9305      	str	r3, [sp, #20]
 800c5ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d019      	beq.n	800c626 <__gethex+0x252>
 800c5f2:	f1bb 0f20 	cmp.w	fp, #32
 800c5f6:	d107      	bne.n	800c608 <__gethex+0x234>
 800c5f8:	9b04      	ldr	r3, [sp, #16]
 800c5fa:	9a01      	ldr	r2, [sp, #4]
 800c5fc:	f843 2b04 	str.w	r2, [r3], #4
 800c600:	9304      	str	r3, [sp, #16]
 800c602:	2300      	movs	r3, #0
 800c604:	469b      	mov	fp, r3
 800c606:	9301      	str	r3, [sp, #4]
 800c608:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c60c:	f7ff fecd 	bl	800c3aa <__hexdig_fun>
 800c610:	9b01      	ldr	r3, [sp, #4]
 800c612:	f000 000f 	and.w	r0, r0, #15
 800c616:	fa00 f00b 	lsl.w	r0, r0, fp
 800c61a:	4303      	orrs	r3, r0
 800c61c:	9301      	str	r3, [sp, #4]
 800c61e:	f10b 0b04 	add.w	fp, fp, #4
 800c622:	9b05      	ldr	r3, [sp, #20]
 800c624:	e00d      	b.n	800c642 <__gethex+0x26e>
 800c626:	9b05      	ldr	r3, [sp, #20]
 800c628:	9a08      	ldr	r2, [sp, #32]
 800c62a:	4413      	add	r3, r2
 800c62c:	42bb      	cmp	r3, r7
 800c62e:	d3e0      	bcc.n	800c5f2 <__gethex+0x21e>
 800c630:	4618      	mov	r0, r3
 800c632:	4652      	mov	r2, sl
 800c634:	9903      	ldr	r1, [sp, #12]
 800c636:	9309      	str	r3, [sp, #36]	; 0x24
 800c638:	f001 f9f2 	bl	800da20 <strncmp>
 800c63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c63e:	2800      	cmp	r0, #0
 800c640:	d1d7      	bne.n	800c5f2 <__gethex+0x21e>
 800c642:	461e      	mov	r6, r3
 800c644:	e78c      	b.n	800c560 <__gethex+0x18c>
 800c646:	f04f 0a03 	mov.w	sl, #3
 800c64a:	e7b9      	b.n	800c5c0 <__gethex+0x1ec>
 800c64c:	da09      	bge.n	800c662 <__gethex+0x28e>
 800c64e:	1bf7      	subs	r7, r6, r7
 800c650:	4621      	mov	r1, r4
 800c652:	463a      	mov	r2, r7
 800c654:	9802      	ldr	r0, [sp, #8]
 800c656:	f000 fc5d 	bl	800cf14 <__lshift>
 800c65a:	4604      	mov	r4, r0
 800c65c:	1bed      	subs	r5, r5, r7
 800c65e:	f100 0914 	add.w	r9, r0, #20
 800c662:	f04f 0a00 	mov.w	sl, #0
 800c666:	e7b0      	b.n	800c5ca <__gethex+0x1f6>
 800c668:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c66c:	42a8      	cmp	r0, r5
 800c66e:	dd71      	ble.n	800c754 <__gethex+0x380>
 800c670:	1b45      	subs	r5, r0, r5
 800c672:	42ae      	cmp	r6, r5
 800c674:	dc34      	bgt.n	800c6e0 <__gethex+0x30c>
 800c676:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d028      	beq.n	800c6d0 <__gethex+0x2fc>
 800c67e:	2b03      	cmp	r3, #3
 800c680:	d02a      	beq.n	800c6d8 <__gethex+0x304>
 800c682:	2b01      	cmp	r3, #1
 800c684:	d115      	bne.n	800c6b2 <__gethex+0x2de>
 800c686:	42ae      	cmp	r6, r5
 800c688:	d113      	bne.n	800c6b2 <__gethex+0x2de>
 800c68a:	2e01      	cmp	r6, #1
 800c68c:	d10b      	bne.n	800c6a6 <__gethex+0x2d2>
 800c68e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c692:	9a06      	ldr	r2, [sp, #24]
 800c694:	2762      	movs	r7, #98	; 0x62
 800c696:	6013      	str	r3, [r2, #0]
 800c698:	2301      	movs	r3, #1
 800c69a:	6123      	str	r3, [r4, #16]
 800c69c:	f8c9 3000 	str.w	r3, [r9]
 800c6a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6a2:	601c      	str	r4, [r3, #0]
 800c6a4:	e728      	b.n	800c4f8 <__gethex+0x124>
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	1e71      	subs	r1, r6, #1
 800c6aa:	f000 fe72 	bl	800d392 <__any_on>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d1ed      	bne.n	800c68e <__gethex+0x2ba>
 800c6b2:	4621      	mov	r1, r4
 800c6b4:	9802      	ldr	r0, [sp, #8]
 800c6b6:	f000 fa15 	bl	800cae4 <_Bfree>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6be:	2750      	movs	r7, #80	; 0x50
 800c6c0:	6013      	str	r3, [r2, #0]
 800c6c2:	e719      	b.n	800c4f8 <__gethex+0x124>
 800c6c4:	0800e3dc 	.word	0x0800e3dc
 800c6c8:	0800e361 	.word	0x0800e361
 800c6cc:	0800e372 	.word	0x0800e372
 800c6d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d1ed      	bne.n	800c6b2 <__gethex+0x2de>
 800c6d6:	e7da      	b.n	800c68e <__gethex+0x2ba>
 800c6d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1d7      	bne.n	800c68e <__gethex+0x2ba>
 800c6de:	e7e8      	b.n	800c6b2 <__gethex+0x2de>
 800c6e0:	1e6f      	subs	r7, r5, #1
 800c6e2:	f1ba 0f00 	cmp.w	sl, #0
 800c6e6:	d132      	bne.n	800c74e <__gethex+0x37a>
 800c6e8:	b127      	cbz	r7, 800c6f4 <__gethex+0x320>
 800c6ea:	4639      	mov	r1, r7
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f000 fe50 	bl	800d392 <__any_on>
 800c6f2:	4682      	mov	sl, r0
 800c6f4:	2101      	movs	r1, #1
 800c6f6:	117b      	asrs	r3, r7, #5
 800c6f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c6fc:	f007 071f 	and.w	r7, r7, #31
 800c700:	fa01 f707 	lsl.w	r7, r1, r7
 800c704:	421f      	tst	r7, r3
 800c706:	f04f 0702 	mov.w	r7, #2
 800c70a:	4629      	mov	r1, r5
 800c70c:	4620      	mov	r0, r4
 800c70e:	bf18      	it	ne
 800c710:	f04a 0a02 	orrne.w	sl, sl, #2
 800c714:	1b76      	subs	r6, r6, r5
 800c716:	f7ff fdf5 	bl	800c304 <rshift>
 800c71a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c71e:	f1ba 0f00 	cmp.w	sl, #0
 800c722:	d048      	beq.n	800c7b6 <__gethex+0x3e2>
 800c724:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d015      	beq.n	800c758 <__gethex+0x384>
 800c72c:	2b03      	cmp	r3, #3
 800c72e:	d017      	beq.n	800c760 <__gethex+0x38c>
 800c730:	2b01      	cmp	r3, #1
 800c732:	d109      	bne.n	800c748 <__gethex+0x374>
 800c734:	f01a 0f02 	tst.w	sl, #2
 800c738:	d006      	beq.n	800c748 <__gethex+0x374>
 800c73a:	f8d9 0000 	ldr.w	r0, [r9]
 800c73e:	ea4a 0a00 	orr.w	sl, sl, r0
 800c742:	f01a 0f01 	tst.w	sl, #1
 800c746:	d10e      	bne.n	800c766 <__gethex+0x392>
 800c748:	f047 0710 	orr.w	r7, r7, #16
 800c74c:	e033      	b.n	800c7b6 <__gethex+0x3e2>
 800c74e:	f04f 0a01 	mov.w	sl, #1
 800c752:	e7cf      	b.n	800c6f4 <__gethex+0x320>
 800c754:	2701      	movs	r7, #1
 800c756:	e7e2      	b.n	800c71e <__gethex+0x34a>
 800c758:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c75a:	f1c3 0301 	rsb	r3, r3, #1
 800c75e:	9315      	str	r3, [sp, #84]	; 0x54
 800c760:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c762:	2b00      	cmp	r3, #0
 800c764:	d0f0      	beq.n	800c748 <__gethex+0x374>
 800c766:	f04f 0c00 	mov.w	ip, #0
 800c76a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c76e:	f104 0314 	add.w	r3, r4, #20
 800c772:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c776:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c77a:	4618      	mov	r0, r3
 800c77c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c780:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c784:	d01c      	beq.n	800c7c0 <__gethex+0x3ec>
 800c786:	3201      	adds	r2, #1
 800c788:	6002      	str	r2, [r0, #0]
 800c78a:	2f02      	cmp	r7, #2
 800c78c:	f104 0314 	add.w	r3, r4, #20
 800c790:	d13d      	bne.n	800c80e <__gethex+0x43a>
 800c792:	f8d8 2000 	ldr.w	r2, [r8]
 800c796:	3a01      	subs	r2, #1
 800c798:	42b2      	cmp	r2, r6
 800c79a:	d10a      	bne.n	800c7b2 <__gethex+0x3de>
 800c79c:	2201      	movs	r2, #1
 800c79e:	1171      	asrs	r1, r6, #5
 800c7a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c7a4:	f006 061f 	and.w	r6, r6, #31
 800c7a8:	fa02 f606 	lsl.w	r6, r2, r6
 800c7ac:	421e      	tst	r6, r3
 800c7ae:	bf18      	it	ne
 800c7b0:	4617      	movne	r7, r2
 800c7b2:	f047 0720 	orr.w	r7, r7, #32
 800c7b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7b8:	601c      	str	r4, [r3, #0]
 800c7ba:	9b06      	ldr	r3, [sp, #24]
 800c7bc:	601d      	str	r5, [r3, #0]
 800c7be:	e69b      	b.n	800c4f8 <__gethex+0x124>
 800c7c0:	4299      	cmp	r1, r3
 800c7c2:	f843 cc04 	str.w	ip, [r3, #-4]
 800c7c6:	d8d8      	bhi.n	800c77a <__gethex+0x3a6>
 800c7c8:	68a3      	ldr	r3, [r4, #8]
 800c7ca:	459b      	cmp	fp, r3
 800c7cc:	db17      	blt.n	800c7fe <__gethex+0x42a>
 800c7ce:	6861      	ldr	r1, [r4, #4]
 800c7d0:	9802      	ldr	r0, [sp, #8]
 800c7d2:	3101      	adds	r1, #1
 800c7d4:	f000 f946 	bl	800ca64 <_Balloc>
 800c7d8:	4681      	mov	r9, r0
 800c7da:	b918      	cbnz	r0, 800c7e4 <__gethex+0x410>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	2184      	movs	r1, #132	; 0x84
 800c7e0:	4b19      	ldr	r3, [pc, #100]	; (800c848 <__gethex+0x474>)
 800c7e2:	e6ac      	b.n	800c53e <__gethex+0x16a>
 800c7e4:	6922      	ldr	r2, [r4, #16]
 800c7e6:	f104 010c 	add.w	r1, r4, #12
 800c7ea:	3202      	adds	r2, #2
 800c7ec:	0092      	lsls	r2, r2, #2
 800c7ee:	300c      	adds	r0, #12
 800c7f0:	f7fc fec3 	bl	800957a <memcpy>
 800c7f4:	4621      	mov	r1, r4
 800c7f6:	9802      	ldr	r0, [sp, #8]
 800c7f8:	f000 f974 	bl	800cae4 <_Bfree>
 800c7fc:	464c      	mov	r4, r9
 800c7fe:	6923      	ldr	r3, [r4, #16]
 800c800:	1c5a      	adds	r2, r3, #1
 800c802:	6122      	str	r2, [r4, #16]
 800c804:	2201      	movs	r2, #1
 800c806:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c80a:	615a      	str	r2, [r3, #20]
 800c80c:	e7bd      	b.n	800c78a <__gethex+0x3b6>
 800c80e:	6922      	ldr	r2, [r4, #16]
 800c810:	455a      	cmp	r2, fp
 800c812:	dd0b      	ble.n	800c82c <__gethex+0x458>
 800c814:	2101      	movs	r1, #1
 800c816:	4620      	mov	r0, r4
 800c818:	f7ff fd74 	bl	800c304 <rshift>
 800c81c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c820:	3501      	adds	r5, #1
 800c822:	42ab      	cmp	r3, r5
 800c824:	f6ff aed5 	blt.w	800c5d2 <__gethex+0x1fe>
 800c828:	2701      	movs	r7, #1
 800c82a:	e7c2      	b.n	800c7b2 <__gethex+0x3de>
 800c82c:	f016 061f 	ands.w	r6, r6, #31
 800c830:	d0fa      	beq.n	800c828 <__gethex+0x454>
 800c832:	449a      	add	sl, r3
 800c834:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c838:	f000 fa0a 	bl	800cc50 <__hi0bits>
 800c83c:	f1c6 0620 	rsb	r6, r6, #32
 800c840:	42b0      	cmp	r0, r6
 800c842:	dbe7      	blt.n	800c814 <__gethex+0x440>
 800c844:	e7f0      	b.n	800c828 <__gethex+0x454>
 800c846:	bf00      	nop
 800c848:	0800e361 	.word	0x0800e361

0800c84c <L_shift>:
 800c84c:	f1c2 0208 	rsb	r2, r2, #8
 800c850:	0092      	lsls	r2, r2, #2
 800c852:	b570      	push	{r4, r5, r6, lr}
 800c854:	f1c2 0620 	rsb	r6, r2, #32
 800c858:	6843      	ldr	r3, [r0, #4]
 800c85a:	6804      	ldr	r4, [r0, #0]
 800c85c:	fa03 f506 	lsl.w	r5, r3, r6
 800c860:	432c      	orrs	r4, r5
 800c862:	40d3      	lsrs	r3, r2
 800c864:	6004      	str	r4, [r0, #0]
 800c866:	f840 3f04 	str.w	r3, [r0, #4]!
 800c86a:	4288      	cmp	r0, r1
 800c86c:	d3f4      	bcc.n	800c858 <L_shift+0xc>
 800c86e:	bd70      	pop	{r4, r5, r6, pc}

0800c870 <__match>:
 800c870:	b530      	push	{r4, r5, lr}
 800c872:	6803      	ldr	r3, [r0, #0]
 800c874:	3301      	adds	r3, #1
 800c876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c87a:	b914      	cbnz	r4, 800c882 <__match+0x12>
 800c87c:	6003      	str	r3, [r0, #0]
 800c87e:	2001      	movs	r0, #1
 800c880:	bd30      	pop	{r4, r5, pc}
 800c882:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c886:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c88a:	2d19      	cmp	r5, #25
 800c88c:	bf98      	it	ls
 800c88e:	3220      	addls	r2, #32
 800c890:	42a2      	cmp	r2, r4
 800c892:	d0f0      	beq.n	800c876 <__match+0x6>
 800c894:	2000      	movs	r0, #0
 800c896:	e7f3      	b.n	800c880 <__match+0x10>

0800c898 <__hexnan>:
 800c898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89c:	2500      	movs	r5, #0
 800c89e:	680b      	ldr	r3, [r1, #0]
 800c8a0:	4682      	mov	sl, r0
 800c8a2:	115e      	asrs	r6, r3, #5
 800c8a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c8a8:	f013 031f 	ands.w	r3, r3, #31
 800c8ac:	bf18      	it	ne
 800c8ae:	3604      	addne	r6, #4
 800c8b0:	1f37      	subs	r7, r6, #4
 800c8b2:	4690      	mov	r8, r2
 800c8b4:	46b9      	mov	r9, r7
 800c8b6:	463c      	mov	r4, r7
 800c8b8:	46ab      	mov	fp, r5
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	6801      	ldr	r1, [r0, #0]
 800c8be:	9301      	str	r3, [sp, #4]
 800c8c0:	f846 5c04 	str.w	r5, [r6, #-4]
 800c8c4:	9502      	str	r5, [sp, #8]
 800c8c6:	784a      	ldrb	r2, [r1, #1]
 800c8c8:	1c4b      	adds	r3, r1, #1
 800c8ca:	9303      	str	r3, [sp, #12]
 800c8cc:	b342      	cbz	r2, 800c920 <__hexnan+0x88>
 800c8ce:	4610      	mov	r0, r2
 800c8d0:	9105      	str	r1, [sp, #20]
 800c8d2:	9204      	str	r2, [sp, #16]
 800c8d4:	f7ff fd69 	bl	800c3aa <__hexdig_fun>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d14f      	bne.n	800c97c <__hexnan+0xe4>
 800c8dc:	9a04      	ldr	r2, [sp, #16]
 800c8de:	9905      	ldr	r1, [sp, #20]
 800c8e0:	2a20      	cmp	r2, #32
 800c8e2:	d818      	bhi.n	800c916 <__hexnan+0x7e>
 800c8e4:	9b02      	ldr	r3, [sp, #8]
 800c8e6:	459b      	cmp	fp, r3
 800c8e8:	dd13      	ble.n	800c912 <__hexnan+0x7a>
 800c8ea:	454c      	cmp	r4, r9
 800c8ec:	d206      	bcs.n	800c8fc <__hexnan+0x64>
 800c8ee:	2d07      	cmp	r5, #7
 800c8f0:	dc04      	bgt.n	800c8fc <__hexnan+0x64>
 800c8f2:	462a      	mov	r2, r5
 800c8f4:	4649      	mov	r1, r9
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f7ff ffa8 	bl	800c84c <L_shift>
 800c8fc:	4544      	cmp	r4, r8
 800c8fe:	d950      	bls.n	800c9a2 <__hexnan+0x10a>
 800c900:	2300      	movs	r3, #0
 800c902:	f1a4 0904 	sub.w	r9, r4, #4
 800c906:	f844 3c04 	str.w	r3, [r4, #-4]
 800c90a:	461d      	mov	r5, r3
 800c90c:	464c      	mov	r4, r9
 800c90e:	f8cd b008 	str.w	fp, [sp, #8]
 800c912:	9903      	ldr	r1, [sp, #12]
 800c914:	e7d7      	b.n	800c8c6 <__hexnan+0x2e>
 800c916:	2a29      	cmp	r2, #41	; 0x29
 800c918:	d156      	bne.n	800c9c8 <__hexnan+0x130>
 800c91a:	3102      	adds	r1, #2
 800c91c:	f8ca 1000 	str.w	r1, [sl]
 800c920:	f1bb 0f00 	cmp.w	fp, #0
 800c924:	d050      	beq.n	800c9c8 <__hexnan+0x130>
 800c926:	454c      	cmp	r4, r9
 800c928:	d206      	bcs.n	800c938 <__hexnan+0xa0>
 800c92a:	2d07      	cmp	r5, #7
 800c92c:	dc04      	bgt.n	800c938 <__hexnan+0xa0>
 800c92e:	462a      	mov	r2, r5
 800c930:	4649      	mov	r1, r9
 800c932:	4620      	mov	r0, r4
 800c934:	f7ff ff8a 	bl	800c84c <L_shift>
 800c938:	4544      	cmp	r4, r8
 800c93a:	d934      	bls.n	800c9a6 <__hexnan+0x10e>
 800c93c:	4623      	mov	r3, r4
 800c93e:	f1a8 0204 	sub.w	r2, r8, #4
 800c942:	f853 1b04 	ldr.w	r1, [r3], #4
 800c946:	429f      	cmp	r7, r3
 800c948:	f842 1f04 	str.w	r1, [r2, #4]!
 800c94c:	d2f9      	bcs.n	800c942 <__hexnan+0xaa>
 800c94e:	1b3b      	subs	r3, r7, r4
 800c950:	f023 0303 	bic.w	r3, r3, #3
 800c954:	3304      	adds	r3, #4
 800c956:	3401      	adds	r4, #1
 800c958:	3e03      	subs	r6, #3
 800c95a:	42b4      	cmp	r4, r6
 800c95c:	bf88      	it	hi
 800c95e:	2304      	movhi	r3, #4
 800c960:	2200      	movs	r2, #0
 800c962:	4443      	add	r3, r8
 800c964:	f843 2b04 	str.w	r2, [r3], #4
 800c968:	429f      	cmp	r7, r3
 800c96a:	d2fb      	bcs.n	800c964 <__hexnan+0xcc>
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	b91b      	cbnz	r3, 800c978 <__hexnan+0xe0>
 800c970:	4547      	cmp	r7, r8
 800c972:	d127      	bne.n	800c9c4 <__hexnan+0x12c>
 800c974:	2301      	movs	r3, #1
 800c976:	603b      	str	r3, [r7, #0]
 800c978:	2005      	movs	r0, #5
 800c97a:	e026      	b.n	800c9ca <__hexnan+0x132>
 800c97c:	3501      	adds	r5, #1
 800c97e:	2d08      	cmp	r5, #8
 800c980:	f10b 0b01 	add.w	fp, fp, #1
 800c984:	dd06      	ble.n	800c994 <__hexnan+0xfc>
 800c986:	4544      	cmp	r4, r8
 800c988:	d9c3      	bls.n	800c912 <__hexnan+0x7a>
 800c98a:	2300      	movs	r3, #0
 800c98c:	2501      	movs	r5, #1
 800c98e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c992:	3c04      	subs	r4, #4
 800c994:	6822      	ldr	r2, [r4, #0]
 800c996:	f000 000f 	and.w	r0, r0, #15
 800c99a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c99e:	6022      	str	r2, [r4, #0]
 800c9a0:	e7b7      	b.n	800c912 <__hexnan+0x7a>
 800c9a2:	2508      	movs	r5, #8
 800c9a4:	e7b5      	b.n	800c912 <__hexnan+0x7a>
 800c9a6:	9b01      	ldr	r3, [sp, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d0df      	beq.n	800c96c <__hexnan+0xd4>
 800c9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b0:	f1c3 0320 	rsb	r3, r3, #32
 800c9b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c9b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c9bc:	401a      	ands	r2, r3
 800c9be:	f846 2c04 	str.w	r2, [r6, #-4]
 800c9c2:	e7d3      	b.n	800c96c <__hexnan+0xd4>
 800c9c4:	3f04      	subs	r7, #4
 800c9c6:	e7d1      	b.n	800c96c <__hexnan+0xd4>
 800c9c8:	2004      	movs	r0, #4
 800c9ca:	b007      	add	sp, #28
 800c9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9d0 <_localeconv_r>:
 800c9d0:	4800      	ldr	r0, [pc, #0]	; (800c9d4 <_localeconv_r+0x4>)
 800c9d2:	4770      	bx	lr
 800c9d4:	20000164 	.word	0x20000164

0800c9d8 <_lseek_r>:
 800c9d8:	b538      	push	{r3, r4, r5, lr}
 800c9da:	4604      	mov	r4, r0
 800c9dc:	4608      	mov	r0, r1
 800c9de:	4611      	mov	r1, r2
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	4d05      	ldr	r5, [pc, #20]	; (800c9f8 <_lseek_r+0x20>)
 800c9e4:	602a      	str	r2, [r5, #0]
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	f7f5 fad0 	bl	8001f8c <_lseek>
 800c9ec:	1c43      	adds	r3, r0, #1
 800c9ee:	d102      	bne.n	800c9f6 <_lseek_r+0x1e>
 800c9f0:	682b      	ldr	r3, [r5, #0]
 800c9f2:	b103      	cbz	r3, 800c9f6 <_lseek_r+0x1e>
 800c9f4:	6023      	str	r3, [r4, #0]
 800c9f6:	bd38      	pop	{r3, r4, r5, pc}
 800c9f8:	20003b98 	.word	0x20003b98

0800c9fc <malloc>:
 800c9fc:	4b02      	ldr	r3, [pc, #8]	; (800ca08 <malloc+0xc>)
 800c9fe:	4601      	mov	r1, r0
 800ca00:	6818      	ldr	r0, [r3, #0]
 800ca02:	f7fc bdd1 	b.w	80095a8 <_malloc_r>
 800ca06:	bf00      	nop
 800ca08:	2000000c 	.word	0x2000000c

0800ca0c <__ascii_mbtowc>:
 800ca0c:	b082      	sub	sp, #8
 800ca0e:	b901      	cbnz	r1, 800ca12 <__ascii_mbtowc+0x6>
 800ca10:	a901      	add	r1, sp, #4
 800ca12:	b142      	cbz	r2, 800ca26 <__ascii_mbtowc+0x1a>
 800ca14:	b14b      	cbz	r3, 800ca2a <__ascii_mbtowc+0x1e>
 800ca16:	7813      	ldrb	r3, [r2, #0]
 800ca18:	600b      	str	r3, [r1, #0]
 800ca1a:	7812      	ldrb	r2, [r2, #0]
 800ca1c:	1e10      	subs	r0, r2, #0
 800ca1e:	bf18      	it	ne
 800ca20:	2001      	movne	r0, #1
 800ca22:	b002      	add	sp, #8
 800ca24:	4770      	bx	lr
 800ca26:	4610      	mov	r0, r2
 800ca28:	e7fb      	b.n	800ca22 <__ascii_mbtowc+0x16>
 800ca2a:	f06f 0001 	mvn.w	r0, #1
 800ca2e:	e7f8      	b.n	800ca22 <__ascii_mbtowc+0x16>

0800ca30 <memchr>:
 800ca30:	4603      	mov	r3, r0
 800ca32:	b510      	push	{r4, lr}
 800ca34:	b2c9      	uxtb	r1, r1
 800ca36:	4402      	add	r2, r0
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	d101      	bne.n	800ca42 <memchr+0x12>
 800ca3e:	2000      	movs	r0, #0
 800ca40:	e003      	b.n	800ca4a <memchr+0x1a>
 800ca42:	7804      	ldrb	r4, [r0, #0]
 800ca44:	3301      	adds	r3, #1
 800ca46:	428c      	cmp	r4, r1
 800ca48:	d1f6      	bne.n	800ca38 <memchr+0x8>
 800ca4a:	bd10      	pop	{r4, pc}

0800ca4c <__malloc_lock>:
 800ca4c:	4801      	ldr	r0, [pc, #4]	; (800ca54 <__malloc_lock+0x8>)
 800ca4e:	f7fc bd92 	b.w	8009576 <__retarget_lock_acquire_recursive>
 800ca52:	bf00      	nop
 800ca54:	20003b90 	.word	0x20003b90

0800ca58 <__malloc_unlock>:
 800ca58:	4801      	ldr	r0, [pc, #4]	; (800ca60 <__malloc_unlock+0x8>)
 800ca5a:	f7fc bd8d 	b.w	8009578 <__retarget_lock_release_recursive>
 800ca5e:	bf00      	nop
 800ca60:	20003b90 	.word	0x20003b90

0800ca64 <_Balloc>:
 800ca64:	b570      	push	{r4, r5, r6, lr}
 800ca66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca68:	4604      	mov	r4, r0
 800ca6a:	460d      	mov	r5, r1
 800ca6c:	b976      	cbnz	r6, 800ca8c <_Balloc+0x28>
 800ca6e:	2010      	movs	r0, #16
 800ca70:	f7ff ffc4 	bl	800c9fc <malloc>
 800ca74:	4602      	mov	r2, r0
 800ca76:	6260      	str	r0, [r4, #36]	; 0x24
 800ca78:	b920      	cbnz	r0, 800ca84 <_Balloc+0x20>
 800ca7a:	2166      	movs	r1, #102	; 0x66
 800ca7c:	4b17      	ldr	r3, [pc, #92]	; (800cadc <_Balloc+0x78>)
 800ca7e:	4818      	ldr	r0, [pc, #96]	; (800cae0 <_Balloc+0x7c>)
 800ca80:	f7fe fcc0 	bl	800b404 <__assert_func>
 800ca84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca88:	6006      	str	r6, [r0, #0]
 800ca8a:	60c6      	str	r6, [r0, #12]
 800ca8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ca8e:	68f3      	ldr	r3, [r6, #12]
 800ca90:	b183      	cbz	r3, 800cab4 <_Balloc+0x50>
 800ca92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca9a:	b9b8      	cbnz	r0, 800cacc <_Balloc+0x68>
 800ca9c:	2101      	movs	r1, #1
 800ca9e:	fa01 f605 	lsl.w	r6, r1, r5
 800caa2:	1d72      	adds	r2, r6, #5
 800caa4:	4620      	mov	r0, r4
 800caa6:	0092      	lsls	r2, r2, #2
 800caa8:	f000 fc94 	bl	800d3d4 <_calloc_r>
 800caac:	b160      	cbz	r0, 800cac8 <_Balloc+0x64>
 800caae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cab2:	e00e      	b.n	800cad2 <_Balloc+0x6e>
 800cab4:	2221      	movs	r2, #33	; 0x21
 800cab6:	2104      	movs	r1, #4
 800cab8:	4620      	mov	r0, r4
 800caba:	f000 fc8b 	bl	800d3d4 <_calloc_r>
 800cabe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cac0:	60f0      	str	r0, [r6, #12]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d1e4      	bne.n	800ca92 <_Balloc+0x2e>
 800cac8:	2000      	movs	r0, #0
 800caca:	bd70      	pop	{r4, r5, r6, pc}
 800cacc:	6802      	ldr	r2, [r0, #0]
 800cace:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cad2:	2300      	movs	r3, #0
 800cad4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cad8:	e7f7      	b.n	800caca <_Balloc+0x66>
 800cada:	bf00      	nop
 800cadc:	0800e140 	.word	0x0800e140
 800cae0:	0800e3f0 	.word	0x0800e3f0

0800cae4 <_Bfree>:
 800cae4:	b570      	push	{r4, r5, r6, lr}
 800cae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cae8:	4605      	mov	r5, r0
 800caea:	460c      	mov	r4, r1
 800caec:	b976      	cbnz	r6, 800cb0c <_Bfree+0x28>
 800caee:	2010      	movs	r0, #16
 800caf0:	f7ff ff84 	bl	800c9fc <malloc>
 800caf4:	4602      	mov	r2, r0
 800caf6:	6268      	str	r0, [r5, #36]	; 0x24
 800caf8:	b920      	cbnz	r0, 800cb04 <_Bfree+0x20>
 800cafa:	218a      	movs	r1, #138	; 0x8a
 800cafc:	4b08      	ldr	r3, [pc, #32]	; (800cb20 <_Bfree+0x3c>)
 800cafe:	4809      	ldr	r0, [pc, #36]	; (800cb24 <_Bfree+0x40>)
 800cb00:	f7fe fc80 	bl	800b404 <__assert_func>
 800cb04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb08:	6006      	str	r6, [r0, #0]
 800cb0a:	60c6      	str	r6, [r0, #12]
 800cb0c:	b13c      	cbz	r4, 800cb1e <_Bfree+0x3a>
 800cb0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb10:	6862      	ldr	r2, [r4, #4]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb18:	6021      	str	r1, [r4, #0]
 800cb1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb1e:	bd70      	pop	{r4, r5, r6, pc}
 800cb20:	0800e140 	.word	0x0800e140
 800cb24:	0800e3f0 	.word	0x0800e3f0

0800cb28 <__multadd>:
 800cb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb2c:	4698      	mov	r8, r3
 800cb2e:	460c      	mov	r4, r1
 800cb30:	2300      	movs	r3, #0
 800cb32:	690e      	ldr	r6, [r1, #16]
 800cb34:	4607      	mov	r7, r0
 800cb36:	f101 0014 	add.w	r0, r1, #20
 800cb3a:	6805      	ldr	r5, [r0, #0]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	b2a9      	uxth	r1, r5
 800cb40:	fb02 8101 	mla	r1, r2, r1, r8
 800cb44:	0c2d      	lsrs	r5, r5, #16
 800cb46:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cb4a:	fb02 c505 	mla	r5, r2, r5, ip
 800cb4e:	b289      	uxth	r1, r1
 800cb50:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cb54:	429e      	cmp	r6, r3
 800cb56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cb5a:	f840 1b04 	str.w	r1, [r0], #4
 800cb5e:	dcec      	bgt.n	800cb3a <__multadd+0x12>
 800cb60:	f1b8 0f00 	cmp.w	r8, #0
 800cb64:	d022      	beq.n	800cbac <__multadd+0x84>
 800cb66:	68a3      	ldr	r3, [r4, #8]
 800cb68:	42b3      	cmp	r3, r6
 800cb6a:	dc19      	bgt.n	800cba0 <__multadd+0x78>
 800cb6c:	6861      	ldr	r1, [r4, #4]
 800cb6e:	4638      	mov	r0, r7
 800cb70:	3101      	adds	r1, #1
 800cb72:	f7ff ff77 	bl	800ca64 <_Balloc>
 800cb76:	4605      	mov	r5, r0
 800cb78:	b928      	cbnz	r0, 800cb86 <__multadd+0x5e>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	21b5      	movs	r1, #181	; 0xb5
 800cb7e:	4b0d      	ldr	r3, [pc, #52]	; (800cbb4 <__multadd+0x8c>)
 800cb80:	480d      	ldr	r0, [pc, #52]	; (800cbb8 <__multadd+0x90>)
 800cb82:	f7fe fc3f 	bl	800b404 <__assert_func>
 800cb86:	6922      	ldr	r2, [r4, #16]
 800cb88:	f104 010c 	add.w	r1, r4, #12
 800cb8c:	3202      	adds	r2, #2
 800cb8e:	0092      	lsls	r2, r2, #2
 800cb90:	300c      	adds	r0, #12
 800cb92:	f7fc fcf2 	bl	800957a <memcpy>
 800cb96:	4621      	mov	r1, r4
 800cb98:	4638      	mov	r0, r7
 800cb9a:	f7ff ffa3 	bl	800cae4 <_Bfree>
 800cb9e:	462c      	mov	r4, r5
 800cba0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cba4:	3601      	adds	r6, #1
 800cba6:	f8c3 8014 	str.w	r8, [r3, #20]
 800cbaa:	6126      	str	r6, [r4, #16]
 800cbac:	4620      	mov	r0, r4
 800cbae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbb2:	bf00      	nop
 800cbb4:	0800e361 	.word	0x0800e361
 800cbb8:	0800e3f0 	.word	0x0800e3f0

0800cbbc <__s2b>:
 800cbbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbc0:	4615      	mov	r5, r2
 800cbc2:	2209      	movs	r2, #9
 800cbc4:	461f      	mov	r7, r3
 800cbc6:	3308      	adds	r3, #8
 800cbc8:	460c      	mov	r4, r1
 800cbca:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbce:	4606      	mov	r6, r0
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	db09      	blt.n	800cbec <__s2b+0x30>
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f7ff ff43 	bl	800ca64 <_Balloc>
 800cbde:	b940      	cbnz	r0, 800cbf2 <__s2b+0x36>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	21ce      	movs	r1, #206	; 0xce
 800cbe4:	4b18      	ldr	r3, [pc, #96]	; (800cc48 <__s2b+0x8c>)
 800cbe6:	4819      	ldr	r0, [pc, #100]	; (800cc4c <__s2b+0x90>)
 800cbe8:	f7fe fc0c 	bl	800b404 <__assert_func>
 800cbec:	0052      	lsls	r2, r2, #1
 800cbee:	3101      	adds	r1, #1
 800cbf0:	e7f0      	b.n	800cbd4 <__s2b+0x18>
 800cbf2:	9b08      	ldr	r3, [sp, #32]
 800cbf4:	2d09      	cmp	r5, #9
 800cbf6:	6143      	str	r3, [r0, #20]
 800cbf8:	f04f 0301 	mov.w	r3, #1
 800cbfc:	6103      	str	r3, [r0, #16]
 800cbfe:	dd16      	ble.n	800cc2e <__s2b+0x72>
 800cc00:	f104 0909 	add.w	r9, r4, #9
 800cc04:	46c8      	mov	r8, r9
 800cc06:	442c      	add	r4, r5
 800cc08:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc0c:	4601      	mov	r1, r0
 800cc0e:	220a      	movs	r2, #10
 800cc10:	4630      	mov	r0, r6
 800cc12:	3b30      	subs	r3, #48	; 0x30
 800cc14:	f7ff ff88 	bl	800cb28 <__multadd>
 800cc18:	45a0      	cmp	r8, r4
 800cc1a:	d1f5      	bne.n	800cc08 <__s2b+0x4c>
 800cc1c:	f1a5 0408 	sub.w	r4, r5, #8
 800cc20:	444c      	add	r4, r9
 800cc22:	1b2d      	subs	r5, r5, r4
 800cc24:	1963      	adds	r3, r4, r5
 800cc26:	42bb      	cmp	r3, r7
 800cc28:	db04      	blt.n	800cc34 <__s2b+0x78>
 800cc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc2e:	2509      	movs	r5, #9
 800cc30:	340a      	adds	r4, #10
 800cc32:	e7f6      	b.n	800cc22 <__s2b+0x66>
 800cc34:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc38:	4601      	mov	r1, r0
 800cc3a:	220a      	movs	r2, #10
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	3b30      	subs	r3, #48	; 0x30
 800cc40:	f7ff ff72 	bl	800cb28 <__multadd>
 800cc44:	e7ee      	b.n	800cc24 <__s2b+0x68>
 800cc46:	bf00      	nop
 800cc48:	0800e361 	.word	0x0800e361
 800cc4c:	0800e3f0 	.word	0x0800e3f0

0800cc50 <__hi0bits>:
 800cc50:	0c02      	lsrs	r2, r0, #16
 800cc52:	0412      	lsls	r2, r2, #16
 800cc54:	4603      	mov	r3, r0
 800cc56:	b9ca      	cbnz	r2, 800cc8c <__hi0bits+0x3c>
 800cc58:	0403      	lsls	r3, r0, #16
 800cc5a:	2010      	movs	r0, #16
 800cc5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cc60:	bf04      	itt	eq
 800cc62:	021b      	lsleq	r3, r3, #8
 800cc64:	3008      	addeq	r0, #8
 800cc66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cc6a:	bf04      	itt	eq
 800cc6c:	011b      	lsleq	r3, r3, #4
 800cc6e:	3004      	addeq	r0, #4
 800cc70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cc74:	bf04      	itt	eq
 800cc76:	009b      	lsleq	r3, r3, #2
 800cc78:	3002      	addeq	r0, #2
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	db05      	blt.n	800cc8a <__hi0bits+0x3a>
 800cc7e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cc82:	f100 0001 	add.w	r0, r0, #1
 800cc86:	bf08      	it	eq
 800cc88:	2020      	moveq	r0, #32
 800cc8a:	4770      	bx	lr
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	e7e5      	b.n	800cc5c <__hi0bits+0xc>

0800cc90 <__lo0bits>:
 800cc90:	6803      	ldr	r3, [r0, #0]
 800cc92:	4602      	mov	r2, r0
 800cc94:	f013 0007 	ands.w	r0, r3, #7
 800cc98:	d00b      	beq.n	800ccb2 <__lo0bits+0x22>
 800cc9a:	07d9      	lsls	r1, r3, #31
 800cc9c:	d422      	bmi.n	800cce4 <__lo0bits+0x54>
 800cc9e:	0798      	lsls	r0, r3, #30
 800cca0:	bf49      	itett	mi
 800cca2:	085b      	lsrmi	r3, r3, #1
 800cca4:	089b      	lsrpl	r3, r3, #2
 800cca6:	2001      	movmi	r0, #1
 800cca8:	6013      	strmi	r3, [r2, #0]
 800ccaa:	bf5c      	itt	pl
 800ccac:	2002      	movpl	r0, #2
 800ccae:	6013      	strpl	r3, [r2, #0]
 800ccb0:	4770      	bx	lr
 800ccb2:	b299      	uxth	r1, r3
 800ccb4:	b909      	cbnz	r1, 800ccba <__lo0bits+0x2a>
 800ccb6:	2010      	movs	r0, #16
 800ccb8:	0c1b      	lsrs	r3, r3, #16
 800ccba:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ccbe:	bf04      	itt	eq
 800ccc0:	0a1b      	lsreq	r3, r3, #8
 800ccc2:	3008      	addeq	r0, #8
 800ccc4:	0719      	lsls	r1, r3, #28
 800ccc6:	bf04      	itt	eq
 800ccc8:	091b      	lsreq	r3, r3, #4
 800ccca:	3004      	addeq	r0, #4
 800cccc:	0799      	lsls	r1, r3, #30
 800ccce:	bf04      	itt	eq
 800ccd0:	089b      	lsreq	r3, r3, #2
 800ccd2:	3002      	addeq	r0, #2
 800ccd4:	07d9      	lsls	r1, r3, #31
 800ccd6:	d403      	bmi.n	800cce0 <__lo0bits+0x50>
 800ccd8:	085b      	lsrs	r3, r3, #1
 800ccda:	f100 0001 	add.w	r0, r0, #1
 800ccde:	d003      	beq.n	800cce8 <__lo0bits+0x58>
 800cce0:	6013      	str	r3, [r2, #0]
 800cce2:	4770      	bx	lr
 800cce4:	2000      	movs	r0, #0
 800cce6:	4770      	bx	lr
 800cce8:	2020      	movs	r0, #32
 800ccea:	4770      	bx	lr

0800ccec <__i2b>:
 800ccec:	b510      	push	{r4, lr}
 800ccee:	460c      	mov	r4, r1
 800ccf0:	2101      	movs	r1, #1
 800ccf2:	f7ff feb7 	bl	800ca64 <_Balloc>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	b928      	cbnz	r0, 800cd06 <__i2b+0x1a>
 800ccfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ccfe:	4b04      	ldr	r3, [pc, #16]	; (800cd10 <__i2b+0x24>)
 800cd00:	4804      	ldr	r0, [pc, #16]	; (800cd14 <__i2b+0x28>)
 800cd02:	f7fe fb7f 	bl	800b404 <__assert_func>
 800cd06:	2301      	movs	r3, #1
 800cd08:	6144      	str	r4, [r0, #20]
 800cd0a:	6103      	str	r3, [r0, #16]
 800cd0c:	bd10      	pop	{r4, pc}
 800cd0e:	bf00      	nop
 800cd10:	0800e361 	.word	0x0800e361
 800cd14:	0800e3f0 	.word	0x0800e3f0

0800cd18 <__multiply>:
 800cd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	4614      	mov	r4, r2
 800cd1e:	690a      	ldr	r2, [r1, #16]
 800cd20:	6923      	ldr	r3, [r4, #16]
 800cd22:	460d      	mov	r5, r1
 800cd24:	429a      	cmp	r2, r3
 800cd26:	bfbe      	ittt	lt
 800cd28:	460b      	movlt	r3, r1
 800cd2a:	4625      	movlt	r5, r4
 800cd2c:	461c      	movlt	r4, r3
 800cd2e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cd32:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cd36:	68ab      	ldr	r3, [r5, #8]
 800cd38:	6869      	ldr	r1, [r5, #4]
 800cd3a:	eb0a 0709 	add.w	r7, sl, r9
 800cd3e:	42bb      	cmp	r3, r7
 800cd40:	b085      	sub	sp, #20
 800cd42:	bfb8      	it	lt
 800cd44:	3101      	addlt	r1, #1
 800cd46:	f7ff fe8d 	bl	800ca64 <_Balloc>
 800cd4a:	b930      	cbnz	r0, 800cd5a <__multiply+0x42>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	f240 115d 	movw	r1, #349	; 0x15d
 800cd52:	4b41      	ldr	r3, [pc, #260]	; (800ce58 <__multiply+0x140>)
 800cd54:	4841      	ldr	r0, [pc, #260]	; (800ce5c <__multiply+0x144>)
 800cd56:	f7fe fb55 	bl	800b404 <__assert_func>
 800cd5a:	f100 0614 	add.w	r6, r0, #20
 800cd5e:	4633      	mov	r3, r6
 800cd60:	2200      	movs	r2, #0
 800cd62:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cd66:	4543      	cmp	r3, r8
 800cd68:	d31e      	bcc.n	800cda8 <__multiply+0x90>
 800cd6a:	f105 0c14 	add.w	ip, r5, #20
 800cd6e:	f104 0314 	add.w	r3, r4, #20
 800cd72:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cd76:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cd7a:	9202      	str	r2, [sp, #8]
 800cd7c:	ebac 0205 	sub.w	r2, ip, r5
 800cd80:	3a15      	subs	r2, #21
 800cd82:	f022 0203 	bic.w	r2, r2, #3
 800cd86:	3204      	adds	r2, #4
 800cd88:	f105 0115 	add.w	r1, r5, #21
 800cd8c:	458c      	cmp	ip, r1
 800cd8e:	bf38      	it	cc
 800cd90:	2204      	movcc	r2, #4
 800cd92:	9201      	str	r2, [sp, #4]
 800cd94:	9a02      	ldr	r2, [sp, #8]
 800cd96:	9303      	str	r3, [sp, #12]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d808      	bhi.n	800cdae <__multiply+0x96>
 800cd9c:	2f00      	cmp	r7, #0
 800cd9e:	dc55      	bgt.n	800ce4c <__multiply+0x134>
 800cda0:	6107      	str	r7, [r0, #16]
 800cda2:	b005      	add	sp, #20
 800cda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda8:	f843 2b04 	str.w	r2, [r3], #4
 800cdac:	e7db      	b.n	800cd66 <__multiply+0x4e>
 800cdae:	f8b3 a000 	ldrh.w	sl, [r3]
 800cdb2:	f1ba 0f00 	cmp.w	sl, #0
 800cdb6:	d020      	beq.n	800cdfa <__multiply+0xe2>
 800cdb8:	46b1      	mov	r9, r6
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f105 0e14 	add.w	lr, r5, #20
 800cdc0:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cdc4:	f8d9 b000 	ldr.w	fp, [r9]
 800cdc8:	b2a1      	uxth	r1, r4
 800cdca:	fa1f fb8b 	uxth.w	fp, fp
 800cdce:	fb0a b101 	mla	r1, sl, r1, fp
 800cdd2:	4411      	add	r1, r2
 800cdd4:	f8d9 2000 	ldr.w	r2, [r9]
 800cdd8:	0c24      	lsrs	r4, r4, #16
 800cdda:	0c12      	lsrs	r2, r2, #16
 800cddc:	fb0a 2404 	mla	r4, sl, r4, r2
 800cde0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cde4:	b289      	uxth	r1, r1
 800cde6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cdea:	45f4      	cmp	ip, lr
 800cdec:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cdf0:	f849 1b04 	str.w	r1, [r9], #4
 800cdf4:	d8e4      	bhi.n	800cdc0 <__multiply+0xa8>
 800cdf6:	9901      	ldr	r1, [sp, #4]
 800cdf8:	5072      	str	r2, [r6, r1]
 800cdfa:	9a03      	ldr	r2, [sp, #12]
 800cdfc:	3304      	adds	r3, #4
 800cdfe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ce02:	f1b9 0f00 	cmp.w	r9, #0
 800ce06:	d01f      	beq.n	800ce48 <__multiply+0x130>
 800ce08:	46b6      	mov	lr, r6
 800ce0a:	f04f 0a00 	mov.w	sl, #0
 800ce0e:	6834      	ldr	r4, [r6, #0]
 800ce10:	f105 0114 	add.w	r1, r5, #20
 800ce14:	880a      	ldrh	r2, [r1, #0]
 800ce16:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ce1a:	b2a4      	uxth	r4, r4
 800ce1c:	fb09 b202 	mla	r2, r9, r2, fp
 800ce20:	4492      	add	sl, r2
 800ce22:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ce26:	f84e 4b04 	str.w	r4, [lr], #4
 800ce2a:	f851 4b04 	ldr.w	r4, [r1], #4
 800ce2e:	f8be 2000 	ldrh.w	r2, [lr]
 800ce32:	0c24      	lsrs	r4, r4, #16
 800ce34:	fb09 2404 	mla	r4, r9, r4, r2
 800ce38:	458c      	cmp	ip, r1
 800ce3a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ce3e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ce42:	d8e7      	bhi.n	800ce14 <__multiply+0xfc>
 800ce44:	9a01      	ldr	r2, [sp, #4]
 800ce46:	50b4      	str	r4, [r6, r2]
 800ce48:	3604      	adds	r6, #4
 800ce4a:	e7a3      	b.n	800cd94 <__multiply+0x7c>
 800ce4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d1a5      	bne.n	800cda0 <__multiply+0x88>
 800ce54:	3f01      	subs	r7, #1
 800ce56:	e7a1      	b.n	800cd9c <__multiply+0x84>
 800ce58:	0800e361 	.word	0x0800e361
 800ce5c:	0800e3f0 	.word	0x0800e3f0

0800ce60 <__pow5mult>:
 800ce60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce64:	4615      	mov	r5, r2
 800ce66:	f012 0203 	ands.w	r2, r2, #3
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	460f      	mov	r7, r1
 800ce6e:	d007      	beq.n	800ce80 <__pow5mult+0x20>
 800ce70:	4c25      	ldr	r4, [pc, #148]	; (800cf08 <__pow5mult+0xa8>)
 800ce72:	3a01      	subs	r2, #1
 800ce74:	2300      	movs	r3, #0
 800ce76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce7a:	f7ff fe55 	bl	800cb28 <__multadd>
 800ce7e:	4607      	mov	r7, r0
 800ce80:	10ad      	asrs	r5, r5, #2
 800ce82:	d03d      	beq.n	800cf00 <__pow5mult+0xa0>
 800ce84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ce86:	b97c      	cbnz	r4, 800cea8 <__pow5mult+0x48>
 800ce88:	2010      	movs	r0, #16
 800ce8a:	f7ff fdb7 	bl	800c9fc <malloc>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	6270      	str	r0, [r6, #36]	; 0x24
 800ce92:	b928      	cbnz	r0, 800cea0 <__pow5mult+0x40>
 800ce94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ce98:	4b1c      	ldr	r3, [pc, #112]	; (800cf0c <__pow5mult+0xac>)
 800ce9a:	481d      	ldr	r0, [pc, #116]	; (800cf10 <__pow5mult+0xb0>)
 800ce9c:	f7fe fab2 	bl	800b404 <__assert_func>
 800cea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cea4:	6004      	str	r4, [r0, #0]
 800cea6:	60c4      	str	r4, [r0, #12]
 800cea8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ceac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ceb0:	b94c      	cbnz	r4, 800cec6 <__pow5mult+0x66>
 800ceb2:	f240 2171 	movw	r1, #625	; 0x271
 800ceb6:	4630      	mov	r0, r6
 800ceb8:	f7ff ff18 	bl	800ccec <__i2b>
 800cebc:	2300      	movs	r3, #0
 800cebe:	4604      	mov	r4, r0
 800cec0:	f8c8 0008 	str.w	r0, [r8, #8]
 800cec4:	6003      	str	r3, [r0, #0]
 800cec6:	f04f 0900 	mov.w	r9, #0
 800ceca:	07eb      	lsls	r3, r5, #31
 800cecc:	d50a      	bpl.n	800cee4 <__pow5mult+0x84>
 800cece:	4639      	mov	r1, r7
 800ced0:	4622      	mov	r2, r4
 800ced2:	4630      	mov	r0, r6
 800ced4:	f7ff ff20 	bl	800cd18 <__multiply>
 800ced8:	4680      	mov	r8, r0
 800ceda:	4639      	mov	r1, r7
 800cedc:	4630      	mov	r0, r6
 800cede:	f7ff fe01 	bl	800cae4 <_Bfree>
 800cee2:	4647      	mov	r7, r8
 800cee4:	106d      	asrs	r5, r5, #1
 800cee6:	d00b      	beq.n	800cf00 <__pow5mult+0xa0>
 800cee8:	6820      	ldr	r0, [r4, #0]
 800ceea:	b938      	cbnz	r0, 800cefc <__pow5mult+0x9c>
 800ceec:	4622      	mov	r2, r4
 800ceee:	4621      	mov	r1, r4
 800cef0:	4630      	mov	r0, r6
 800cef2:	f7ff ff11 	bl	800cd18 <__multiply>
 800cef6:	6020      	str	r0, [r4, #0]
 800cef8:	f8c0 9000 	str.w	r9, [r0]
 800cefc:	4604      	mov	r4, r0
 800cefe:	e7e4      	b.n	800ceca <__pow5mult+0x6a>
 800cf00:	4638      	mov	r0, r7
 800cf02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf06:	bf00      	nop
 800cf08:	0800e540 	.word	0x0800e540
 800cf0c:	0800e140 	.word	0x0800e140
 800cf10:	0800e3f0 	.word	0x0800e3f0

0800cf14 <__lshift>:
 800cf14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf18:	460c      	mov	r4, r1
 800cf1a:	4607      	mov	r7, r0
 800cf1c:	4691      	mov	r9, r2
 800cf1e:	6923      	ldr	r3, [r4, #16]
 800cf20:	6849      	ldr	r1, [r1, #4]
 800cf22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf26:	68a3      	ldr	r3, [r4, #8]
 800cf28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf2c:	f108 0601 	add.w	r6, r8, #1
 800cf30:	42b3      	cmp	r3, r6
 800cf32:	db0b      	blt.n	800cf4c <__lshift+0x38>
 800cf34:	4638      	mov	r0, r7
 800cf36:	f7ff fd95 	bl	800ca64 <_Balloc>
 800cf3a:	4605      	mov	r5, r0
 800cf3c:	b948      	cbnz	r0, 800cf52 <__lshift+0x3e>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cf44:	4b27      	ldr	r3, [pc, #156]	; (800cfe4 <__lshift+0xd0>)
 800cf46:	4828      	ldr	r0, [pc, #160]	; (800cfe8 <__lshift+0xd4>)
 800cf48:	f7fe fa5c 	bl	800b404 <__assert_func>
 800cf4c:	3101      	adds	r1, #1
 800cf4e:	005b      	lsls	r3, r3, #1
 800cf50:	e7ee      	b.n	800cf30 <__lshift+0x1c>
 800cf52:	2300      	movs	r3, #0
 800cf54:	f100 0114 	add.w	r1, r0, #20
 800cf58:	f100 0210 	add.w	r2, r0, #16
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	4553      	cmp	r3, sl
 800cf60:	db33      	blt.n	800cfca <__lshift+0xb6>
 800cf62:	6920      	ldr	r0, [r4, #16]
 800cf64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf68:	f104 0314 	add.w	r3, r4, #20
 800cf6c:	f019 091f 	ands.w	r9, r9, #31
 800cf70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf78:	d02b      	beq.n	800cfd2 <__lshift+0xbe>
 800cf7a:	468a      	mov	sl, r1
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	f1c9 0e20 	rsb	lr, r9, #32
 800cf82:	6818      	ldr	r0, [r3, #0]
 800cf84:	fa00 f009 	lsl.w	r0, r0, r9
 800cf88:	4302      	orrs	r2, r0
 800cf8a:	f84a 2b04 	str.w	r2, [sl], #4
 800cf8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf92:	459c      	cmp	ip, r3
 800cf94:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf98:	d8f3      	bhi.n	800cf82 <__lshift+0x6e>
 800cf9a:	ebac 0304 	sub.w	r3, ip, r4
 800cf9e:	3b15      	subs	r3, #21
 800cfa0:	f023 0303 	bic.w	r3, r3, #3
 800cfa4:	3304      	adds	r3, #4
 800cfa6:	f104 0015 	add.w	r0, r4, #21
 800cfaa:	4584      	cmp	ip, r0
 800cfac:	bf38      	it	cc
 800cfae:	2304      	movcc	r3, #4
 800cfb0:	50ca      	str	r2, [r1, r3]
 800cfb2:	b10a      	cbz	r2, 800cfb8 <__lshift+0xa4>
 800cfb4:	f108 0602 	add.w	r6, r8, #2
 800cfb8:	3e01      	subs	r6, #1
 800cfba:	4638      	mov	r0, r7
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	612e      	str	r6, [r5, #16]
 800cfc0:	f7ff fd90 	bl	800cae4 <_Bfree>
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfca:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfce:	3301      	adds	r3, #1
 800cfd0:	e7c5      	b.n	800cf5e <__lshift+0x4a>
 800cfd2:	3904      	subs	r1, #4
 800cfd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfd8:	459c      	cmp	ip, r3
 800cfda:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfde:	d8f9      	bhi.n	800cfd4 <__lshift+0xc0>
 800cfe0:	e7ea      	b.n	800cfb8 <__lshift+0xa4>
 800cfe2:	bf00      	nop
 800cfe4:	0800e361 	.word	0x0800e361
 800cfe8:	0800e3f0 	.word	0x0800e3f0

0800cfec <__mcmp>:
 800cfec:	4603      	mov	r3, r0
 800cfee:	690a      	ldr	r2, [r1, #16]
 800cff0:	6900      	ldr	r0, [r0, #16]
 800cff2:	b530      	push	{r4, r5, lr}
 800cff4:	1a80      	subs	r0, r0, r2
 800cff6:	d10d      	bne.n	800d014 <__mcmp+0x28>
 800cff8:	3314      	adds	r3, #20
 800cffa:	3114      	adds	r1, #20
 800cffc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d000:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d004:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d008:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d00c:	4295      	cmp	r5, r2
 800d00e:	d002      	beq.n	800d016 <__mcmp+0x2a>
 800d010:	d304      	bcc.n	800d01c <__mcmp+0x30>
 800d012:	2001      	movs	r0, #1
 800d014:	bd30      	pop	{r4, r5, pc}
 800d016:	42a3      	cmp	r3, r4
 800d018:	d3f4      	bcc.n	800d004 <__mcmp+0x18>
 800d01a:	e7fb      	b.n	800d014 <__mcmp+0x28>
 800d01c:	f04f 30ff 	mov.w	r0, #4294967295
 800d020:	e7f8      	b.n	800d014 <__mcmp+0x28>
	...

0800d024 <__mdiff>:
 800d024:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d028:	460c      	mov	r4, r1
 800d02a:	4606      	mov	r6, r0
 800d02c:	4611      	mov	r1, r2
 800d02e:	4620      	mov	r0, r4
 800d030:	4692      	mov	sl, r2
 800d032:	f7ff ffdb 	bl	800cfec <__mcmp>
 800d036:	1e05      	subs	r5, r0, #0
 800d038:	d111      	bne.n	800d05e <__mdiff+0x3a>
 800d03a:	4629      	mov	r1, r5
 800d03c:	4630      	mov	r0, r6
 800d03e:	f7ff fd11 	bl	800ca64 <_Balloc>
 800d042:	4602      	mov	r2, r0
 800d044:	b928      	cbnz	r0, 800d052 <__mdiff+0x2e>
 800d046:	f240 2132 	movw	r1, #562	; 0x232
 800d04a:	4b3c      	ldr	r3, [pc, #240]	; (800d13c <__mdiff+0x118>)
 800d04c:	483c      	ldr	r0, [pc, #240]	; (800d140 <__mdiff+0x11c>)
 800d04e:	f7fe f9d9 	bl	800b404 <__assert_func>
 800d052:	2301      	movs	r3, #1
 800d054:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d058:	4610      	mov	r0, r2
 800d05a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05e:	bfa4      	itt	ge
 800d060:	4653      	movge	r3, sl
 800d062:	46a2      	movge	sl, r4
 800d064:	4630      	mov	r0, r6
 800d066:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d06a:	bfa6      	itte	ge
 800d06c:	461c      	movge	r4, r3
 800d06e:	2500      	movge	r5, #0
 800d070:	2501      	movlt	r5, #1
 800d072:	f7ff fcf7 	bl	800ca64 <_Balloc>
 800d076:	4602      	mov	r2, r0
 800d078:	b918      	cbnz	r0, 800d082 <__mdiff+0x5e>
 800d07a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d07e:	4b2f      	ldr	r3, [pc, #188]	; (800d13c <__mdiff+0x118>)
 800d080:	e7e4      	b.n	800d04c <__mdiff+0x28>
 800d082:	f100 0814 	add.w	r8, r0, #20
 800d086:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d08a:	60c5      	str	r5, [r0, #12]
 800d08c:	f04f 0c00 	mov.w	ip, #0
 800d090:	f10a 0514 	add.w	r5, sl, #20
 800d094:	f10a 0010 	add.w	r0, sl, #16
 800d098:	46c2      	mov	sl, r8
 800d09a:	6926      	ldr	r6, [r4, #16]
 800d09c:	f104 0914 	add.w	r9, r4, #20
 800d0a0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d0a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d0a8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d0ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800d0b0:	fa1f f18b 	uxth.w	r1, fp
 800d0b4:	4461      	add	r1, ip
 800d0b6:	fa1f fc83 	uxth.w	ip, r3
 800d0ba:	0c1b      	lsrs	r3, r3, #16
 800d0bc:	eba1 010c 	sub.w	r1, r1, ip
 800d0c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d0c8:	b289      	uxth	r1, r1
 800d0ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d0ce:	454e      	cmp	r6, r9
 800d0d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d0d4:	f84a 3b04 	str.w	r3, [sl], #4
 800d0d8:	d8e6      	bhi.n	800d0a8 <__mdiff+0x84>
 800d0da:	1b33      	subs	r3, r6, r4
 800d0dc:	3b15      	subs	r3, #21
 800d0de:	f023 0303 	bic.w	r3, r3, #3
 800d0e2:	3415      	adds	r4, #21
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	42a6      	cmp	r6, r4
 800d0e8:	bf38      	it	cc
 800d0ea:	2304      	movcc	r3, #4
 800d0ec:	441d      	add	r5, r3
 800d0ee:	4443      	add	r3, r8
 800d0f0:	461e      	mov	r6, r3
 800d0f2:	462c      	mov	r4, r5
 800d0f4:	4574      	cmp	r4, lr
 800d0f6:	d30e      	bcc.n	800d116 <__mdiff+0xf2>
 800d0f8:	f10e 0103 	add.w	r1, lr, #3
 800d0fc:	1b49      	subs	r1, r1, r5
 800d0fe:	f021 0103 	bic.w	r1, r1, #3
 800d102:	3d03      	subs	r5, #3
 800d104:	45ae      	cmp	lr, r5
 800d106:	bf38      	it	cc
 800d108:	2100      	movcc	r1, #0
 800d10a:	4419      	add	r1, r3
 800d10c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d110:	b18b      	cbz	r3, 800d136 <__mdiff+0x112>
 800d112:	6117      	str	r7, [r2, #16]
 800d114:	e7a0      	b.n	800d058 <__mdiff+0x34>
 800d116:	f854 8b04 	ldr.w	r8, [r4], #4
 800d11a:	fa1f f188 	uxth.w	r1, r8
 800d11e:	4461      	add	r1, ip
 800d120:	1408      	asrs	r0, r1, #16
 800d122:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d126:	b289      	uxth	r1, r1
 800d128:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d12c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d130:	f846 1b04 	str.w	r1, [r6], #4
 800d134:	e7de      	b.n	800d0f4 <__mdiff+0xd0>
 800d136:	3f01      	subs	r7, #1
 800d138:	e7e8      	b.n	800d10c <__mdiff+0xe8>
 800d13a:	bf00      	nop
 800d13c:	0800e361 	.word	0x0800e361
 800d140:	0800e3f0 	.word	0x0800e3f0

0800d144 <__ulp>:
 800d144:	4b11      	ldr	r3, [pc, #68]	; (800d18c <__ulp+0x48>)
 800d146:	400b      	ands	r3, r1
 800d148:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	dd02      	ble.n	800d156 <__ulp+0x12>
 800d150:	2000      	movs	r0, #0
 800d152:	4619      	mov	r1, r3
 800d154:	4770      	bx	lr
 800d156:	425b      	negs	r3, r3
 800d158:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d15c:	f04f 0000 	mov.w	r0, #0
 800d160:	f04f 0100 	mov.w	r1, #0
 800d164:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d168:	da04      	bge.n	800d174 <__ulp+0x30>
 800d16a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d16e:	fa43 f102 	asr.w	r1, r3, r2
 800d172:	4770      	bx	lr
 800d174:	f1a2 0314 	sub.w	r3, r2, #20
 800d178:	2b1e      	cmp	r3, #30
 800d17a:	bfd6      	itet	le
 800d17c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d180:	2301      	movgt	r3, #1
 800d182:	fa22 f303 	lsrle.w	r3, r2, r3
 800d186:	4618      	mov	r0, r3
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	7ff00000 	.word	0x7ff00000

0800d190 <__b2d>:
 800d190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d194:	6907      	ldr	r7, [r0, #16]
 800d196:	f100 0914 	add.w	r9, r0, #20
 800d19a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d19e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d1a2:	f1a7 0804 	sub.w	r8, r7, #4
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	f7ff fd52 	bl	800cc50 <__hi0bits>
 800d1ac:	f1c0 0320 	rsb	r3, r0, #32
 800d1b0:	280a      	cmp	r0, #10
 800d1b2:	600b      	str	r3, [r1, #0]
 800d1b4:	491f      	ldr	r1, [pc, #124]	; (800d234 <__b2d+0xa4>)
 800d1b6:	dc17      	bgt.n	800d1e8 <__b2d+0x58>
 800d1b8:	45c1      	cmp	r9, r8
 800d1ba:	bf28      	it	cs
 800d1bc:	2200      	movcs	r2, #0
 800d1be:	f1c0 0c0b 	rsb	ip, r0, #11
 800d1c2:	fa26 f30c 	lsr.w	r3, r6, ip
 800d1c6:	bf38      	it	cc
 800d1c8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d1cc:	ea43 0501 	orr.w	r5, r3, r1
 800d1d0:	f100 0315 	add.w	r3, r0, #21
 800d1d4:	fa06 f303 	lsl.w	r3, r6, r3
 800d1d8:	fa22 f20c 	lsr.w	r2, r2, ip
 800d1dc:	ea43 0402 	orr.w	r4, r3, r2
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1e8:	45c1      	cmp	r9, r8
 800d1ea:	bf2e      	itee	cs
 800d1ec:	2200      	movcs	r2, #0
 800d1ee:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d1f2:	f1a7 0808 	subcc.w	r8, r7, #8
 800d1f6:	f1b0 030b 	subs.w	r3, r0, #11
 800d1fa:	d016      	beq.n	800d22a <__b2d+0x9a>
 800d1fc:	f1c3 0720 	rsb	r7, r3, #32
 800d200:	fa22 f107 	lsr.w	r1, r2, r7
 800d204:	45c8      	cmp	r8, r9
 800d206:	fa06 f603 	lsl.w	r6, r6, r3
 800d20a:	ea46 0601 	orr.w	r6, r6, r1
 800d20e:	bf94      	ite	ls
 800d210:	2100      	movls	r1, #0
 800d212:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d216:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d21a:	fa02 f003 	lsl.w	r0, r2, r3
 800d21e:	40f9      	lsrs	r1, r7
 800d220:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d224:	ea40 0401 	orr.w	r4, r0, r1
 800d228:	e7da      	b.n	800d1e0 <__b2d+0x50>
 800d22a:	4614      	mov	r4, r2
 800d22c:	ea46 0501 	orr.w	r5, r6, r1
 800d230:	e7d6      	b.n	800d1e0 <__b2d+0x50>
 800d232:	bf00      	nop
 800d234:	3ff00000 	.word	0x3ff00000

0800d238 <__d2b>:
 800d238:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d23c:	2101      	movs	r1, #1
 800d23e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d242:	4690      	mov	r8, r2
 800d244:	461d      	mov	r5, r3
 800d246:	f7ff fc0d 	bl	800ca64 <_Balloc>
 800d24a:	4604      	mov	r4, r0
 800d24c:	b930      	cbnz	r0, 800d25c <__d2b+0x24>
 800d24e:	4602      	mov	r2, r0
 800d250:	f240 310a 	movw	r1, #778	; 0x30a
 800d254:	4b24      	ldr	r3, [pc, #144]	; (800d2e8 <__d2b+0xb0>)
 800d256:	4825      	ldr	r0, [pc, #148]	; (800d2ec <__d2b+0xb4>)
 800d258:	f7fe f8d4 	bl	800b404 <__assert_func>
 800d25c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d260:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d264:	bb2d      	cbnz	r5, 800d2b2 <__d2b+0x7a>
 800d266:	9301      	str	r3, [sp, #4]
 800d268:	f1b8 0300 	subs.w	r3, r8, #0
 800d26c:	d026      	beq.n	800d2bc <__d2b+0x84>
 800d26e:	4668      	mov	r0, sp
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	f7ff fd0d 	bl	800cc90 <__lo0bits>
 800d276:	9900      	ldr	r1, [sp, #0]
 800d278:	b1f0      	cbz	r0, 800d2b8 <__d2b+0x80>
 800d27a:	9a01      	ldr	r2, [sp, #4]
 800d27c:	f1c0 0320 	rsb	r3, r0, #32
 800d280:	fa02 f303 	lsl.w	r3, r2, r3
 800d284:	430b      	orrs	r3, r1
 800d286:	40c2      	lsrs	r2, r0
 800d288:	6163      	str	r3, [r4, #20]
 800d28a:	9201      	str	r2, [sp, #4]
 800d28c:	9b01      	ldr	r3, [sp, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	bf14      	ite	ne
 800d292:	2102      	movne	r1, #2
 800d294:	2101      	moveq	r1, #1
 800d296:	61a3      	str	r3, [r4, #24]
 800d298:	6121      	str	r1, [r4, #16]
 800d29a:	b1c5      	cbz	r5, 800d2ce <__d2b+0x96>
 800d29c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d2a0:	4405      	add	r5, r0
 800d2a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d2a6:	603d      	str	r5, [r7, #0]
 800d2a8:	6030      	str	r0, [r6, #0]
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	b002      	add	sp, #8
 800d2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2b6:	e7d6      	b.n	800d266 <__d2b+0x2e>
 800d2b8:	6161      	str	r1, [r4, #20]
 800d2ba:	e7e7      	b.n	800d28c <__d2b+0x54>
 800d2bc:	a801      	add	r0, sp, #4
 800d2be:	f7ff fce7 	bl	800cc90 <__lo0bits>
 800d2c2:	2101      	movs	r1, #1
 800d2c4:	9b01      	ldr	r3, [sp, #4]
 800d2c6:	6121      	str	r1, [r4, #16]
 800d2c8:	6163      	str	r3, [r4, #20]
 800d2ca:	3020      	adds	r0, #32
 800d2cc:	e7e5      	b.n	800d29a <__d2b+0x62>
 800d2ce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d2d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d2d6:	6038      	str	r0, [r7, #0]
 800d2d8:	6918      	ldr	r0, [r3, #16]
 800d2da:	f7ff fcb9 	bl	800cc50 <__hi0bits>
 800d2de:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d2e2:	6031      	str	r1, [r6, #0]
 800d2e4:	e7e1      	b.n	800d2aa <__d2b+0x72>
 800d2e6:	bf00      	nop
 800d2e8:	0800e361 	.word	0x0800e361
 800d2ec:	0800e3f0 	.word	0x0800e3f0

0800d2f0 <__ratio>:
 800d2f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f4:	4688      	mov	r8, r1
 800d2f6:	4669      	mov	r1, sp
 800d2f8:	4681      	mov	r9, r0
 800d2fa:	f7ff ff49 	bl	800d190 <__b2d>
 800d2fe:	460f      	mov	r7, r1
 800d300:	4604      	mov	r4, r0
 800d302:	460d      	mov	r5, r1
 800d304:	4640      	mov	r0, r8
 800d306:	a901      	add	r1, sp, #4
 800d308:	f7ff ff42 	bl	800d190 <__b2d>
 800d30c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d310:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d314:	468b      	mov	fp, r1
 800d316:	eba3 0c02 	sub.w	ip, r3, r2
 800d31a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d31e:	1a9b      	subs	r3, r3, r2
 800d320:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d324:	2b00      	cmp	r3, #0
 800d326:	bfd5      	itete	le
 800d328:	460a      	movle	r2, r1
 800d32a:	462a      	movgt	r2, r5
 800d32c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d330:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d334:	bfd8      	it	le
 800d336:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d33a:	465b      	mov	r3, fp
 800d33c:	4602      	mov	r2, r0
 800d33e:	4639      	mov	r1, r7
 800d340:	4620      	mov	r0, r4
 800d342:	f7f3 f9f3 	bl	800072c <__aeabi_ddiv>
 800d346:	b003      	add	sp, #12
 800d348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d34c <__copybits>:
 800d34c:	3901      	subs	r1, #1
 800d34e:	b570      	push	{r4, r5, r6, lr}
 800d350:	1149      	asrs	r1, r1, #5
 800d352:	6914      	ldr	r4, [r2, #16]
 800d354:	3101      	adds	r1, #1
 800d356:	f102 0314 	add.w	r3, r2, #20
 800d35a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d35e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d362:	1f05      	subs	r5, r0, #4
 800d364:	42a3      	cmp	r3, r4
 800d366:	d30c      	bcc.n	800d382 <__copybits+0x36>
 800d368:	1aa3      	subs	r3, r4, r2
 800d36a:	3b11      	subs	r3, #17
 800d36c:	f023 0303 	bic.w	r3, r3, #3
 800d370:	3211      	adds	r2, #17
 800d372:	42a2      	cmp	r2, r4
 800d374:	bf88      	it	hi
 800d376:	2300      	movhi	r3, #0
 800d378:	4418      	add	r0, r3
 800d37a:	2300      	movs	r3, #0
 800d37c:	4288      	cmp	r0, r1
 800d37e:	d305      	bcc.n	800d38c <__copybits+0x40>
 800d380:	bd70      	pop	{r4, r5, r6, pc}
 800d382:	f853 6b04 	ldr.w	r6, [r3], #4
 800d386:	f845 6f04 	str.w	r6, [r5, #4]!
 800d38a:	e7eb      	b.n	800d364 <__copybits+0x18>
 800d38c:	f840 3b04 	str.w	r3, [r0], #4
 800d390:	e7f4      	b.n	800d37c <__copybits+0x30>

0800d392 <__any_on>:
 800d392:	f100 0214 	add.w	r2, r0, #20
 800d396:	6900      	ldr	r0, [r0, #16]
 800d398:	114b      	asrs	r3, r1, #5
 800d39a:	4298      	cmp	r0, r3
 800d39c:	b510      	push	{r4, lr}
 800d39e:	db11      	blt.n	800d3c4 <__any_on+0x32>
 800d3a0:	dd0a      	ble.n	800d3b8 <__any_on+0x26>
 800d3a2:	f011 011f 	ands.w	r1, r1, #31
 800d3a6:	d007      	beq.n	800d3b8 <__any_on+0x26>
 800d3a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d3ac:	fa24 f001 	lsr.w	r0, r4, r1
 800d3b0:	fa00 f101 	lsl.w	r1, r0, r1
 800d3b4:	428c      	cmp	r4, r1
 800d3b6:	d10b      	bne.n	800d3d0 <__any_on+0x3e>
 800d3b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d803      	bhi.n	800d3c8 <__any_on+0x36>
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	bd10      	pop	{r4, pc}
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	e7f7      	b.n	800d3b8 <__any_on+0x26>
 800d3c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3cc:	2900      	cmp	r1, #0
 800d3ce:	d0f5      	beq.n	800d3bc <__any_on+0x2a>
 800d3d0:	2001      	movs	r0, #1
 800d3d2:	e7f6      	b.n	800d3c2 <__any_on+0x30>

0800d3d4 <_calloc_r>:
 800d3d4:	b538      	push	{r3, r4, r5, lr}
 800d3d6:	fb02 f501 	mul.w	r5, r2, r1
 800d3da:	4629      	mov	r1, r5
 800d3dc:	f7fc f8e4 	bl	80095a8 <_malloc_r>
 800d3e0:	4604      	mov	r4, r0
 800d3e2:	b118      	cbz	r0, 800d3ec <_calloc_r+0x18>
 800d3e4:	462a      	mov	r2, r5
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	f7fc f8d5 	bl	8009596 <memset>
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	bd38      	pop	{r3, r4, r5, pc}

0800d3f0 <_free_r>:
 800d3f0:	b538      	push	{r3, r4, r5, lr}
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	2900      	cmp	r1, #0
 800d3f6:	d043      	beq.n	800d480 <_free_r+0x90>
 800d3f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3fc:	1f0c      	subs	r4, r1, #4
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	bfb8      	it	lt
 800d402:	18e4      	addlt	r4, r4, r3
 800d404:	f7ff fb22 	bl	800ca4c <__malloc_lock>
 800d408:	4a1e      	ldr	r2, [pc, #120]	; (800d484 <_free_r+0x94>)
 800d40a:	6813      	ldr	r3, [r2, #0]
 800d40c:	4610      	mov	r0, r2
 800d40e:	b933      	cbnz	r3, 800d41e <_free_r+0x2e>
 800d410:	6063      	str	r3, [r4, #4]
 800d412:	6014      	str	r4, [r2, #0]
 800d414:	4628      	mov	r0, r5
 800d416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d41a:	f7ff bb1d 	b.w	800ca58 <__malloc_unlock>
 800d41e:	42a3      	cmp	r3, r4
 800d420:	d90a      	bls.n	800d438 <_free_r+0x48>
 800d422:	6821      	ldr	r1, [r4, #0]
 800d424:	1862      	adds	r2, r4, r1
 800d426:	4293      	cmp	r3, r2
 800d428:	bf01      	itttt	eq
 800d42a:	681a      	ldreq	r2, [r3, #0]
 800d42c:	685b      	ldreq	r3, [r3, #4]
 800d42e:	1852      	addeq	r2, r2, r1
 800d430:	6022      	streq	r2, [r4, #0]
 800d432:	6063      	str	r3, [r4, #4]
 800d434:	6004      	str	r4, [r0, #0]
 800d436:	e7ed      	b.n	800d414 <_free_r+0x24>
 800d438:	461a      	mov	r2, r3
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	b10b      	cbz	r3, 800d442 <_free_r+0x52>
 800d43e:	42a3      	cmp	r3, r4
 800d440:	d9fa      	bls.n	800d438 <_free_r+0x48>
 800d442:	6811      	ldr	r1, [r2, #0]
 800d444:	1850      	adds	r0, r2, r1
 800d446:	42a0      	cmp	r0, r4
 800d448:	d10b      	bne.n	800d462 <_free_r+0x72>
 800d44a:	6820      	ldr	r0, [r4, #0]
 800d44c:	4401      	add	r1, r0
 800d44e:	1850      	adds	r0, r2, r1
 800d450:	4283      	cmp	r3, r0
 800d452:	6011      	str	r1, [r2, #0]
 800d454:	d1de      	bne.n	800d414 <_free_r+0x24>
 800d456:	6818      	ldr	r0, [r3, #0]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	4401      	add	r1, r0
 800d45c:	6011      	str	r1, [r2, #0]
 800d45e:	6053      	str	r3, [r2, #4]
 800d460:	e7d8      	b.n	800d414 <_free_r+0x24>
 800d462:	d902      	bls.n	800d46a <_free_r+0x7a>
 800d464:	230c      	movs	r3, #12
 800d466:	602b      	str	r3, [r5, #0]
 800d468:	e7d4      	b.n	800d414 <_free_r+0x24>
 800d46a:	6820      	ldr	r0, [r4, #0]
 800d46c:	1821      	adds	r1, r4, r0
 800d46e:	428b      	cmp	r3, r1
 800d470:	bf01      	itttt	eq
 800d472:	6819      	ldreq	r1, [r3, #0]
 800d474:	685b      	ldreq	r3, [r3, #4]
 800d476:	1809      	addeq	r1, r1, r0
 800d478:	6021      	streq	r1, [r4, #0]
 800d47a:	6063      	str	r3, [r4, #4]
 800d47c:	6054      	str	r4, [r2, #4]
 800d47e:	e7c9      	b.n	800d414 <_free_r+0x24>
 800d480:	bd38      	pop	{r3, r4, r5, pc}
 800d482:	bf00      	nop
 800d484:	200036fc 	.word	0x200036fc

0800d488 <__ssputs_r>:
 800d488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d48c:	688e      	ldr	r6, [r1, #8]
 800d48e:	4682      	mov	sl, r0
 800d490:	429e      	cmp	r6, r3
 800d492:	460c      	mov	r4, r1
 800d494:	4690      	mov	r8, r2
 800d496:	461f      	mov	r7, r3
 800d498:	d838      	bhi.n	800d50c <__ssputs_r+0x84>
 800d49a:	898a      	ldrh	r2, [r1, #12]
 800d49c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d4a0:	d032      	beq.n	800d508 <__ssputs_r+0x80>
 800d4a2:	6825      	ldr	r5, [r4, #0]
 800d4a4:	6909      	ldr	r1, [r1, #16]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	eba5 0901 	sub.w	r9, r5, r1
 800d4ac:	6965      	ldr	r5, [r4, #20]
 800d4ae:	444b      	add	r3, r9
 800d4b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4b8:	106d      	asrs	r5, r5, #1
 800d4ba:	429d      	cmp	r5, r3
 800d4bc:	bf38      	it	cc
 800d4be:	461d      	movcc	r5, r3
 800d4c0:	0553      	lsls	r3, r2, #21
 800d4c2:	d531      	bpl.n	800d528 <__ssputs_r+0xa0>
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	f7fc f86f 	bl	80095a8 <_malloc_r>
 800d4ca:	4606      	mov	r6, r0
 800d4cc:	b950      	cbnz	r0, 800d4e4 <__ssputs_r+0x5c>
 800d4ce:	230c      	movs	r3, #12
 800d4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d4:	f8ca 3000 	str.w	r3, [sl]
 800d4d8:	89a3      	ldrh	r3, [r4, #12]
 800d4da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4de:	81a3      	strh	r3, [r4, #12]
 800d4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e4:	464a      	mov	r2, r9
 800d4e6:	6921      	ldr	r1, [r4, #16]
 800d4e8:	f7fc f847 	bl	800957a <memcpy>
 800d4ec:	89a3      	ldrh	r3, [r4, #12]
 800d4ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d4f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4f6:	81a3      	strh	r3, [r4, #12]
 800d4f8:	6126      	str	r6, [r4, #16]
 800d4fa:	444e      	add	r6, r9
 800d4fc:	6026      	str	r6, [r4, #0]
 800d4fe:	463e      	mov	r6, r7
 800d500:	6165      	str	r5, [r4, #20]
 800d502:	eba5 0509 	sub.w	r5, r5, r9
 800d506:	60a5      	str	r5, [r4, #8]
 800d508:	42be      	cmp	r6, r7
 800d50a:	d900      	bls.n	800d50e <__ssputs_r+0x86>
 800d50c:	463e      	mov	r6, r7
 800d50e:	4632      	mov	r2, r6
 800d510:	4641      	mov	r1, r8
 800d512:	6820      	ldr	r0, [r4, #0]
 800d514:	f000 fbd0 	bl	800dcb8 <memmove>
 800d518:	68a3      	ldr	r3, [r4, #8]
 800d51a:	6822      	ldr	r2, [r4, #0]
 800d51c:	1b9b      	subs	r3, r3, r6
 800d51e:	4432      	add	r2, r6
 800d520:	2000      	movs	r0, #0
 800d522:	60a3      	str	r3, [r4, #8]
 800d524:	6022      	str	r2, [r4, #0]
 800d526:	e7db      	b.n	800d4e0 <__ssputs_r+0x58>
 800d528:	462a      	mov	r2, r5
 800d52a:	f000 fbdf 	bl	800dcec <_realloc_r>
 800d52e:	4606      	mov	r6, r0
 800d530:	2800      	cmp	r0, #0
 800d532:	d1e1      	bne.n	800d4f8 <__ssputs_r+0x70>
 800d534:	4650      	mov	r0, sl
 800d536:	6921      	ldr	r1, [r4, #16]
 800d538:	f7ff ff5a 	bl	800d3f0 <_free_r>
 800d53c:	e7c7      	b.n	800d4ce <__ssputs_r+0x46>
	...

0800d540 <_svfiprintf_r>:
 800d540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d544:	4698      	mov	r8, r3
 800d546:	898b      	ldrh	r3, [r1, #12]
 800d548:	4607      	mov	r7, r0
 800d54a:	061b      	lsls	r3, r3, #24
 800d54c:	460d      	mov	r5, r1
 800d54e:	4614      	mov	r4, r2
 800d550:	b09d      	sub	sp, #116	; 0x74
 800d552:	d50e      	bpl.n	800d572 <_svfiprintf_r+0x32>
 800d554:	690b      	ldr	r3, [r1, #16]
 800d556:	b963      	cbnz	r3, 800d572 <_svfiprintf_r+0x32>
 800d558:	2140      	movs	r1, #64	; 0x40
 800d55a:	f7fc f825 	bl	80095a8 <_malloc_r>
 800d55e:	6028      	str	r0, [r5, #0]
 800d560:	6128      	str	r0, [r5, #16]
 800d562:	b920      	cbnz	r0, 800d56e <_svfiprintf_r+0x2e>
 800d564:	230c      	movs	r3, #12
 800d566:	603b      	str	r3, [r7, #0]
 800d568:	f04f 30ff 	mov.w	r0, #4294967295
 800d56c:	e0d1      	b.n	800d712 <_svfiprintf_r+0x1d2>
 800d56e:	2340      	movs	r3, #64	; 0x40
 800d570:	616b      	str	r3, [r5, #20]
 800d572:	2300      	movs	r3, #0
 800d574:	9309      	str	r3, [sp, #36]	; 0x24
 800d576:	2320      	movs	r3, #32
 800d578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d57c:	2330      	movs	r3, #48	; 0x30
 800d57e:	f04f 0901 	mov.w	r9, #1
 800d582:	f8cd 800c 	str.w	r8, [sp, #12]
 800d586:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d72c <_svfiprintf_r+0x1ec>
 800d58a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d58e:	4623      	mov	r3, r4
 800d590:	469a      	mov	sl, r3
 800d592:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d596:	b10a      	cbz	r2, 800d59c <_svfiprintf_r+0x5c>
 800d598:	2a25      	cmp	r2, #37	; 0x25
 800d59a:	d1f9      	bne.n	800d590 <_svfiprintf_r+0x50>
 800d59c:	ebba 0b04 	subs.w	fp, sl, r4
 800d5a0:	d00b      	beq.n	800d5ba <_svfiprintf_r+0x7a>
 800d5a2:	465b      	mov	r3, fp
 800d5a4:	4622      	mov	r2, r4
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	4638      	mov	r0, r7
 800d5aa:	f7ff ff6d 	bl	800d488 <__ssputs_r>
 800d5ae:	3001      	adds	r0, #1
 800d5b0:	f000 80aa 	beq.w	800d708 <_svfiprintf_r+0x1c8>
 800d5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5b6:	445a      	add	r2, fp
 800d5b8:	9209      	str	r2, [sp, #36]	; 0x24
 800d5ba:	f89a 3000 	ldrb.w	r3, [sl]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f000 80a2 	beq.w	800d708 <_svfiprintf_r+0x1c8>
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5ce:	f10a 0a01 	add.w	sl, sl, #1
 800d5d2:	9304      	str	r3, [sp, #16]
 800d5d4:	9307      	str	r3, [sp, #28]
 800d5d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5da:	931a      	str	r3, [sp, #104]	; 0x68
 800d5dc:	4654      	mov	r4, sl
 800d5de:	2205      	movs	r2, #5
 800d5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5e4:	4851      	ldr	r0, [pc, #324]	; (800d72c <_svfiprintf_r+0x1ec>)
 800d5e6:	f7ff fa23 	bl	800ca30 <memchr>
 800d5ea:	9a04      	ldr	r2, [sp, #16]
 800d5ec:	b9d8      	cbnz	r0, 800d626 <_svfiprintf_r+0xe6>
 800d5ee:	06d0      	lsls	r0, r2, #27
 800d5f0:	bf44      	itt	mi
 800d5f2:	2320      	movmi	r3, #32
 800d5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5f8:	0711      	lsls	r1, r2, #28
 800d5fa:	bf44      	itt	mi
 800d5fc:	232b      	movmi	r3, #43	; 0x2b
 800d5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d602:	f89a 3000 	ldrb.w	r3, [sl]
 800d606:	2b2a      	cmp	r3, #42	; 0x2a
 800d608:	d015      	beq.n	800d636 <_svfiprintf_r+0xf6>
 800d60a:	4654      	mov	r4, sl
 800d60c:	2000      	movs	r0, #0
 800d60e:	f04f 0c0a 	mov.w	ip, #10
 800d612:	9a07      	ldr	r2, [sp, #28]
 800d614:	4621      	mov	r1, r4
 800d616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d61a:	3b30      	subs	r3, #48	; 0x30
 800d61c:	2b09      	cmp	r3, #9
 800d61e:	d94e      	bls.n	800d6be <_svfiprintf_r+0x17e>
 800d620:	b1b0      	cbz	r0, 800d650 <_svfiprintf_r+0x110>
 800d622:	9207      	str	r2, [sp, #28]
 800d624:	e014      	b.n	800d650 <_svfiprintf_r+0x110>
 800d626:	eba0 0308 	sub.w	r3, r0, r8
 800d62a:	fa09 f303 	lsl.w	r3, r9, r3
 800d62e:	4313      	orrs	r3, r2
 800d630:	46a2      	mov	sl, r4
 800d632:	9304      	str	r3, [sp, #16]
 800d634:	e7d2      	b.n	800d5dc <_svfiprintf_r+0x9c>
 800d636:	9b03      	ldr	r3, [sp, #12]
 800d638:	1d19      	adds	r1, r3, #4
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	9103      	str	r1, [sp, #12]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	bfbb      	ittet	lt
 800d642:	425b      	neglt	r3, r3
 800d644:	f042 0202 	orrlt.w	r2, r2, #2
 800d648:	9307      	strge	r3, [sp, #28]
 800d64a:	9307      	strlt	r3, [sp, #28]
 800d64c:	bfb8      	it	lt
 800d64e:	9204      	strlt	r2, [sp, #16]
 800d650:	7823      	ldrb	r3, [r4, #0]
 800d652:	2b2e      	cmp	r3, #46	; 0x2e
 800d654:	d10c      	bne.n	800d670 <_svfiprintf_r+0x130>
 800d656:	7863      	ldrb	r3, [r4, #1]
 800d658:	2b2a      	cmp	r3, #42	; 0x2a
 800d65a:	d135      	bne.n	800d6c8 <_svfiprintf_r+0x188>
 800d65c:	9b03      	ldr	r3, [sp, #12]
 800d65e:	3402      	adds	r4, #2
 800d660:	1d1a      	adds	r2, r3, #4
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	9203      	str	r2, [sp, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	bfb8      	it	lt
 800d66a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d66e:	9305      	str	r3, [sp, #20]
 800d670:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d73c <_svfiprintf_r+0x1fc>
 800d674:	2203      	movs	r2, #3
 800d676:	4650      	mov	r0, sl
 800d678:	7821      	ldrb	r1, [r4, #0]
 800d67a:	f7ff f9d9 	bl	800ca30 <memchr>
 800d67e:	b140      	cbz	r0, 800d692 <_svfiprintf_r+0x152>
 800d680:	2340      	movs	r3, #64	; 0x40
 800d682:	eba0 000a 	sub.w	r0, r0, sl
 800d686:	fa03 f000 	lsl.w	r0, r3, r0
 800d68a:	9b04      	ldr	r3, [sp, #16]
 800d68c:	3401      	adds	r4, #1
 800d68e:	4303      	orrs	r3, r0
 800d690:	9304      	str	r3, [sp, #16]
 800d692:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d696:	2206      	movs	r2, #6
 800d698:	4825      	ldr	r0, [pc, #148]	; (800d730 <_svfiprintf_r+0x1f0>)
 800d69a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d69e:	f7ff f9c7 	bl	800ca30 <memchr>
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	d038      	beq.n	800d718 <_svfiprintf_r+0x1d8>
 800d6a6:	4b23      	ldr	r3, [pc, #140]	; (800d734 <_svfiprintf_r+0x1f4>)
 800d6a8:	bb1b      	cbnz	r3, 800d6f2 <_svfiprintf_r+0x1b2>
 800d6aa:	9b03      	ldr	r3, [sp, #12]
 800d6ac:	3307      	adds	r3, #7
 800d6ae:	f023 0307 	bic.w	r3, r3, #7
 800d6b2:	3308      	adds	r3, #8
 800d6b4:	9303      	str	r3, [sp, #12]
 800d6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6b8:	4433      	add	r3, r6
 800d6ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d6bc:	e767      	b.n	800d58e <_svfiprintf_r+0x4e>
 800d6be:	460c      	mov	r4, r1
 800d6c0:	2001      	movs	r0, #1
 800d6c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6c6:	e7a5      	b.n	800d614 <_svfiprintf_r+0xd4>
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	f04f 0c0a 	mov.w	ip, #10
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	3401      	adds	r4, #1
 800d6d2:	9305      	str	r3, [sp, #20]
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6da:	3a30      	subs	r2, #48	; 0x30
 800d6dc:	2a09      	cmp	r2, #9
 800d6de:	d903      	bls.n	800d6e8 <_svfiprintf_r+0x1a8>
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d0c5      	beq.n	800d670 <_svfiprintf_r+0x130>
 800d6e4:	9105      	str	r1, [sp, #20]
 800d6e6:	e7c3      	b.n	800d670 <_svfiprintf_r+0x130>
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6f0:	e7f0      	b.n	800d6d4 <_svfiprintf_r+0x194>
 800d6f2:	ab03      	add	r3, sp, #12
 800d6f4:	9300      	str	r3, [sp, #0]
 800d6f6:	462a      	mov	r2, r5
 800d6f8:	4638      	mov	r0, r7
 800d6fa:	4b0f      	ldr	r3, [pc, #60]	; (800d738 <_svfiprintf_r+0x1f8>)
 800d6fc:	a904      	add	r1, sp, #16
 800d6fe:	f7fc f84b 	bl	8009798 <_printf_float>
 800d702:	1c42      	adds	r2, r0, #1
 800d704:	4606      	mov	r6, r0
 800d706:	d1d6      	bne.n	800d6b6 <_svfiprintf_r+0x176>
 800d708:	89ab      	ldrh	r3, [r5, #12]
 800d70a:	065b      	lsls	r3, r3, #25
 800d70c:	f53f af2c 	bmi.w	800d568 <_svfiprintf_r+0x28>
 800d710:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d712:	b01d      	add	sp, #116	; 0x74
 800d714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d718:	ab03      	add	r3, sp, #12
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	462a      	mov	r2, r5
 800d71e:	4638      	mov	r0, r7
 800d720:	4b05      	ldr	r3, [pc, #20]	; (800d738 <_svfiprintf_r+0x1f8>)
 800d722:	a904      	add	r1, sp, #16
 800d724:	f7fc fad4 	bl	8009cd0 <_printf_i>
 800d728:	e7eb      	b.n	800d702 <_svfiprintf_r+0x1c2>
 800d72a:	bf00      	nop
 800d72c:	0800e54c 	.word	0x0800e54c
 800d730:	0800e556 	.word	0x0800e556
 800d734:	08009799 	.word	0x08009799
 800d738:	0800d489 	.word	0x0800d489
 800d73c:	0800e552 	.word	0x0800e552

0800d740 <__sfputc_r>:
 800d740:	6893      	ldr	r3, [r2, #8]
 800d742:	b410      	push	{r4}
 800d744:	3b01      	subs	r3, #1
 800d746:	2b00      	cmp	r3, #0
 800d748:	6093      	str	r3, [r2, #8]
 800d74a:	da07      	bge.n	800d75c <__sfputc_r+0x1c>
 800d74c:	6994      	ldr	r4, [r2, #24]
 800d74e:	42a3      	cmp	r3, r4
 800d750:	db01      	blt.n	800d756 <__sfputc_r+0x16>
 800d752:	290a      	cmp	r1, #10
 800d754:	d102      	bne.n	800d75c <__sfputc_r+0x1c>
 800d756:	bc10      	pop	{r4}
 800d758:	f000 b974 	b.w	800da44 <__swbuf_r>
 800d75c:	6813      	ldr	r3, [r2, #0]
 800d75e:	1c58      	adds	r0, r3, #1
 800d760:	6010      	str	r0, [r2, #0]
 800d762:	7019      	strb	r1, [r3, #0]
 800d764:	4608      	mov	r0, r1
 800d766:	bc10      	pop	{r4}
 800d768:	4770      	bx	lr

0800d76a <__sfputs_r>:
 800d76a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76c:	4606      	mov	r6, r0
 800d76e:	460f      	mov	r7, r1
 800d770:	4614      	mov	r4, r2
 800d772:	18d5      	adds	r5, r2, r3
 800d774:	42ac      	cmp	r4, r5
 800d776:	d101      	bne.n	800d77c <__sfputs_r+0x12>
 800d778:	2000      	movs	r0, #0
 800d77a:	e007      	b.n	800d78c <__sfputs_r+0x22>
 800d77c:	463a      	mov	r2, r7
 800d77e:	4630      	mov	r0, r6
 800d780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d784:	f7ff ffdc 	bl	800d740 <__sfputc_r>
 800d788:	1c43      	adds	r3, r0, #1
 800d78a:	d1f3      	bne.n	800d774 <__sfputs_r+0xa>
 800d78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d790 <_vfiprintf_r>:
 800d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d794:	460d      	mov	r5, r1
 800d796:	4614      	mov	r4, r2
 800d798:	4698      	mov	r8, r3
 800d79a:	4606      	mov	r6, r0
 800d79c:	b09d      	sub	sp, #116	; 0x74
 800d79e:	b118      	cbz	r0, 800d7a8 <_vfiprintf_r+0x18>
 800d7a0:	6983      	ldr	r3, [r0, #24]
 800d7a2:	b90b      	cbnz	r3, 800d7a8 <_vfiprintf_r+0x18>
 800d7a4:	f7fb fe24 	bl	80093f0 <__sinit>
 800d7a8:	4b89      	ldr	r3, [pc, #548]	; (800d9d0 <_vfiprintf_r+0x240>)
 800d7aa:	429d      	cmp	r5, r3
 800d7ac:	d11b      	bne.n	800d7e6 <_vfiprintf_r+0x56>
 800d7ae:	6875      	ldr	r5, [r6, #4]
 800d7b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7b2:	07d9      	lsls	r1, r3, #31
 800d7b4:	d405      	bmi.n	800d7c2 <_vfiprintf_r+0x32>
 800d7b6:	89ab      	ldrh	r3, [r5, #12]
 800d7b8:	059a      	lsls	r2, r3, #22
 800d7ba:	d402      	bmi.n	800d7c2 <_vfiprintf_r+0x32>
 800d7bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7be:	f7fb feda 	bl	8009576 <__retarget_lock_acquire_recursive>
 800d7c2:	89ab      	ldrh	r3, [r5, #12]
 800d7c4:	071b      	lsls	r3, r3, #28
 800d7c6:	d501      	bpl.n	800d7cc <_vfiprintf_r+0x3c>
 800d7c8:	692b      	ldr	r3, [r5, #16]
 800d7ca:	b9eb      	cbnz	r3, 800d808 <_vfiprintf_r+0x78>
 800d7cc:	4629      	mov	r1, r5
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	f000 f998 	bl	800db04 <__swsetup_r>
 800d7d4:	b1c0      	cbz	r0, 800d808 <_vfiprintf_r+0x78>
 800d7d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7d8:	07dc      	lsls	r4, r3, #31
 800d7da:	d50e      	bpl.n	800d7fa <_vfiprintf_r+0x6a>
 800d7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e0:	b01d      	add	sp, #116	; 0x74
 800d7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e6:	4b7b      	ldr	r3, [pc, #492]	; (800d9d4 <_vfiprintf_r+0x244>)
 800d7e8:	429d      	cmp	r5, r3
 800d7ea:	d101      	bne.n	800d7f0 <_vfiprintf_r+0x60>
 800d7ec:	68b5      	ldr	r5, [r6, #8]
 800d7ee:	e7df      	b.n	800d7b0 <_vfiprintf_r+0x20>
 800d7f0:	4b79      	ldr	r3, [pc, #484]	; (800d9d8 <_vfiprintf_r+0x248>)
 800d7f2:	429d      	cmp	r5, r3
 800d7f4:	bf08      	it	eq
 800d7f6:	68f5      	ldreq	r5, [r6, #12]
 800d7f8:	e7da      	b.n	800d7b0 <_vfiprintf_r+0x20>
 800d7fa:	89ab      	ldrh	r3, [r5, #12]
 800d7fc:	0598      	lsls	r0, r3, #22
 800d7fe:	d4ed      	bmi.n	800d7dc <_vfiprintf_r+0x4c>
 800d800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d802:	f7fb feb9 	bl	8009578 <__retarget_lock_release_recursive>
 800d806:	e7e9      	b.n	800d7dc <_vfiprintf_r+0x4c>
 800d808:	2300      	movs	r3, #0
 800d80a:	9309      	str	r3, [sp, #36]	; 0x24
 800d80c:	2320      	movs	r3, #32
 800d80e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d812:	2330      	movs	r3, #48	; 0x30
 800d814:	f04f 0901 	mov.w	r9, #1
 800d818:	f8cd 800c 	str.w	r8, [sp, #12]
 800d81c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d9dc <_vfiprintf_r+0x24c>
 800d820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d824:	4623      	mov	r3, r4
 800d826:	469a      	mov	sl, r3
 800d828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d82c:	b10a      	cbz	r2, 800d832 <_vfiprintf_r+0xa2>
 800d82e:	2a25      	cmp	r2, #37	; 0x25
 800d830:	d1f9      	bne.n	800d826 <_vfiprintf_r+0x96>
 800d832:	ebba 0b04 	subs.w	fp, sl, r4
 800d836:	d00b      	beq.n	800d850 <_vfiprintf_r+0xc0>
 800d838:	465b      	mov	r3, fp
 800d83a:	4622      	mov	r2, r4
 800d83c:	4629      	mov	r1, r5
 800d83e:	4630      	mov	r0, r6
 800d840:	f7ff ff93 	bl	800d76a <__sfputs_r>
 800d844:	3001      	adds	r0, #1
 800d846:	f000 80aa 	beq.w	800d99e <_vfiprintf_r+0x20e>
 800d84a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d84c:	445a      	add	r2, fp
 800d84e:	9209      	str	r2, [sp, #36]	; 0x24
 800d850:	f89a 3000 	ldrb.w	r3, [sl]
 800d854:	2b00      	cmp	r3, #0
 800d856:	f000 80a2 	beq.w	800d99e <_vfiprintf_r+0x20e>
 800d85a:	2300      	movs	r3, #0
 800d85c:	f04f 32ff 	mov.w	r2, #4294967295
 800d860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d864:	f10a 0a01 	add.w	sl, sl, #1
 800d868:	9304      	str	r3, [sp, #16]
 800d86a:	9307      	str	r3, [sp, #28]
 800d86c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d870:	931a      	str	r3, [sp, #104]	; 0x68
 800d872:	4654      	mov	r4, sl
 800d874:	2205      	movs	r2, #5
 800d876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d87a:	4858      	ldr	r0, [pc, #352]	; (800d9dc <_vfiprintf_r+0x24c>)
 800d87c:	f7ff f8d8 	bl	800ca30 <memchr>
 800d880:	9a04      	ldr	r2, [sp, #16]
 800d882:	b9d8      	cbnz	r0, 800d8bc <_vfiprintf_r+0x12c>
 800d884:	06d1      	lsls	r1, r2, #27
 800d886:	bf44      	itt	mi
 800d888:	2320      	movmi	r3, #32
 800d88a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d88e:	0713      	lsls	r3, r2, #28
 800d890:	bf44      	itt	mi
 800d892:	232b      	movmi	r3, #43	; 0x2b
 800d894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d898:	f89a 3000 	ldrb.w	r3, [sl]
 800d89c:	2b2a      	cmp	r3, #42	; 0x2a
 800d89e:	d015      	beq.n	800d8cc <_vfiprintf_r+0x13c>
 800d8a0:	4654      	mov	r4, sl
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	f04f 0c0a 	mov.w	ip, #10
 800d8a8:	9a07      	ldr	r2, [sp, #28]
 800d8aa:	4621      	mov	r1, r4
 800d8ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8b0:	3b30      	subs	r3, #48	; 0x30
 800d8b2:	2b09      	cmp	r3, #9
 800d8b4:	d94e      	bls.n	800d954 <_vfiprintf_r+0x1c4>
 800d8b6:	b1b0      	cbz	r0, 800d8e6 <_vfiprintf_r+0x156>
 800d8b8:	9207      	str	r2, [sp, #28]
 800d8ba:	e014      	b.n	800d8e6 <_vfiprintf_r+0x156>
 800d8bc:	eba0 0308 	sub.w	r3, r0, r8
 800d8c0:	fa09 f303 	lsl.w	r3, r9, r3
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	46a2      	mov	sl, r4
 800d8c8:	9304      	str	r3, [sp, #16]
 800d8ca:	e7d2      	b.n	800d872 <_vfiprintf_r+0xe2>
 800d8cc:	9b03      	ldr	r3, [sp, #12]
 800d8ce:	1d19      	adds	r1, r3, #4
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	9103      	str	r1, [sp, #12]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	bfbb      	ittet	lt
 800d8d8:	425b      	neglt	r3, r3
 800d8da:	f042 0202 	orrlt.w	r2, r2, #2
 800d8de:	9307      	strge	r3, [sp, #28]
 800d8e0:	9307      	strlt	r3, [sp, #28]
 800d8e2:	bfb8      	it	lt
 800d8e4:	9204      	strlt	r2, [sp, #16]
 800d8e6:	7823      	ldrb	r3, [r4, #0]
 800d8e8:	2b2e      	cmp	r3, #46	; 0x2e
 800d8ea:	d10c      	bne.n	800d906 <_vfiprintf_r+0x176>
 800d8ec:	7863      	ldrb	r3, [r4, #1]
 800d8ee:	2b2a      	cmp	r3, #42	; 0x2a
 800d8f0:	d135      	bne.n	800d95e <_vfiprintf_r+0x1ce>
 800d8f2:	9b03      	ldr	r3, [sp, #12]
 800d8f4:	3402      	adds	r4, #2
 800d8f6:	1d1a      	adds	r2, r3, #4
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	9203      	str	r2, [sp, #12]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	bfb8      	it	lt
 800d900:	f04f 33ff 	movlt.w	r3, #4294967295
 800d904:	9305      	str	r3, [sp, #20]
 800d906:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d9ec <_vfiprintf_r+0x25c>
 800d90a:	2203      	movs	r2, #3
 800d90c:	4650      	mov	r0, sl
 800d90e:	7821      	ldrb	r1, [r4, #0]
 800d910:	f7ff f88e 	bl	800ca30 <memchr>
 800d914:	b140      	cbz	r0, 800d928 <_vfiprintf_r+0x198>
 800d916:	2340      	movs	r3, #64	; 0x40
 800d918:	eba0 000a 	sub.w	r0, r0, sl
 800d91c:	fa03 f000 	lsl.w	r0, r3, r0
 800d920:	9b04      	ldr	r3, [sp, #16]
 800d922:	3401      	adds	r4, #1
 800d924:	4303      	orrs	r3, r0
 800d926:	9304      	str	r3, [sp, #16]
 800d928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d92c:	2206      	movs	r2, #6
 800d92e:	482c      	ldr	r0, [pc, #176]	; (800d9e0 <_vfiprintf_r+0x250>)
 800d930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d934:	f7ff f87c 	bl	800ca30 <memchr>
 800d938:	2800      	cmp	r0, #0
 800d93a:	d03f      	beq.n	800d9bc <_vfiprintf_r+0x22c>
 800d93c:	4b29      	ldr	r3, [pc, #164]	; (800d9e4 <_vfiprintf_r+0x254>)
 800d93e:	bb1b      	cbnz	r3, 800d988 <_vfiprintf_r+0x1f8>
 800d940:	9b03      	ldr	r3, [sp, #12]
 800d942:	3307      	adds	r3, #7
 800d944:	f023 0307 	bic.w	r3, r3, #7
 800d948:	3308      	adds	r3, #8
 800d94a:	9303      	str	r3, [sp, #12]
 800d94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d94e:	443b      	add	r3, r7
 800d950:	9309      	str	r3, [sp, #36]	; 0x24
 800d952:	e767      	b.n	800d824 <_vfiprintf_r+0x94>
 800d954:	460c      	mov	r4, r1
 800d956:	2001      	movs	r0, #1
 800d958:	fb0c 3202 	mla	r2, ip, r2, r3
 800d95c:	e7a5      	b.n	800d8aa <_vfiprintf_r+0x11a>
 800d95e:	2300      	movs	r3, #0
 800d960:	f04f 0c0a 	mov.w	ip, #10
 800d964:	4619      	mov	r1, r3
 800d966:	3401      	adds	r4, #1
 800d968:	9305      	str	r3, [sp, #20]
 800d96a:	4620      	mov	r0, r4
 800d96c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d970:	3a30      	subs	r2, #48	; 0x30
 800d972:	2a09      	cmp	r2, #9
 800d974:	d903      	bls.n	800d97e <_vfiprintf_r+0x1ee>
 800d976:	2b00      	cmp	r3, #0
 800d978:	d0c5      	beq.n	800d906 <_vfiprintf_r+0x176>
 800d97a:	9105      	str	r1, [sp, #20]
 800d97c:	e7c3      	b.n	800d906 <_vfiprintf_r+0x176>
 800d97e:	4604      	mov	r4, r0
 800d980:	2301      	movs	r3, #1
 800d982:	fb0c 2101 	mla	r1, ip, r1, r2
 800d986:	e7f0      	b.n	800d96a <_vfiprintf_r+0x1da>
 800d988:	ab03      	add	r3, sp, #12
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	462a      	mov	r2, r5
 800d98e:	4630      	mov	r0, r6
 800d990:	4b15      	ldr	r3, [pc, #84]	; (800d9e8 <_vfiprintf_r+0x258>)
 800d992:	a904      	add	r1, sp, #16
 800d994:	f7fb ff00 	bl	8009798 <_printf_float>
 800d998:	4607      	mov	r7, r0
 800d99a:	1c78      	adds	r0, r7, #1
 800d99c:	d1d6      	bne.n	800d94c <_vfiprintf_r+0x1bc>
 800d99e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9a0:	07d9      	lsls	r1, r3, #31
 800d9a2:	d405      	bmi.n	800d9b0 <_vfiprintf_r+0x220>
 800d9a4:	89ab      	ldrh	r3, [r5, #12]
 800d9a6:	059a      	lsls	r2, r3, #22
 800d9a8:	d402      	bmi.n	800d9b0 <_vfiprintf_r+0x220>
 800d9aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9ac:	f7fb fde4 	bl	8009578 <__retarget_lock_release_recursive>
 800d9b0:	89ab      	ldrh	r3, [r5, #12]
 800d9b2:	065b      	lsls	r3, r3, #25
 800d9b4:	f53f af12 	bmi.w	800d7dc <_vfiprintf_r+0x4c>
 800d9b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9ba:	e711      	b.n	800d7e0 <_vfiprintf_r+0x50>
 800d9bc:	ab03      	add	r3, sp, #12
 800d9be:	9300      	str	r3, [sp, #0]
 800d9c0:	462a      	mov	r2, r5
 800d9c2:	4630      	mov	r0, r6
 800d9c4:	4b08      	ldr	r3, [pc, #32]	; (800d9e8 <_vfiprintf_r+0x258>)
 800d9c6:	a904      	add	r1, sp, #16
 800d9c8:	f7fc f982 	bl	8009cd0 <_printf_i>
 800d9cc:	e7e4      	b.n	800d998 <_vfiprintf_r+0x208>
 800d9ce:	bf00      	nop
 800d9d0:	0800e06c 	.word	0x0800e06c
 800d9d4:	0800e08c 	.word	0x0800e08c
 800d9d8:	0800e04c 	.word	0x0800e04c
 800d9dc:	0800e54c 	.word	0x0800e54c
 800d9e0:	0800e556 	.word	0x0800e556
 800d9e4:	08009799 	.word	0x08009799
 800d9e8:	0800d76b 	.word	0x0800d76b
 800d9ec:	0800e552 	.word	0x0800e552

0800d9f0 <_read_r>:
 800d9f0:	b538      	push	{r3, r4, r5, lr}
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	4608      	mov	r0, r1
 800d9f6:	4611      	mov	r1, r2
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	4d05      	ldr	r5, [pc, #20]	; (800da10 <_read_r+0x20>)
 800d9fc:	602a      	str	r2, [r5, #0]
 800d9fe:	461a      	mov	r2, r3
 800da00:	f7f4 fa67 	bl	8001ed2 <_read>
 800da04:	1c43      	adds	r3, r0, #1
 800da06:	d102      	bne.n	800da0e <_read_r+0x1e>
 800da08:	682b      	ldr	r3, [r5, #0]
 800da0a:	b103      	cbz	r3, 800da0e <_read_r+0x1e>
 800da0c:	6023      	str	r3, [r4, #0]
 800da0e:	bd38      	pop	{r3, r4, r5, pc}
 800da10:	20003b98 	.word	0x20003b98

0800da14 <nan>:
 800da14:	2000      	movs	r0, #0
 800da16:	4901      	ldr	r1, [pc, #4]	; (800da1c <nan+0x8>)
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	7ff80000 	.word	0x7ff80000

0800da20 <strncmp>:
 800da20:	b510      	push	{r4, lr}
 800da22:	b16a      	cbz	r2, 800da40 <strncmp+0x20>
 800da24:	3901      	subs	r1, #1
 800da26:	1884      	adds	r4, r0, r2
 800da28:	f810 3b01 	ldrb.w	r3, [r0], #1
 800da2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800da30:	4293      	cmp	r3, r2
 800da32:	d103      	bne.n	800da3c <strncmp+0x1c>
 800da34:	42a0      	cmp	r0, r4
 800da36:	d001      	beq.n	800da3c <strncmp+0x1c>
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d1f5      	bne.n	800da28 <strncmp+0x8>
 800da3c:	1a98      	subs	r0, r3, r2
 800da3e:	bd10      	pop	{r4, pc}
 800da40:	4610      	mov	r0, r2
 800da42:	e7fc      	b.n	800da3e <strncmp+0x1e>

0800da44 <__swbuf_r>:
 800da44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da46:	460e      	mov	r6, r1
 800da48:	4614      	mov	r4, r2
 800da4a:	4605      	mov	r5, r0
 800da4c:	b118      	cbz	r0, 800da56 <__swbuf_r+0x12>
 800da4e:	6983      	ldr	r3, [r0, #24]
 800da50:	b90b      	cbnz	r3, 800da56 <__swbuf_r+0x12>
 800da52:	f7fb fccd 	bl	80093f0 <__sinit>
 800da56:	4b21      	ldr	r3, [pc, #132]	; (800dadc <__swbuf_r+0x98>)
 800da58:	429c      	cmp	r4, r3
 800da5a:	d12b      	bne.n	800dab4 <__swbuf_r+0x70>
 800da5c:	686c      	ldr	r4, [r5, #4]
 800da5e:	69a3      	ldr	r3, [r4, #24]
 800da60:	60a3      	str	r3, [r4, #8]
 800da62:	89a3      	ldrh	r3, [r4, #12]
 800da64:	071a      	lsls	r2, r3, #28
 800da66:	d52f      	bpl.n	800dac8 <__swbuf_r+0x84>
 800da68:	6923      	ldr	r3, [r4, #16]
 800da6a:	b36b      	cbz	r3, 800dac8 <__swbuf_r+0x84>
 800da6c:	6923      	ldr	r3, [r4, #16]
 800da6e:	6820      	ldr	r0, [r4, #0]
 800da70:	b2f6      	uxtb	r6, r6
 800da72:	1ac0      	subs	r0, r0, r3
 800da74:	6963      	ldr	r3, [r4, #20]
 800da76:	4637      	mov	r7, r6
 800da78:	4283      	cmp	r3, r0
 800da7a:	dc04      	bgt.n	800da86 <__swbuf_r+0x42>
 800da7c:	4621      	mov	r1, r4
 800da7e:	4628      	mov	r0, r5
 800da80:	f7fe fbf2 	bl	800c268 <_fflush_r>
 800da84:	bb30      	cbnz	r0, 800dad4 <__swbuf_r+0x90>
 800da86:	68a3      	ldr	r3, [r4, #8]
 800da88:	3001      	adds	r0, #1
 800da8a:	3b01      	subs	r3, #1
 800da8c:	60a3      	str	r3, [r4, #8]
 800da8e:	6823      	ldr	r3, [r4, #0]
 800da90:	1c5a      	adds	r2, r3, #1
 800da92:	6022      	str	r2, [r4, #0]
 800da94:	701e      	strb	r6, [r3, #0]
 800da96:	6963      	ldr	r3, [r4, #20]
 800da98:	4283      	cmp	r3, r0
 800da9a:	d004      	beq.n	800daa6 <__swbuf_r+0x62>
 800da9c:	89a3      	ldrh	r3, [r4, #12]
 800da9e:	07db      	lsls	r3, r3, #31
 800daa0:	d506      	bpl.n	800dab0 <__swbuf_r+0x6c>
 800daa2:	2e0a      	cmp	r6, #10
 800daa4:	d104      	bne.n	800dab0 <__swbuf_r+0x6c>
 800daa6:	4621      	mov	r1, r4
 800daa8:	4628      	mov	r0, r5
 800daaa:	f7fe fbdd 	bl	800c268 <_fflush_r>
 800daae:	b988      	cbnz	r0, 800dad4 <__swbuf_r+0x90>
 800dab0:	4638      	mov	r0, r7
 800dab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dab4:	4b0a      	ldr	r3, [pc, #40]	; (800dae0 <__swbuf_r+0x9c>)
 800dab6:	429c      	cmp	r4, r3
 800dab8:	d101      	bne.n	800dabe <__swbuf_r+0x7a>
 800daba:	68ac      	ldr	r4, [r5, #8]
 800dabc:	e7cf      	b.n	800da5e <__swbuf_r+0x1a>
 800dabe:	4b09      	ldr	r3, [pc, #36]	; (800dae4 <__swbuf_r+0xa0>)
 800dac0:	429c      	cmp	r4, r3
 800dac2:	bf08      	it	eq
 800dac4:	68ec      	ldreq	r4, [r5, #12]
 800dac6:	e7ca      	b.n	800da5e <__swbuf_r+0x1a>
 800dac8:	4621      	mov	r1, r4
 800daca:	4628      	mov	r0, r5
 800dacc:	f000 f81a 	bl	800db04 <__swsetup_r>
 800dad0:	2800      	cmp	r0, #0
 800dad2:	d0cb      	beq.n	800da6c <__swbuf_r+0x28>
 800dad4:	f04f 37ff 	mov.w	r7, #4294967295
 800dad8:	e7ea      	b.n	800dab0 <__swbuf_r+0x6c>
 800dada:	bf00      	nop
 800dadc:	0800e06c 	.word	0x0800e06c
 800dae0:	0800e08c 	.word	0x0800e08c
 800dae4:	0800e04c 	.word	0x0800e04c

0800dae8 <__ascii_wctomb>:
 800dae8:	4603      	mov	r3, r0
 800daea:	4608      	mov	r0, r1
 800daec:	b141      	cbz	r1, 800db00 <__ascii_wctomb+0x18>
 800daee:	2aff      	cmp	r2, #255	; 0xff
 800daf0:	d904      	bls.n	800dafc <__ascii_wctomb+0x14>
 800daf2:	228a      	movs	r2, #138	; 0x8a
 800daf4:	f04f 30ff 	mov.w	r0, #4294967295
 800daf8:	601a      	str	r2, [r3, #0]
 800dafa:	4770      	bx	lr
 800dafc:	2001      	movs	r0, #1
 800dafe:	700a      	strb	r2, [r1, #0]
 800db00:	4770      	bx	lr
	...

0800db04 <__swsetup_r>:
 800db04:	4b32      	ldr	r3, [pc, #200]	; (800dbd0 <__swsetup_r+0xcc>)
 800db06:	b570      	push	{r4, r5, r6, lr}
 800db08:	681d      	ldr	r5, [r3, #0]
 800db0a:	4606      	mov	r6, r0
 800db0c:	460c      	mov	r4, r1
 800db0e:	b125      	cbz	r5, 800db1a <__swsetup_r+0x16>
 800db10:	69ab      	ldr	r3, [r5, #24]
 800db12:	b913      	cbnz	r3, 800db1a <__swsetup_r+0x16>
 800db14:	4628      	mov	r0, r5
 800db16:	f7fb fc6b 	bl	80093f0 <__sinit>
 800db1a:	4b2e      	ldr	r3, [pc, #184]	; (800dbd4 <__swsetup_r+0xd0>)
 800db1c:	429c      	cmp	r4, r3
 800db1e:	d10f      	bne.n	800db40 <__swsetup_r+0x3c>
 800db20:	686c      	ldr	r4, [r5, #4]
 800db22:	89a3      	ldrh	r3, [r4, #12]
 800db24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db28:	0719      	lsls	r1, r3, #28
 800db2a:	d42c      	bmi.n	800db86 <__swsetup_r+0x82>
 800db2c:	06dd      	lsls	r5, r3, #27
 800db2e:	d411      	bmi.n	800db54 <__swsetup_r+0x50>
 800db30:	2309      	movs	r3, #9
 800db32:	6033      	str	r3, [r6, #0]
 800db34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db38:	f04f 30ff 	mov.w	r0, #4294967295
 800db3c:	81a3      	strh	r3, [r4, #12]
 800db3e:	e03e      	b.n	800dbbe <__swsetup_r+0xba>
 800db40:	4b25      	ldr	r3, [pc, #148]	; (800dbd8 <__swsetup_r+0xd4>)
 800db42:	429c      	cmp	r4, r3
 800db44:	d101      	bne.n	800db4a <__swsetup_r+0x46>
 800db46:	68ac      	ldr	r4, [r5, #8]
 800db48:	e7eb      	b.n	800db22 <__swsetup_r+0x1e>
 800db4a:	4b24      	ldr	r3, [pc, #144]	; (800dbdc <__swsetup_r+0xd8>)
 800db4c:	429c      	cmp	r4, r3
 800db4e:	bf08      	it	eq
 800db50:	68ec      	ldreq	r4, [r5, #12]
 800db52:	e7e6      	b.n	800db22 <__swsetup_r+0x1e>
 800db54:	0758      	lsls	r0, r3, #29
 800db56:	d512      	bpl.n	800db7e <__swsetup_r+0x7a>
 800db58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db5a:	b141      	cbz	r1, 800db6e <__swsetup_r+0x6a>
 800db5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db60:	4299      	cmp	r1, r3
 800db62:	d002      	beq.n	800db6a <__swsetup_r+0x66>
 800db64:	4630      	mov	r0, r6
 800db66:	f7ff fc43 	bl	800d3f0 <_free_r>
 800db6a:	2300      	movs	r3, #0
 800db6c:	6363      	str	r3, [r4, #52]	; 0x34
 800db6e:	89a3      	ldrh	r3, [r4, #12]
 800db70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db74:	81a3      	strh	r3, [r4, #12]
 800db76:	2300      	movs	r3, #0
 800db78:	6063      	str	r3, [r4, #4]
 800db7a:	6923      	ldr	r3, [r4, #16]
 800db7c:	6023      	str	r3, [r4, #0]
 800db7e:	89a3      	ldrh	r3, [r4, #12]
 800db80:	f043 0308 	orr.w	r3, r3, #8
 800db84:	81a3      	strh	r3, [r4, #12]
 800db86:	6923      	ldr	r3, [r4, #16]
 800db88:	b94b      	cbnz	r3, 800db9e <__swsetup_r+0x9a>
 800db8a:	89a3      	ldrh	r3, [r4, #12]
 800db8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db94:	d003      	beq.n	800db9e <__swsetup_r+0x9a>
 800db96:	4621      	mov	r1, r4
 800db98:	4630      	mov	r0, r6
 800db9a:	f000 f84d 	bl	800dc38 <__smakebuf_r>
 800db9e:	89a0      	ldrh	r0, [r4, #12]
 800dba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dba4:	f010 0301 	ands.w	r3, r0, #1
 800dba8:	d00a      	beq.n	800dbc0 <__swsetup_r+0xbc>
 800dbaa:	2300      	movs	r3, #0
 800dbac:	60a3      	str	r3, [r4, #8]
 800dbae:	6963      	ldr	r3, [r4, #20]
 800dbb0:	425b      	negs	r3, r3
 800dbb2:	61a3      	str	r3, [r4, #24]
 800dbb4:	6923      	ldr	r3, [r4, #16]
 800dbb6:	b943      	cbnz	r3, 800dbca <__swsetup_r+0xc6>
 800dbb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dbbc:	d1ba      	bne.n	800db34 <__swsetup_r+0x30>
 800dbbe:	bd70      	pop	{r4, r5, r6, pc}
 800dbc0:	0781      	lsls	r1, r0, #30
 800dbc2:	bf58      	it	pl
 800dbc4:	6963      	ldrpl	r3, [r4, #20]
 800dbc6:	60a3      	str	r3, [r4, #8]
 800dbc8:	e7f4      	b.n	800dbb4 <__swsetup_r+0xb0>
 800dbca:	2000      	movs	r0, #0
 800dbcc:	e7f7      	b.n	800dbbe <__swsetup_r+0xba>
 800dbce:	bf00      	nop
 800dbd0:	2000000c 	.word	0x2000000c
 800dbd4:	0800e06c 	.word	0x0800e06c
 800dbd8:	0800e08c 	.word	0x0800e08c
 800dbdc:	0800e04c 	.word	0x0800e04c

0800dbe0 <abort>:
 800dbe0:	2006      	movs	r0, #6
 800dbe2:	b508      	push	{r3, lr}
 800dbe4:	f000 f8d0 	bl	800dd88 <raise>
 800dbe8:	2001      	movs	r0, #1
 800dbea:	f7f4 f968 	bl	8001ebe <_exit>

0800dbee <__swhatbuf_r>:
 800dbee:	b570      	push	{r4, r5, r6, lr}
 800dbf0:	460e      	mov	r6, r1
 800dbf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbf6:	4614      	mov	r4, r2
 800dbf8:	2900      	cmp	r1, #0
 800dbfa:	461d      	mov	r5, r3
 800dbfc:	b096      	sub	sp, #88	; 0x58
 800dbfe:	da07      	bge.n	800dc10 <__swhatbuf_r+0x22>
 800dc00:	2300      	movs	r3, #0
 800dc02:	602b      	str	r3, [r5, #0]
 800dc04:	89b3      	ldrh	r3, [r6, #12]
 800dc06:	061a      	lsls	r2, r3, #24
 800dc08:	d410      	bmi.n	800dc2c <__swhatbuf_r+0x3e>
 800dc0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc0e:	e00e      	b.n	800dc2e <__swhatbuf_r+0x40>
 800dc10:	466a      	mov	r2, sp
 800dc12:	f000 f8d5 	bl	800ddc0 <_fstat_r>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	dbf2      	blt.n	800dc00 <__swhatbuf_r+0x12>
 800dc1a:	9a01      	ldr	r2, [sp, #4]
 800dc1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dc20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dc24:	425a      	negs	r2, r3
 800dc26:	415a      	adcs	r2, r3
 800dc28:	602a      	str	r2, [r5, #0]
 800dc2a:	e7ee      	b.n	800dc0a <__swhatbuf_r+0x1c>
 800dc2c:	2340      	movs	r3, #64	; 0x40
 800dc2e:	2000      	movs	r0, #0
 800dc30:	6023      	str	r3, [r4, #0]
 800dc32:	b016      	add	sp, #88	; 0x58
 800dc34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dc38 <__smakebuf_r>:
 800dc38:	898b      	ldrh	r3, [r1, #12]
 800dc3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc3c:	079d      	lsls	r5, r3, #30
 800dc3e:	4606      	mov	r6, r0
 800dc40:	460c      	mov	r4, r1
 800dc42:	d507      	bpl.n	800dc54 <__smakebuf_r+0x1c>
 800dc44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc48:	6023      	str	r3, [r4, #0]
 800dc4a:	6123      	str	r3, [r4, #16]
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	6163      	str	r3, [r4, #20]
 800dc50:	b002      	add	sp, #8
 800dc52:	bd70      	pop	{r4, r5, r6, pc}
 800dc54:	466a      	mov	r2, sp
 800dc56:	ab01      	add	r3, sp, #4
 800dc58:	f7ff ffc9 	bl	800dbee <__swhatbuf_r>
 800dc5c:	9900      	ldr	r1, [sp, #0]
 800dc5e:	4605      	mov	r5, r0
 800dc60:	4630      	mov	r0, r6
 800dc62:	f7fb fca1 	bl	80095a8 <_malloc_r>
 800dc66:	b948      	cbnz	r0, 800dc7c <__smakebuf_r+0x44>
 800dc68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc6c:	059a      	lsls	r2, r3, #22
 800dc6e:	d4ef      	bmi.n	800dc50 <__smakebuf_r+0x18>
 800dc70:	f023 0303 	bic.w	r3, r3, #3
 800dc74:	f043 0302 	orr.w	r3, r3, #2
 800dc78:	81a3      	strh	r3, [r4, #12]
 800dc7a:	e7e3      	b.n	800dc44 <__smakebuf_r+0xc>
 800dc7c:	4b0d      	ldr	r3, [pc, #52]	; (800dcb4 <__smakebuf_r+0x7c>)
 800dc7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	6020      	str	r0, [r4, #0]
 800dc84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc88:	81a3      	strh	r3, [r4, #12]
 800dc8a:	9b00      	ldr	r3, [sp, #0]
 800dc8c:	6120      	str	r0, [r4, #16]
 800dc8e:	6163      	str	r3, [r4, #20]
 800dc90:	9b01      	ldr	r3, [sp, #4]
 800dc92:	b15b      	cbz	r3, 800dcac <__smakebuf_r+0x74>
 800dc94:	4630      	mov	r0, r6
 800dc96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc9a:	f000 f8a3 	bl	800dde4 <_isatty_r>
 800dc9e:	b128      	cbz	r0, 800dcac <__smakebuf_r+0x74>
 800dca0:	89a3      	ldrh	r3, [r4, #12]
 800dca2:	f023 0303 	bic.w	r3, r3, #3
 800dca6:	f043 0301 	orr.w	r3, r3, #1
 800dcaa:	81a3      	strh	r3, [r4, #12]
 800dcac:	89a0      	ldrh	r0, [r4, #12]
 800dcae:	4305      	orrs	r5, r0
 800dcb0:	81a5      	strh	r5, [r4, #12]
 800dcb2:	e7cd      	b.n	800dc50 <__smakebuf_r+0x18>
 800dcb4:	08009389 	.word	0x08009389

0800dcb8 <memmove>:
 800dcb8:	4288      	cmp	r0, r1
 800dcba:	b510      	push	{r4, lr}
 800dcbc:	eb01 0402 	add.w	r4, r1, r2
 800dcc0:	d902      	bls.n	800dcc8 <memmove+0x10>
 800dcc2:	4284      	cmp	r4, r0
 800dcc4:	4623      	mov	r3, r4
 800dcc6:	d807      	bhi.n	800dcd8 <memmove+0x20>
 800dcc8:	1e43      	subs	r3, r0, #1
 800dcca:	42a1      	cmp	r1, r4
 800dccc:	d008      	beq.n	800dce0 <memmove+0x28>
 800dcce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcd6:	e7f8      	b.n	800dcca <memmove+0x12>
 800dcd8:	4601      	mov	r1, r0
 800dcda:	4402      	add	r2, r0
 800dcdc:	428a      	cmp	r2, r1
 800dcde:	d100      	bne.n	800dce2 <memmove+0x2a>
 800dce0:	bd10      	pop	{r4, pc}
 800dce2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dce6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcea:	e7f7      	b.n	800dcdc <memmove+0x24>

0800dcec <_realloc_r>:
 800dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcee:	4607      	mov	r7, r0
 800dcf0:	4614      	mov	r4, r2
 800dcf2:	460e      	mov	r6, r1
 800dcf4:	b921      	cbnz	r1, 800dd00 <_realloc_r+0x14>
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dcfc:	f7fb bc54 	b.w	80095a8 <_malloc_r>
 800dd00:	b922      	cbnz	r2, 800dd0c <_realloc_r+0x20>
 800dd02:	f7ff fb75 	bl	800d3f0 <_free_r>
 800dd06:	4625      	mov	r5, r4
 800dd08:	4628      	mov	r0, r5
 800dd0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd0c:	f000 f87a 	bl	800de04 <_malloc_usable_size_r>
 800dd10:	42a0      	cmp	r0, r4
 800dd12:	d20f      	bcs.n	800dd34 <_realloc_r+0x48>
 800dd14:	4621      	mov	r1, r4
 800dd16:	4638      	mov	r0, r7
 800dd18:	f7fb fc46 	bl	80095a8 <_malloc_r>
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	d0f2      	beq.n	800dd08 <_realloc_r+0x1c>
 800dd22:	4631      	mov	r1, r6
 800dd24:	4622      	mov	r2, r4
 800dd26:	f7fb fc28 	bl	800957a <memcpy>
 800dd2a:	4631      	mov	r1, r6
 800dd2c:	4638      	mov	r0, r7
 800dd2e:	f7ff fb5f 	bl	800d3f0 <_free_r>
 800dd32:	e7e9      	b.n	800dd08 <_realloc_r+0x1c>
 800dd34:	4635      	mov	r5, r6
 800dd36:	e7e7      	b.n	800dd08 <_realloc_r+0x1c>

0800dd38 <_raise_r>:
 800dd38:	291f      	cmp	r1, #31
 800dd3a:	b538      	push	{r3, r4, r5, lr}
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	460d      	mov	r5, r1
 800dd40:	d904      	bls.n	800dd4c <_raise_r+0x14>
 800dd42:	2316      	movs	r3, #22
 800dd44:	6003      	str	r3, [r0, #0]
 800dd46:	f04f 30ff 	mov.w	r0, #4294967295
 800dd4a:	bd38      	pop	{r3, r4, r5, pc}
 800dd4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dd4e:	b112      	cbz	r2, 800dd56 <_raise_r+0x1e>
 800dd50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd54:	b94b      	cbnz	r3, 800dd6a <_raise_r+0x32>
 800dd56:	4620      	mov	r0, r4
 800dd58:	f000 f830 	bl	800ddbc <_getpid_r>
 800dd5c:	462a      	mov	r2, r5
 800dd5e:	4601      	mov	r1, r0
 800dd60:	4620      	mov	r0, r4
 800dd62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd66:	f000 b817 	b.w	800dd98 <_kill_r>
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	d00a      	beq.n	800dd84 <_raise_r+0x4c>
 800dd6e:	1c59      	adds	r1, r3, #1
 800dd70:	d103      	bne.n	800dd7a <_raise_r+0x42>
 800dd72:	2316      	movs	r3, #22
 800dd74:	6003      	str	r3, [r0, #0]
 800dd76:	2001      	movs	r0, #1
 800dd78:	e7e7      	b.n	800dd4a <_raise_r+0x12>
 800dd7a:	2400      	movs	r4, #0
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dd82:	4798      	blx	r3
 800dd84:	2000      	movs	r0, #0
 800dd86:	e7e0      	b.n	800dd4a <_raise_r+0x12>

0800dd88 <raise>:
 800dd88:	4b02      	ldr	r3, [pc, #8]	; (800dd94 <raise+0xc>)
 800dd8a:	4601      	mov	r1, r0
 800dd8c:	6818      	ldr	r0, [r3, #0]
 800dd8e:	f7ff bfd3 	b.w	800dd38 <_raise_r>
 800dd92:	bf00      	nop
 800dd94:	2000000c 	.word	0x2000000c

0800dd98 <_kill_r>:
 800dd98:	b538      	push	{r3, r4, r5, lr}
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	4d06      	ldr	r5, [pc, #24]	; (800ddb8 <_kill_r+0x20>)
 800dd9e:	4604      	mov	r4, r0
 800dda0:	4608      	mov	r0, r1
 800dda2:	4611      	mov	r1, r2
 800dda4:	602b      	str	r3, [r5, #0]
 800dda6:	f7f4 f87a 	bl	8001e9e <_kill>
 800ddaa:	1c43      	adds	r3, r0, #1
 800ddac:	d102      	bne.n	800ddb4 <_kill_r+0x1c>
 800ddae:	682b      	ldr	r3, [r5, #0]
 800ddb0:	b103      	cbz	r3, 800ddb4 <_kill_r+0x1c>
 800ddb2:	6023      	str	r3, [r4, #0]
 800ddb4:	bd38      	pop	{r3, r4, r5, pc}
 800ddb6:	bf00      	nop
 800ddb8:	20003b98 	.word	0x20003b98

0800ddbc <_getpid_r>:
 800ddbc:	f7f4 b868 	b.w	8001e90 <_getpid>

0800ddc0 <_fstat_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	4d06      	ldr	r5, [pc, #24]	; (800dde0 <_fstat_r+0x20>)
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	4608      	mov	r0, r1
 800ddca:	4611      	mov	r1, r2
 800ddcc:	602b      	str	r3, [r5, #0]
 800ddce:	f7f4 f8c4 	bl	8001f5a <_fstat>
 800ddd2:	1c43      	adds	r3, r0, #1
 800ddd4:	d102      	bne.n	800dddc <_fstat_r+0x1c>
 800ddd6:	682b      	ldr	r3, [r5, #0]
 800ddd8:	b103      	cbz	r3, 800dddc <_fstat_r+0x1c>
 800ddda:	6023      	str	r3, [r4, #0]
 800dddc:	bd38      	pop	{r3, r4, r5, pc}
 800ddde:	bf00      	nop
 800dde0:	20003b98 	.word	0x20003b98

0800dde4 <_isatty_r>:
 800dde4:	b538      	push	{r3, r4, r5, lr}
 800dde6:	2300      	movs	r3, #0
 800dde8:	4d05      	ldr	r5, [pc, #20]	; (800de00 <_isatty_r+0x1c>)
 800ddea:	4604      	mov	r4, r0
 800ddec:	4608      	mov	r0, r1
 800ddee:	602b      	str	r3, [r5, #0]
 800ddf0:	f7f4 f8c2 	bl	8001f78 <_isatty>
 800ddf4:	1c43      	adds	r3, r0, #1
 800ddf6:	d102      	bne.n	800ddfe <_isatty_r+0x1a>
 800ddf8:	682b      	ldr	r3, [r5, #0]
 800ddfa:	b103      	cbz	r3, 800ddfe <_isatty_r+0x1a>
 800ddfc:	6023      	str	r3, [r4, #0]
 800ddfe:	bd38      	pop	{r3, r4, r5, pc}
 800de00:	20003b98 	.word	0x20003b98

0800de04 <_malloc_usable_size_r>:
 800de04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de08:	1f18      	subs	r0, r3, #4
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	bfbc      	itt	lt
 800de0e:	580b      	ldrlt	r3, [r1, r0]
 800de10:	18c0      	addlt	r0, r0, r3
 800de12:	4770      	bx	lr

0800de14 <_init>:
 800de14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de16:	bf00      	nop
 800de18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de1a:	bc08      	pop	{r3}
 800de1c:	469e      	mov	lr, r3
 800de1e:	4770      	bx	lr

0800de20 <_fini>:
 800de20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de22:	bf00      	nop
 800de24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de26:	bc08      	pop	{r3}
 800de28:	469e      	mov	lr, r3
 800de2a:	4770      	bx	lr
