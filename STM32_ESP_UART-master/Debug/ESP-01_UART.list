
ESP-01_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbc4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800ccd8  0800ccd8  0001ccd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d418  0800d418  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d418  0800d418  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d418  0800d418  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d418  0800d418  0001d418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d41c  0800d41c  0001d41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003954  200001e8  0800d608  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003b3c  0800d608  00023b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000221f4  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048ef  00000000  00000000  00042405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00046cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  00048438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014886  00000000  00000000  00049990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000078ec  00000000  00000000  0005e216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00065b02  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007534  00000000  00000000  00065b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ccbc 	.word	0x0800ccbc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800ccbc 	.word	0x0800ccbc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2lz>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	460c      	mov	r4, r1
 8001068:	4605      	mov	r5, r0
 800106a:	4621      	mov	r1, r4
 800106c:	4628      	mov	r0, r5
 800106e:	2200      	movs	r2, #0
 8001070:	2300      	movs	r3, #0
 8001072:	f7ff fca3 	bl	80009bc <__aeabi_dcmplt>
 8001076:	b928      	cbnz	r0, 8001084 <__aeabi_d2lz+0x20>
 8001078:	4628      	mov	r0, r5
 800107a:	4621      	mov	r1, r4
 800107c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001080:	f000 b80a 	b.w	8001098 <__aeabi_d2ulz>
 8001084:	4628      	mov	r0, r5
 8001086:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800108a:	f000 f805 	bl	8001098 <__aeabi_d2ulz>
 800108e:	4240      	negs	r0, r0
 8001090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001094:	bd38      	pop	{r3, r4, r5, pc}
 8001096:	bf00      	nop

08001098 <__aeabi_d2ulz>:
 8001098:	b5d0      	push	{r4, r6, r7, lr}
 800109a:	2200      	movs	r2, #0
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <__aeabi_d2ulz+0x34>)
 800109e:	4606      	mov	r6, r0
 80010a0:	460f      	mov	r7, r1
 80010a2:	f7ff fa19 	bl	80004d8 <__aeabi_dmul>
 80010a6:	f7ff fcef 	bl	8000a88 <__aeabi_d2uiz>
 80010aa:	4604      	mov	r4, r0
 80010ac:	f7ff f99a 	bl	80003e4 <__aeabi_ui2d>
 80010b0:	2200      	movs	r2, #0
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <__aeabi_d2ulz+0x38>)
 80010b4:	f7ff fa10 	bl	80004d8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4630      	mov	r0, r6
 80010be:	4639      	mov	r1, r7
 80010c0:	f7ff f852 	bl	8000168 <__aeabi_dsub>
 80010c4:	f7ff fce0 	bl	8000a88 <__aeabi_d2uiz>
 80010c8:	4621      	mov	r1, r4
 80010ca:	bdd0      	pop	{r4, r6, r7, pc}
 80010cc:	3df00000 	.word	0x3df00000
 80010d0:	41f00000 	.word	0x41f00000

080010d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_ADC1_Init+0x74>)
 80010e6:	4a19      	ldr	r2, [pc, #100]	; (800114c <MX_ADC1_Init+0x78>)
 80010e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_ADC1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_ADC1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_ADC1_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_ADC1_Init+0x74>)
 80010fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001102:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_ADC1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_ADC1_Init+0x74>)
 800110c:	2201      	movs	r2, #1
 800110e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <MX_ADC1_Init+0x74>)
 8001112:	f001 fbdf 	bl	80028d4 <HAL_ADC_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800111c:	f000 fbfe 	bl	800191c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001120:	2304      	movs	r3, #4
 8001122:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001124:	2301      	movs	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_ADC1_Init+0x74>)
 8001132:	f001 fe63 	bl	8002dfc <HAL_ADC_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800113c:	f000 fbee 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200036f4 	.word	0x200036f4
 800114c:	40012400 	.word	0x40012400

08001150 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a18      	ldr	r2, [pc, #96]	; (80011cc <HAL_ADC_MspInit+0x7c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d129      	bne.n	80011c4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_ADC_MspInit+0x80>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <HAL_ADC_MspInit+0x80>)
 8001176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_ADC_MspInit+0x80>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_ADC_MspInit+0x80>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_ADC_MspInit+0x80>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_ADC_MspInit+0x80>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011a0:	2310      	movs	r3, #16
 80011a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a4:	2303      	movs	r3, #3
 80011a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4619      	mov	r1, r3
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <HAL_ADC_MspInit+0x84>)
 80011b0:	f002 f968 	bl	8003484 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2105      	movs	r1, #5
 80011b8:	2012      	movs	r0, #18
 80011ba:	f002 f934 	bl	8003426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011be:	2012      	movs	r0, #18
 80011c0:	f002 f94d 	bl	800345e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40012400 	.word	0x40012400
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010800 	.word	0x40010800

080011d8 <vApplicationStackOverflowHook>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

	myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 80011f0:	4a18      	ldr	r2, [pc, #96]	; (8001254 <MX_FREERTOS_Init+0x68>)
 80011f2:	2101      	movs	r1, #1
 80011f4:	2001      	movs	r0, #1
 80011f6:	f004 fa1f 	bl	8005638 <osSemaphoreNew>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a16      	ldr	r2, [pc, #88]	; (8001258 <MX_FREERTOS_Init+0x6c>)
 80011fe:	6013      	str	r3, [r2, #0]

	myQueue01Handle = osMessageQueueNew(16, sizeof(uint8_t),&myQueue01_attributes);
 8001200:	4a16      	ldr	r2, [pc, #88]	; (800125c <MX_FREERTOS_Init+0x70>)
 8001202:	2101      	movs	r1, #1
 8001204:	2010      	movs	r0, #16
 8001206:	f004 fab3 	bl	8005770 <osMessageQueueNew>
 800120a:	4603      	mov	r3, r0
 800120c:	4a14      	ldr	r2, [pc, #80]	; (8001260 <MX_FREERTOS_Init+0x74>)
 800120e:	6013      	str	r3, [r2, #0]
	myQueue02Handle = osMessageQueueNew(16, sizeof(uint8_t),&myQueue02_attributes);
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <MX_FREERTOS_Init+0x78>)
 8001212:	2101      	movs	r1, #1
 8001214:	2010      	movs	r0, #16
 8001216:	f004 faab 	bl	8005770 <osMessageQueueNew>
 800121a:	4603      	mov	r3, r0
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <MX_FREERTOS_Init+0x7c>)
 800121e:	6013      	str	r3, [r2, #0]

	myTaskUARTHandle = osThreadNew(StartTaskUART, NULL, &myTaskUART_attributes);
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_FREERTOS_Init+0x80>)
 8001222:	2100      	movs	r1, #0
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <MX_FREERTOS_Init+0x84>)
 8001226:	f004 f92f 	bl	8005488 <osThreadNew>
 800122a:	4603      	mov	r3, r0
 800122c:	4a11      	ldr	r2, [pc, #68]	; (8001274 <MX_FREERTOS_Init+0x88>)
 800122e:	6013      	str	r3, [r2, #0]
	myTaskMotorHandle = osThreadNew(StartTaskMOTOR, NULL, &myTaskMotor_attributes);
 8001230:	4a11      	ldr	r2, [pc, #68]	; (8001278 <MX_FREERTOS_Init+0x8c>)
 8001232:	2100      	movs	r1, #0
 8001234:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_FREERTOS_Init+0x90>)
 8001236:	f004 f927 	bl	8005488 <osThreadNew>
 800123a:	4603      	mov	r3, r0
 800123c:	4a10      	ldr	r2, [pc, #64]	; (8001280 <MX_FREERTOS_Init+0x94>)
 800123e:	6013      	str	r3, [r2, #0]
	myTaskPMTHandle = osThreadNew(StartTaskPMT, NULL, &myTaskPMT_attributes);
 8001240:	4a10      	ldr	r2, [pc, #64]	; (8001284 <MX_FREERTOS_Init+0x98>)
 8001242:	2100      	movs	r1, #0
 8001244:	4810      	ldr	r0, [pc, #64]	; (8001288 <MX_FREERTOS_Init+0x9c>)
 8001246:	f004 f91f 	bl	8005488 <osThreadNew>
 800124a:	4603      	mov	r3, r0
 800124c:	4a0f      	ldr	r2, [pc, #60]	; (800128c <MX_FREERTOS_Init+0xa0>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	0800cee0 	.word	0x0800cee0
 8001258:	2000389c 	.word	0x2000389c
 800125c:	0800ceb0 	.word	0x0800ceb0
 8001260:	200038a0 	.word	0x200038a0
 8001264:	0800cec8 	.word	0x0800cec8
 8001268:	200038a4 	.word	0x200038a4
 800126c:	0800ce44 	.word	0x0800ce44
 8001270:	08001291 	.word	0x08001291
 8001274:	2000379c 	.word	0x2000379c
 8001278:	0800ce68 	.word	0x0800ce68
 800127c:	08001341 	.word	0x08001341
 8001280:	20003788 	.word	0x20003788
 8001284:	0800ce8c 	.word	0x0800ce8c
 8001288:	080013e9 	.word	0x080013e9
 800128c:	200037a0 	.word	0x200037a0

08001290 <StartTaskUART>:

/*
 * Задача для чтения сообщения из UART
 */
void StartTaskUART(void *argument) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b0ca      	sub	sp, #296	; 0x128
 8001294:	af00      	add	r7, sp, #0
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	6018      	str	r0, [r3, #0]
	for (;;) {
		// 1 - получили символ и проверии, что это стартовый
		bool isStartReadUart = receiveSymbol() == OK && checkStartOfMessage() == OK;
 800129a:	f000 ffd3 	bl	8002244 <receiveSymbol>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d106      	bne.n	80012b2 <StartTaskUART+0x22>
 80012a4:	f000 ffe4 	bl	8002270 <checkStartOfMessage>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <StartTaskUART+0x22>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <StartTaskUART+0x24>
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 80012b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if (!isStartReadUart) {
 80012c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80012c8:	f083 0301 	eor.w	r3, r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d004      	beq.n	80012dc <StartTaskUART+0x4c>
			SentError((uint8_t*) __FILE__, __LINE__);
 80012d2:	2154      	movs	r1, #84	; 0x54
 80012d4:	4818      	ldr	r0, [pc, #96]	; (8001338 <StartTaskUART+0xa8>)
 80012d6:	f003 ffd1 	bl	800527c <SentError>
			continue;
 80012da:	e02b      	b.n	8001334 <StartTaskUART+0xa4>
		}

		// 2 - читаем остальную часть строки в receiveMessageText
		char receiveMessageText[200];
		bool receiveMessageResult = receiveMessage(receiveMessageText) == OK;
 80012dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 ffd5 	bl	8002290 <receiveMessage>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf0c      	ite	eq
 80012ec:	2301      	moveq	r3, #1
 80012ee:	2300      	movne	r3, #0
 80012f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		if (!receiveMessageResult) {
 80012f4:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80012f8:	f083 0301 	eor.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d004      	beq.n	800130c <StartTaskUART+0x7c>
			SentError((uint8_t*) __FILE__, __LINE__);
 8001302:	215c      	movs	r1, #92	; 0x5c
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <StartTaskUART+0xa8>)
 8001306:	f003 ffb9 	bl	800527c <SentError>
			continue;
 800130a:	e013      	b.n	8001334 <StartTaskUART+0xa4>
		}

		// 3 - записываем новое глобальное состояние систему
		struct GlobalStateStruct parseMessageResult = getNewGlobalState(receiveMessageText);
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f000 ffe6 	bl	80022e8 <getNewGlobalState>
		globalState = parseMessageResult;
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <StartTaskUART+0xac>)
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	2350      	movs	r3, #80	; 0x50
 8001328:	461a      	mov	r2, r3
 800132a:	f007 f8ae 	bl	800848a <memcpy>

		osDelay(1);
 800132e:	2001      	movs	r0, #1
 8001330:	f004 f954 	bl	80055dc <osDelay>
	for (;;) {
 8001334:	e7b1      	b.n	800129a <StartTaskUART+0xa>
 8001336:	bf00      	nop
 8001338:	0800cd24 	.word	0x0800cd24
 800133c:	20003738 	.word	0x20003738

08001340 <StartTaskMOTOR>:
 * @brief Function implementing the myTaskMotor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskMOTOR */
void StartTaskMOTOR(void *argument) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	for (;;) {
		// 1 - дожидаемся пока придем команда для изменения положения шагового двигателя
		if(isChangePosition(globalState.typeStruct) && !globalState.isExistActiveAction){
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <StartTaskMOTOR+0x90>)
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	f000 fea2 	bl	8002094 <isChangePosition>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d038      	beq.n	80013c8 <StartTaskMOTOR+0x88>
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <StartTaskMOTOR+0x90>)
 8001358:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800135c:	f083 0301 	eor.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d030      	beq.n	80013c8 <StartTaskMOTOR+0x88>
			globalState.isExistActiveAction = true;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <StartTaskMOTOR+0x90>)
 8001368:	2201      	movs	r2, #1
 800136a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			// 2 - устанавливаем вращение
			// true - часовая / false - против часовой
			if(globalState.changePositionStruct.dir){
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <StartTaskMOTOR+0x90>)
 8001370:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <StartTaskMOTOR+0x44>
				HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2101      	movs	r1, #1
 800137c:	4815      	ldr	r0, [pc, #84]	; (80013d4 <StartTaskMOTOR+0x94>)
 800137e:	f002 fa05 	bl	800378c <HAL_GPIO_WritePin>
 8001382:	e004      	b.n	800138e <StartTaskMOTOR+0x4e>
			} else {
				HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	2101      	movs	r1, #1
 8001388:	4812      	ldr	r0, [pc, #72]	; (80013d4 <StartTaskMOTOR+0x94>)
 800138a:	f002 f9ff 	bl	800378c <HAL_GPIO_WritePin>
			}

			// 3 - определяем кол-во шим сигналов для вращения
			totalRate = globalState.changePositionStruct.way * 1000;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <StartTaskMOTOR+0x90>)
 8001390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001392:	4911      	ldr	r1, [pc, #68]	; (80013d8 <StartTaskMOTOR+0x98>)
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fcf5 	bl	8000d84 <__aeabi_fmul>
 800139a:	4603      	mov	r3, r0
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fe41 	bl	8001024 <__aeabi_f2uiz>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <StartTaskMOTOR+0x9c>)
 80013a6:	6013      	str	r3, [r2, #0]
			currentRate = globalState.changePositionStruct.way * 1000;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <StartTaskMOTOR+0x90>)
 80013aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ac:	490a      	ldr	r1, [pc, #40]	; (80013d8 <StartTaskMOTOR+0x98>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fce8 	bl	8000d84 <__aeabi_fmul>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fe34 	bl	8001024 <__aeabi_f2uiz>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <StartTaskMOTOR+0xa0>)
 80013c0:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 80013c2:	4808      	ldr	r0, [pc, #32]	; (80013e4 <StartTaskMOTOR+0xa4>)
 80013c4:	f003 f858 	bl	8004478 <HAL_TIM_Base_Start_IT>
		}
		osDelay(1);
 80013c8:	2001      	movs	r0, #1
 80013ca:	f004 f907 	bl	80055dc <osDelay>
		if(isChangePosition(globalState.typeStruct) && !globalState.isExistActiveAction){
 80013ce:	e7bb      	b.n	8001348 <StartTaskMOTOR+0x8>
 80013d0:	20003738 	.word	0x20003738
 80013d4:	40010c00 	.word	0x40010c00
 80013d8:	447a0000 	.word	0x447a0000
 80013dc:	20000204 	.word	0x20000204
 80013e0:	20000208 	.word	0x20000208
 80013e4:	20003a14 	.word	0x20003a14

080013e8 <StartTaskPMT>:
 * @brief Function implementing the myTaskPMT thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskPMT */
void StartTaskPMT(void *argument) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskPMT */
	uint16_t ADC_value = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	82fb      	strh	r3, [r7, #22]
	uint8_t averageFactor = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	757b      	strb	r3, [r7, #21]
	uint16_t ADC_oldValue = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	827b      	strh	r3, [r7, #18]
	HAL_ADCEx_Calibration_Start(&hadc1);
 80013fc:	4833      	ldr	r0, [pc, #204]	; (80014cc <StartTaskPMT+0xe4>)
 80013fe:	f001 fe91 	bl	8003124 <HAL_ADCEx_Calibration_Start>

	/* Infinite loop */

	for (;;) {
		if (ADC_StartFlag_) {
 8001402:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <StartTaskPMT+0xe8>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d03c      	beq.n	8001484 <StartTaskPMT+0x9c>

			HAL_GPIO_WritePin(Relay_OUT_GPIO_Port, Relay_OUT_Pin, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2120      	movs	r1, #32
 800140e:	4831      	ldr	r0, [pc, #196]	; (80014d4 <StartTaskPMT+0xec>)
 8001410:	f002 f9bc 	bl	800378c <HAL_GPIO_WritePin>
			uint32_t currentTime = HAL_GetTick();
 8001414:	f001 fa54 	bl	80028c0 <HAL_GetTick>
 8001418:	60f8      	str	r0, [r7, #12]
			do {
				HAL_ADC_Start(&hadc1);
 800141a:	482c      	ldr	r0, [pc, #176]	; (80014cc <StartTaskPMT+0xe4>)
 800141c:	f001 fb32 	bl	8002a84 <HAL_ADC_Start>
				ADC_value = (uint16_t) HAL_ADC_GetValue(&hadc1);
 8001420:	482a      	ldr	r0, [pc, #168]	; (80014cc <StartTaskPMT+0xe4>)
 8001422:	f001 fc09 	bl	8002c38 <HAL_ADC_GetValue>
 8001426:	4603      	mov	r3, r0
 8001428:	82fb      	strh	r3, [r7, #22]
				HAL_ADC_Stop(&hadc1);
 800142a:	4828      	ldr	r0, [pc, #160]	; (80014cc <StartTaskPMT+0xe4>)
 800142c:	f001 fbd8 	bl	8002be0 <HAL_ADC_Stop>
				if (averageFactor > 0) {
 8001430:	7d7b      	ldrb	r3, [r7, #21]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00c      	beq.n	8001450 <StartTaskPMT+0x68>
					ADC_oldValue = ADC_value;
 8001436:	8afb      	ldrh	r3, [r7, #22]
 8001438:	827b      	strh	r3, [r7, #18]
					ADC_value = (uint16_t) ((ADC_oldValue * (averageFactor - 1)
 800143a:	8a7b      	ldrh	r3, [r7, #18]
 800143c:	7d7a      	ldrb	r2, [r7, #21]
 800143e:	3a01      	subs	r2, #1
 8001440:	fb02 f203 	mul.w	r2, r2, r3
							+ ADC_value) / averageFactor);
 8001444:	8afb      	ldrh	r3, [r7, #22]
 8001446:	441a      	add	r2, r3
 8001448:	7d7b      	ldrb	r3, [r7, #21]
 800144a:	fb92 f3f3 	sdiv	r3, r2, r3
					ADC_value = (uint16_t) ((ADC_oldValue * (averageFactor - 1)
 800144e:	82fb      	strh	r3, [r7, #22]
				}
			} while (HAL_GetTick() - currentTime < 1000);
 8001450:	f001 fa36 	bl	80028c0 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800145e:	d3dc      	bcc.n	800141a <StartTaskPMT+0x32>
			sprintf(PMT_State_, "PMT_ADC=%d%c", ADC_value, '\0');
 8001460:	8afa      	ldrh	r2, [r7, #22]
 8001462:	2300      	movs	r3, #0
 8001464:	491c      	ldr	r1, [pc, #112]	; (80014d8 <StartTaskPMT+0xf0>)
 8001466:	481d      	ldr	r0, [pc, #116]	; (80014dc <StartTaskPMT+0xf4>)
 8001468:	f007 ff70 	bl	800934c <siprintf>

			if (HAL_UART_Transmit(&huart1, (uint8_t*) &PMT_State_, strlen(PMT_State_), 1000) == HAL_OK) {
 800146c:	481b      	ldr	r0, [pc, #108]	; (80014dc <StartTaskPMT+0xf4>)
 800146e:	f7fe fe6f 	bl	8000150 <strlen>
 8001472:	4603      	mov	r3, r0
 8001474:	b29a      	uxth	r2, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	4918      	ldr	r1, [pc, #96]	; (80014dc <StartTaskPMT+0xf4>)
 800147c:	4818      	ldr	r0, [pc, #96]	; (80014e0 <StartTaskPMT+0xf8>)
 800147e:	f003 fcf0 	bl	8004e62 <HAL_UART_Transmit>
 8001482:	e01e      	b.n	80014c2 <StartTaskPMT+0xda>

			}
		} else if (TIM_StartFlag_) {
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <StartTaskPMT+0xfc>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d01a      	beq.n	80014c2 <StartTaskPMT+0xda>
			HAL_TIM_Base_Start(&htim2);
 800148c:	4816      	ldr	r0, [pc, #88]	; (80014e8 <StartTaskPMT+0x100>)
 800148e:	f002 ffa9 	bl	80043e4 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start(&htim3);
 8001492:	4816      	ldr	r0, [pc, #88]	; (80014ec <StartTaskPMT+0x104>)
 8001494:	f002 ffa6 	bl	80043e4 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim1);
 8001498:	4815      	ldr	r0, [pc, #84]	; (80014f0 <StartTaskPMT+0x108>)
 800149a:	f002 ffed 	bl	8004478 <HAL_TIM_Base_Start_IT>
			sprintf(PMT_State_, "PMT_TIM=%d%c", freq_, '\0');
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <StartTaskPMT+0x10c>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	4914      	ldr	r1, [pc, #80]	; (80014f8 <StartTaskPMT+0x110>)
 80014a6:	480d      	ldr	r0, [pc, #52]	; (80014dc <StartTaskPMT+0xf4>)
 80014a8:	f007 ff50 	bl	800934c <siprintf>
			if (HAL_UART_Transmit(&huart1, (uint8_t*) &PMT_State_,
					strlen(PMT_State_), 1000) == HAL_OK) {
 80014ac:	480b      	ldr	r0, [pc, #44]	; (80014dc <StartTaskPMT+0xf4>)
 80014ae:	f7fe fe4f 	bl	8000150 <strlen>
 80014b2:	4603      	mov	r3, r0
			if (HAL_UART_Transmit(&huart1, (uint8_t*) &PMT_State_,
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <StartTaskPMT+0xf4>)
 80014bc:	4808      	ldr	r0, [pc, #32]	; (80014e0 <StartTaskPMT+0xf8>)
 80014be:	f003 fcd0 	bl	8004e62 <HAL_UART_Transmit>
			}
		}
		osDelay(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f004 f88a 	bl	80055dc <osDelay>
		if (ADC_StartFlag_) {
 80014c8:	e79b      	b.n	8001402 <StartTaskPMT+0x1a>
 80014ca:	bf00      	nop
 80014cc:	200036f4 	.word	0x200036f4
 80014d0:	2000386d 	.word	0x2000386d
 80014d4:	40010800 	.word	0x40010800
 80014d8:	0800cd3c 	.word	0x0800cd3c
 80014dc:	20003888 	.word	0x20003888
 80014e0:	20003aa4 	.word	0x20003aa4
 80014e4:	20003980 	.word	0x20003980
 80014e8:	20003a5c 	.word	0x20003a5c
 80014ec:	200039cc 	.word	0x200039cc
 80014f0:	20003a14 	.word	0x20003a14
 80014f4:	20003884 	.word	0x20003884
 80014f8:	0800cd4c 	.word	0x0800cd4c

080014fc <HAL_TIM_PeriodElapsedCallback>:
uint8_t speedChangeFactor = 0;
uint8_t speedDownChangeFactor = 0;

//Функция-обработчик прерываний таймеров
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	 /* USER CODE BEGIN Callback 0 */
	// логика вращения шаговым двигателем
    if (htim->Instance == TIM1) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a76      	ldr	r2, [pc, #472]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	f040 80c4 	bne.w	8001698 <HAL_TIM_PeriodElapsedCallback+0x19c>
    	if(currentRate == 0){
 8001510:	4b75      	ldr	r3, [pc, #468]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d129      	bne.n	800156c <HAL_TIM_PeriodElapsedCallback+0x70>
    		HAL_TIM_Base_Stop_IT(&htim1);
 8001518:	4874      	ldr	r0, [pc, #464]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800151a:	f002 ffff 	bl	800451c <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_PRESCALER(&htim1, currentSpeed);
 800151e:	4b73      	ldr	r3, [pc, #460]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a73      	ldr	r2, [pc, #460]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28

    		// 5 - отправляем состояние ответа по UART---------------
    		SentResultActionResponse(globalState.typeStruct, "", 1);
 8001528:	4b72      	ldr	r3, [pc, #456]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800152a:	2201      	movs	r2, #1
 800152c:	4972      	ldr	r1, [pc, #456]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	f003 fede 	bl	80052f0 <SentResultActionResponse>
    		// ------------------------------------------------------

    		// 6 - сбрасываем команду -------------------------------
    		struct TypeStruct resetActionType;
    		struct ChangePositionStruct resetChangePosition;
    		globalState.isExistActiveAction = false;
 8001534:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001536:	2200      	movs	r2, #0
 8001538:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    		globalState.typeStruct = resetActionType;
 800153c:	4a6d      	ldr	r2, [pc, #436]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	6013      	str	r3, [r2, #0]
    		globalState.changePositionStruct = resetChangePosition;
 8001542:	4b6c      	ldr	r3, [pc, #432]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001544:	3344      	adds	r3, #68	; 0x44
 8001546:	f107 0208 	add.w	r2, r7, #8
 800154a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800154e:	e883 0003 	stmia.w	r3, {r0, r1}
    		// ------------------------------------------------------
    		speedChangeFactor = 0;
 8001552:	4b6a      	ldr	r3, [pc, #424]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
    		speedDownChangeFactor = 0;
 8001558:	4b69      	ldr	r3, [pc, #420]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
    		totalRate = 0;
 800155e:	4b69      	ldr	r3, [pc, #420]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
    		currentRate = 0;
 8001564:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	e0b7      	b.n	80016dc <HAL_TIM_PeriodElapsedCallback+0x1e0>
    		return;
    	}

    	if(isSetMotorPin){
 800156c:	4b66      	ldr	r3, [pc, #408]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00e      	beq.n	8001592 <HAL_TIM_PeriodElapsedCallback+0x96>
    		HAL_GPIO_WritePin(MOTOR_Port, STEP_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	2102      	movs	r1, #2
 8001578:	4864      	ldr	r0, [pc, #400]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x210>)
 800157a:	f002 f907 	bl	800378c <HAL_GPIO_WritePin>
    		isSetMotorPin = false;
 800157e:	4b62      	ldr	r3, [pc, #392]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
    		countSetPin += 1;
 8001584:	4b62      	ldr	r3, [pc, #392]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b60      	ldr	r3, [pc, #384]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	e00d      	b.n	80015ae <HAL_TIM_PeriodElapsedCallback+0xb2>
    	} else {
    		HAL_GPIO_WritePin(MOTOR_Port, STEP_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2102      	movs	r1, #2
 8001596:	485d      	ldr	r0, [pc, #372]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001598:	f002 f8f8 	bl	800378c <HAL_GPIO_WritePin>
    		isSetMotorPin = true;
 800159c:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
    		countSetPin += 1;
 80015a2:	4b5b      	ldr	r3, [pc, #364]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	3301      	adds	r3, #1
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80015ac:	701a      	strb	r2, [r3, #0]
    	}

    	if(countSetPin == 2){
 80015ae:	4b58      	ldr	r3, [pc, #352]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d107      	bne.n	80015c6 <HAL_TIM_PeriodElapsedCallback+0xca>
    		currentRate -= 1;
 80015b6:	4b4c      	ldr	r3, [pc, #304]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	4a4a      	ldr	r2, [pc, #296]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80015be:	6013      	str	r3, [r2, #0]
    		countSetPin = 0;
 80015c0:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
    	}

    	if(totalRate > (changeSpeedLine * 2 + 100)){
 80015c6:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	3332      	adds	r3, #50	; 0x32
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d27e      	bcs.n	80016d6 <HAL_TIM_PeriodElapsedCallback+0x1da>
    		if(currentRate == (totalRate - (speedChangeStep * speedChangeFactor)) && currentRate >= totalRate - changeSpeedLine){
 80015d8:	4b4a      	ldr	r3, [pc, #296]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	4611      	mov	r1, r2
 80015e2:	4a46      	ldr	r2, [pc, #280]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x200>)
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	fb02 f201 	mul.w	r2, r2, r1
 80015ea:	1a9a      	subs	r2, r3, r2
 80015ec:	4b3e      	ldr	r3, [pc, #248]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d120      	bne.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x13a>
 80015f4:	4b43      	ldr	r3, [pc, #268]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a46      	ldr	r2, [pc, #280]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80015fa:	8812      	ldrh	r2, [r2, #0]
 80015fc:	1a9a      	subs	r2, r3, r2
 80015fe:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d817      	bhi.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x13a>
    			__HAL_TIM_SET_PRESCALER(&htim1, currentSpeed - speedChangeStepCount - (speedChangeStepCount * speedChangeFactor));
 8001606:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a44      	ldr	r2, [pc, #272]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800160c:	7812      	ldrb	r2, [r2, #0]
 800160e:	1a9a      	subs	r2, r3, r2
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	4b39      	ldr	r3, [pc, #228]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	fb03 f301 	mul.w	r3, r3, r1
 800161e:	4619      	mov	r1, r3
 8001620:	4b32      	ldr	r3, [pc, #200]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	1a52      	subs	r2, r2, r1
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
    		    speedChangeFactor += 1;
 8001628:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x200>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b32      	ldr	r3, [pc, #200]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001632:	701a      	strb	r2, [r3, #0]
    		    return;
 8001634:	e052      	b.n	80016dc <HAL_TIM_PeriodElapsedCallback+0x1e0>
    		}

    		 if(currentRate == (changeSpeedLine - (speedChangeStep * speedDownChangeFactor)) && currentRate <= changeSpeedLine){
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	4b36      	ldr	r3, [pc, #216]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	fb03 f301 	mul.w	r3, r3, r1
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	4293      	cmp	r3, r2
 8001652:	d142      	bne.n	80016da <HAL_TIM_PeriodElapsedCallback+0x1de>
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d33b      	bcc.n	80016da <HAL_TIM_PeriodElapsedCallback+0x1de>
    			speedChangeFactor -= 1;
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	3b01      	subs	r3, #1
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x200>)
 800166c:	701a      	strb	r2, [r3, #0]
    			__HAL_TIM_SET_PRESCALER(&htim1, currentSpeed - (speedChangeStepCount * speedChangeFactor));
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x200>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	fb03 f301 	mul.w	r3, r3, r1
 8001680:	4619      	mov	r1, r3
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	1a52      	subs	r2, r2, r1
 8001688:	629a      	str	r2, [r3, #40]	; 0x28
    		    speedDownChangeFactor += 1;
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001694:	701a      	strb	r2, [r3, #0]
    		    return;
 8001696:	e021      	b.n	80016dc <HAL_TIM_PeriodElapsedCallback+0x1e0>
    	}

		return;
    }

	if (htim == &htim1) {
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a14      	ldr	r2, [pc, #80]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d11d      	bne.n	80016dc <HAL_TIM_PeriodElapsedCallback+0x1e0>
		uint16_t TIM2_count = __HAL_TIM_GET_COUNTER(&htim2);
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	82fb      	strh	r3, [r7, #22]
		//Значение счетчика таймера TIM2
		//(Количество последних подсчитанных
		//импульсов к моменту прерывания)
		uint16_t TIM2_overflows = __HAL_TIM_GET_COUNTER(&htim3);
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	82bb      	strh	r3, [r7, #20]
		//Значение счетчика таймера TIM3
		freq_ = TIM2_count + (TIM2_overflows * 65535) + TIM2_overflows;
 80016b0:	8af9      	ldrh	r1, [r7, #22]
 80016b2:	8aba      	ldrh	r2, [r7, #20]
 80016b4:	4613      	mov	r3, r2
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	18ca      	adds	r2, r1, r3
 80016bc:	8abb      	ldrh	r3, [r7, #20]
 80016be:	4413      	add	r3, r2
 80016c0:	4a19      	ldr	r2, [pc, #100]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80016c2:	6013      	str	r3, [r2, #0]
        //Вычисление частоты
        //Установка флага окончания измерения частоты
		__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
        //Обнуление счетчиков таймеров 2 и 3
		__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
 80016d4:	e002      	b.n	80016dc <HAL_TIM_PeriodElapsedCallback+0x1e0>
		return;
 80016d6:	bf00      	nop
 80016d8:	e000      	b.n	80016dc <HAL_TIM_PeriodElapsedCallback+0x1e0>
    		return;
 80016da:	bf00      	nop
	}
}
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40012c00 	.word	0x40012c00
 80016e8:	20000208 	.word	0x20000208
 80016ec:	20003a14 	.word	0x20003a14
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20003738 	.word	0x20003738
 80016f8:	0800cd5c 	.word	0x0800cd5c
 80016fc:	2000020e 	.word	0x2000020e
 8001700:	2000020f 	.word	0x2000020f
 8001704:	20000204 	.word	0x20000204
 8001708:	2000020c 	.word	0x2000020c
 800170c:	40010c00 	.word	0x40010c00
 8001710:	2000020d 	.word	0x2000020d
 8001714:	20000004 	.word	0x20000004
 8001718:	20000006 	.word	0x20000006
 800171c:	20000007 	.word	0x20000007
 8001720:	20003a5c 	.word	0x20003a5c
 8001724:	200039cc 	.word	0x200039cc
 8001728:	20003884 	.word	0x20003884

0800172c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001740:	4b37      	ldr	r3, [pc, #220]	; (8001820 <MX_GPIO_Init+0xf4>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a36      	ldr	r2, [pc, #216]	; (8001820 <MX_GPIO_Init+0xf4>)
 8001746:	f043 0310 	orr.w	r3, r3, #16
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b34      	ldr	r3, [pc, #208]	; (8001820 <MX_GPIO_Init+0xf4>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001758:	4b31      	ldr	r3, [pc, #196]	; (8001820 <MX_GPIO_Init+0xf4>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a30      	ldr	r2, [pc, #192]	; (8001820 <MX_GPIO_Init+0xf4>)
 800175e:	f043 0320 	orr.w	r3, r3, #32
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <MX_GPIO_Init+0xf4>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0320 	and.w	r3, r3, #32
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <MX_GPIO_Init+0xf4>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a2a      	ldr	r2, [pc, #168]	; (8001820 <MX_GPIO_Init+0xf4>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <MX_GPIO_Init+0xf4>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	4b25      	ldr	r3, [pc, #148]	; (8001820 <MX_GPIO_Init+0xf4>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a24      	ldr	r2, [pc, #144]	; (8001820 <MX_GPIO_Init+0xf4>)
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <MX_GPIO_Init+0xf4>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a6:	481f      	ldr	r0, [pc, #124]	; (8001824 <MX_GPIO_Init+0xf8>)
 80017a8:	f001 fff0 	bl	800378c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|Relay_OUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2164      	movs	r1, #100	; 0x64
 80017b0:	481d      	ldr	r0, [pc, #116]	; (8001828 <MX_GPIO_Init+0xfc>)
 80017b2:	f001 ffeb 	bl	800378c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2103      	movs	r1, #3
 80017ba:	481c      	ldr	r0, [pc, #112]	; (800182c <MX_GPIO_Init+0x100>)
 80017bc:	f001 ffe6 	bl	800378c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80017c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4619      	mov	r1, r3
 80017d8:	4812      	ldr	r0, [pc, #72]	; (8001824 <MX_GPIO_Init+0xf8>)
 80017da:	f001 fe53 	bl	8003484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|Relay_OUT_Pin|LED2_Pin;
 80017de:	2364      	movs	r3, #100	; 0x64
 80017e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0310 	add.w	r3, r7, #16
 80017f2:	4619      	mov	r1, r3
 80017f4:	480c      	ldr	r0, [pc, #48]	; (8001828 <MX_GPIO_Init+0xfc>)
 80017f6:	f001 fe45 	bl	8003484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin;
 80017fa:	2303      	movs	r3, #3
 80017fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2302      	movs	r3, #2
 8001808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	4619      	mov	r1, r3
 8001810:	4806      	ldr	r0, [pc, #24]	; (800182c <MX_GPIO_Init+0x100>)
 8001812:	f001 fe37 	bl	8003484 <HAL_GPIO_Init>

}
 8001816:	bf00      	nop
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	40011000 	.word	0x40011000
 8001828:	40010800 	.word	0x40010800
 800182c:	40010c00 	.word	0x40010c00

08001830 <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

int main(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  HAL_Init();
 8001834:	f001 f82e 	bl	8002894 <HAL_Init>
  SystemClock_Config();
 8001838:	f000 f815 	bl	8001866 <SystemClock_Config>
  MX_GPIO_Init();
 800183c:	f7ff ff76 	bl	800172c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001840:	f000 fb72 	bl	8001f28 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001844:	f7ff fc46 	bl	80010d4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001848:	f000 f9f8 	bl	8001c3c <MX_TIM1_Init>
  MX_TIM2_Init();
 800184c:	f000 fa46 	bl	8001cdc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001850:	f000 faae 	bl	8001db0 <MX_TIM3_Init>

  osKernelInitialize();
 8001854:	f003 fdb2 	bl	80053bc <osKernelInitialize>
  // инициализация FreeTos
  MX_FREERTOS_Init();
 8001858:	f7ff fcc8 	bl	80011ec <MX_FREERTOS_Init>
  osKernelStart();
 800185c:	f003 fde0 	bl	8005420 <osKernelStart>
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd80      	pop	{r7, pc}

08001866 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b094      	sub	sp, #80	; 0x50
 800186a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001870:	2228      	movs	r2, #40	; 0x28
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f006 fe16 	bl	80084a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001896:	2301      	movs	r3, #1
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800189a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a4:	2301      	movs	r3, #1
 80018a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a8:	2302      	movs	r3, #2
 80018aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018bc:	4618      	mov	r0, r3
 80018be:	f001 ff7d 	bl	80037bc <HAL_RCC_OscConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80018c8:	f000 f828 	bl	800191c <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018cc:	230f      	movs	r3, #15
 80018ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	2102      	movs	r1, #2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 f9e7 	bl	8003cbc <HAL_RCC_ClockConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80018f4:	f000 f812 	bl	800191c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018f8:	2302      	movs	r3, #2
 80018fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80018fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001900:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	4618      	mov	r0, r3
 8001906:	f002 fba3 	bl	8004050 <HAL_RCCEx_PeriphCLKConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001910:	f000 f804 	bl	800191c <Error_Handler>
  }
}
 8001914:	bf00      	nop
 8001916:	3750      	adds	r7, #80	; 0x50
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <Error_Handler>:

void Error_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
  __disable_irq();
  while (1)
 8001924:	e7fe      	b.n	8001924 <Error_Handler+0x8>
	...

08001928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_MspInit+0x68>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_MspInit+0x68>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6193      	str	r3, [r2, #24]
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_MspInit+0x68>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_MspInit+0x68>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_MspInit+0x68>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	61d3      	str	r3, [r2, #28]
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_MspInit+0x68>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	210f      	movs	r1, #15
 8001962:	f06f 0001 	mvn.w	r0, #1
 8001966:	f001 fd5e 	bl	8003426 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_MspInit+0x6c>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <HAL_MspInit+0x6c>)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	40010000 	.word	0x40010000

08001998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	201e      	movs	r0, #30
 80019ae:	f001 fd3a 	bl	8003426 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019b2:	201e      	movs	r0, #30
 80019b4:	f001 fd53 	bl	800345e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <HAL_InitTick+0xa0>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <HAL_InitTick+0xa0>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	61d3      	str	r3, [r2, #28]
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_InitTick+0xa0>)
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019d0:	f107 0210 	add.w	r2, r7, #16
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 faea 	bl	8003fb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80019e0:	f002 fac0 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 80019e4:	4603      	mov	r3, r0
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <HAL_InitTick+0xa4>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0c9b      	lsrs	r3, r3, #18
 80019f4:	3b01      	subs	r3, #1
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_InitTick+0xa8>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <HAL_InitTick+0xac>)
 80019fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_InitTick+0xa8>)
 8001a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a04:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001a06:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <HAL_InitTick+0xa8>)
 8001a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <HAL_InitTick+0xa8>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_InitTick+0xa8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001a18:	4809      	ldr	r0, [pc, #36]	; (8001a40 <HAL_InitTick+0xa8>)
 8001a1a:	f002 fc93 	bl	8004344 <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d104      	bne.n	8001a2e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <HAL_InitTick+0xa8>)
 8001a26:	f002 fd27 	bl	8004478 <HAL_TIM_Base_Start_IT>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	e000      	b.n	8001a30 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3730      	adds	r7, #48	; 0x30
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	431bde83 	.word	0x431bde83
 8001a40:	20003984 	.word	0x20003984
 8001a44:	40000800 	.word	0x40000800

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <NMI_Handler+0x4>

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
	...

08001a74 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <ADC1_2_IRQHandler+0x10>)
 8001a7a:	f001 f8e9 	bl	8002c50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200036f4 	.word	0x200036f4

08001a88 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <TIM1_UP_IRQHandler+0x10>)
 8001a8e:	f002 fd73 	bl	8004578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20003a14 	.word	0x20003a14

08001a9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <TIM4_IRQHandler+0x10>)
 8001aa2:	f002 fd69 	bl	8004578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20003984 	.word	0x20003984

08001ab0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
	return 1;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <_kill>:

int _kill(int pid, int sig)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ac8:	f006 fbbc 	bl	8008244 <__errno>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2216      	movs	r2, #22
 8001ad0:	601a      	str	r2, [r3, #0]
	return -1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_exit>:

void _exit (int status)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ae6:	f04f 31ff 	mov.w	r1, #4294967295
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffe7 	bl	8001abe <_kill>
	while (1) {}		/* Make sure we hang here */
 8001af0:	e7fe      	b.n	8001af0 <_exit+0x12>

08001af2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e00a      	b.n	8001b1a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b04:	f3af 8000 	nop.w
 8001b08:	4601      	mov	r1, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	60ba      	str	r2, [r7, #8]
 8001b10:	b2ca      	uxtb	r2, r1
 8001b12:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dbf0      	blt.n	8001b04 <_read+0x12>
	}

return len;
 8001b22:	687b      	ldr	r3, [r7, #4]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e009      	b.n	8001b52 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	60ba      	str	r2, [r7, #8]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dbf1      	blt.n	8001b3e <_write+0x12>
	}
	return len;
 8001b5a:	687b      	ldr	r3, [r7, #4]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_close>:

int _close(int file)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	return -1;
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b8a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <_isatty>:

int _isatty(int file)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	return 1;
 8001ba0:	2301      	movs	r3, #1
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bcc:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <_sbrk+0x5c>)
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <_sbrk+0x60>)
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d102      	bne.n	8001be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <_sbrk+0x64>)
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <_sbrk+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d207      	bcs.n	8001c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf4:	f006 fb26 	bl	8008244 <__errno>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	e009      	b.n	8001c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <_sbrk+0x64>)
 8001c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20005000 	.word	0x20005000
 8001c24:	00000400 	.word	0x00000400
 8001c28:	20000210 	.word	0x20000210
 8001c2c:	20003b40 	.word	0x20003b40

08001c30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c50:	463b      	mov	r3, r7
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <MX_TIM1_Init+0x98>)
 8001c5a:	4a1f      	ldr	r2, [pc, #124]	; (8001cd8 <MX_TIM1_Init+0x9c>)
 8001c5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <MX_TIM1_Init+0x98>)
 8001c60:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <MX_TIM1_Init+0x98>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <MX_TIM1_Init+0x98>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <MX_TIM1_Init+0x98>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <MX_TIM1_Init+0x98>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <MX_TIM1_Init+0x98>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c84:	4813      	ldr	r0, [pc, #76]	; (8001cd4 <MX_TIM1_Init+0x98>)
 8001c86:	f002 fb5d 	bl	8004344 <HAL_TIM_Base_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001c90:	f7ff fe44 	bl	800191c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480c      	ldr	r0, [pc, #48]	; (8001cd4 <MX_TIM1_Init+0x98>)
 8001ca2:	f002 fd71 	bl	8004788 <HAL_TIM_ConfigClockSource>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001cac:	f7ff fe36 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001cb0:	2310      	movs	r3, #16
 8001cb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cb8:	463b      	mov	r3, r7
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <MX_TIM1_Init+0x98>)
 8001cbe:	f003 f813 	bl	8004ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001cc8:	f7ff fe28 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ccc:	bf00      	nop
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20003a14 	.word	0x20003a14
 8001cd8:	40012c00 	.word	0x40012c00

08001cdc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	; 0x30
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce2:	f107 0320 	add.w	r3, r7, #32
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001cf0:	f107 030c 	add.w	r3, r7, #12
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <MX_TIM2_Init+0xd0>)
 8001d0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d10:	4b26      	ldr	r3, [pc, #152]	; (8001dac <MX_TIM2_Init+0xd0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d16:	4b25      	ldr	r3, [pc, #148]	; (8001dac <MX_TIM2_Init+0xd0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d1c:	4b23      	ldr	r3, [pc, #140]	; (8001dac <MX_TIM2_Init+0xd0>)
 8001d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d24:	4b21      	ldr	r3, [pc, #132]	; (8001dac <MX_TIM2_Init+0xd0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <MX_TIM2_Init+0xd0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d30:	481e      	ldr	r0, [pc, #120]	; (8001dac <MX_TIM2_Init+0xd0>)
 8001d32:	f002 fb07 	bl	8004344 <HAL_TIM_Base_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001d3c:	f7ff fdee 	bl	800191c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d44:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d52:	f107 0320 	add.w	r3, r7, #32
 8001d56:	4619      	mov	r1, r3
 8001d58:	4814      	ldr	r0, [pc, #80]	; (8001dac <MX_TIM2_Init+0xd0>)
 8001d5a:	f002 fd15 	bl	8004788 <HAL_TIM_ConfigClockSource>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d64:	f7ff fdda 	bl	800191c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001d68:	2305      	movs	r3, #5
 8001d6a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	4619      	mov	r1, r3
 8001d76:	480d      	ldr	r0, [pc, #52]	; (8001dac <MX_TIM2_Init+0xd0>)
 8001d78:	f002 fdca 	bl	8004910 <HAL_TIM_SlaveConfigSynchro>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001d82:	f7ff fdcb 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d86:	2320      	movs	r3, #32
 8001d88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	4619      	mov	r1, r3
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <MX_TIM2_Init+0xd0>)
 8001d94:	f002 ffa8 	bl	8004ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001d9e:	f7ff fdbd 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	3730      	adds	r7, #48	; 0x30
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20003a5c 	.word	0x20003a5c

08001db0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dce:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <MX_TIM3_Init+0x98>)
 8001dd0:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <MX_TIM3_Init+0x9c>)
 8001dd2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <MX_TIM3_Init+0x98>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <MX_TIM3_Init+0x98>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <MX_TIM3_Init+0x98>)
 8001de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de8:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <MX_TIM3_Init+0x98>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dee:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <MX_TIM3_Init+0x98>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001df4:	4814      	ldr	r0, [pc, #80]	; (8001e48 <MX_TIM3_Init+0x98>)
 8001df6:	f002 faa5 	bl	8004344 <HAL_TIM_Base_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e00:	f7ff fd8c 	bl	800191c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001e04:	2307      	movs	r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001e08:	2310      	movs	r3, #16
 8001e0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	4619      	mov	r1, r3
 8001e12:	480d      	ldr	r0, [pc, #52]	; (8001e48 <MX_TIM3_Init+0x98>)
 8001e14:	f002 fd7c 	bl	8004910 <HAL_TIM_SlaveConfigSynchro>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001e1e:	f7ff fd7d 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <MX_TIM3_Init+0x98>)
 8001e30:	f002 ff5a 	bl	8004ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001e3a:	f7ff fd6f 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	3720      	adds	r7, #32
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200039cc 	.word	0x200039cc
 8001e4c:	40000400 	.word	0x40000400

08001e50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0318 	add.w	r3, r7, #24
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a2b      	ldr	r2, [pc, #172]	; (8001f18 <HAL_TIM_Base_MspInit+0xc8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d114      	bne.n	8001e9a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e70:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <HAL_TIM_Base_MspInit+0xcc>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	4a29      	ldr	r2, [pc, #164]	; (8001f1c <HAL_TIM_Base_MspInit+0xcc>)
 8001e76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e7a:	6193      	str	r3, [r2, #24]
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_TIM_Base_MspInit+0xcc>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2105      	movs	r1, #5
 8001e8c:	2019      	movs	r0, #25
 8001e8e:	f001 faca 	bl	8003426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e92:	2019      	movs	r0, #25
 8001e94:	f001 fae3 	bl	800345e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e98:	e03a      	b.n	8001f10 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea2:	d124      	bne.n	8001eee <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_TIM_Base_MspInit+0xcc>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_TIM_Base_MspInit+0xcc>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	61d3      	str	r3, [r2, #28]
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_TIM_Base_MspInit+0xcc>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_TIM_Base_MspInit+0xcc>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4a16      	ldr	r2, [pc, #88]	; (8001f1c <HAL_TIM_Base_MspInit+0xcc>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6193      	str	r3, [r2, #24]
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_TIM_Base_MspInit+0xcc>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	480e      	ldr	r0, [pc, #56]	; (8001f20 <HAL_TIM_Base_MspInit+0xd0>)
 8001ee8:	f001 facc 	bl	8003484 <HAL_GPIO_Init>
}
 8001eec:	e010      	b.n	8001f10 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM3)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a0c      	ldr	r2, [pc, #48]	; (8001f24 <HAL_TIM_Base_MspInit+0xd4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d10b      	bne.n	8001f10 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_TIM_Base_MspInit+0xcc>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_TIM_Base_MspInit+0xcc>)
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	61d3      	str	r3, [r2, #28]
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_TIM_Base_MspInit+0xcc>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40012c00 	.word	0x40012c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010800 	.word	0x40010800
 8001f24:	40000400 	.word	0x40000400

08001f28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <MX_USART1_UART_Init+0x50>)
 8001f30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f4e:	220c      	movs	r2, #12
 8001f50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f5e:	4805      	ldr	r0, [pc, #20]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f60:	f002 ff32 	bl	8004dc8 <HAL_UART_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f6a:	f7ff fcd7 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20003aa4 	.word	0x20003aa4
 8001f78:	40013800 	.word	0x40013800

08001f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <HAL_UART_MspInit+0x8c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d131      	bne.n	8002000 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_UART_MspInit+0x90>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a1a      	ldr	r2, [pc, #104]	; (800200c <HAL_UART_MspInit+0x90>)
 8001fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b18      	ldr	r3, [pc, #96]	; (800200c <HAL_UART_MspInit+0x90>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb4:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_UART_MspInit+0x90>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a14      	ldr	r2, [pc, #80]	; (800200c <HAL_UART_MspInit+0x90>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_UART_MspInit+0x90>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 0310 	add.w	r3, r7, #16
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480b      	ldr	r0, [pc, #44]	; (8002010 <HAL_UART_MspInit+0x94>)
 8001fe2:	f001 fa4f 	bl	8003484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <HAL_UART_MspInit+0x94>)
 8001ffc:	f001 fa42 	bl	8003484 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002000:	bf00      	nop
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40013800 	.word	0x40013800
 800200c:	40021000 	.word	0x40021000
 8002010:	40010800 	.word	0x40010800

08002014 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002014:	480c      	ldr	r0, [pc, #48]	; (8002048 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002016:	490d      	ldr	r1, [pc, #52]	; (800204c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002018:	4a0d      	ldr	r2, [pc, #52]	; (8002050 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800202c:	4c0a      	ldr	r4, [pc, #40]	; (8002058 <LoopFillZerobss+0x22>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800203a:	f7ff fdf9 	bl	8001c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203e:	f006 f9fd 	bl	800843c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002042:	f7ff fbf5 	bl	8001830 <main>
  bx lr
 8002046:	4770      	bx	lr
  ldr r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800204c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002050:	0800d420 	.word	0x0800d420
  ldr r2, =_sbss
 8002054:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002058:	20003b3c 	.word	0x20003b3c

0800205c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800205c:	e7fe      	b.n	800205c <CAN1_RX1_IRQHandler>

0800205e <isCheckState>:
#include "TypeStruct.h"

bool isCheckState(struct TypeStruct dto){
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '1' && dto.subType[0] == '0' && dto.subType[1] == '0';
 8002066:	793b      	ldrb	r3, [r7, #4]
 8002068:	2b30      	cmp	r3, #48	; 0x30
 800206a:	d10a      	bne.n	8002082 <isCheckState+0x24>
 800206c:	797b      	ldrb	r3, [r7, #5]
 800206e:	2b31      	cmp	r3, #49	; 0x31
 8002070:	d107      	bne.n	8002082 <isCheckState+0x24>
 8002072:	79bb      	ldrb	r3, [r7, #6]
 8002074:	2b30      	cmp	r3, #48	; 0x30
 8002076:	d104      	bne.n	8002082 <isCheckState+0x24>
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	2b30      	cmp	r3, #48	; 0x30
 800207c:	d101      	bne.n	8002082 <isCheckState+0x24>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <isCheckState+0x26>
 8002082:	2300      	movs	r3, #0
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <isChangePosition>:

bool isChangePosition(struct TypeStruct dto){
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '2' && dto.subType[0] == '0' && dto.subType[1] == '0';
 800209c:	793b      	ldrb	r3, [r7, #4]
 800209e:	2b30      	cmp	r3, #48	; 0x30
 80020a0:	d10a      	bne.n	80020b8 <isChangePosition+0x24>
 80020a2:	797b      	ldrb	r3, [r7, #5]
 80020a4:	2b32      	cmp	r3, #50	; 0x32
 80020a6:	d107      	bne.n	80020b8 <isChangePosition+0x24>
 80020a8:	79bb      	ldrb	r3, [r7, #6]
 80020aa:	2b30      	cmp	r3, #48	; 0x30
 80020ac:	d104      	bne.n	80020b8 <isChangePosition+0x24>
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	2b30      	cmp	r3, #48	; 0x30
 80020b2:	d101      	bne.n	80020b8 <isChangePosition+0x24>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <isChangePosition+0x26>
 80020b8:	2300      	movs	r3, #0
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <isDetectAmperageRange>:

bool isDetectAmperageRange(struct TypeStruct dto){
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '3' && dto.subType[0] == '0' && dto.subType[1] == '1';
 80020d2:	793b      	ldrb	r3, [r7, #4]
 80020d4:	2b30      	cmp	r3, #48	; 0x30
 80020d6:	d10a      	bne.n	80020ee <isDetectAmperageRange+0x24>
 80020d8:	797b      	ldrb	r3, [r7, #5]
 80020da:	2b33      	cmp	r3, #51	; 0x33
 80020dc:	d107      	bne.n	80020ee <isDetectAmperageRange+0x24>
 80020de:	79bb      	ldrb	r3, [r7, #6]
 80020e0:	2b30      	cmp	r3, #48	; 0x30
 80020e2:	d104      	bne.n	80020ee <isDetectAmperageRange+0x24>
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b31      	cmp	r3, #49	; 0x31
 80020e8:	d101      	bne.n	80020ee <isDetectAmperageRange+0x24>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <isDetectAmperageRange+0x26>
 80020ee:	2300      	movs	r3, #0
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	b2db      	uxtb	r3, r3
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <isDetectAmperageTime>:

bool isDetectAmperageTime(struct TypeStruct dto){
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '3' && dto.subType[0] == '0' && dto.subType[1] == '2';
 8002108:	793b      	ldrb	r3, [r7, #4]
 800210a:	2b30      	cmp	r3, #48	; 0x30
 800210c:	d10a      	bne.n	8002124 <isDetectAmperageTime+0x24>
 800210e:	797b      	ldrb	r3, [r7, #5]
 8002110:	2b33      	cmp	r3, #51	; 0x33
 8002112:	d107      	bne.n	8002124 <isDetectAmperageTime+0x24>
 8002114:	79bb      	ldrb	r3, [r7, #6]
 8002116:	2b30      	cmp	r3, #48	; 0x30
 8002118:	d104      	bne.n	8002124 <isDetectAmperageTime+0x24>
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	2b32      	cmp	r3, #50	; 0x32
 800211e:	d101      	bne.n	8002124 <isDetectAmperageTime+0x24>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <isDetectAmperageTime+0x26>
 8002124:	2300      	movs	r3, #0
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <isDetectTickRange>:

bool isDetectTickRange(struct TypeStruct dto){
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '4' && dto.subType[0] == '0' && dto.subType[1] == '1';
 800213e:	793b      	ldrb	r3, [r7, #4]
 8002140:	2b30      	cmp	r3, #48	; 0x30
 8002142:	d10a      	bne.n	800215a <isDetectTickRange+0x24>
 8002144:	797b      	ldrb	r3, [r7, #5]
 8002146:	2b34      	cmp	r3, #52	; 0x34
 8002148:	d107      	bne.n	800215a <isDetectTickRange+0x24>
 800214a:	79bb      	ldrb	r3, [r7, #6]
 800214c:	2b30      	cmp	r3, #48	; 0x30
 800214e:	d104      	bne.n	800215a <isDetectTickRange+0x24>
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	2b31      	cmp	r3, #49	; 0x31
 8002154:	d101      	bne.n	800215a <isDetectTickRange+0x24>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <isDetectTickRange+0x26>
 800215a:	2300      	movs	r3, #0
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <isDetectTickTime>:

bool isDetectTickTime(struct TypeStruct dto){
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '4' && dto.subType[0] == '0' && dto.subType[1] == '2';
 8002174:	793b      	ldrb	r3, [r7, #4]
 8002176:	2b30      	cmp	r3, #48	; 0x30
 8002178:	d10a      	bne.n	8002190 <isDetectTickTime+0x24>
 800217a:	797b      	ldrb	r3, [r7, #5]
 800217c:	2b34      	cmp	r3, #52	; 0x34
 800217e:	d107      	bne.n	8002190 <isDetectTickTime+0x24>
 8002180:	79bb      	ldrb	r3, [r7, #6]
 8002182:	2b30      	cmp	r3, #48	; 0x30
 8002184:	d104      	bne.n	8002190 <isDetectTickTime+0x24>
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	2b32      	cmp	r3, #50	; 0x32
 800218a:	d101      	bne.n	8002190 <isDetectTickTime+0x24>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <isDetectTickTime+0x26>
 8002190:	2300      	movs	r3, #0
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	b2db      	uxtb	r3, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <isContinueMeasure>:

bool isContinueMeasure(struct TypeStruct dto){
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '5' && dto.subType[0] == '0' && dto.subType[1] == '0';
 80021aa:	793b      	ldrb	r3, [r7, #4]
 80021ac:	2b30      	cmp	r3, #48	; 0x30
 80021ae:	d10a      	bne.n	80021c6 <isContinueMeasure+0x24>
 80021b0:	797b      	ldrb	r3, [r7, #5]
 80021b2:	2b35      	cmp	r3, #53	; 0x35
 80021b4:	d107      	bne.n	80021c6 <isContinueMeasure+0x24>
 80021b6:	79bb      	ldrb	r3, [r7, #6]
 80021b8:	2b30      	cmp	r3, #48	; 0x30
 80021ba:	d104      	bne.n	80021c6 <isContinueMeasure+0x24>
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	2b30      	cmp	r3, #48	; 0x30
 80021c0:	d101      	bne.n	80021c6 <isContinueMeasure+0x24>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <isContinueMeasure+0x26>
 80021c6:	2300      	movs	r3, #0
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <isPauseMeasure>:

bool isPauseMeasure(struct TypeStruct dto){
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '6' && dto.subType[0] == '0' && dto.subType[1] == '0';
 80021e0:	793b      	ldrb	r3, [r7, #4]
 80021e2:	2b30      	cmp	r3, #48	; 0x30
 80021e4:	d10a      	bne.n	80021fc <isPauseMeasure+0x24>
 80021e6:	797b      	ldrb	r3, [r7, #5]
 80021e8:	2b36      	cmp	r3, #54	; 0x36
 80021ea:	d107      	bne.n	80021fc <isPauseMeasure+0x24>
 80021ec:	79bb      	ldrb	r3, [r7, #6]
 80021ee:	2b30      	cmp	r3, #48	; 0x30
 80021f0:	d104      	bne.n	80021fc <isPauseMeasure+0x24>
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	2b30      	cmp	r3, #48	; 0x30
 80021f6:	d101      	bne.n	80021fc <isPauseMeasure+0x24>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <isPauseMeasure+0x26>
 80021fc:	2300      	movs	r3, #0
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	b2db      	uxtb	r3, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <isStopMeasure>:

bool isStopMeasure(struct TypeStruct dto){
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '7' && dto.subType[0] == '0' && dto.subType[1] == '0';
 8002216:	793b      	ldrb	r3, [r7, #4]
 8002218:	2b30      	cmp	r3, #48	; 0x30
 800221a:	d10a      	bne.n	8002232 <isStopMeasure+0x24>
 800221c:	797b      	ldrb	r3, [r7, #5]
 800221e:	2b37      	cmp	r3, #55	; 0x37
 8002220:	d107      	bne.n	8002232 <isStopMeasure+0x24>
 8002222:	79bb      	ldrb	r3, [r7, #6]
 8002224:	2b30      	cmp	r3, #48	; 0x30
 8002226:	d104      	bne.n	8002232 <isStopMeasure+0x24>
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	2b30      	cmp	r3, #48	; 0x30
 800222c:	d101      	bne.n	8002232 <isStopMeasure+0x24>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <isStopMeasure+0x26>
 8002232:	2300      	movs	r3, #0
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <receiveSymbol>:
#include "CParser.h"

Status receiveSymbol() {
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive(&huart1, (uint8_t*) &receivedSymbol_, 1, HAL_MAX_DELAY) == HAL_OK)
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
 800224c:	2201      	movs	r2, #1
 800224e:	4906      	ldr	r1, [pc, #24]	; (8002268 <receiveSymbol+0x24>)
 8002250:	4806      	ldr	r0, [pc, #24]	; (800226c <receiveSymbol+0x28>)
 8002252:	f002 fe98 	bl	8004f86 <HAL_UART_Receive>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <receiveSymbol+0x1c>
		return OK;
 800225c:	2300      	movs	r3, #0
 800225e:	e000      	b.n	8002262 <receiveSymbol+0x1e>
	else
		return ERR;
 8002260:	2301      	movs	r3, #1
}
 8002262:	4618      	mov	r0, r3
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000379b 	.word	0x2000379b
 800226c:	20003aa4 	.word	0x20003aa4

08002270 <checkStartOfMessage>:

/*
 * Если принятый символ '$' (начало пакета), то возвращаем OK, иначе ERR
 */
Status checkStartOfMessage() {
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
	if (receivedSymbol_ == '$') {
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <checkStartOfMessage+0x1c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b24      	cmp	r3, #36	; 0x24
 800227a:	d101      	bne.n	8002280 <checkStartOfMessage+0x10>
		return OK;
 800227c:	2300      	movs	r3, #0
 800227e:	e000      	b.n	8002282 <checkStartOfMessage+0x12>
	} else
		return ERR;
 8002280:	2301      	movs	r3, #1
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	2000379b 	.word	0x2000379b

08002290 <receiveMessage>:
/*
 * Читаем символы из UART, пока не встретим ';' (конец пакета),
 * в конце ставим символ конца строки и возвращаем OK
 * Если произошла ошибка при чтении, возвращаем ERR
 */
Status receiveMessage(char* outMessage) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
	do {
		if (receiveSymbol() == OK) {
 800229c:	f7ff ffd2 	bl	8002244 <receiveSymbol>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <receiveMessage+0x2a>
			outMessage[i] = receivedSymbol_;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a0c      	ldr	r2, [pc, #48]	; (80022e0 <receiveMessage+0x50>)
 80022ae:	7812      	ldrb	r2, [r2, #0]
 80022b0:	701a      	strb	r2, [r3, #0]
			i++;
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	3301      	adds	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
 80022b8:	e001      	b.n	80022be <receiveMessage+0x2e>
		} else
			return ERR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00c      	b.n	80022d8 <receiveMessage+0x48>
	} while (receivedSymbol_ != ';');
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <receiveMessage+0x50>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b3b      	cmp	r3, #59	; 0x3b
 80022c4:	d1ea      	bne.n	800229c <receiveMessage+0xc>
	outMessage[i] = '\0';
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	4413      	add	r3, r2
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
	messageLength_ = i;
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <receiveMessage+0x54>)
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	7013      	strb	r3, [r2, #0]
	return OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	2000379b 	.word	0x2000379b
 80022e4:	2000386c 	.word	0x2000386c

080022e8 <getNewGlobalState>:
/*
 * Из полученного сообщения выхватываем дату, время
 * и управляющую команду, раскидываем данные по
 * соответствующим полям
 */
struct GlobalStateStruct getNewGlobalState(char receiveMessageText[200]) {
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b09f      	sub	sp, #124	; 0x7c
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	61f8      	str	r0, [r7, #28]
 80022f0:	61b9      	str	r1, [r7, #24]
	struct GlobalStateStruct newGlobalState;

	struct TypeStruct actionType = getTypeStruct(receiveMessageText);
 80022f2:	69b8      	ldr	r0, [r7, #24]
 80022f4:	f000 f91c 	bl	8002530 <getTypeStruct>
 80022f8:	4603      	mov	r3, r0
 80022fa:	623b      	str	r3, [r7, #32]
	newGlobalState.typeStruct = actionType;
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
	char* payload = getPayload(receiveMessageText);
 8002300:	69b8      	ldr	r0, [r7, #24]
 8002302:	f000 f981 	bl	8002608 <getPayload>
 8002306:	6778      	str	r0, [r7, #116]	; 0x74

	if (isCheckState(actionType)){
 8002308:	6a38      	ldr	r0, [r7, #32]
 800230a:	f7ff fea8 	bl	800205e <isCheckState>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <getNewGlobalState+0x3e>
	     return newGlobalState;
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	4618      	mov	r0, r3
 8002318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231c:	2250      	movs	r2, #80	; 0x50
 800231e:	4619      	mov	r1, r3
 8002320:	f006 f8b3 	bl	800848a <memcpy>
 8002324:	e098      	b.n	8002458 <getNewGlobalState+0x170>
	}

	if (isChangePosition(actionType)){
 8002326:	6a38      	ldr	r0, [r7, #32]
 8002328:	f7ff feb4 	bl	8002094 <isChangePosition>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d016      	beq.n	8002360 <getNewGlobalState+0x78>
	     newGlobalState.changePositionStruct = getChangePositionStruct(payload);
 8002332:	f107 0310 	add.w	r3, r7, #16
 8002336:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f97d 	bl	8002638 <getChangePositionStruct>
 800233e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002342:	f107 0210 	add.w	r2, r7, #16
 8002346:	e892 0003 	ldmia.w	r2, {r0, r1}
 800234a:	e883 0003 	stmia.w	r3, {r0, r1}
	     return newGlobalState;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	4618      	mov	r0, r3
 8002352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002356:	2250      	movs	r2, #80	; 0x50
 8002358:	4619      	mov	r1, r3
 800235a:	f006 f896 	bl	800848a <memcpy>
 800235e:	e07b      	b.n	8002458 <getNewGlobalState+0x170>
	}

	if (isDetectAmperageRange(actionType)){
 8002360:	6a38      	ldr	r0, [r7, #32]
 8002362:	f7ff feb2 	bl	80020ca <isDetectAmperageRange>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d013      	beq.n	8002394 <getNewGlobalState+0xac>
	     newGlobalState.detectAmperageRangeStruct = getDetectAmperageRangeStruct(payload);
 800236c:	463b      	mov	r3, r7
 800236e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002370:	4618      	mov	r0, r3
 8002372:	f000 f9e1 	bl	8002738 <getDetectAmperageRangeStruct>
 8002376:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800237a:	463b      	mov	r3, r7
 800237c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800237e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	     return newGlobalState;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	4618      	mov	r0, r3
 8002386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238a:	2250      	movs	r2, #80	; 0x50
 800238c:	4619      	mov	r1, r3
 800238e:	f006 f87c 	bl	800848a <memcpy>
 8002392:	e061      	b.n	8002458 <getNewGlobalState+0x170>
	}

	if (isDetectAmperageTime(actionType)){
 8002394:	6a38      	ldr	r0, [r7, #32]
 8002396:	f7ff feb3 	bl	8002100 <isDetectAmperageTime>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <getNewGlobalState+0xca>
	   return newGlobalState;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a8:	2250      	movs	r2, #80	; 0x50
 80023aa:	4619      	mov	r1, r3
 80023ac:	f006 f86d 	bl	800848a <memcpy>
 80023b0:	e052      	b.n	8002458 <getNewGlobalState+0x170>
	}

	if (isDetectTickRange(actionType)){
 80023b2:	6a38      	ldr	r0, [r7, #32]
 80023b4:	f7ff febf 	bl	8002136 <isDetectTickRange>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <getNewGlobalState+0xe8>
	    return newGlobalState;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c6:	2250      	movs	r2, #80	; 0x50
 80023c8:	4619      	mov	r1, r3
 80023ca:	f006 f85e 	bl	800848a <memcpy>
 80023ce:	e043      	b.n	8002458 <getNewGlobalState+0x170>
	}

	if (isDetectTickTime(actionType)){
 80023d0:	6a38      	ldr	r0, [r7, #32]
 80023d2:	f7ff fecb 	bl	800216c <isDetectTickTime>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <getNewGlobalState+0x106>
	   return newGlobalState;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4618      	mov	r0, r3
 80023e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e4:	2250      	movs	r2, #80	; 0x50
 80023e6:	4619      	mov	r1, r3
 80023e8:	f006 f84f 	bl	800848a <memcpy>
 80023ec:	e034      	b.n	8002458 <getNewGlobalState+0x170>
	}

	if (isContinueMeasure(actionType)){
 80023ee:	6a38      	ldr	r0, [r7, #32]
 80023f0:	f7ff fed7 	bl	80021a2 <isContinueMeasure>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <getNewGlobalState+0x124>
	   return newGlobalState;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002402:	2250      	movs	r2, #80	; 0x50
 8002404:	4619      	mov	r1, r3
 8002406:	f006 f840 	bl	800848a <memcpy>
 800240a:	e025      	b.n	8002458 <getNewGlobalState+0x170>
	}

	if (isPauseMeasure(actionType)){
 800240c:	6a38      	ldr	r0, [r7, #32]
 800240e:	f7ff fee3 	bl	80021d8 <isPauseMeasure>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <getNewGlobalState+0x142>
	   return newGlobalState;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	4618      	mov	r0, r3
 800241c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002420:	2250      	movs	r2, #80	; 0x50
 8002422:	4619      	mov	r1, r3
 8002424:	f006 f831 	bl	800848a <memcpy>
 8002428:	e016      	b.n	8002458 <getNewGlobalState+0x170>
	}

	if (isStopMeasure(actionType)){
 800242a:	6a38      	ldr	r0, [r7, #32]
 800242c:	f7ff feef 	bl	800220e <isStopMeasure>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <getNewGlobalState+0x160>
	   return newGlobalState;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	4618      	mov	r0, r3
 800243a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243e:	2250      	movs	r2, #80	; 0x50
 8002440:	4619      	mov	r1, r3
 8002442:	f006 f822 	bl	800848a <memcpy>
 8002446:	e007      	b.n	8002458 <getNewGlobalState+0x170>
	}

	return newGlobalState;
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	4618      	mov	r0, r3
 800244c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002450:	2250      	movs	r2, #80	; 0x50
 8002452:	4619      	mov	r1, r3
 8002454:	f006 f819 	bl	800848a <memcpy>
}
 8002458:	69f8      	ldr	r0, [r7, #28]
 800245a:	377c      	adds	r7, #124	; 0x7c
 800245c:	46bd      	mov	sp, r7
 800245e:	bd90      	pop	{r4, r7, pc}

08002460 <str_to_uint16>:
#include "RequestResponseParser.h"

// char[] -> uint16_t
uint16_t str_to_uint16(const char *str) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    char *end;
    long val = strtol(str, &end, 10);
 8002468:	f107 030c 	add.w	r3, r7, #12
 800246c:	220a      	movs	r2, #10
 800246e:	4619      	mov	r1, r3
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f007 feff 	bl	800a274 <strtol>
 8002476:	6178      	str	r0, [r7, #20]
    uint16_t res = (uint16_t)val;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	827b      	strh	r3, [r7, #18]
    return res;
 800247c:	8a7b      	ldrh	r3, [r7, #18]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <stof>:

// char[] -> float
float stof(const char* s){
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
    float rez = 0, fact = 1;
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800249a:	613b      	str	r3, [r7, #16]
    if (*s == '-'){
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b2d      	cmp	r3, #45	; 0x2d
 80024a2:	d104      	bne.n	80024ae <stof+0x26>
        s++;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3301      	adds	r3, #1
 80024a8:	607b      	str	r3, [r7, #4]
        fact = -1;
 80024aa:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <stof+0xa0>)
 80024ac:	613b      	str	r3, [r7, #16]
    };
    for (int point_seen = 0; *s; s++){
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e02c      	b.n	800250e <stof+0x86>
        if (*s == '.'){
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b2e      	cmp	r3, #46	; 0x2e
 80024ba:	d102      	bne.n	80024c2 <stof+0x3a>
            point_seen = 1;
 80024bc:	2301      	movs	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
            continue;
 80024c0:	e022      	b.n	8002508 <stof+0x80>
        };
        int d = *s - '0';
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	3b30      	subs	r3, #48	; 0x30
 80024c8:	60bb      	str	r3, [r7, #8]
        if (d >= 0 && d <= 9){
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db1b      	blt.n	8002508 <stof+0x80>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b09      	cmp	r3, #9
 80024d4:	dc18      	bgt.n	8002508 <stof+0x80>
            if (point_seen) fact /= 10.0f;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <stof+0x60>
 80024dc:	4913      	ldr	r1, [pc, #76]	; (800252c <stof+0xa4>)
 80024de:	6938      	ldr	r0, [r7, #16]
 80024e0:	f7fe fd04 	bl	8000eec <__aeabi_fdiv>
 80024e4:	4603      	mov	r3, r0
 80024e6:	613b      	str	r3, [r7, #16]
            rez = rez * 10.0f + (float)d;
 80024e8:	4910      	ldr	r1, [pc, #64]	; (800252c <stof+0xa4>)
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7fe fc4a 	bl	8000d84 <__aeabi_fmul>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461c      	mov	r4, r3
 80024f4:	68b8      	ldr	r0, [r7, #8]
 80024f6:	f7fe fbf1 	bl	8000cdc <__aeabi_i2f>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4619      	mov	r1, r3
 80024fe:	4620      	mov	r0, r4
 8002500:	f7fe fb38 	bl	8000b74 <__addsf3>
 8002504:	4603      	mov	r3, r0
 8002506:	617b      	str	r3, [r7, #20]
    for (int point_seen = 0; *s; s++){
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3301      	adds	r3, #1
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1ce      	bne.n	80024b4 <stof+0x2c>
        };
    };
    return rez * fact;
 8002516:	6939      	ldr	r1, [r7, #16]
 8002518:	6978      	ldr	r0, [r7, #20]
 800251a:	f7fe fc33 	bl	8000d84 <__aeabi_fmul>
 800251e:	4603      	mov	r3, r0
};
 8002520:	4618      	mov	r0, r3
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	bd90      	pop	{r4, r7, pc}
 8002528:	bf800000 	.word	0xbf800000
 800252c:	41200000 	.word	0x41200000

08002530 <getTypeStruct>:

struct TypeStruct getTypeStruct(char receiveBuf[200]){
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
    char type[2];
    uint8_t typeDataIndex = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	77fb      	strb	r3, [r7, #31]

    char subType[2];
    uint8_t payloadDataIndex = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	77bb      	strb	r3, [r7, #30]

    bool border = false;
 8002540:	2300      	movs	r3, #0
 8002542:	777b      	strb	r3, [r7, #29]
    // _0_0*
    // пропускаем первую _, поэтому начинаем с int i = 1,
    for (int i = 1; i < strlen(receiveBuf); i++) {
 8002544:	2301      	movs	r3, #1
 8002546:	61bb      	str	r3, [r7, #24]
 8002548:	e034      	b.n	80025b4 <getTypeStruct+0x84>
        if (receiveBuf[i] == '*'){
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b2a      	cmp	r3, #42	; 0x2a
 8002554:	d036      	beq.n	80025c4 <getTypeStruct+0x94>
            break;
        }

        if (receiveBuf[i] == '_'){
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b5f      	cmp	r3, #95	; 0x5f
 8002560:	d102      	bne.n	8002568 <getTypeStruct+0x38>
            border = true;
 8002562:	2301      	movs	r3, #1
 8002564:	777b      	strb	r3, [r7, #29]
            continue;
 8002566:	e022      	b.n	80025ae <getTypeStruct+0x7e>
        }

        if (!border){
 8002568:	7f7b      	ldrb	r3, [r7, #29]
 800256a:	f083 0301 	eor.w	r3, r3, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00c      	beq.n	800258e <getTypeStruct+0x5e>
            type[typeDataIndex] = receiveBuf[i];
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	441a      	add	r2, r3
 800257a:	7ffb      	ldrb	r3, [r7, #31]
 800257c:	7812      	ldrb	r2, [r2, #0]
 800257e:	f107 0120 	add.w	r1, r7, #32
 8002582:	440b      	add	r3, r1
 8002584:	f803 2c10 	strb.w	r2, [r3, #-16]
            typeDataIndex += 1;
 8002588:	7ffb      	ldrb	r3, [r7, #31]
 800258a:	3301      	adds	r3, #1
 800258c:	77fb      	strb	r3, [r7, #31]
        }

        if (border){
 800258e:	7f7b      	ldrb	r3, [r7, #29]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00c      	beq.n	80025ae <getTypeStruct+0x7e>
            subType[payloadDataIndex] = receiveBuf[i];
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	441a      	add	r2, r3
 800259a:	7fbb      	ldrb	r3, [r7, #30]
 800259c:	7812      	ldrb	r2, [r2, #0]
 800259e:	f107 0120 	add.w	r1, r7, #32
 80025a2:	440b      	add	r3, r1
 80025a4:	f803 2c14 	strb.w	r2, [r3, #-20]
            payloadDataIndex += 1;
 80025a8:	7fbb      	ldrb	r3, [r7, #30]
 80025aa:	3301      	adds	r3, #1
 80025ac:	77bb      	strb	r3, [r7, #30]
    for (int i = 1; i < strlen(receiveBuf); i++) {
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7fd fdcb 	bl	8000150 <strlen>
 80025ba:	4602      	mov	r2, r0
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d8c3      	bhi.n	800254a <getTypeStruct+0x1a>
 80025c2:	e000      	b.n	80025c6 <getTypeStruct+0x96>
            break;
 80025c4:	bf00      	nop
        }
    }

    struct TypeStruct tom = {"", ""};
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <getTypeStruct+0xd4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60bb      	str	r3, [r7, #8]
    tom.type[0] = type[0];
 80025cc:	7c3b      	ldrb	r3, [r7, #16]
 80025ce:	723b      	strb	r3, [r7, #8]
    tom.type[1] = type[1];
 80025d0:	7c7b      	ldrb	r3, [r7, #17]
 80025d2:	727b      	strb	r3, [r7, #9]
    tom.subType[0] = subType[0];
 80025d4:	7b3b      	ldrb	r3, [r7, #12]
 80025d6:	72bb      	strb	r3, [r7, #10]
    tom.subType[1] = subType[1];
 80025d8:	7b7b      	ldrb	r3, [r7, #13]
 80025da:	72fb      	strb	r3, [r7, #11]
    return tom;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	2300      	movs	r3, #0
 80025e2:	7d3a      	ldrb	r2, [r7, #20]
 80025e4:	f362 0307 	bfi	r3, r2, #0, #8
 80025e8:	7d7a      	ldrb	r2, [r7, #21]
 80025ea:	f362 230f 	bfi	r3, r2, #8, #8
 80025ee:	7dba      	ldrb	r2, [r7, #22]
 80025f0:	f362 4317 	bfi	r3, r2, #16, #8
 80025f4:	7dfa      	ldrb	r2, [r7, #23]
 80025f6:	f362 631f 	bfi	r3, r2, #24, #8
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	0800cd60 	.word	0x0800cd60

08002608 <getPayload>:

char* getPayload(char requestPayload[]){
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
    char * token = strtok(requestPayload, "*");
 8002610:	4907      	ldr	r1, [pc, #28]	; (8002630 <getPayload+0x28>)
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f007 fd4a 	bl	800a0ac <strtok>
 8002618:	60f8      	str	r0, [r7, #12]
    token = strtok(NULL, " ");
 800261a:	4906      	ldr	r1, [pc, #24]	; (8002634 <getPayload+0x2c>)
 800261c:	2000      	movs	r0, #0
 800261e:	f007 fd45 	bl	800a0ac <strtok>
 8002622:	60f8      	str	r0, [r7, #12]
    return token;
 8002624:	68fb      	ldr	r3, [r7, #12]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	0800cd64 	.word	0x0800cd64
 8002634:	0800cd68 	.word	0x0800cd68

08002638 <getChangePositionStruct>:

/// DIR=1-WAY=111.1
struct ChangePositionStruct getChangePositionStruct(char requestPayload[]){
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
    struct ChangePositionStruct dima = { false, 0 };
 8002642:	f107 0308 	add.w	r3, r7, #8
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]

    /// DIR=1 WAY=111.1
    char * param = strtok(requestPayload, "-=");
 800264c:	4936      	ldr	r1, [pc, #216]	; (8002728 <getChangePositionStruct+0xf0>)
 800264e:	6838      	ldr	r0, [r7, #0]
 8002650:	f007 fd2c 	bl	800a0ac <strtok>
 8002654:	6178      	str	r0, [r7, #20]
    while( param != NULL ) {
 8002656:	e057      	b.n	8002708 <getChangePositionStruct+0xd0>

        if (strstr (param,"ID") != NULL){
 8002658:	4934      	ldr	r1, [pc, #208]	; (800272c <getChangePositionStruct+0xf4>)
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f006 fee6 	bl	800942c <strstr>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00f      	beq.n	8002686 <getChangePositionStruct+0x4e>
            param = strtok(NULL, "-=");
 8002666:	4930      	ldr	r1, [pc, #192]	; (8002728 <getChangePositionStruct+0xf0>)
 8002668:	2000      	movs	r0, #0
 800266a:	f007 fd1f 	bl	800a0ac <strtok>
 800266e:	6178      	str	r0, [r7, #20]
            dima.id = str_to_uint16(param);
 8002670:	6978      	ldr	r0, [r7, #20]
 8002672:	f7ff fef5 	bl	8002460 <str_to_uint16>
 8002676:	4603      	mov	r3, r0
 8002678:	813b      	strh	r3, [r7, #8]
            param = strtok(NULL, "-=");
 800267a:	492b      	ldr	r1, [pc, #172]	; (8002728 <getChangePositionStruct+0xf0>)
 800267c:	2000      	movs	r0, #0
 800267e:	f007 fd15 	bl	800a0ac <strtok>
 8002682:	6178      	str	r0, [r7, #20]
            continue;
 8002684:	e040      	b.n	8002708 <getChangePositionStruct+0xd0>
        }

        if (strstr (param,"DIR") != NULL){
 8002686:	492a      	ldr	r1, [pc, #168]	; (8002730 <getChangePositionStruct+0xf8>)
 8002688:	6978      	ldr	r0, [r7, #20]
 800268a:	f006 fecf 	bl	800942c <strstr>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d015      	beq.n	80026c0 <getChangePositionStruct+0x88>
            param = strtok(NULL, "-=");
 8002694:	4924      	ldr	r1, [pc, #144]	; (8002728 <getChangePositionStruct+0xf0>)
 8002696:	2000      	movs	r0, #0
 8002698:	f007 fd08 	bl	800a0ac <strtok>
 800269c:	6178      	str	r0, [r7, #20]
            dima.dir = strstr (param,"1") != NULL;
 800269e:	2131      	movs	r1, #49	; 0x31
 80026a0:	6978      	ldr	r0, [r7, #20]
 80026a2:	f006 feb6 	bl	8009412 <strchr>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf14      	ite	ne
 80026ac:	2301      	movne	r3, #1
 80026ae:	2300      	moveq	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	72bb      	strb	r3, [r7, #10]
            param = strtok(NULL, "-=");
 80026b4:	491c      	ldr	r1, [pc, #112]	; (8002728 <getChangePositionStruct+0xf0>)
 80026b6:	2000      	movs	r0, #0
 80026b8:	f007 fcf8 	bl	800a0ac <strtok>
 80026bc:	6178      	str	r0, [r7, #20]
            continue;
 80026be:	e023      	b.n	8002708 <getChangePositionStruct+0xd0>
        }

        if (strstr (param,"WAY") != NULL){
 80026c0:	491c      	ldr	r1, [pc, #112]	; (8002734 <getChangePositionStruct+0xfc>)
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f006 feb2 	bl	800942c <strstr>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d017      	beq.n	80026fe <getChangePositionStruct+0xc6>
            param = strtok(NULL, "-=");
 80026ce:	4916      	ldr	r1, [pc, #88]	; (8002728 <getChangePositionStruct+0xf0>)
 80026d0:	2000      	movs	r0, #0
 80026d2:	f007 fceb 	bl	800a0ac <strtok>
 80026d6:	6178      	str	r0, [r7, #20]
            float ftemp = atof(param);
 80026d8:	6978      	ldr	r0, [r7, #20]
 80026da:	f005 fdaf 	bl	800823c <atof>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	f7fe f9ef 	bl	8000ac8 <__aeabi_d2f>
 80026ea:	4603      	mov	r3, r0
 80026ec:	613b      	str	r3, [r7, #16]
            dima.way = ftemp;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	60fb      	str	r3, [r7, #12]
            param = strtok(NULL, "-=");
 80026f2:	490d      	ldr	r1, [pc, #52]	; (8002728 <getChangePositionStruct+0xf0>)
 80026f4:	2000      	movs	r0, #0
 80026f6:	f007 fcd9 	bl	800a0ac <strtok>
 80026fa:	6178      	str	r0, [r7, #20]
            continue;
 80026fc:	e004      	b.n	8002708 <getChangePositionStruct+0xd0>
        }

        param = strtok(NULL, "-=");
 80026fe:	490a      	ldr	r1, [pc, #40]	; (8002728 <getChangePositionStruct+0xf0>)
 8002700:	2000      	movs	r0, #0
 8002702:	f007 fcd3 	bl	800a0ac <strtok>
 8002706:	6178      	str	r0, [r7, #20]
    while( param != NULL ) {
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1a4      	bne.n	8002658 <getChangePositionStruct+0x20>
    }


    return dima;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	461a      	mov	r2, r3
 8002712:	f107 0308 	add.w	r3, r7, #8
 8002716:	e893 0003 	ldmia.w	r3, {r0, r1}
 800271a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	0800cd6c 	.word	0x0800cd6c
 800272c:	0800cd70 	.word	0x0800cd70
 8002730:	0800cd74 	.word	0x0800cd74
 8002734:	0800cd78 	.word	0x0800cd78

08002738 <getDetectAmperageRangeStruct>:

/// 3_1*DIR={1-часовая/2-против}-WAY={нм}-STEP={нм}-COUNT={нм}
struct DetectAmperageRangeStruct getDetectAmperageRangeStruct(char requestPayload[]){
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b08b      	sub	sp, #44	; 0x2c
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
    struct DetectAmperageRangeStruct dima = { false, 0,0,0 };
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	60da      	str	r2, [r3, #12]

    /// DIR=1 WAY=111.1
    char * param = strtok(requestPayload, "-=");
 8002750:	494a      	ldr	r1, [pc, #296]	; (800287c <getDetectAmperageRangeStruct+0x144>)
 8002752:	6838      	ldr	r0, [r7, #0]
 8002754:	f007 fcaa 	bl	800a0ac <strtok>
 8002758:	6278      	str	r0, [r7, #36]	; 0x24
    while( param != NULL ) {
 800275a:	e07f      	b.n	800285c <getDetectAmperageRangeStruct+0x124>

        if (strstr (param,"ID") != NULL){
 800275c:	4948      	ldr	r1, [pc, #288]	; (8002880 <getDetectAmperageRangeStruct+0x148>)
 800275e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002760:	f006 fe64 	bl	800942c <strstr>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00f      	beq.n	800278a <getDetectAmperageRangeStruct+0x52>
            param = strtok(NULL, "-=");
 800276a:	4944      	ldr	r1, [pc, #272]	; (800287c <getDetectAmperageRangeStruct+0x144>)
 800276c:	2000      	movs	r0, #0
 800276e:	f007 fc9d 	bl	800a0ac <strtok>
 8002772:	6278      	str	r0, [r7, #36]	; 0x24
            dima.id = str_to_uint16(param);
 8002774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002776:	f7ff fe73 	bl	8002460 <str_to_uint16>
 800277a:	4603      	mov	r3, r0
 800277c:	81bb      	strh	r3, [r7, #12]
            param = strtok(NULL, "-=");
 800277e:	493f      	ldr	r1, [pc, #252]	; (800287c <getDetectAmperageRangeStruct+0x144>)
 8002780:	2000      	movs	r0, #0
 8002782:	f007 fc93 	bl	800a0ac <strtok>
 8002786:	6278      	str	r0, [r7, #36]	; 0x24
            continue;
 8002788:	e068      	b.n	800285c <getDetectAmperageRangeStruct+0x124>
        }

        if (strstr (param,"DIR") != NULL){
 800278a:	493e      	ldr	r1, [pc, #248]	; (8002884 <getDetectAmperageRangeStruct+0x14c>)
 800278c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800278e:	f006 fe4d 	bl	800942c <strstr>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <getDetectAmperageRangeStruct+0x8c>
            param = strtok(NULL, "-=");
 8002798:	4938      	ldr	r1, [pc, #224]	; (800287c <getDetectAmperageRangeStruct+0x144>)
 800279a:	2000      	movs	r0, #0
 800279c:	f007 fc86 	bl	800a0ac <strtok>
 80027a0:	6278      	str	r0, [r7, #36]	; 0x24
            dima.dir = strstr (param,"1") != NULL;
 80027a2:	2131      	movs	r1, #49	; 0x31
 80027a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027a6:	f006 fe34 	bl	8009412 <strchr>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	73bb      	strb	r3, [r7, #14]
            param = strtok(NULL, "-=");
 80027b8:	4930      	ldr	r1, [pc, #192]	; (800287c <getDetectAmperageRangeStruct+0x144>)
 80027ba:	2000      	movs	r0, #0
 80027bc:	f007 fc76 	bl	800a0ac <strtok>
 80027c0:	6278      	str	r0, [r7, #36]	; 0x24
            continue;
 80027c2:	e04b      	b.n	800285c <getDetectAmperageRangeStruct+0x124>
        }

        if (strstr (param,"WAY") != NULL){
 80027c4:	4930      	ldr	r1, [pc, #192]	; (8002888 <getDetectAmperageRangeStruct+0x150>)
 80027c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027c8:	f006 fe30 	bl	800942c <strstr>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d010      	beq.n	80027f4 <getDetectAmperageRangeStruct+0xbc>
            param = strtok(NULL, "-=");
 80027d2:	492a      	ldr	r1, [pc, #168]	; (800287c <getDetectAmperageRangeStruct+0x144>)
 80027d4:	2000      	movs	r0, #0
 80027d6:	f007 fc69 	bl	800a0ac <strtok>
 80027da:	6278      	str	r0, [r7, #36]	; 0x24
            float ftemp = stof(param);
 80027dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027de:	f7ff fe53 	bl	8002488 <stof>
 80027e2:	61f8      	str	r0, [r7, #28]
            dima.way = ftemp;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	613b      	str	r3, [r7, #16]
            param = strtok(NULL, "-=");
 80027e8:	4924      	ldr	r1, [pc, #144]	; (800287c <getDetectAmperageRangeStruct+0x144>)
 80027ea:	2000      	movs	r0, #0
 80027ec:	f007 fc5e 	bl	800a0ac <strtok>
 80027f0:	6278      	str	r0, [r7, #36]	; 0x24
            continue;
 80027f2:	e033      	b.n	800285c <getDetectAmperageRangeStruct+0x124>
        }

        if (strstr (param,"STEP") != NULL){
 80027f4:	4925      	ldr	r1, [pc, #148]	; (800288c <getDetectAmperageRangeStruct+0x154>)
 80027f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027f8:	f006 fe18 	bl	800942c <strstr>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d010      	beq.n	8002824 <getDetectAmperageRangeStruct+0xec>
            param = strtok(NULL, "-=");
 8002802:	491e      	ldr	r1, [pc, #120]	; (800287c <getDetectAmperageRangeStruct+0x144>)
 8002804:	2000      	movs	r0, #0
 8002806:	f007 fc51 	bl	800a0ac <strtok>
 800280a:	6278      	str	r0, [r7, #36]	; 0x24
            float ftemp = stof(param);
 800280c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800280e:	f7ff fe3b 	bl	8002488 <stof>
 8002812:	6238      	str	r0, [r7, #32]
            dima.step = ftemp;
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	617b      	str	r3, [r7, #20]
            param = strtok(NULL, "-=");
 8002818:	4918      	ldr	r1, [pc, #96]	; (800287c <getDetectAmperageRangeStruct+0x144>)
 800281a:	2000      	movs	r0, #0
 800281c:	f007 fc46 	bl	800a0ac <strtok>
 8002820:	6278      	str	r0, [r7, #36]	; 0x24
            continue;
 8002822:	e01b      	b.n	800285c <getDetectAmperageRangeStruct+0x124>
        }

        if (strstr (param,"COUNT") != NULL){
 8002824:	491a      	ldr	r1, [pc, #104]	; (8002890 <getDetectAmperageRangeStruct+0x158>)
 8002826:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002828:	f006 fe00 	bl	800942c <strstr>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00f      	beq.n	8002852 <getDetectAmperageRangeStruct+0x11a>
            param = strtok(NULL, "-=");
 8002832:	4912      	ldr	r1, [pc, #72]	; (800287c <getDetectAmperageRangeStruct+0x144>)
 8002834:	2000      	movs	r0, #0
 8002836:	f007 fc39 	bl	800a0ac <strtok>
 800283a:	6278      	str	r0, [r7, #36]	; 0x24
            dima.count = str_to_uint16(param);
 800283c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800283e:	f7ff fe0f 	bl	8002460 <str_to_uint16>
 8002842:	4603      	mov	r3, r0
 8002844:	833b      	strh	r3, [r7, #24]
            param = strtok(NULL, "-=");
 8002846:	490d      	ldr	r1, [pc, #52]	; (800287c <getDetectAmperageRangeStruct+0x144>)
 8002848:	2000      	movs	r0, #0
 800284a:	f007 fc2f 	bl	800a0ac <strtok>
 800284e:	6278      	str	r0, [r7, #36]	; 0x24
            continue;
 8002850:	e004      	b.n	800285c <getDetectAmperageRangeStruct+0x124>
        }

        param = strtok(NULL, "-=");
 8002852:	490a      	ldr	r1, [pc, #40]	; (800287c <getDetectAmperageRangeStruct+0x144>)
 8002854:	2000      	movs	r0, #0
 8002856:	f007 fc29 	bl	800a0ac <strtok>
 800285a:	6278      	str	r0, [r7, #36]	; 0x24
    while( param != NULL ) {
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	2b00      	cmp	r3, #0
 8002860:	f47f af7c 	bne.w	800275c <getDetectAmperageRangeStruct+0x24>
    }


    return dima;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	461c      	mov	r4, r3
 8002868:	f107 030c 	add.w	r3, r7, #12
 800286c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800286e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	372c      	adds	r7, #44	; 0x2c
 8002876:	46bd      	mov	sp, r7
 8002878:	bd90      	pop	{r4, r7, pc}
 800287a:	bf00      	nop
 800287c:	0800cd6c 	.word	0x0800cd6c
 8002880:	0800cd70 	.word	0x0800cd70
 8002884:	0800cd74 	.word	0x0800cd74
 8002888:	0800cd78 	.word	0x0800cd78
 800288c:	0800cd7c 	.word	0x0800cd7c
 8002890:	0800cd84 	.word	0x0800cd84

08002894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_Init+0x28>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a07      	ldr	r2, [pc, #28]	; (80028bc <HAL_Init+0x28>)
 800289e:	f043 0310 	orr.w	r3, r3, #16
 80028a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a4:	2003      	movs	r0, #3
 80028a6:	f000 fdb3 	bl	8003410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028aa:	200f      	movs	r0, #15
 80028ac:	f7ff f874 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b0:	f7ff f83a 	bl	8001928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40022000 	.word	0x40022000

080028c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return uwTick;
 80028c4:	4b02      	ldr	r3, [pc, #8]	; (80028d0 <HAL_GetTick+0x10>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	20003ae8 	.word	0x20003ae8

080028d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0be      	b.n	8002a74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fc1c 	bl	8001150 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 fbc1 	bl	80030a0 <ADC_ConversionStop_Disable>
 800291e:	4603      	mov	r3, r0
 8002920:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 8099 	bne.w	8002a62 <HAL_ADC_Init+0x18e>
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f040 8095 	bne.w	8002a62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002940:	f023 0302 	bic.w	r3, r3, #2
 8002944:	f043 0202 	orr.w	r2, r3, #2
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002954:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7b1b      	ldrb	r3, [r3, #12]
 800295a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800295c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	4313      	orrs	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296c:	d003      	beq.n	8002976 <HAL_ADC_Init+0xa2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d102      	bne.n	800297c <HAL_ADC_Init+0xa8>
 8002976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800297a:	e000      	b.n	800297e <HAL_ADC_Init+0xaa>
 800297c:	2300      	movs	r3, #0
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	7d1b      	ldrb	r3, [r3, #20]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d119      	bne.n	80029c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7b1b      	ldrb	r3, [r3, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	3b01      	subs	r3, #1
 800299a:	035a      	lsls	r2, r3, #13
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	e00b      	b.n	80029c0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	f043 0201 	orr.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_ADC_Init+0x1a8>)
 80029dc:	4013      	ands	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	430b      	orrs	r3, r1
 80029e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f0:	d003      	beq.n	80029fa <HAL_ADC_Init+0x126>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d104      	bne.n	8002a04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	051b      	lsls	r3, r3, #20
 8002a02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <HAL_ADC_Init+0x1ac>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d10b      	bne.n	8002a40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	f023 0303 	bic.w	r3, r3, #3
 8002a36:	f043 0201 	orr.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a3e:	e018      	b.n	8002a72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	f023 0312 	bic.w	r3, r3, #18
 8002a48:	f043 0210 	orr.w	r2, r3, #16
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	f043 0201 	orr.w	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a60:	e007      	b.n	8002a72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	f043 0210 	orr.w	r2, r3, #16
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	ffe1f7fd 	.word	0xffe1f7fd
 8002a80:	ff1f0efe 	.word	0xff1f0efe

08002a84 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_Start+0x1a>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e098      	b.n	8002bd0 <HAL_ADC_Start+0x14c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 faa0 	bl	8002fec <ADC_Enable>
 8002aac:	4603      	mov	r3, r0
 8002aae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 8087 	bne.w	8002bc6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a41      	ldr	r2, [pc, #260]	; (8002bd8 <HAL_ADC_Start+0x154>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d105      	bne.n	8002ae2 <HAL_ADC_Start+0x5e>
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_ADC_Start+0x158>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d115      	bne.n	8002b0e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d026      	beq.n	8002b4a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b0c:	e01d      	b.n	8002b4a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a2f      	ldr	r2, [pc, #188]	; (8002bdc <HAL_ADC_Start+0x158>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d004      	beq.n	8002b2e <HAL_ADC_Start+0xaa>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2b      	ldr	r2, [pc, #172]	; (8002bd8 <HAL_ADC_Start+0x154>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d10d      	bne.n	8002b4a <HAL_ADC_Start+0xc6>
 8002b2e:	4b2b      	ldr	r3, [pc, #172]	; (8002bdc <HAL_ADC_Start+0x158>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d006      	beq.n	8002b64 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	f023 0206 	bic.w	r2, r3, #6
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b62:	e002      	b.n	8002b6a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f06f 0202 	mvn.w	r2, #2
 8002b7a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b86:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b8a:	d113      	bne.n	8002bb4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b90:	4a11      	ldr	r2, [pc, #68]	; (8002bd8 <HAL_ADC_Start+0x154>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d105      	bne.n	8002ba2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002b96:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_ADC_Start+0x158>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d108      	bne.n	8002bb4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	e00c      	b.n	8002bce <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	e003      	b.n	8002bce <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40012800 	.word	0x40012800
 8002bdc:	40012400 	.word	0x40012400

08002be0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_Stop+0x1a>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e01a      	b.n	8002c30 <HAL_ADC_Stop+0x50>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa4c 	bl	80030a0 <ADC_ConversionStop_Disable>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d140      	bne.n	8002ce8 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d139      	bne.n	8002ce8 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c96:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c9a:	d11d      	bne.n	8002cd8 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d119      	bne.n	8002cd8 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0220 	bic.w	r2, r2, #32
 8002cb2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	f043 0201 	orr.w	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f87c 	bl	8002dd6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f06f 0212 	mvn.w	r2, #18
 8002ce6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	2b80      	cmp	r3, #128	; 0x80
 8002cf4:	d14f      	bne.n	8002d96 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d148      	bne.n	8002d96 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002d26:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002d2a:	d012      	beq.n	8002d52 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d125      	bne.n	8002d86 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002d44:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d48:	d11d      	bne.n	8002d86 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d119      	bne.n	8002d86 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d60:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fa78 	bl	800327c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 020c 	mvn.w	r2, #12
 8002d94:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d114      	bne.n	8002dce <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10d      	bne.n	8002dce <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f812 	bl	8002de8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0201 	mvn.w	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x20>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e0dc      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x1da>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b06      	cmp	r3, #6
 8002e2a:	d81c      	bhi.n	8002e66 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3b05      	subs	r3, #5
 8002e3e:	221f      	movs	r2, #31
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	4019      	ands	r1, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	3b05      	subs	r3, #5
 8002e58:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	635a      	str	r2, [r3, #52]	; 0x34
 8002e64:	e03c      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b0c      	cmp	r3, #12
 8002e6c:	d81c      	bhi.n	8002ea8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3b23      	subs	r3, #35	; 0x23
 8002e80:	221f      	movs	r2, #31
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	4019      	ands	r1, r3
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	3b23      	subs	r3, #35	; 0x23
 8002e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ea6:	e01b      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3b41      	subs	r3, #65	; 0x41
 8002eba:	221f      	movs	r2, #31
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	4019      	ands	r1, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3b41      	subs	r3, #65	; 0x41
 8002ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b09      	cmp	r3, #9
 8002ee6:	d91c      	bls.n	8002f22 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68d9      	ldr	r1, [r3, #12]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3b1e      	subs	r3, #30
 8002efa:	2207      	movs	r2, #7
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	4019      	ands	r1, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6898      	ldr	r0, [r3, #8]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	3b1e      	subs	r3, #30
 8002f14:	fa00 f203 	lsl.w	r2, r0, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	60da      	str	r2, [r3, #12]
 8002f20:	e019      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6919      	ldr	r1, [r3, #16]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	2207      	movs	r2, #7
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	4019      	ands	r1, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6898      	ldr	r0, [r3, #8]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b10      	cmp	r3, #16
 8002f5c:	d003      	beq.n	8002f66 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f62:	2b11      	cmp	r3, #17
 8002f64:	d132      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d125      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d126      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f8c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d11a      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	0c9a      	lsrs	r2, r3, #18
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fac:	e002      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f9      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x1b2>
 8002fba:	e007      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	40012400 	.word	0x40012400
 8002fe4:	20000008 	.word	0x20000008
 8002fe8:	431bde83 	.word	0x431bde83

08002fec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b01      	cmp	r3, #1
 8003008:	d040      	beq.n	800308c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800301a:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <ADC_Enable+0xac>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1f      	ldr	r2, [pc, #124]	; (800309c <ADC_Enable+0xb0>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	0c9b      	lsrs	r3, r3, #18
 8003026:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003028:	e002      	b.n	8003030 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	3b01      	subs	r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f9      	bne.n	800302a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003036:	f7ff fc43 	bl	80028c0 <HAL_GetTick>
 800303a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800303c:	e01f      	b.n	800307e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800303e:	f7ff fc3f 	bl	80028c0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d918      	bls.n	800307e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d011      	beq.n	800307e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	f043 0210 	orr.w	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	f043 0201 	orr.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e007      	b.n	800308e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d1d8      	bne.n	800303e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000008 	.word	0x20000008
 800309c:	431bde83 	.word	0x431bde83

080030a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d12e      	bne.n	8003118 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030ca:	f7ff fbf9 	bl	80028c0 <HAL_GetTick>
 80030ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030d0:	e01b      	b.n	800310a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030d2:	f7ff fbf5 	bl	80028c0 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d914      	bls.n	800310a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d10d      	bne.n	800310a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	f043 0210 	orr.w	r2, r3, #16
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e007      	b.n	800311a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	d0dc      	beq.n	80030d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_ADCEx_Calibration_Start+0x1e>
 800313e:	2302      	movs	r3, #2
 8003140:	e095      	b.n	800326e <HAL_ADCEx_Calibration_Start+0x14a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ffa8 	bl	80030a0 <ADC_ConversionStop_Disable>
 8003150:	4603      	mov	r3, r0
 8003152:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2b00      	cmp	r3, #0
 8003158:	f040 8084 	bne.w	8003264 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003164:	f023 0302 	bic.w	r3, r3, #2
 8003168:	f043 0202 	orr.w	r2, r3, #2
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003170:	4b41      	ldr	r3, [pc, #260]	; (8003278 <HAL_ADCEx_Calibration_Start+0x154>)
 8003172:	681c      	ldr	r4, [r3, #0]
 8003174:	2002      	movs	r0, #2
 8003176:	f001 f821 	bl	80041bc <HAL_RCCEx_GetPeriphCLKFreq>
 800317a:	4603      	mov	r3, r0
 800317c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003180:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003182:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003184:	e002      	b.n	800318c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3b01      	subs	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f9      	bne.n	8003186 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff ff2a 	bl	8002fec <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0208 	orr.w	r2, r2, #8
 80031a6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80031a8:	f7ff fb8a 	bl	80028c0 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80031ae:	e01b      	b.n	80031e8 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80031b0:	f7ff fb86 	bl	80028c0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b0a      	cmp	r3, #10
 80031bc:	d914      	bls.n	80031e8 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	f023 0312 	bic.w	r3, r3, #18
 80031d4:	f043 0210 	orr.w	r2, r3, #16
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e042      	b.n	800326e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1dc      	bne.n	80031b0 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0204 	orr.w	r2, r2, #4
 8003204:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003206:	f7ff fb5b 	bl	80028c0 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800320c:	e01b      	b.n	8003246 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800320e:	f7ff fb57 	bl	80028c0 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b0a      	cmp	r3, #10
 800321a:	d914      	bls.n	8003246 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00d      	beq.n	8003246 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	f023 0312 	bic.w	r3, r3, #18
 8003232:	f043 0210 	orr.w	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e013      	b.n	800326e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1dc      	bne.n	800320e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	f023 0303 	bic.w	r3, r3, #3
 800325c:	f043 0201 	orr.w	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
}
 800326e:	4618      	mov	r0, r3
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	bd90      	pop	{r4, r7, pc}
 8003276:	bf00      	nop
 8003278:	20000008 	.word	0x20000008

0800327c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
	...

08003290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032ac:	4013      	ands	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c2:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	60d3      	str	r3, [r2, #12]
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <__NVIC_GetPriorityGrouping+0x18>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	f003 0307 	and.w	r3, r3, #7
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	2b00      	cmp	r3, #0
 8003304:	db0b      	blt.n	800331e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	f003 021f 	and.w	r2, r3, #31
 800330c:	4906      	ldr	r1, [pc, #24]	; (8003328 <__NVIC_EnableIRQ+0x34>)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2001      	movs	r0, #1
 8003316:	fa00 f202 	lsl.w	r2, r0, r2
 800331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	e000e100 	.word	0xe000e100

0800332c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	6039      	str	r1, [r7, #0]
 8003336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333c:	2b00      	cmp	r3, #0
 800333e:	db0a      	blt.n	8003356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	b2da      	uxtb	r2, r3
 8003344:	490c      	ldr	r1, [pc, #48]	; (8003378 <__NVIC_SetPriority+0x4c>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	0112      	lsls	r2, r2, #4
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	440b      	add	r3, r1
 8003350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003354:	e00a      	b.n	800336c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	b2da      	uxtb	r2, r3
 800335a:	4908      	ldr	r1, [pc, #32]	; (800337c <__NVIC_SetPriority+0x50>)
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	3b04      	subs	r3, #4
 8003364:	0112      	lsls	r2, r2, #4
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	440b      	add	r3, r1
 800336a:	761a      	strb	r2, [r3, #24]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	e000e100 	.word	0xe000e100
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	; 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f1c3 0307 	rsb	r3, r3, #7
 800339a:	2b04      	cmp	r3, #4
 800339c:	bf28      	it	cs
 800339e:	2304      	movcs	r3, #4
 80033a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d902      	bls.n	80033b0 <NVIC_EncodePriority+0x30>
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	3b03      	subs	r3, #3
 80033ae:	e000      	b.n	80033b2 <NVIC_EncodePriority+0x32>
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b4:	f04f 32ff 	mov.w	r2, #4294967295
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43da      	mvns	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	401a      	ands	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c8:	f04f 31ff 	mov.w	r1, #4294967295
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	43d9      	mvns	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d8:	4313      	orrs	r3, r2
         );
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3724      	adds	r7, #36	; 0x24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80033e8:	f3bf 8f4f 	dsb	sy
}
 80033ec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <__NVIC_SystemReset+0x24>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80033f6:	4904      	ldr	r1, [pc, #16]	; (8003408 <__NVIC_SystemReset+0x24>)
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <__NVIC_SystemReset+0x28>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80033fe:	f3bf 8f4f 	dsb	sy
}
 8003402:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003404:	bf00      	nop
 8003406:	e7fd      	b.n	8003404 <__NVIC_SystemReset+0x20>
 8003408:	e000ed00 	.word	0xe000ed00
 800340c:	05fa0004 	.word	0x05fa0004

08003410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ff39 	bl	8003290 <__NVIC_SetPriorityGrouping>
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003426:	b580      	push	{r7, lr}
 8003428:	b086      	sub	sp, #24
 800342a:	af00      	add	r7, sp, #0
 800342c:	4603      	mov	r3, r0
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003438:	f7ff ff4e 	bl	80032d8 <__NVIC_GetPriorityGrouping>
 800343c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	6978      	ldr	r0, [r7, #20]
 8003444:	f7ff ff9c 	bl	8003380 <NVIC_EncodePriority>
 8003448:	4602      	mov	r2, r0
 800344a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ff6b 	bl	800332c <__NVIC_SetPriority>
}
 8003456:	bf00      	nop
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff ff41 	bl	80032f4 <__NVIC_EnableIRQ>
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800347e:	f7ff ffb1 	bl	80033e4 <__NVIC_SystemReset>
	...

08003484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003484:	b480      	push	{r7}
 8003486:	b08b      	sub	sp, #44	; 0x2c
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800348e:	2300      	movs	r3, #0
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003492:	2300      	movs	r3, #0
 8003494:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003496:	e169      	b.n	800376c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003498:	2201      	movs	r2, #1
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	f040 8158 	bne.w	8003766 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4a9a      	ldr	r2, [pc, #616]	; (8003724 <HAL_GPIO_Init+0x2a0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d05e      	beq.n	800357e <HAL_GPIO_Init+0xfa>
 80034c0:	4a98      	ldr	r2, [pc, #608]	; (8003724 <HAL_GPIO_Init+0x2a0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d875      	bhi.n	80035b2 <HAL_GPIO_Init+0x12e>
 80034c6:	4a98      	ldr	r2, [pc, #608]	; (8003728 <HAL_GPIO_Init+0x2a4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d058      	beq.n	800357e <HAL_GPIO_Init+0xfa>
 80034cc:	4a96      	ldr	r2, [pc, #600]	; (8003728 <HAL_GPIO_Init+0x2a4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d86f      	bhi.n	80035b2 <HAL_GPIO_Init+0x12e>
 80034d2:	4a96      	ldr	r2, [pc, #600]	; (800372c <HAL_GPIO_Init+0x2a8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d052      	beq.n	800357e <HAL_GPIO_Init+0xfa>
 80034d8:	4a94      	ldr	r2, [pc, #592]	; (800372c <HAL_GPIO_Init+0x2a8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d869      	bhi.n	80035b2 <HAL_GPIO_Init+0x12e>
 80034de:	4a94      	ldr	r2, [pc, #592]	; (8003730 <HAL_GPIO_Init+0x2ac>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d04c      	beq.n	800357e <HAL_GPIO_Init+0xfa>
 80034e4:	4a92      	ldr	r2, [pc, #584]	; (8003730 <HAL_GPIO_Init+0x2ac>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d863      	bhi.n	80035b2 <HAL_GPIO_Init+0x12e>
 80034ea:	4a92      	ldr	r2, [pc, #584]	; (8003734 <HAL_GPIO_Init+0x2b0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d046      	beq.n	800357e <HAL_GPIO_Init+0xfa>
 80034f0:	4a90      	ldr	r2, [pc, #576]	; (8003734 <HAL_GPIO_Init+0x2b0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d85d      	bhi.n	80035b2 <HAL_GPIO_Init+0x12e>
 80034f6:	2b12      	cmp	r3, #18
 80034f8:	d82a      	bhi.n	8003550 <HAL_GPIO_Init+0xcc>
 80034fa:	2b12      	cmp	r3, #18
 80034fc:	d859      	bhi.n	80035b2 <HAL_GPIO_Init+0x12e>
 80034fe:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <HAL_GPIO_Init+0x80>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	0800357f 	.word	0x0800357f
 8003508:	08003559 	.word	0x08003559
 800350c:	0800356b 	.word	0x0800356b
 8003510:	080035ad 	.word	0x080035ad
 8003514:	080035b3 	.word	0x080035b3
 8003518:	080035b3 	.word	0x080035b3
 800351c:	080035b3 	.word	0x080035b3
 8003520:	080035b3 	.word	0x080035b3
 8003524:	080035b3 	.word	0x080035b3
 8003528:	080035b3 	.word	0x080035b3
 800352c:	080035b3 	.word	0x080035b3
 8003530:	080035b3 	.word	0x080035b3
 8003534:	080035b3 	.word	0x080035b3
 8003538:	080035b3 	.word	0x080035b3
 800353c:	080035b3 	.word	0x080035b3
 8003540:	080035b3 	.word	0x080035b3
 8003544:	080035b3 	.word	0x080035b3
 8003548:	08003561 	.word	0x08003561
 800354c:	08003575 	.word	0x08003575
 8003550:	4a79      	ldr	r2, [pc, #484]	; (8003738 <HAL_GPIO_Init+0x2b4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003556:	e02c      	b.n	80035b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	623b      	str	r3, [r7, #32]
          break;
 800355e:	e029      	b.n	80035b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	3304      	adds	r3, #4
 8003566:	623b      	str	r3, [r7, #32]
          break;
 8003568:	e024      	b.n	80035b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	3308      	adds	r3, #8
 8003570:	623b      	str	r3, [r7, #32]
          break;
 8003572:	e01f      	b.n	80035b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	330c      	adds	r3, #12
 800357a:	623b      	str	r3, [r7, #32]
          break;
 800357c:	e01a      	b.n	80035b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d102      	bne.n	800358c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003586:	2304      	movs	r3, #4
 8003588:	623b      	str	r3, [r7, #32]
          break;
 800358a:	e013      	b.n	80035b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d105      	bne.n	80035a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003594:	2308      	movs	r3, #8
 8003596:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	611a      	str	r2, [r3, #16]
          break;
 800359e:	e009      	b.n	80035b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035a0:	2308      	movs	r3, #8
 80035a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	615a      	str	r2, [r3, #20]
          break;
 80035aa:	e003      	b.n	80035b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035ac:	2300      	movs	r3, #0
 80035ae:	623b      	str	r3, [r7, #32]
          break;
 80035b0:	e000      	b.n	80035b4 <HAL_GPIO_Init+0x130>
          break;
 80035b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2bff      	cmp	r3, #255	; 0xff
 80035b8:	d801      	bhi.n	80035be <HAL_GPIO_Init+0x13a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	e001      	b.n	80035c2 <HAL_GPIO_Init+0x13e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3304      	adds	r3, #4
 80035c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2bff      	cmp	r3, #255	; 0xff
 80035c8:	d802      	bhi.n	80035d0 <HAL_GPIO_Init+0x14c>
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	e002      	b.n	80035d6 <HAL_GPIO_Init+0x152>
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	3b08      	subs	r3, #8
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	210f      	movs	r1, #15
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	401a      	ands	r2, r3
 80035e8:	6a39      	ldr	r1, [r7, #32]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	431a      	orrs	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80b1 	beq.w	8003766 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003604:	4b4d      	ldr	r3, [pc, #308]	; (800373c <HAL_GPIO_Init+0x2b8>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	4a4c      	ldr	r2, [pc, #304]	; (800373c <HAL_GPIO_Init+0x2b8>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6193      	str	r3, [r2, #24]
 8003610:	4b4a      	ldr	r3, [pc, #296]	; (800373c <HAL_GPIO_Init+0x2b8>)
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800361c:	4a48      	ldr	r2, [pc, #288]	; (8003740 <HAL_GPIO_Init+0x2bc>)
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	3302      	adds	r3, #2
 8003624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003628:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	220f      	movs	r2, #15
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4013      	ands	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a40      	ldr	r2, [pc, #256]	; (8003744 <HAL_GPIO_Init+0x2c0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d013      	beq.n	8003670 <HAL_GPIO_Init+0x1ec>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a3f      	ldr	r2, [pc, #252]	; (8003748 <HAL_GPIO_Init+0x2c4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00d      	beq.n	800366c <HAL_GPIO_Init+0x1e8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a3e      	ldr	r2, [pc, #248]	; (800374c <HAL_GPIO_Init+0x2c8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d007      	beq.n	8003668 <HAL_GPIO_Init+0x1e4>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a3d      	ldr	r2, [pc, #244]	; (8003750 <HAL_GPIO_Init+0x2cc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d101      	bne.n	8003664 <HAL_GPIO_Init+0x1e0>
 8003660:	2303      	movs	r3, #3
 8003662:	e006      	b.n	8003672 <HAL_GPIO_Init+0x1ee>
 8003664:	2304      	movs	r3, #4
 8003666:	e004      	b.n	8003672 <HAL_GPIO_Init+0x1ee>
 8003668:	2302      	movs	r3, #2
 800366a:	e002      	b.n	8003672 <HAL_GPIO_Init+0x1ee>
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <HAL_GPIO_Init+0x1ee>
 8003670:	2300      	movs	r3, #0
 8003672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003674:	f002 0203 	and.w	r2, r2, #3
 8003678:	0092      	lsls	r2, r2, #2
 800367a:	4093      	lsls	r3, r2
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003682:	492f      	ldr	r1, [pc, #188]	; (8003740 <HAL_GPIO_Init+0x2bc>)
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	3302      	adds	r3, #2
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d006      	beq.n	80036aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800369c:	4b2d      	ldr	r3, [pc, #180]	; (8003754 <HAL_GPIO_Init+0x2d0>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	492c      	ldr	r1, [pc, #176]	; (8003754 <HAL_GPIO_Init+0x2d0>)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]
 80036a8:	e006      	b.n	80036b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036aa:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <HAL_GPIO_Init+0x2d0>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	4928      	ldr	r1, [pc, #160]	; (8003754 <HAL_GPIO_Init+0x2d0>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d006      	beq.n	80036d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036c4:	4b23      	ldr	r3, [pc, #140]	; (8003754 <HAL_GPIO_Init+0x2d0>)
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	4922      	ldr	r1, [pc, #136]	; (8003754 <HAL_GPIO_Init+0x2d0>)
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]
 80036d0:	e006      	b.n	80036e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_GPIO_Init+0x2d0>)
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	43db      	mvns	r3, r3
 80036da:	491e      	ldr	r1, [pc, #120]	; (8003754 <HAL_GPIO_Init+0x2d0>)
 80036dc:	4013      	ands	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d006      	beq.n	80036fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <HAL_GPIO_Init+0x2d0>)
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	4918      	ldr	r1, [pc, #96]	; (8003754 <HAL_GPIO_Init+0x2d0>)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	608b      	str	r3, [r1, #8]
 80036f8:	e006      	b.n	8003708 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036fa:	4b16      	ldr	r3, [pc, #88]	; (8003754 <HAL_GPIO_Init+0x2d0>)
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	43db      	mvns	r3, r3
 8003702:	4914      	ldr	r1, [pc, #80]	; (8003754 <HAL_GPIO_Init+0x2d0>)
 8003704:	4013      	ands	r3, r2
 8003706:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d021      	beq.n	8003758 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <HAL_GPIO_Init+0x2d0>)
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	490e      	ldr	r1, [pc, #56]	; (8003754 <HAL_GPIO_Init+0x2d0>)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	4313      	orrs	r3, r2
 800371e:	60cb      	str	r3, [r1, #12]
 8003720:	e021      	b.n	8003766 <HAL_GPIO_Init+0x2e2>
 8003722:	bf00      	nop
 8003724:	10320000 	.word	0x10320000
 8003728:	10310000 	.word	0x10310000
 800372c:	10220000 	.word	0x10220000
 8003730:	10210000 	.word	0x10210000
 8003734:	10120000 	.word	0x10120000
 8003738:	10110000 	.word	0x10110000
 800373c:	40021000 	.word	0x40021000
 8003740:	40010000 	.word	0x40010000
 8003744:	40010800 	.word	0x40010800
 8003748:	40010c00 	.word	0x40010c00
 800374c:	40011000 	.word	0x40011000
 8003750:	40011400 	.word	0x40011400
 8003754:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_GPIO_Init+0x304>)
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	43db      	mvns	r3, r3
 8003760:	4909      	ldr	r1, [pc, #36]	; (8003788 <HAL_GPIO_Init+0x304>)
 8003762:	4013      	ands	r3, r2
 8003764:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	3301      	adds	r3, #1
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	fa22 f303 	lsr.w	r3, r2, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	f47f ae8e 	bne.w	8003498 <HAL_GPIO_Init+0x14>
  }
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	372c      	adds	r7, #44	; 0x2c
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	40010400 	.word	0x40010400

0800378c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	807b      	strh	r3, [r7, #2]
 8003798:	4613      	mov	r3, r2
 800379a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800379c:	787b      	ldrb	r3, [r7, #1]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037a2:	887a      	ldrh	r2, [r7, #2]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037a8:	e003      	b.n	80037b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037aa:	887b      	ldrh	r3, [r7, #2]
 80037ac:	041a      	lsls	r2, r3, #16
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	611a      	str	r2, [r3, #16]
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e26c      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8087 	beq.w	80038ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037dc:	4b92      	ldr	r3, [pc, #584]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d00c      	beq.n	8003802 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037e8:	4b8f      	ldr	r3, [pc, #572]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d112      	bne.n	800381a <HAL_RCC_OscConfig+0x5e>
 80037f4:	4b8c      	ldr	r3, [pc, #560]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003800:	d10b      	bne.n	800381a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003802:	4b89      	ldr	r3, [pc, #548]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d06c      	beq.n	80038e8 <HAL_RCC_OscConfig+0x12c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d168      	bne.n	80038e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e246      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003822:	d106      	bne.n	8003832 <HAL_RCC_OscConfig+0x76>
 8003824:	4b80      	ldr	r3, [pc, #512]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a7f      	ldr	r2, [pc, #508]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 800382a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	e02e      	b.n	8003890 <HAL_RCC_OscConfig+0xd4>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0x98>
 800383a:	4b7b      	ldr	r3, [pc, #492]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a7a      	ldr	r2, [pc, #488]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 8003840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4b78      	ldr	r3, [pc, #480]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a77      	ldr	r2, [pc, #476]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 800384c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e01d      	b.n	8003890 <HAL_RCC_OscConfig+0xd4>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800385c:	d10c      	bne.n	8003878 <HAL_RCC_OscConfig+0xbc>
 800385e:	4b72      	ldr	r3, [pc, #456]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a71      	ldr	r2, [pc, #452]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 8003864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	4b6f      	ldr	r3, [pc, #444]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a6e      	ldr	r2, [pc, #440]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 8003870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e00b      	b.n	8003890 <HAL_RCC_OscConfig+0xd4>
 8003878:	4b6b      	ldr	r3, [pc, #428]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a6a      	ldr	r2, [pc, #424]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 800387e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	4b68      	ldr	r3, [pc, #416]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a67      	ldr	r2, [pc, #412]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 800388a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800388e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d013      	beq.n	80038c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7ff f812 	bl	80028c0 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a0:	f7ff f80e 	bl	80028c0 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e1fa      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	4b5d      	ldr	r3, [pc, #372]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0xe4>
 80038be:	e014      	b.n	80038ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fe fffe 	bl	80028c0 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c8:	f7fe fffa 	bl	80028c0 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e1e6      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038da:	4b53      	ldr	r3, [pc, #332]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x10c>
 80038e6:	e000      	b.n	80038ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d063      	beq.n	80039be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038f6:	4b4c      	ldr	r3, [pc, #304]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003902:	4b49      	ldr	r3, [pc, #292]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b08      	cmp	r3, #8
 800390c:	d11c      	bne.n	8003948 <HAL_RCC_OscConfig+0x18c>
 800390e:	4b46      	ldr	r3, [pc, #280]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d116      	bne.n	8003948 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391a:	4b43      	ldr	r3, [pc, #268]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_RCC_OscConfig+0x176>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d001      	beq.n	8003932 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e1ba      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003932:	4b3d      	ldr	r3, [pc, #244]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4939      	ldr	r1, [pc, #228]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	e03a      	b.n	80039be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d020      	beq.n	8003992 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003950:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003956:	f7fe ffb3 	bl	80028c0 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395e:	f7fe ffaf 	bl	80028c0 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e19b      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003970:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397c:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4927      	ldr	r1, [pc, #156]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]
 8003990:	e015      	b.n	80039be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003992:	4b26      	ldr	r3, [pc, #152]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fe ff92 	bl	80028c0 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a0:	f7fe ff8e 	bl	80028c0 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e17a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d03a      	beq.n	8003a40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d019      	beq.n	8003a06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <HAL_RCC_OscConfig+0x274>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d8:	f7fe ff72 	bl	80028c0 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e0:	f7fe ff6e 	bl	80028c0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e15a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039fe:	2001      	movs	r0, #1
 8003a00:	f000 fb08 	bl	8004014 <RCC_Delay>
 8003a04:	e01c      	b.n	8003a40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a06:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <HAL_RCC_OscConfig+0x274>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0c:	f7fe ff58 	bl	80028c0 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a12:	e00f      	b.n	8003a34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a14:	f7fe ff54 	bl	80028c0 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d908      	bls.n	8003a34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e140      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	42420000 	.word	0x42420000
 8003a30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a34:	4b9e      	ldr	r3, [pc, #632]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e9      	bne.n	8003a14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80a6 	beq.w	8003b9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a52:	4b97      	ldr	r3, [pc, #604]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10d      	bne.n	8003a7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5e:	4b94      	ldr	r3, [pc, #592]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	4a93      	ldr	r2, [pc, #588]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a68:	61d3      	str	r3, [r2, #28]
 8003a6a:	4b91      	ldr	r3, [pc, #580]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a76:	2301      	movs	r3, #1
 8003a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7a:	4b8e      	ldr	r3, [pc, #568]	; (8003cb4 <HAL_RCC_OscConfig+0x4f8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d118      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a86:	4b8b      	ldr	r3, [pc, #556]	; (8003cb4 <HAL_RCC_OscConfig+0x4f8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a8a      	ldr	r2, [pc, #552]	; (8003cb4 <HAL_RCC_OscConfig+0x4f8>)
 8003a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a92:	f7fe ff15 	bl	80028c0 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9a:	f7fe ff11 	bl	80028c0 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b64      	cmp	r3, #100	; 0x64
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e0fd      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aac:	4b81      	ldr	r3, [pc, #516]	; (8003cb4 <HAL_RCC_OscConfig+0x4f8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d106      	bne.n	8003ace <HAL_RCC_OscConfig+0x312>
 8003ac0:	4b7b      	ldr	r3, [pc, #492]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4a7a      	ldr	r2, [pc, #488]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6213      	str	r3, [r2, #32]
 8003acc:	e02d      	b.n	8003b2a <HAL_RCC_OscConfig+0x36e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x334>
 8003ad6:	4b76      	ldr	r3, [pc, #472]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	4a75      	ldr	r2, [pc, #468]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	6213      	str	r3, [r2, #32]
 8003ae2:	4b73      	ldr	r3, [pc, #460]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	4a72      	ldr	r2, [pc, #456]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003ae8:	f023 0304 	bic.w	r3, r3, #4
 8003aec:	6213      	str	r3, [r2, #32]
 8003aee:	e01c      	b.n	8003b2a <HAL_RCC_OscConfig+0x36e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	d10c      	bne.n	8003b12 <HAL_RCC_OscConfig+0x356>
 8003af8:	4b6d      	ldr	r3, [pc, #436]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	4a6c      	ldr	r2, [pc, #432]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003afe:	f043 0304 	orr.w	r3, r3, #4
 8003b02:	6213      	str	r3, [r2, #32]
 8003b04:	4b6a      	ldr	r3, [pc, #424]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	4a69      	ldr	r2, [pc, #420]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6213      	str	r3, [r2, #32]
 8003b10:	e00b      	b.n	8003b2a <HAL_RCC_OscConfig+0x36e>
 8003b12:	4b67      	ldr	r3, [pc, #412]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	4a66      	ldr	r2, [pc, #408]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	6213      	str	r3, [r2, #32]
 8003b1e:	4b64      	ldr	r3, [pc, #400]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	4a63      	ldr	r2, [pc, #396]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b24:	f023 0304 	bic.w	r3, r3, #4
 8003b28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d015      	beq.n	8003b5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b32:	f7fe fec5 	bl	80028c0 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b38:	e00a      	b.n	8003b50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fe fec1 	bl	80028c0 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e0ab      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b50:	4b57      	ldr	r3, [pc, #348]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ee      	beq.n	8003b3a <HAL_RCC_OscConfig+0x37e>
 8003b5c:	e014      	b.n	8003b88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5e:	f7fe feaf 	bl	80028c0 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b64:	e00a      	b.n	8003b7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b66:	f7fe feab 	bl	80028c0 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e095      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7c:	4b4c      	ldr	r3, [pc, #304]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1ee      	bne.n	8003b66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d105      	bne.n	8003b9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8e:	4b48      	ldr	r3, [pc, #288]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	4a47      	ldr	r2, [pc, #284]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8081 	beq.w	8003ca6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ba4:	4b42      	ldr	r3, [pc, #264]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d061      	beq.n	8003c74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d146      	bne.n	8003c46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb8:	4b3f      	ldr	r3, [pc, #252]	; (8003cb8 <HAL_RCC_OscConfig+0x4fc>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7fe fe7f 	bl	80028c0 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc6:	f7fe fe7b 	bl	80028c0 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e067      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bd8:	4b35      	ldr	r3, [pc, #212]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f0      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bec:	d108      	bne.n	8003c00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bee:	4b30      	ldr	r3, [pc, #192]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	492d      	ldr	r1, [pc, #180]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c00:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a19      	ldr	r1, [r3, #32]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	430b      	orrs	r3, r1
 8003c12:	4927      	ldr	r1, [pc, #156]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c18:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <HAL_RCC_OscConfig+0x4fc>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1e:	f7fe fe4f 	bl	80028c0 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c26:	f7fe fe4b 	bl	80028c0 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e037      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c38:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x46a>
 8003c44:	e02f      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c46:	4b1c      	ldr	r3, [pc, #112]	; (8003cb8 <HAL_RCC_OscConfig+0x4fc>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fe fe38 	bl	80028c0 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fe fe34 	bl	80028c0 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e020      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x498>
 8003c72:	e018      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e013      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_OscConfig+0x4f4>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d001      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40007000 	.word	0x40007000
 8003cb8:	42420060 	.word	0x42420060

08003cbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0d0      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd0:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <HAL_RCC_ClockConfig+0x1c0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d910      	bls.n	8003d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cde:	4b67      	ldr	r3, [pc, #412]	; (8003e7c <HAL_RCC_ClockConfig+0x1c0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 0207 	bic.w	r2, r3, #7
 8003ce6:	4965      	ldr	r1, [pc, #404]	; (8003e7c <HAL_RCC_ClockConfig+0x1c0>)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cee:	4b63      	ldr	r3, [pc, #396]	; (8003e7c <HAL_RCC_ClockConfig+0x1c0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0b8      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d020      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d18:	4b59      	ldr	r3, [pc, #356]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4a58      	ldr	r2, [pc, #352]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d30:	4b53      	ldr	r3, [pc, #332]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	4a52      	ldr	r2, [pc, #328]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d3c:	4b50      	ldr	r3, [pc, #320]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	494d      	ldr	r1, [pc, #308]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d040      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d107      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	4b47      	ldr	r3, [pc, #284]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d115      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e07f      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d107      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7a:	4b41      	ldr	r3, [pc, #260]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e073      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8a:	4b3d      	ldr	r3, [pc, #244]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e06b      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d9a:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f023 0203 	bic.w	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	4936      	ldr	r1, [pc, #216]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dac:	f7fe fd88 	bl	80028c0 <HAL_GetTick>
 8003db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db2:	e00a      	b.n	8003dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db4:	f7fe fd84 	bl	80028c0 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e053      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dca:	4b2d      	ldr	r3, [pc, #180]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f003 020c 	and.w	r2, r3, #12
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d1eb      	bne.n	8003db4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ddc:	4b27      	ldr	r3, [pc, #156]	; (8003e7c <HAL_RCC_ClockConfig+0x1c0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d210      	bcs.n	8003e0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dea:	4b24      	ldr	r3, [pc, #144]	; (8003e7c <HAL_RCC_ClockConfig+0x1c0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f023 0207 	bic.w	r2, r3, #7
 8003df2:	4922      	ldr	r1, [pc, #136]	; (8003e7c <HAL_RCC_ClockConfig+0x1c0>)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfa:	4b20      	ldr	r3, [pc, #128]	; (8003e7c <HAL_RCC_ClockConfig+0x1c0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e032      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e18:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4916      	ldr	r1, [pc, #88]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	490e      	ldr	r1, [pc, #56]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e4a:	f000 f821 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	490a      	ldr	r1, [pc, #40]	; (8003e84 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5c:	5ccb      	ldrb	r3, [r1, r3]
 8003e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e62:	4a09      	ldr	r2, [pc, #36]	; (8003e88 <HAL_RCC_ClockConfig+0x1cc>)
 8003e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <HAL_RCC_ClockConfig+0x1d0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fd fd94 	bl	8001998 <HAL_InitTick>

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40022000 	.word	0x40022000
 8003e80:	40021000 	.word	0x40021000
 8003e84:	0800cef0 	.word	0x0800cef0
 8003e88:	20000008 	.word	0x20000008
 8003e8c:	2000000c 	.word	0x2000000c

08003e90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e90:	b490      	push	{r4, r7}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e96:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e98:	1d3c      	adds	r4, r7, #4
 8003e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ea0:	f240 2301 	movw	r3, #513	; 0x201
 8003ea4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003eba:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d002      	beq.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x46>
 8003ece:	e02d      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ed0:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ed2:	623b      	str	r3, [r7, #32]
      break;
 8003ed4:	e02d      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	0c9b      	lsrs	r3, r3, #18
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ee8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d013      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ef4:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	0c5b      	lsrs	r3, r3, #17
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f02:	4413      	add	r3, r2
 8003f04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f0e:	fb02 f203 	mul.w	r2, r2, r3
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1a:	e004      	b.n	8003f26 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	4a0b      	ldr	r2, [pc, #44]	; (8003f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f20:	fb02 f303 	mul.w	r3, r2, r3
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	623b      	str	r3, [r7, #32]
      break;
 8003f2a:	e002      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f2e:	623b      	str	r3, [r7, #32]
      break;
 8003f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f32:	6a3b      	ldr	r3, [r7, #32]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3728      	adds	r7, #40	; 0x28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc90      	pop	{r4, r7}
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	0800cd8c 	.word	0x0800cd8c
 8003f44:	40021000 	.word	0x40021000
 8003f48:	007a1200 	.word	0x007a1200
 8003f4c:	003d0900 	.word	0x003d0900

08003f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f54:	4b02      	ldr	r3, [pc, #8]	; (8003f60 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f56:	681b      	ldr	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	20000008 	.word	0x20000008

08003f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f68:	f7ff fff2 	bl	8003f50 <HAL_RCC_GetHCLKFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	4903      	ldr	r1, [pc, #12]	; (8003f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	0800cf00 	.word	0x0800cf00

08003f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f90:	f7ff ffde 	bl	8003f50 <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	0adb      	lsrs	r3, r3, #11
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4903      	ldr	r1, [pc, #12]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	0800cf00 	.word	0x0800cf00

08003fb4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	220f      	movs	r2, #15
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <HAL_RCC_GetClockConfig+0x58>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0203 	and.w	r2, r3, #3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	; (800400c <HAL_RCC_GetClockConfig+0x58>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_RCC_GetClockConfig+0x58>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003fe8:	4b08      	ldr	r3, [pc, #32]	; (800400c <HAL_RCC_GetClockConfig+0x58>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	08db      	lsrs	r3, r3, #3
 8003fee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_RCC_GetClockConfig+0x5c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0207 	and.w	r2, r3, #7
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr
 800400c:	40021000 	.word	0x40021000
 8004010:	40022000 	.word	0x40022000

08004014 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <RCC_Delay+0x34>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0a      	ldr	r2, [pc, #40]	; (800404c <RCC_Delay+0x38>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	0a5b      	lsrs	r3, r3, #9
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004030:	bf00      	nop
  }
  while (Delay --);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1e5a      	subs	r2, r3, #1
 8004036:	60fa      	str	r2, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f9      	bne.n	8004030 <RCC_Delay+0x1c>
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr
 8004048:	20000008 	.word	0x20000008
 800404c:	10624dd3 	.word	0x10624dd3

08004050 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d07d      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800406c:	2300      	movs	r3, #0
 800406e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004070:	4b4f      	ldr	r3, [pc, #316]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10d      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800407c:	4b4c      	ldr	r3, [pc, #304]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	4a4b      	ldr	r2, [pc, #300]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004086:	61d3      	str	r3, [r2, #28]
 8004088:	4b49      	ldr	r3, [pc, #292]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004098:	4b46      	ldr	r3, [pc, #280]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d118      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a4:	4b43      	ldr	r3, [pc, #268]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a42      	ldr	r2, [pc, #264]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b0:	f7fe fc06 	bl	80028c0 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b6:	e008      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b8:	f7fe fc02 	bl	80028c0 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e06d      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ca:	4b3a      	ldr	r3, [pc, #232]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040d6:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d02e      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d027      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040f4:	4b2e      	ldr	r3, [pc, #184]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040fe:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004104:	4b2c      	ldr	r3, [pc, #176]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800410a:	4a29      	ldr	r2, [pc, #164]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d014      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411a:	f7fe fbd1 	bl	80028c0 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	e00a      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004122:	f7fe fbcd 	bl	80028c0 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004130:	4293      	cmp	r3, r2
 8004132:	d901      	bls.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e036      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004138:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0ee      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004144:	4b1a      	ldr	r3, [pc, #104]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4917      	ldr	r1, [pc, #92]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004152:	4313      	orrs	r3, r2
 8004154:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d105      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415c:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004166:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004174:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	490b      	ldr	r1, [pc, #44]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004182:	4313      	orrs	r3, r2
 8004184:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	4904      	ldr	r1, [pc, #16]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40007000 	.word	0x40007000
 80041b8:	42420440 	.word	0x42420440

080041bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b08d      	sub	sp, #52	; 0x34
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041c4:	4b5a      	ldr	r3, [pc, #360]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80041c6:	f107 040c 	add.w	r4, r7, #12
 80041ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041d0:	f240 2301 	movw	r3, #513	; 0x201
 80041d4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
 80041da:	2300      	movs	r3, #0
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041de:	2300      	movs	r3, #0
 80041e0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	2300      	movs	r3, #0
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	f200 8091 	bhi.w	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d04c      	beq.n	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d07c      	beq.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004204:	e089      	b.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8004206:	4b4b      	ldr	r3, [pc, #300]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800420c:	4b49      	ldr	r3, [pc, #292]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8082 	beq.w	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	0c9b      	lsrs	r3, r3, #18
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004226:	4413      	add	r3, r2
 8004228:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800422c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d018      	beq.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004238:	4b3e      	ldr	r3, [pc, #248]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	0c5b      	lsrs	r3, r3, #17
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004246:	4413      	add	r3, r2
 8004248:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00d      	beq.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004258:	4a37      	ldr	r2, [pc, #220]	; (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004268:	e004      	b.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	4a33      	ldr	r2, [pc, #204]	; (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004274:	4b2f      	ldr	r3, [pc, #188]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004280:	d102      	bne.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004286:	e04a      	b.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	4a2c      	ldr	r2, [pc, #176]	; (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004296:	e042      	b.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004298:	4b26      	ldr	r3, [pc, #152]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a8:	d108      	bne.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80042b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ba:	e01f      	b.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c6:	d109      	bne.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80042c8:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80042d4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80042d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042da:	e00f      	b.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e6:	d11c      	bne.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80042e8:	4b12      	ldr	r3, [pc, #72]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d016      	beq.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80042f4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80042fa:	e012      	b.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80042fc:	e011      	b.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80042fe:	f7ff fe45 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 8004302:	4602      	mov	r2, r0
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	0b9b      	lsrs	r3, r3, #14
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	3301      	adds	r3, #1
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	fbb2 f3f3 	udiv	r3, r2, r3
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004318:	e004      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004322:	bf00      	nop
    }
  }
  return (frequency);
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004326:	4618      	mov	r0, r3
 8004328:	3734      	adds	r7, #52	; 0x34
 800432a:	46bd      	mov	sp, r7
 800432c:	bd90      	pop	{r4, r7, pc}
 800432e:	bf00      	nop
 8004330:	0800cd9c 	.word	0x0800cd9c
 8004334:	40021000 	.word	0x40021000
 8004338:	007a1200 	.word	0x007a1200
 800433c:	003d0900 	.word	0x003d0900
 8004340:	aaaaaaab 	.word	0xaaaaaaab

08004344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e041      	b.n	80043da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fd fd70 	bl	8001e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f000 fb2a 	bl	80049dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d001      	beq.n	80043fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e032      	b.n	8004462 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a18      	ldr	r2, [pc, #96]	; (800446c <HAL_TIM_Base_Start+0x88>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00e      	beq.n	800442c <HAL_TIM_Base_Start+0x48>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004416:	d009      	beq.n	800442c <HAL_TIM_Base_Start+0x48>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a14      	ldr	r2, [pc, #80]	; (8004470 <HAL_TIM_Base_Start+0x8c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d004      	beq.n	800442c <HAL_TIM_Base_Start+0x48>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a13      	ldr	r2, [pc, #76]	; (8004474 <HAL_TIM_Base_Start+0x90>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d111      	bne.n	8004450 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b06      	cmp	r3, #6
 800443c:	d010      	beq.n	8004460 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444e:	e007      	b.n	8004460 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr
 800446c:	40012c00 	.word	0x40012c00
 8004470:	40000400 	.word	0x40000400
 8004474:	40000800 	.word	0x40000800

08004478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b01      	cmp	r3, #1
 800448a:	d001      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e03a      	b.n	8004506 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a18      	ldr	r2, [pc, #96]	; (8004510 <HAL_TIM_Base_Start_IT+0x98>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x58>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ba:	d009      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x58>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a14      	ldr	r2, [pc, #80]	; (8004514 <HAL_TIM_Base_Start_IT+0x9c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x58>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a13      	ldr	r2, [pc, #76]	; (8004518 <HAL_TIM_Base_Start_IT+0xa0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d111      	bne.n	80044f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b06      	cmp	r3, #6
 80044e0:	d010      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f2:	e007      	b.n	8004504 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800

0800451c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0201 	bic.w	r2, r2, #1
 8004532:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6a1a      	ldr	r2, [r3, #32]
 800453a:	f241 1311 	movw	r3, #4369	; 0x1111
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10f      	bne.n	8004564 <HAL_TIM_Base_Stop_IT+0x48>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6a1a      	ldr	r2, [r3, #32]
 800454a:	f240 4344 	movw	r3, #1092	; 0x444
 800454e:	4013      	ands	r3, r2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d107      	bne.n	8004564 <HAL_TIM_Base_Stop_IT+0x48>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b02      	cmp	r3, #2
 800458c:	d122      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b02      	cmp	r3, #2
 800459a:	d11b      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0202 	mvn.w	r2, #2
 80045a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f9f3 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f9e6 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f9f5 	bl	80049b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d122      	bne.n	8004628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d11b      	bne.n	8004628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0204 	mvn.w	r2, #4
 80045f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f9c9 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 8004614:	e005      	b.n	8004622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f9bc 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f9cb 	bl	80049b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b08      	cmp	r3, #8
 8004634:	d122      	bne.n	800467c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b08      	cmp	r3, #8
 8004642:	d11b      	bne.n	800467c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0208 	mvn.w	r2, #8
 800464c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2204      	movs	r2, #4
 8004652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f99f 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f992 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f9a1 	bl	80049b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b10      	cmp	r3, #16
 8004688:	d122      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	2b10      	cmp	r3, #16
 8004696:	d11b      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0210 	mvn.w	r2, #16
 80046a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2208      	movs	r2, #8
 80046a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f975 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 80046bc:	e005      	b.n	80046ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f968 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f977 	bl	80049b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d10e      	bne.n	80046fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d107      	bne.n	80046fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0201 	mvn.w	r2, #1
 80046f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc ff00 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004706:	2b80      	cmp	r3, #128	; 0x80
 8004708:	d10e      	bne.n	8004728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004714:	2b80      	cmp	r3, #128	; 0x80
 8004716:	d107      	bne.n	8004728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fb47 	bl	8004db6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	d10e      	bne.n	8004754 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d107      	bne.n	8004754 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800474c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f93b 	bl	80049ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b20      	cmp	r3, #32
 8004760:	d10e      	bne.n	8004780 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b20      	cmp	r3, #32
 800476e:	d107      	bne.n	8004780 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0220 	mvn.w	r2, #32
 8004778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fb12 	bl	8004da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_TIM_ConfigClockSource+0x18>
 800479c:	2302      	movs	r3, #2
 800479e:	e0b3      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x180>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d8:	d03e      	beq.n	8004858 <HAL_TIM_ConfigClockSource+0xd0>
 80047da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047de:	f200 8087 	bhi.w	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 80047e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e6:	f000 8085 	beq.w	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 80047ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ee:	d87f      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 80047f0:	2b70      	cmp	r3, #112	; 0x70
 80047f2:	d01a      	beq.n	800482a <HAL_TIM_ConfigClockSource+0xa2>
 80047f4:	2b70      	cmp	r3, #112	; 0x70
 80047f6:	d87b      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 80047f8:	2b60      	cmp	r3, #96	; 0x60
 80047fa:	d050      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x116>
 80047fc:	2b60      	cmp	r3, #96	; 0x60
 80047fe:	d877      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 8004800:	2b50      	cmp	r3, #80	; 0x50
 8004802:	d03c      	beq.n	800487e <HAL_TIM_ConfigClockSource+0xf6>
 8004804:	2b50      	cmp	r3, #80	; 0x50
 8004806:	d873      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 8004808:	2b40      	cmp	r3, #64	; 0x40
 800480a:	d058      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x136>
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	d86f      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 8004810:	2b30      	cmp	r3, #48	; 0x30
 8004812:	d064      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x156>
 8004814:	2b30      	cmp	r3, #48	; 0x30
 8004816:	d86b      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 8004818:	2b20      	cmp	r3, #32
 800481a:	d060      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x156>
 800481c:	2b20      	cmp	r3, #32
 800481e:	d867      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d05c      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x156>
 8004824:	2b10      	cmp	r3, #16
 8004826:	d05a      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004828:	e062      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6899      	ldr	r1, [r3, #8]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f000 fa36 	bl	8004caa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800484c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	609a      	str	r2, [r3, #8]
      break;
 8004856:	e04e      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	6899      	ldr	r1, [r3, #8]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f000 fa1f 	bl	8004caa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800487a:	609a      	str	r2, [r3, #8]
      break;
 800487c:	e03b      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6859      	ldr	r1, [r3, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	461a      	mov	r2, r3
 800488c:	f000 f996 	bl	8004bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2150      	movs	r1, #80	; 0x50
 8004896:	4618      	mov	r0, r3
 8004898:	f000 f9ed 	bl	8004c76 <TIM_ITRx_SetConfig>
      break;
 800489c:	e02b      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6859      	ldr	r1, [r3, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f000 f9b4 	bl	8004c18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2160      	movs	r1, #96	; 0x60
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 f9dd 	bl	8004c76 <TIM_ITRx_SetConfig>
      break;
 80048bc:	e01b      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6859      	ldr	r1, [r3, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	461a      	mov	r2, r3
 80048cc:	f000 f976 	bl	8004bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2140      	movs	r1, #64	; 0x40
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f9cd 	bl	8004c76 <TIM_ITRx_SetConfig>
      break;
 80048dc:	e00b      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f000 f9c4 	bl	8004c76 <TIM_ITRx_SetConfig>
        break;
 80048ee:	e002      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048f0:	bf00      	nop
 80048f2:	e000      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004924:	2302      	movs	r3, #2
 8004926:	e031      	b.n	800498c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f8b0 	bl	8004aa0 <TIM_SlaveTimer_SetConfig>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e018      	b.n	800498c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004968:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004978:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr

080049a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr

080049ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a29      	ldr	r2, [pc, #164]	; (8004a94 <TIM_Base_SetConfig+0xb8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00b      	beq.n	8004a0c <TIM_Base_SetConfig+0x30>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fa:	d007      	beq.n	8004a0c <TIM_Base_SetConfig+0x30>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a26      	ldr	r2, [pc, #152]	; (8004a98 <TIM_Base_SetConfig+0xbc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_Base_SetConfig+0x30>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a25      	ldr	r2, [pc, #148]	; (8004a9c <TIM_Base_SetConfig+0xc0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d108      	bne.n	8004a1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a1c      	ldr	r2, [pc, #112]	; (8004a94 <TIM_Base_SetConfig+0xb8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00b      	beq.n	8004a3e <TIM_Base_SetConfig+0x62>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2c:	d007      	beq.n	8004a3e <TIM_Base_SetConfig+0x62>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <TIM_Base_SetConfig+0xbc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_Base_SetConfig+0x62>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a18      	ldr	r2, [pc, #96]	; (8004a9c <TIM_Base_SetConfig+0xc0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d108      	bne.n	8004a50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a07      	ldr	r2, [pc, #28]	; (8004a94 <TIM_Base_SetConfig+0xb8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d103      	bne.n	8004a84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	615a      	str	r2, [r3, #20]
}
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	40012c00 	.word	0x40012c00
 8004a98:	40000400 	.word	0x40000400
 8004a9c:	40000800 	.word	0x40000800

08004aa0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0307 	bic.w	r3, r3, #7
 8004aca:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b70      	cmp	r3, #112	; 0x70
 8004ae4:	d01a      	beq.n	8004b1c <TIM_SlaveTimer_SetConfig+0x7c>
 8004ae6:	2b70      	cmp	r3, #112	; 0x70
 8004ae8:	d860      	bhi.n	8004bac <TIM_SlaveTimer_SetConfig+0x10c>
 8004aea:	2b60      	cmp	r3, #96	; 0x60
 8004aec:	d054      	beq.n	8004b98 <TIM_SlaveTimer_SetConfig+0xf8>
 8004aee:	2b60      	cmp	r3, #96	; 0x60
 8004af0:	d85c      	bhi.n	8004bac <TIM_SlaveTimer_SetConfig+0x10c>
 8004af2:	2b50      	cmp	r3, #80	; 0x50
 8004af4:	d046      	beq.n	8004b84 <TIM_SlaveTimer_SetConfig+0xe4>
 8004af6:	2b50      	cmp	r3, #80	; 0x50
 8004af8:	d858      	bhi.n	8004bac <TIM_SlaveTimer_SetConfig+0x10c>
 8004afa:	2b40      	cmp	r3, #64	; 0x40
 8004afc:	d019      	beq.n	8004b32 <TIM_SlaveTimer_SetConfig+0x92>
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d854      	bhi.n	8004bac <TIM_SlaveTimer_SetConfig+0x10c>
 8004b02:	2b30      	cmp	r3, #48	; 0x30
 8004b04:	d054      	beq.n	8004bb0 <TIM_SlaveTimer_SetConfig+0x110>
 8004b06:	2b30      	cmp	r3, #48	; 0x30
 8004b08:	d850      	bhi.n	8004bac <TIM_SlaveTimer_SetConfig+0x10c>
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d050      	beq.n	8004bb0 <TIM_SlaveTimer_SetConfig+0x110>
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d84c      	bhi.n	8004bac <TIM_SlaveTimer_SetConfig+0x10c>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d04c      	beq.n	8004bb0 <TIM_SlaveTimer_SetConfig+0x110>
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d04a      	beq.n	8004bb0 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8004b1a:	e047      	b.n	8004bac <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68d9      	ldr	r1, [r3, #12]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f000 f8bd 	bl	8004caa <TIM_ETR_SetConfig>
      break;
 8004b30:	e03f      	b.n	8004bb2 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b05      	cmp	r3, #5
 8004b38:	d101      	bne.n	8004b3e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e03a      	b.n	8004bb4 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6a1a      	ldr	r2, [r3, #32]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0201 	bic.w	r2, r2, #1
 8004b54:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b64:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	621a      	str	r2, [r3, #32]
      break;
 8004b82:	e016      	b.n	8004bb2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	6899      	ldr	r1, [r3, #8]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	461a      	mov	r2, r3
 8004b92:	f000 f813 	bl	8004bbc <TIM_TI1_ConfigInputStage>
      break;
 8004b96:	e00c      	b.n	8004bb2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	6899      	ldr	r1, [r3, #8]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	f000 f837 	bl	8004c18 <TIM_TI2_ConfigInputStage>
      break;
 8004baa:	e002      	b.n	8004bb2 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004bac:	bf00      	nop
 8004bae:	e000      	b.n	8004bb2 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004bb0:	bf00      	nop
  }
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f023 0201 	bic.w	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f023 030a 	bic.w	r3, r3, #10
 8004bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	621a      	str	r2, [r3, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f023 0210 	bic.w	r2, r3, #16
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	031b      	lsls	r3, r3, #12
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	621a      	str	r2, [r3, #32]
}
 8004c6c:	bf00      	nop
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr

08004c76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b085      	sub	sp, #20
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f043 0307 	orr.w	r3, r3, #7
 8004c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	609a      	str	r2, [r3, #8]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr

08004caa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b087      	sub	sp, #28
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	021a      	lsls	r2, r3, #8
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	609a      	str	r2, [r3, #8]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e046      	b.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a16      	ldr	r2, [pc, #88]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00e      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4c:	d009      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a12      	ldr	r2, [pc, #72]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a10      	ldr	r2, [pc, #64]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10c      	bne.n	8004d7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40000800 	.word	0x40000800

08004da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e03f      	b.n	8004e5a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fd f8c4 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2224      	movs	r2, #36	; 0x24
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f9a7 	bl	8005160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695a      	ldr	r2, [r3, #20]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b08a      	sub	sp, #40	; 0x28
 8004e66:	af02      	add	r7, sp, #8
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	603b      	str	r3, [r7, #0]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d17c      	bne.n	8004f7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <HAL_UART_Transmit+0x2c>
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e075      	b.n	8004f7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_UART_Transmit+0x3e>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e06e      	b.n	8004f7e <HAL_UART_Transmit+0x11c>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2221      	movs	r2, #33	; 0x21
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eb6:	f7fd fd03 	bl	80028c0 <HAL_GetTick>
 8004eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	88fa      	ldrh	r2, [r7, #6]
 8004ec6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed0:	d108      	bne.n	8004ee4 <HAL_UART_Transmit+0x82>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d104      	bne.n	8004ee4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	e003      	b.n	8004eec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ef4:	e02a      	b.n	8004f4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2200      	movs	r2, #0
 8004efe:	2180      	movs	r1, #128	; 0x80
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f8e2 	bl	80050ca <UART_WaitOnFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e036      	b.n	8004f7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10b      	bne.n	8004f2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	3302      	adds	r3, #2
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	e007      	b.n	8004f3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	781a      	ldrb	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1cf      	bne.n	8004ef6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2140      	movs	r1, #64	; 0x40
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f8b2 	bl	80050ca <UART_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e006      	b.n	8004f7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e000      	b.n	8004f7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f7c:	2302      	movs	r3, #2
  }
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3720      	adds	r7, #32
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b08a      	sub	sp, #40	; 0x28
 8004f8a:	af02      	add	r7, sp, #8
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	603b      	str	r3, [r7, #0]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	f040 808c 	bne.w	80050c0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <HAL_UART_Receive+0x2e>
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e084      	b.n	80050c2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_UART_Receive+0x40>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e07d      	b.n	80050c2 <HAL_UART_Receive+0x13c>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2222      	movs	r2, #34	; 0x22
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fe2:	f7fd fc6d 	bl	80028c0 <HAL_GetTick>
 8004fe6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	88fa      	ldrh	r2, [r7, #6]
 8004ff2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffc:	d108      	bne.n	8005010 <HAL_UART_Receive+0x8a>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	e003      	b.n	8005018 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005014:	2300      	movs	r3, #0
 8005016:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005020:	e043      	b.n	80050aa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2200      	movs	r2, #0
 800502a:	2120      	movs	r1, #32
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f84c 	bl	80050ca <UART_WaitOnFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e042      	b.n	80050c2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10c      	bne.n	800505c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504e:	b29a      	uxth	r2, r3
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	3302      	adds	r3, #2
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	e01f      	b.n	800509c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005064:	d007      	beq.n	8005076 <HAL_UART_Receive+0xf0>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <HAL_UART_Receive+0xfe>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	e008      	b.n	8005096 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005090:	b2da      	uxtb	r2, r3
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	3301      	adds	r3, #1
 800509a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1b6      	bne.n	8005022 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	e000      	b.n	80050c2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	4613      	mov	r3, r2
 80050d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050da:	e02c      	b.n	8005136 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d028      	beq.n	8005136 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <UART_WaitOnFlagUntilTimeout+0x30>
 80050ea:	f7fd fbe9 	bl	80028c0 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d21d      	bcs.n	8005136 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005108:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695a      	ldr	r2, [r3, #20]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e00f      	b.n	8005156 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4013      	ands	r3, r2
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	429a      	cmp	r2, r3
 8005144:	bf0c      	ite	eq
 8005146:	2301      	moveq	r3, #1
 8005148:	2300      	movne	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	429a      	cmp	r2, r3
 8005152:	d0c3      	beq.n	80050dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800519a:	f023 030c 	bic.w	r3, r3, #12
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	68b9      	ldr	r1, [r7, #8]
 80051a4:	430b      	orrs	r3, r1
 80051a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a2c      	ldr	r2, [pc, #176]	; (8005274 <UART_SetConfig+0x114>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d103      	bne.n	80051d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051c8:	f7fe fee0 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	e002      	b.n	80051d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051d0:	f7fe fec8 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 80051d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	009a      	lsls	r2, r3, #2
 80051e0:	441a      	add	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ec:	4a22      	ldr	r2, [pc, #136]	; (8005278 <UART_SetConfig+0x118>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	0119      	lsls	r1, r3, #4
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	009a      	lsls	r2, r3, #2
 8005200:	441a      	add	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	fbb2 f2f3 	udiv	r2, r2, r3
 800520c:	4b1a      	ldr	r3, [pc, #104]	; (8005278 <UART_SetConfig+0x118>)
 800520e:	fba3 0302 	umull	r0, r3, r3, r2
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	2064      	movs	r0, #100	; 0x64
 8005216:	fb00 f303 	mul.w	r3, r0, r3
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	3332      	adds	r3, #50	; 0x32
 8005220:	4a15      	ldr	r2, [pc, #84]	; (8005278 <UART_SetConfig+0x118>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800522c:	4419      	add	r1, r3
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009a      	lsls	r2, r3, #2
 8005238:	441a      	add	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	fbb2 f2f3 	udiv	r2, r2, r3
 8005244:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <UART_SetConfig+0x118>)
 8005246:	fba3 0302 	umull	r0, r3, r3, r2
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	2064      	movs	r0, #100	; 0x64
 800524e:	fb00 f303 	mul.w	r3, r0, r3
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	3332      	adds	r3, #50	; 0x32
 8005258:	4a07      	ldr	r2, [pc, #28]	; (8005278 <UART_SetConfig+0x118>)
 800525a:	fba2 2303 	umull	r2, r3, r2, r3
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	f003 020f 	and.w	r2, r3, #15
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	440a      	add	r2, r1
 800526a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40013800 	.word	0x40013800
 8005278:	51eb851f 	.word	0x51eb851f

0800527c <SentError>:
/*
 * Эта функция нужна для отладки кода. При вызове
 * отправляет по UART сообщение об ошибке с путем к файлу
 * и номером строки, где данная функция была вызвана
 */
void SentError(uint8_t *file, uint32_t line) {
 800527c:	b590      	push	{r4, r7, lr}
 800527e:	b0b5      	sub	sp, #212	; 0xd4
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
	char buf[200] = { 0 };
 8005286:	2300      	movs	r3, #0
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	f107 030c 	add.w	r3, r7, #12
 800528e:	22c4      	movs	r2, #196	; 0xc4
 8005290:	2100      	movs	r1, #0
 8005292:	4618      	mov	r0, r3
 8005294:	f003 f907 	bl	80084a6 <memset>
	sprintf(buf, "\r Exception: Wrong parameters value: file %s on line %d\r\n", file, (int) line);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f107 0008 	add.w	r0, r7, #8
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	4911      	ldr	r1, [pc, #68]	; (80052e8 <SentError+0x6c>)
 80052a2:	f004 f853 	bl	800934c <siprintf>
	while (HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf),10 * strlen(buf)) != HAL_OK);
 80052a6:	bf00      	nop
 80052a8:	f107 0308 	add.w	r3, r7, #8
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fa ff4f 	bl	8000150 <strlen>
 80052b2:	4603      	mov	r3, r0
 80052b4:	b29c      	uxth	r4, r3
 80052b6:	f107 0308 	add.w	r3, r7, #8
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fa ff48 	bl	8000150 <strlen>
 80052c0:	4602      	mov	r2, r0
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	f107 0108 	add.w	r1, r7, #8
 80052ce:	4622      	mov	r2, r4
 80052d0:	4806      	ldr	r0, [pc, #24]	; (80052ec <SentError+0x70>)
 80052d2:	f7ff fdc6 	bl	8004e62 <HAL_UART_Transmit>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e5      	bne.n	80052a8 <SentError+0x2c>
	HAL_NVIC_SystemReset();
 80052dc:	f7fe f8cd 	bl	800347a <HAL_NVIC_SystemReset>
}
 80052e0:	bf00      	nop
 80052e2:	37d4      	adds	r7, #212	; 0xd4
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd90      	pop	{r4, r7, pc}
 80052e8:	0800cdac 	.word	0x0800cdac
 80052ec:	20003aa4 	.word	0x20003aa4

080052f0 <SentResultActionResponse>:

void SentResultActionResponse(struct TypeStruct typeStruct, char err[255], bool stat) {
 80052f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f2:	b08b      	sub	sp, #44	; 0x2c
 80052f4:	af04      	add	r7, sp, #16
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	4613      	mov	r3, r2
 80052fc:	71fb      	strb	r3, [r7, #7]
 80052fe:	466b      	mov	r3, sp
 8005300:	461e      	mov	r6, r3
	char resultState[19 + strlen(err)];
 8005302:	68b8      	ldr	r0, [r7, #8]
 8005304:	f7fa ff24 	bl	8000150 <strlen>
 8005308:	4603      	mov	r3, r0
 800530a:	f103 0413 	add.w	r4, r3, #19
 800530e:	4623      	mov	r3, r4
 8005310:	3b01      	subs	r3, #1
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	4620      	mov	r0, r4
 8005316:	f04f 0100 	mov.w	r1, #0
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	00cb      	lsls	r3, r1, #3
 8005324:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005328:	00c2      	lsls	r2, r0, #3
 800532a:	4620      	mov	r0, r4
 800532c:	f04f 0100 	mov.w	r1, #0
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	00cb      	lsls	r3, r1, #3
 800533a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800533e:	00c2      	lsls	r2, r0, #3
 8005340:	1de3      	adds	r3, r4, #7
 8005342:	08db      	lsrs	r3, r3, #3
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	ebad 0d03 	sub.w	sp, sp, r3
 800534a:	ab04      	add	r3, sp, #16
 800534c:	3300      	adds	r3, #0
 800534e:	613b      	str	r3, [r7, #16]

	sprintf(
 8005350:	6938      	ldr	r0, [r7, #16]
	        resultState,
	        "R_%c%c_%c%c*ERR=%s-STAT=%d",
	         typeStruct.type[0],
 8005352:	7b3b      	ldrb	r3, [r7, #12]
	sprintf(
 8005354:	461c      	mov	r4, r3
	         typeStruct.type[1],
 8005356:	7b7b      	ldrb	r3, [r7, #13]
	sprintf(
 8005358:	461d      	mov	r5, r3
	         typeStruct.subType[0],
 800535a:	7bbb      	ldrb	r3, [r7, #14]
	sprintf(
 800535c:	461a      	mov	r2, r3
	         typeStruct.subType[1],
 800535e:	7bfb      	ldrb	r3, [r7, #15]
	sprintf(
 8005360:	4619      	mov	r1, r3
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	9303      	str	r3, [sp, #12]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	9302      	str	r3, [sp, #8]
 800536a:	9101      	str	r1, [sp, #4]
 800536c:	9200      	str	r2, [sp, #0]
 800536e:	462b      	mov	r3, r5
 8005370:	4622      	mov	r2, r4
 8005372:	4910      	ldr	r1, [pc, #64]	; (80053b4 <SentResultActionResponse+0xc4>)
 8005374:	f003 ffea 	bl	800934c <siprintf>
	         err,
	         stat);

	while (
 8005378:	bf00      	nop
			HAL_UART_Transmit(&huart1, (uint8_t*) resultState, strlen(resultState),10 * strlen(resultState)
 800537a:	693c      	ldr	r4, [r7, #16]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4618      	mov	r0, r3
 8005380:	f7fa fee6 	bl	8000150 <strlen>
 8005384:	4603      	mov	r3, r0
 8005386:	b29d      	uxth	r5, r3
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	4618      	mov	r0, r3
 800538c:	f7fa fee0 	bl	8000150 <strlen>
 8005390:	4602      	mov	r2, r0
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	462a      	mov	r2, r5
 800539c:	4621      	mov	r1, r4
 800539e:	4806      	ldr	r0, [pc, #24]	; (80053b8 <SentResultActionResponse+0xc8>)
 80053a0:	f7ff fd5f 	bl	8004e62 <HAL_UART_Transmit>
 80053a4:	4603      	mov	r3, r0
	while (
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e7      	bne.n	800537a <SentResultActionResponse+0x8a>
 80053aa:	46b5      	mov	sp, r6
	) != HAL_OK);
}
 80053ac:	bf00      	nop
 80053ae:	371c      	adds	r7, #28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053b4:	0800cde8 	.word	0x0800cde8
 80053b8:	20003aa4 	.word	0x20003aa4

080053bc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c2:	f3ef 8305 	mrs	r3, IPSR
 80053c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80053c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10f      	bne.n	80053ee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ce:	f3ef 8310 	mrs	r3, PRIMASK
 80053d2:	607b      	str	r3, [r7, #4]
  return(result);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <osKernelInitialize+0x32>
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <osKernelInitialize+0x60>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d109      	bne.n	80053f6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053e2:	f3ef 8311 	mrs	r3, BASEPRI
 80053e6:	603b      	str	r3, [r7, #0]
  return(result);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80053ee:	f06f 0305 	mvn.w	r3, #5
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e00c      	b.n	8005410 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <osKernelInitialize+0x60>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d105      	bne.n	800540a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80053fe:	4b07      	ldr	r3, [pc, #28]	; (800541c <osKernelInitialize+0x60>)
 8005400:	2201      	movs	r2, #1
 8005402:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e002      	b.n	8005410 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800540a:	f04f 33ff 	mov.w	r3, #4294967295
 800540e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005410:	68fb      	ldr	r3, [r7, #12]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr
 800541c:	20000214 	.word	0x20000214

08005420 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005426:	f3ef 8305 	mrs	r3, IPSR
 800542a:	60bb      	str	r3, [r7, #8]
  return(result);
 800542c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10f      	bne.n	8005452 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005432:	f3ef 8310 	mrs	r3, PRIMASK
 8005436:	607b      	str	r3, [r7, #4]
  return(result);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <osKernelStart+0x32>
 800543e:	4b11      	ldr	r3, [pc, #68]	; (8005484 <osKernelStart+0x64>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d109      	bne.n	800545a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005446:	f3ef 8311 	mrs	r3, BASEPRI
 800544a:	603b      	str	r3, [r7, #0]
  return(result);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005452:	f06f 0305 	mvn.w	r3, #5
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	e00e      	b.n	8005478 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800545a:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <osKernelStart+0x64>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d107      	bne.n	8005472 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005462:	4b08      	ldr	r3, [pc, #32]	; (8005484 <osKernelStart+0x64>)
 8005464:	2202      	movs	r2, #2
 8005466:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005468:	f001 faa8 	bl	80069bc <vTaskStartScheduler>
      stat = osOK;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e002      	b.n	8005478 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005472:	f04f 33ff 	mov.w	r3, #4294967295
 8005476:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005478:	68fb      	ldr	r3, [r7, #12]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000214 	.word	0x20000214

08005488 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005488:	b580      	push	{r7, lr}
 800548a:	b092      	sub	sp, #72	; 0x48
 800548c:	af04      	add	r7, sp, #16
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005498:	f3ef 8305 	mrs	r3, IPSR
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f040 8094 	bne.w	80055ce <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a6:	f3ef 8310 	mrs	r3, PRIMASK
 80054aa:	623b      	str	r3, [r7, #32]
  return(result);
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f040 808d 	bne.w	80055ce <osThreadNew+0x146>
 80054b4:	4b48      	ldr	r3, [pc, #288]	; (80055d8 <osThreadNew+0x150>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d106      	bne.n	80054ca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054bc:	f3ef 8311 	mrs	r3, BASEPRI
 80054c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 8082 	bne.w	80055ce <osThreadNew+0x146>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d07e      	beq.n	80055ce <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80054d4:	2318      	movs	r3, #24
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80054d8:	2300      	movs	r3, #0
 80054da:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80054dc:	f107 031b 	add.w	r3, r7, #27
 80054e0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80054e2:	f04f 33ff 	mov.w	r3, #4294967295
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d045      	beq.n	800557a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <osThreadNew+0x74>
        name = attr->name;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <osThreadNew+0x9a>
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	2b38      	cmp	r3, #56	; 0x38
 8005514:	d805      	bhi.n	8005522 <osThreadNew+0x9a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <osThreadNew+0x9e>
        return (NULL);
 8005522:	2300      	movs	r3, #0
 8005524:	e054      	b.n	80055d0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	089b      	lsrs	r3, r3, #2
 8005534:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00e      	beq.n	800555c <osThreadNew+0xd4>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	2bbb      	cmp	r3, #187	; 0xbb
 8005544:	d90a      	bls.n	800555c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800554a:	2b00      	cmp	r3, #0
 800554c:	d006      	beq.n	800555c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <osThreadNew+0xd4>
        mem = 1;
 8005556:	2301      	movs	r3, #1
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
 800555a:	e010      	b.n	800557e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10c      	bne.n	800557e <osThreadNew+0xf6>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d108      	bne.n	800557e <osThreadNew+0xf6>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <osThreadNew+0xf6>
          mem = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
 8005578:	e001      	b.n	800557e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	2b01      	cmp	r3, #1
 8005582:	d110      	bne.n	80055a6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800558c:	9202      	str	r2, [sp, #8]
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f001 f82a 	bl	80065f4 <xTaskCreateStatic>
 80055a0:	4603      	mov	r3, r0
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	e013      	b.n	80055ce <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d110      	bne.n	80055ce <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	f107 0314 	add.w	r3, r7, #20
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f001 f874 	bl	80066ac <xTaskCreate>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d001      	beq.n	80055ce <osThreadNew+0x146>
          hTask = NULL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055ce:	697b      	ldr	r3, [r7, #20]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3738      	adds	r7, #56	; 0x38
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20000214 	.word	0x20000214

080055dc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055e4:	f3ef 8305 	mrs	r3, IPSR
 80055e8:	613b      	str	r3, [r7, #16]
  return(result);
 80055ea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10f      	bne.n	8005610 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055f0:	f3ef 8310 	mrs	r3, PRIMASK
 80055f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d109      	bne.n	8005610 <osDelay+0x34>
 80055fc:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <osDelay+0x58>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b02      	cmp	r3, #2
 8005602:	d109      	bne.n	8005618 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005604:	f3ef 8311 	mrs	r3, BASEPRI
 8005608:	60bb      	str	r3, [r7, #8]
  return(result);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <osDelay+0x3c>
    stat = osErrorISR;
 8005610:	f06f 0305 	mvn.w	r3, #5
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	e007      	b.n	8005628 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f001 f996 	bl	8006954 <vTaskDelay>
    }
  }

  return (stat);
 8005628:	697b      	ldr	r3, [r7, #20]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20000214 	.word	0x20000214

08005638 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b08c      	sub	sp, #48	; 0x30
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005644:	2300      	movs	r3, #0
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005648:	f3ef 8305 	mrs	r3, IPSR
 800564c:	61bb      	str	r3, [r7, #24]
  return(result);
 800564e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005650:	2b00      	cmp	r3, #0
 8005652:	f040 8086 	bne.w	8005762 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005656:	f3ef 8310 	mrs	r3, PRIMASK
 800565a:	617b      	str	r3, [r7, #20]
  return(result);
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d17f      	bne.n	8005762 <osSemaphoreNew+0x12a>
 8005662:	4b42      	ldr	r3, [pc, #264]	; (800576c <osSemaphoreNew+0x134>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d105      	bne.n	8005676 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800566a:	f3ef 8311 	mrs	r3, BASEPRI
 800566e:	613b      	str	r3, [r7, #16]
  return(result);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d175      	bne.n	8005762 <osSemaphoreNew+0x12a>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d072      	beq.n	8005762 <osSemaphoreNew+0x12a>
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	429a      	cmp	r2, r3
 8005682:	d86e      	bhi.n	8005762 <osSemaphoreNew+0x12a>
    mem = -1;
 8005684:	f04f 33ff 	mov.w	r3, #4294967295
 8005688:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d015      	beq.n	80056bc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d006      	beq.n	80056a6 <osSemaphoreNew+0x6e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b4f      	cmp	r3, #79	; 0x4f
 800569e:	d902      	bls.n	80056a6 <osSemaphoreNew+0x6e>
        mem = 1;
 80056a0:	2301      	movs	r3, #1
 80056a2:	623b      	str	r3, [r7, #32]
 80056a4:	e00c      	b.n	80056c0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d108      	bne.n	80056c0 <osSemaphoreNew+0x88>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d104      	bne.n	80056c0 <osSemaphoreNew+0x88>
          mem = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	623b      	str	r3, [r7, #32]
 80056ba:	e001      	b.n	80056c0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c6:	d04c      	beq.n	8005762 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d128      	bne.n	8005720 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d10a      	bne.n	80056ea <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	2203      	movs	r2, #3
 80056da:	9200      	str	r2, [sp, #0]
 80056dc:	2200      	movs	r2, #0
 80056de:	2100      	movs	r1, #0
 80056e0:	2001      	movs	r0, #1
 80056e2:	f000 fa15 	bl	8005b10 <xQueueGenericCreateStatic>
 80056e6:	6278      	str	r0, [r7, #36]	; 0x24
 80056e8:	e005      	b.n	80056f6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80056ea:	2203      	movs	r2, #3
 80056ec:	2100      	movs	r1, #0
 80056ee:	2001      	movs	r0, #1
 80056f0:	f000 fa85 	bl	8005bfe <xQueueGenericCreate>
 80056f4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d022      	beq.n	8005742 <osSemaphoreNew+0x10a>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d01f      	beq.n	8005742 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005702:	2300      	movs	r3, #0
 8005704:	2200      	movs	r2, #0
 8005706:	2100      	movs	r1, #0
 8005708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800570a:	f000 fb43 	bl	8005d94 <xQueueGenericSend>
 800570e:	4603      	mov	r3, r0
 8005710:	2b01      	cmp	r3, #1
 8005712:	d016      	beq.n	8005742 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005716:	f000 fdb3 	bl	8006280 <vQueueDelete>
            hSemaphore = NULL;
 800571a:	2300      	movs	r3, #0
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
 800571e:	e010      	b.n	8005742 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d108      	bne.n	8005738 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	461a      	mov	r2, r3
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 fac6 	bl	8005cc0 <xQueueCreateCountingSemaphoreStatic>
 8005734:	6278      	str	r0, [r7, #36]	; 0x24
 8005736:	e004      	b.n	8005742 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 faf7 	bl	8005d2e <xQueueCreateCountingSemaphore>
 8005740:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00c      	beq.n	8005762 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <osSemaphoreNew+0x11e>
          name = attr->name;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	e001      	b.n	800575a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800575a:	69f9      	ldr	r1, [r7, #28]
 800575c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800575e:	f000 fec3 	bl	80064e8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005764:	4618      	mov	r0, r3
 8005766:	3728      	adds	r7, #40	; 0x28
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000214 	.word	0x20000214

08005770 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005770:	b580      	push	{r7, lr}
 8005772:	b08c      	sub	sp, #48	; 0x30
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800577c:	2300      	movs	r3, #0
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005780:	f3ef 8305 	mrs	r3, IPSR
 8005784:	61bb      	str	r3, [r7, #24]
  return(result);
 8005786:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005788:	2b00      	cmp	r3, #0
 800578a:	d16f      	bne.n	800586c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800578c:	f3ef 8310 	mrs	r3, PRIMASK
 8005790:	617b      	str	r3, [r7, #20]
  return(result);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d169      	bne.n	800586c <osMessageQueueNew+0xfc>
 8005798:	4b37      	ldr	r3, [pc, #220]	; (8005878 <osMessageQueueNew+0x108>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d105      	bne.n	80057ac <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057a0:	f3ef 8311 	mrs	r3, BASEPRI
 80057a4:	613b      	str	r3, [r7, #16]
  return(result);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d15f      	bne.n	800586c <osMessageQueueNew+0xfc>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d05c      	beq.n	800586c <osMessageQueueNew+0xfc>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d059      	beq.n	800586c <osMessageQueueNew+0xfc>
    mem = -1;
 80057b8:	f04f 33ff 	mov.w	r3, #4294967295
 80057bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d029      	beq.n	8005818 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d012      	beq.n	80057f2 <osMessageQueueNew+0x82>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	2b4f      	cmp	r3, #79	; 0x4f
 80057d2:	d90e      	bls.n	80057f2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	fb01 f303 	mul.w	r3, r1, r3
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d302      	bcc.n	80057f2 <osMessageQueueNew+0x82>
        mem = 1;
 80057ec:	2301      	movs	r3, #1
 80057ee:	623b      	str	r3, [r7, #32]
 80057f0:	e014      	b.n	800581c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d110      	bne.n	800581c <osMessageQueueNew+0xac>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10c      	bne.n	800581c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005806:	2b00      	cmp	r3, #0
 8005808:	d108      	bne.n	800581c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d104      	bne.n	800581c <osMessageQueueNew+0xac>
          mem = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	623b      	str	r3, [r7, #32]
 8005816:	e001      	b.n	800581c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d10b      	bne.n	800583a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2100      	movs	r1, #0
 800582c:	9100      	str	r1, [sp, #0]
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 f96d 	bl	8005b10 <xQueueGenericCreateStatic>
 8005836:	6278      	str	r0, [r7, #36]	; 0x24
 8005838:	e008      	b.n	800584c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005840:	2200      	movs	r2, #0
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f9da 	bl	8005bfe <xQueueGenericCreate>
 800584a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00c      	beq.n	800586c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	61fb      	str	r3, [r7, #28]
 800585e:	e001      	b.n	8005864 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005864:	69f9      	ldr	r1, [r7, #28]
 8005866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005868:	f000 fe3e 	bl	80064e8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800586e:	4618      	mov	r0, r3
 8005870:	3728      	adds	r7, #40	; 0x28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000214 	.word	0x20000214

0800587c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4a06      	ldr	r2, [pc, #24]	; (80058a4 <vApplicationGetIdleTaskMemory+0x28>)
 800588c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	4a05      	ldr	r2, [pc, #20]	; (80058a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2280      	movs	r2, #128	; 0x80
 8005898:	601a      	str	r2, [r3, #0]
}
 800589a:	bf00      	nop
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr
 80058a4:	20000218 	.word	0x20000218
 80058a8:	200002d4 	.word	0x200002d4

080058ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80058bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	4a06      	ldr	r2, [pc, #24]	; (80058dc <vApplicationGetTimerTaskMemory+0x30>)
 80058c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058ca:	601a      	str	r2, [r3, #0]
}
 80058cc:	bf00      	nop
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	200004d4 	.word	0x200004d4
 80058dc:	20000590 	.word	0x20000590

080058e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f103 0208 	add.w	r2, r3, #8
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f04f 32ff 	mov.w	r2, #4294967295
 80058f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f103 0208 	add.w	r2, r3, #8
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f103 0208 	add.w	r2, r3, #8
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr

08005936 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	601a      	str	r2, [r3, #0]
}
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr

0800597c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005992:	d103      	bne.n	800599c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	e00c      	b.n	80059b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3308      	adds	r3, #8
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	e002      	b.n	80059aa <vListInsert+0x2e>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d2f6      	bcs.n	80059a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	601a      	str	r2, [r3, #0]
}
 80059e2:	bf00      	nop
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr

080059ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6892      	ldr	r2, [r2, #8]
 8005a02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6852      	ldr	r2, [r2, #4]
 8005a0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d103      	bne.n	8005a20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	1e5a      	subs	r2, r3, #1
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr
	...

08005a40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a6a:	f002 f90f 	bl	8007c8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a76:	68f9      	ldr	r1, [r7, #12]
 8005a78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	441a      	add	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	68f9      	ldr	r1, [r7, #12]
 8005a9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005aa0:	fb01 f303 	mul.w	r3, r1, r3
 8005aa4:	441a      	add	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	22ff      	movs	r2, #255	; 0xff
 8005aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	22ff      	movs	r2, #255	; 0xff
 8005ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d114      	bne.n	8005aea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01a      	beq.n	8005afe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3310      	adds	r3, #16
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 fa37 	bl	8006f40 <xTaskRemoveFromEventList>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d012      	beq.n	8005afe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ad8:	4b0c      	ldr	r3, [pc, #48]	; (8005b0c <xQueueGenericReset+0xcc>)
 8005ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	e009      	b.n	8005afe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3310      	adds	r3, #16
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff fef6 	bl	80058e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	3324      	adds	r3, #36	; 0x24
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fef1 	bl	80058e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005afe:	f002 f8f5 	bl	8007cec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b02:	2301      	movs	r3, #1
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	e000ed04 	.word	0xe000ed04

08005b10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08e      	sub	sp, #56	; 0x38
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <xQueueGenericCreateStatic+0x52>
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <xQueueGenericCreateStatic+0x56>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <xQueueGenericCreateStatic+0x58>
 8005b66:	2300      	movs	r3, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	623b      	str	r3, [r7, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	e7fe      	b.n	8005b80 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d102      	bne.n	8005b8e <xQueueGenericCreateStatic+0x7e>
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <xQueueGenericCreateStatic+0x82>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <xQueueGenericCreateStatic+0x84>
 8005b92:	2300      	movs	r3, #0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10a      	bne.n	8005bae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	61fb      	str	r3, [r7, #28]
}
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005bae:	2350      	movs	r3, #80	; 0x50
 8005bb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b50      	cmp	r3, #80	; 0x50
 8005bb6:	d00a      	beq.n	8005bce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	61bb      	str	r3, [r7, #24]
}
 8005bca:	bf00      	nop
 8005bcc:	e7fe      	b.n	8005bcc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00d      	beq.n	8005bf4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005be0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f843 	bl	8005c7a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3730      	adds	r7, #48	; 0x30
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b08a      	sub	sp, #40	; 0x28
 8005c02:	af02      	add	r7, sp, #8
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	613b      	str	r3, [r7, #16]
}
 8005c24:	bf00      	nop
 8005c26:	e7fe      	b.n	8005c26 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d102      	bne.n	8005c34 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	e004      	b.n	8005c3e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	fb02 f303 	mul.w	r3, r2, r3
 8005c3c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	3350      	adds	r3, #80	; 0x50
 8005c42:	4618      	mov	r0, r3
 8005c44:	f002 f922 	bl	8007e8c <pvPortMalloc>
 8005c48:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00f      	beq.n	8005c70 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	3350      	adds	r3, #80	; 0x50
 8005c54:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c5e:	79fa      	ldrb	r2, [r7, #7]
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	4613      	mov	r3, r2
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 f805 	bl	8005c7a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005c70:	69bb      	ldr	r3, [r7, #24]
	}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3720      	adds	r7, #32
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	607a      	str	r2, [r7, #4]
 8005c86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d103      	bne.n	8005c96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	e002      	b.n	8005c9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ca8:	2101      	movs	r1, #1
 8005caa:	69b8      	ldr	r0, [r7, #24]
 8005cac:	f7ff fec8 	bl	8005a40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	78fa      	ldrb	r2, [r7, #3]
 8005cb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	61bb      	str	r3, [r7, #24]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d90a      	bls.n	8005d06 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	617b      	str	r3, [r7, #20]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005d06:	2302      	movs	r3, #2
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2100      	movs	r1, #0
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f7ff fefd 	bl	8005b10 <xQueueGenericCreateStatic>
 8005d16:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005d24:	69fb      	ldr	r3, [r7, #28]
	}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b086      	sub	sp, #24
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10a      	bne.n	8005d54 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	613b      	str	r3, [r7, #16]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d90a      	bls.n	8005d72 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	60fb      	str	r3, [r7, #12]
}
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005d72:	2202      	movs	r2, #2
 8005d74:	2100      	movs	r1, #0
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff ff41 	bl	8005bfe <xQueueGenericCreate>
 8005d7c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005d8a:	697b      	ldr	r3, [r7, #20]
	}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08e      	sub	sp, #56	; 0x38
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005da2:	2300      	movs	r3, #0
 8005da4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <xQueueGenericSend+0x32>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d103      	bne.n	8005dd4 <xQueueGenericSend+0x40>
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <xQueueGenericSend+0x44>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <xQueueGenericSend+0x46>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <xQueueGenericSend+0x60>
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005df0:	bf00      	nop
 8005df2:	e7fe      	b.n	8005df2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d103      	bne.n	8005e02 <xQueueGenericSend+0x6e>
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d101      	bne.n	8005e06 <xQueueGenericSend+0x72>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <xQueueGenericSend+0x74>
 8005e06:	2300      	movs	r3, #0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10a      	bne.n	8005e22 <xQueueGenericSend+0x8e>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	623b      	str	r3, [r7, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e22:	f001 fa53 	bl	80072cc <xTaskGetSchedulerState>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <xQueueGenericSend+0x9e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <xQueueGenericSend+0xa2>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <xQueueGenericSend+0xa4>
 8005e36:	2300      	movs	r3, #0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <xQueueGenericSend+0xbe>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	61fb      	str	r3, [r7, #28]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e52:	f001 ff1b 	bl	8007c8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d302      	bcc.n	8005e68 <xQueueGenericSend+0xd4>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d129      	bne.n	8005ebc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e6e:	f000 fa2a 	bl	80062c6 <prvCopyDataToQueue>
 8005e72:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d010      	beq.n	8005e9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	3324      	adds	r3, #36	; 0x24
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 f85d 	bl	8006f40 <xTaskRemoveFromEventList>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d013      	beq.n	8005eb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e8c:	4b3f      	ldr	r3, [pc, #252]	; (8005f8c <xQueueGenericSend+0x1f8>)
 8005e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	e00a      	b.n	8005eb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ea4:	4b39      	ldr	r3, [pc, #228]	; (8005f8c <xQueueGenericSend+0x1f8>)
 8005ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005eb4:	f001 ff1a 	bl	8007cec <vPortExitCritical>
				return pdPASS;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e063      	b.n	8005f84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d103      	bne.n	8005eca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ec2:	f001 ff13 	bl	8007cec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	e05c      	b.n	8005f84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d106      	bne.n	8005ede <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ed0:	f107 0314 	add.w	r3, r7, #20
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 f897 	bl	8007008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005eda:	2301      	movs	r3, #1
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ede:	f001 ff05 	bl	8007cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ee2:	f000 fddb 	bl	8006a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ee6:	f001 fed1 	bl	8007c8c <vPortEnterCritical>
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ef0:	b25b      	sxtb	r3, r3
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef6:	d103      	bne.n	8005f00 <xQueueGenericSend+0x16c>
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f06:	b25b      	sxtb	r3, r3
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0c:	d103      	bne.n	8005f16 <xQueueGenericSend+0x182>
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f16:	f001 fee9 	bl	8007cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f1a:	1d3a      	adds	r2, r7, #4
 8005f1c:	f107 0314 	add.w	r3, r7, #20
 8005f20:	4611      	mov	r1, r2
 8005f22:	4618      	mov	r0, r3
 8005f24:	f001 f886 	bl	8007034 <xTaskCheckForTimeOut>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d124      	bne.n	8005f78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f30:	f000 fac1 	bl	80064b6 <prvIsQueueFull>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d018      	beq.n	8005f6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	3310      	adds	r3, #16
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	4611      	mov	r1, r2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 ffac 	bl	8006ea0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f4a:	f000 fa4c 	bl	80063e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f4e:	f000 fdb3 	bl	8006ab8 <xTaskResumeAll>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f47f af7c 	bne.w	8005e52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f5a:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <xQueueGenericSend+0x1f8>)
 8005f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	e772      	b.n	8005e52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f6e:	f000 fa3a 	bl	80063e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f72:	f000 fda1 	bl	8006ab8 <xTaskResumeAll>
 8005f76:	e76c      	b.n	8005e52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f7a:	f000 fa34 	bl	80063e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f7e:	f000 fd9b 	bl	8006ab8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f82:	2300      	movs	r3, #0
		}
	}
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3738      	adds	r7, #56	; 0x38
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	e000ed04 	.word	0xe000ed04

08005f90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08e      	sub	sp, #56	; 0x38
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d103      	bne.n	8005fcc <xQueueGenericSendFromISR+0x3c>
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <xQueueGenericSendFromISR+0x40>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e000      	b.n	8005fd2 <xQueueGenericSendFromISR+0x42>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	623b      	str	r3, [r7, #32]
}
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d103      	bne.n	8005ffa <xQueueGenericSendFromISR+0x6a>
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <xQueueGenericSendFromISR+0x6e>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <xQueueGenericSendFromISR+0x70>
 8005ffe:	2300      	movs	r3, #0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	61fb      	str	r3, [r7, #28]
}
 8006016:	bf00      	nop
 8006018:	e7fe      	b.n	8006018 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800601a:	f001 fef9 	bl	8007e10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800601e:	f3ef 8211 	mrs	r2, BASEPRI
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	61ba      	str	r2, [r7, #24]
 8006034:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006036:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006042:	429a      	cmp	r2, r3
 8006044:	d302      	bcc.n	800604c <xQueueGenericSendFromISR+0xbc>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d12c      	bne.n	80060a6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800605c:	f000 f933 	bl	80062c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006060:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d112      	bne.n	8006090 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	2b00      	cmp	r3, #0
 8006070:	d016      	beq.n	80060a0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	3324      	adds	r3, #36	; 0x24
 8006076:	4618      	mov	r0, r3
 8006078:	f000 ff62 	bl	8006f40 <xTaskRemoveFromEventList>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00e      	beq.n	80060a0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	e007      	b.n	80060a0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006090:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006094:	3301      	adds	r3, #1
 8006096:	b2db      	uxtb	r3, r3
 8006098:	b25a      	sxtb	r2, r3
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060a0:	2301      	movs	r3, #1
 80060a2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80060a4:	e001      	b.n	80060aa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	637b      	str	r3, [r7, #52]	; 0x34
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3738      	adds	r7, #56	; 0x38
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08c      	sub	sp, #48	; 0x30
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <xQueueReceive+0x30>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	623b      	str	r3, [r7, #32]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d103      	bne.n	80060fe <xQueueReceive+0x3e>
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <xQueueReceive+0x42>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <xQueueReceive+0x44>
 8006102:	2300      	movs	r3, #0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <xQueueReceive+0x5e>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	61fb      	str	r3, [r7, #28]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800611e:	f001 f8d5 	bl	80072cc <xTaskGetSchedulerState>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <xQueueReceive+0x6e>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <xQueueReceive+0x72>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <xQueueReceive+0x74>
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <xQueueReceive+0x8e>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	61bb      	str	r3, [r7, #24]
}
 800614a:	bf00      	nop
 800614c:	e7fe      	b.n	800614c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800614e:	f001 fd9d 	bl	8007c8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006156:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	2b00      	cmp	r3, #0
 800615c:	d01f      	beq.n	800619e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006162:	f000 f91a 	bl	800639a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	1e5a      	subs	r2, r3, #1
 800616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00f      	beq.n	8006196 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	3310      	adds	r3, #16
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fee0 	bl	8006f40 <xTaskRemoveFromEventList>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d007      	beq.n	8006196 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006186:	4b3d      	ldr	r3, [pc, #244]	; (800627c <xQueueReceive+0x1bc>)
 8006188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006196:	f001 fda9 	bl	8007cec <vPortExitCritical>
				return pdPASS;
 800619a:	2301      	movs	r3, #1
 800619c:	e069      	b.n	8006272 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d103      	bne.n	80061ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061a4:	f001 fda2 	bl	8007cec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061a8:	2300      	movs	r3, #0
 80061aa:	e062      	b.n	8006272 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d106      	bne.n	80061c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061b2:	f107 0310 	add.w	r3, r7, #16
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 ff26 	bl	8007008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061c0:	f001 fd94 	bl	8007cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061c4:	f000 fc6a 	bl	8006a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061c8:	f001 fd60 	bl	8007c8c <vPortEnterCritical>
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061d2:	b25b      	sxtb	r3, r3
 80061d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d8:	d103      	bne.n	80061e2 <xQueueReceive+0x122>
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061e8:	b25b      	sxtb	r3, r3
 80061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ee:	d103      	bne.n	80061f8 <xQueueReceive+0x138>
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061f8:	f001 fd78 	bl	8007cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061fc:	1d3a      	adds	r2, r7, #4
 80061fe:	f107 0310 	add.w	r3, r7, #16
 8006202:	4611      	mov	r1, r2
 8006204:	4618      	mov	r0, r3
 8006206:	f000 ff15 	bl	8007034 <xTaskCheckForTimeOut>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d123      	bne.n	8006258 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006212:	f000 f93a 	bl	800648a <prvIsQueueEmpty>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d017      	beq.n	800624c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	3324      	adds	r3, #36	; 0x24
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	4611      	mov	r1, r2
 8006224:	4618      	mov	r0, r3
 8006226:	f000 fe3b 	bl	8006ea0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800622a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800622c:	f000 f8db 	bl	80063e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006230:	f000 fc42 	bl	8006ab8 <xTaskResumeAll>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d189      	bne.n	800614e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800623a:	4b10      	ldr	r3, [pc, #64]	; (800627c <xQueueReceive+0x1bc>)
 800623c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	e780      	b.n	800614e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800624c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800624e:	f000 f8ca 	bl	80063e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006252:	f000 fc31 	bl	8006ab8 <xTaskResumeAll>
 8006256:	e77a      	b.n	800614e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800625a:	f000 f8c4 	bl	80063e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800625e:	f000 fc2b 	bl	8006ab8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006264:	f000 f911 	bl	800648a <prvIsQueueEmpty>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	f43f af6f 	beq.w	800614e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006270:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006272:	4618      	mov	r0, r3
 8006274:	3730      	adds	r7, #48	; 0x30
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	e000ed04 	.word	0xe000ed04

08006280 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <vQueueDelete+0x28>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	60bb      	str	r3, [r7, #8]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f945 	bl	8006538 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d102      	bne.n	80062be <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f001 feab 	bl	8008014 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80062be:	bf00      	nop
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10d      	bne.n	8006300 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d14d      	bne.n	8006388 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 f809 	bl	8007308 <xTaskPriorityDisinherit>
 80062f6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	605a      	str	r2, [r3, #4]
 80062fe:	e043      	b.n	8006388 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d119      	bne.n	800633a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6898      	ldr	r0, [r3, #8]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	461a      	mov	r2, r3
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	f002 f8ba 	bl	800848a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689a      	ldr	r2, [r3, #8]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	441a      	add	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	429a      	cmp	r2, r3
 800632e:	d32b      	bcc.n	8006388 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	609a      	str	r2, [r3, #8]
 8006338:	e026      	b.n	8006388 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	68d8      	ldr	r0, [r3, #12]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	461a      	mov	r2, r3
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	f002 f8a0 	bl	800848a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	425b      	negs	r3, r3
 8006354:	441a      	add	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	429a      	cmp	r2, r3
 8006364:	d207      	bcs.n	8006376 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	425b      	negs	r3, r3
 8006370:	441a      	add	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b02      	cmp	r3, #2
 800637a:	d105      	bne.n	8006388 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	3b01      	subs	r3, #1
 8006386:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006390:	697b      	ldr	r3, [r7, #20]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d018      	beq.n	80063de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	441a      	add	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d303      	bcc.n	80063ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68d9      	ldr	r1, [r3, #12]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	461a      	mov	r2, r3
 80063d8:	6838      	ldr	r0, [r7, #0]
 80063da:	f002 f856 	bl	800848a <memcpy>
	}
}
 80063de:	bf00      	nop
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063ee:	f001 fc4d 	bl	8007c8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063fa:	e011      	b.n	8006420 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	2b00      	cmp	r3, #0
 8006402:	d012      	beq.n	800642a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3324      	adds	r3, #36	; 0x24
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fd99 	bl	8006f40 <xTaskRemoveFromEventList>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006414:	f000 fe70 	bl	80070f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	3b01      	subs	r3, #1
 800641c:	b2db      	uxtb	r3, r3
 800641e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006424:	2b00      	cmp	r3, #0
 8006426:	dce9      	bgt.n	80063fc <prvUnlockQueue+0x16>
 8006428:	e000      	b.n	800642c <prvUnlockQueue+0x46>
					break;
 800642a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	22ff      	movs	r2, #255	; 0xff
 8006430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006434:	f001 fc5a 	bl	8007cec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006438:	f001 fc28 	bl	8007c8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006442:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006444:	e011      	b.n	800646a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d012      	beq.n	8006474 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3310      	adds	r3, #16
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fd74 	bl	8006f40 <xTaskRemoveFromEventList>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800645e:	f000 fe4b 	bl	80070f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006462:	7bbb      	ldrb	r3, [r7, #14]
 8006464:	3b01      	subs	r3, #1
 8006466:	b2db      	uxtb	r3, r3
 8006468:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800646a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800646e:	2b00      	cmp	r3, #0
 8006470:	dce9      	bgt.n	8006446 <prvUnlockQueue+0x60>
 8006472:	e000      	b.n	8006476 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006474:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	22ff      	movs	r2, #255	; 0xff
 800647a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800647e:	f001 fc35 	bl	8007cec <vPortExitCritical>
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006492:	f001 fbfb 	bl	8007c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	2b00      	cmp	r3, #0
 800649c:	d102      	bne.n	80064a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800649e:	2301      	movs	r3, #1
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e001      	b.n	80064a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064a8:	f001 fc20 	bl	8007cec <vPortExitCritical>

	return xReturn;
 80064ac:	68fb      	ldr	r3, [r7, #12]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064be:	f001 fbe5 	bl	8007c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d102      	bne.n	80064d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064ce:	2301      	movs	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e001      	b.n	80064d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064d8:	f001 fc08 	bl	8007cec <vPortExitCritical>

	return xReturn;
 80064dc:	68fb      	ldr	r3, [r7, #12]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e014      	b.n	8006522 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064f8:	4a0e      	ldr	r2, [pc, #56]	; (8006534 <vQueueAddToRegistry+0x4c>)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10b      	bne.n	800651c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006504:	490b      	ldr	r1, [pc, #44]	; (8006534 <vQueueAddToRegistry+0x4c>)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800650e:	4a09      	ldr	r2, [pc, #36]	; (8006534 <vQueueAddToRegistry+0x4c>)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	4413      	add	r3, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800651a:	e006      	b.n	800652a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3301      	adds	r3, #1
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b07      	cmp	r3, #7
 8006526:	d9e7      	bls.n	80064f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr
 8006534:	20003aec 	.word	0x20003aec

08006538 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	e016      	b.n	8006574 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006546:	4a10      	ldr	r2, [pc, #64]	; (8006588 <vQueueUnregisterQueue+0x50>)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	4413      	add	r3, r2
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	429a      	cmp	r2, r3
 8006554:	d10b      	bne.n	800656e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006556:	4a0c      	ldr	r2, [pc, #48]	; (8006588 <vQueueUnregisterQueue+0x50>)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2100      	movs	r1, #0
 800655c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006560:	4a09      	ldr	r2, [pc, #36]	; (8006588 <vQueueUnregisterQueue+0x50>)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	4413      	add	r3, r2
 8006568:	2200      	movs	r2, #0
 800656a:	605a      	str	r2, [r3, #4]
				break;
 800656c:	e006      	b.n	800657c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3301      	adds	r3, #1
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b07      	cmp	r3, #7
 8006578:	d9e5      	bls.n	8006546 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800657a:	bf00      	nop
 800657c:	bf00      	nop
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	bc80      	pop	{r7}
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20003aec 	.word	0x20003aec

0800658c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800659c:	f001 fb76 	bl	8007c8c <vPortEnterCritical>
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065a6:	b25b      	sxtb	r3, r3
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d103      	bne.n	80065b6 <vQueueWaitForMessageRestricted+0x2a>
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065bc:	b25b      	sxtb	r3, r3
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c2:	d103      	bne.n	80065cc <vQueueWaitForMessageRestricted+0x40>
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065cc:	f001 fb8e 	bl	8007cec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	3324      	adds	r3, #36	; 0x24
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	68b9      	ldr	r1, [r7, #8]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 fc81 	bl	8006ee8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80065e6:	6978      	ldr	r0, [r7, #20]
 80065e8:	f7ff fefd 	bl	80063e6 <prvUnlockQueue>
	}
 80065ec:	bf00      	nop
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08e      	sub	sp, #56	; 0x38
 80065f8:	af04      	add	r7, sp, #16
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	623b      	str	r3, [r7, #32]
}
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <xTaskCreateStatic+0x46>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	61fb      	str	r3, [r7, #28]
}
 8006636:	bf00      	nop
 8006638:	e7fe      	b.n	8006638 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800663a:	23bc      	movs	r3, #188	; 0xbc
 800663c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2bbc      	cmp	r3, #188	; 0xbc
 8006642:	d00a      	beq.n	800665a <xTaskCreateStatic+0x66>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	61bb      	str	r3, [r7, #24]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01e      	beq.n	800669e <xTaskCreateStatic+0xaa>
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	2b00      	cmp	r3, #0
 8006664:	d01b      	beq.n	800669e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800666e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	2202      	movs	r2, #2
 8006674:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006678:	2300      	movs	r3, #0
 800667a:	9303      	str	r3, [sp, #12]
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	9302      	str	r3, [sp, #8]
 8006680:	f107 0314 	add.w	r3, r7, #20
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 f851 	bl	8006738 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006696:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006698:	f000 f8ec 	bl	8006874 <prvAddNewTaskToReadyList>
 800669c:	e001      	b.n	80066a2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066a2:	697b      	ldr	r3, [r7, #20]
	}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3728      	adds	r7, #40	; 0x28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	; 0x30
 80066b0:	af04      	add	r7, sp, #16
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	4613      	mov	r3, r2
 80066ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066bc:	88fb      	ldrh	r3, [r7, #6]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f001 fbe3 	bl	8007e8c <pvPortMalloc>
 80066c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00e      	beq.n	80066ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80066ce:	20bc      	movs	r0, #188	; 0xbc
 80066d0:	f001 fbdc 	bl	8007e8c <pvPortMalloc>
 80066d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	631a      	str	r2, [r3, #48]	; 0x30
 80066e2:	e005      	b.n	80066f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066e4:	6978      	ldr	r0, [r7, #20]
 80066e6:	f001 fc95 	bl	8008014 <vPortFree>
 80066ea:	e001      	b.n	80066f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d017      	beq.n	8006726 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066fe:	88fa      	ldrh	r2, [r7, #6]
 8006700:	2300      	movs	r3, #0
 8006702:	9303      	str	r3, [sp, #12]
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	9302      	str	r3, [sp, #8]
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 f80f 	bl	8006738 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800671a:	69f8      	ldr	r0, [r7, #28]
 800671c:	f000 f8aa 	bl	8006874 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006720:	2301      	movs	r3, #1
 8006722:	61bb      	str	r3, [r7, #24]
 8006724:	e002      	b.n	800672c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006726:	f04f 33ff 	mov.w	r3, #4294967295
 800672a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800672c:	69bb      	ldr	r3, [r7, #24]
	}
 800672e:	4618      	mov	r0, r3
 8006730:	3720      	adds	r7, #32
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	461a      	mov	r2, r3
 8006750:	21a5      	movs	r1, #165	; 0xa5
 8006752:	f001 fea8 	bl	80084a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006760:	3b01      	subs	r3, #1
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f023 0307 	bic.w	r3, r3, #7
 800676e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <prvInitialiseNewTask+0x58>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	617b      	str	r3, [r7, #20]
}
 800678c:	bf00      	nop
 800678e:	e7fe      	b.n	800678e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006790:	2300      	movs	r3, #0
 8006792:	61fb      	str	r3, [r7, #28]
 8006794:	e012      	b.n	80067bc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	4413      	add	r3, r2
 800679c:	7819      	ldrb	r1, [r3, #0]
 800679e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	4413      	add	r3, r2
 80067a4:	3334      	adds	r3, #52	; 0x34
 80067a6:	460a      	mov	r2, r1
 80067a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d006      	beq.n	80067c4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	3301      	adds	r3, #1
 80067ba:	61fb      	str	r3, [r7, #28]
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	2b0f      	cmp	r3, #15
 80067c0:	d9e9      	bls.n	8006796 <prvInitialiseNewTask+0x5e>
 80067c2:	e000      	b.n	80067c6 <prvInitialiseNewTask+0x8e>
		{
			break;
 80067c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	2b37      	cmp	r3, #55	; 0x37
 80067d2:	d901      	bls.n	80067d8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067d4:	2337      	movs	r3, #55	; 0x37
 80067d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	2200      	movs	r2, #0
 80067e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	3304      	adds	r3, #4
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff f895 	bl	800591e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	3318      	adds	r3, #24
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff f890 	bl	800591e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006802:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006812:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	2200      	movs	r2, #0
 8006818:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	2200      	movs	r2, #0
 8006820:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	3354      	adds	r3, #84	; 0x54
 8006828:	2260      	movs	r2, #96	; 0x60
 800682a:	2100      	movs	r1, #0
 800682c:	4618      	mov	r0, r3
 800682e:	f001 fe3a 	bl	80084a6 <memset>
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	4a0c      	ldr	r2, [pc, #48]	; (8006868 <prvInitialiseNewTask+0x130>)
 8006836:	659a      	str	r2, [r3, #88]	; 0x58
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	4a0c      	ldr	r2, [pc, #48]	; (800686c <prvInitialiseNewTask+0x134>)
 800683c:	65da      	str	r2, [r3, #92]	; 0x5c
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	4a0b      	ldr	r2, [pc, #44]	; (8006870 <prvInitialiseNewTask+0x138>)
 8006842:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	68f9      	ldr	r1, [r7, #12]
 8006848:	69b8      	ldr	r0, [r7, #24]
 800684a:	f001 f931 	bl	8007ab0 <pxPortInitialiseStack>
 800684e:	4602      	mov	r2, r0
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006860:	bf00      	nop
 8006862:	3720      	adds	r7, #32
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	0800cf28 	.word	0x0800cf28
 800686c:	0800cf48 	.word	0x0800cf48
 8006870:	0800cf08 	.word	0x0800cf08

08006874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800687c:	f001 fa06 	bl	8007c8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006880:	4b2d      	ldr	r3, [pc, #180]	; (8006938 <prvAddNewTaskToReadyList+0xc4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3301      	adds	r3, #1
 8006886:	4a2c      	ldr	r2, [pc, #176]	; (8006938 <prvAddNewTaskToReadyList+0xc4>)
 8006888:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800688a:	4b2c      	ldr	r3, [pc, #176]	; (800693c <prvAddNewTaskToReadyList+0xc8>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d109      	bne.n	80068a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006892:	4a2a      	ldr	r2, [pc, #168]	; (800693c <prvAddNewTaskToReadyList+0xc8>)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006898:	4b27      	ldr	r3, [pc, #156]	; (8006938 <prvAddNewTaskToReadyList+0xc4>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d110      	bne.n	80068c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068a0:	f000 fc4e 	bl	8007140 <prvInitialiseTaskLists>
 80068a4:	e00d      	b.n	80068c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068a6:	4b26      	ldr	r3, [pc, #152]	; (8006940 <prvAddNewTaskToReadyList+0xcc>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068ae:	4b23      	ldr	r3, [pc, #140]	; (800693c <prvAddNewTaskToReadyList+0xc8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d802      	bhi.n	80068c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068bc:	4a1f      	ldr	r2, [pc, #124]	; (800693c <prvAddNewTaskToReadyList+0xc8>)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068c2:	4b20      	ldr	r3, [pc, #128]	; (8006944 <prvAddNewTaskToReadyList+0xd0>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3301      	adds	r3, #1
 80068c8:	4a1e      	ldr	r2, [pc, #120]	; (8006944 <prvAddNewTaskToReadyList+0xd0>)
 80068ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80068cc:	4b1d      	ldr	r3, [pc, #116]	; (8006944 <prvAddNewTaskToReadyList+0xd0>)
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d8:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <prvAddNewTaskToReadyList+0xd4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d903      	bls.n	80068e8 <prvAddNewTaskToReadyList+0x74>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	4a18      	ldr	r2, [pc, #96]	; (8006948 <prvAddNewTaskToReadyList+0xd4>)
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4a15      	ldr	r2, [pc, #84]	; (800694c <prvAddNewTaskToReadyList+0xd8>)
 80068f6:	441a      	add	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3304      	adds	r3, #4
 80068fc:	4619      	mov	r1, r3
 80068fe:	4610      	mov	r0, r2
 8006900:	f7ff f819 	bl	8005936 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006904:	f001 f9f2 	bl	8007cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006908:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <prvAddNewTaskToReadyList+0xcc>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00e      	beq.n	800692e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006910:	4b0a      	ldr	r3, [pc, #40]	; (800693c <prvAddNewTaskToReadyList+0xc8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691a:	429a      	cmp	r2, r3
 800691c:	d207      	bcs.n	800692e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800691e:	4b0c      	ldr	r3, [pc, #48]	; (8006950 <prvAddNewTaskToReadyList+0xdc>)
 8006920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800692e:	bf00      	nop
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20000e64 	.word	0x20000e64
 800693c:	20000990 	.word	0x20000990
 8006940:	20000e70 	.word	0x20000e70
 8006944:	20000e80 	.word	0x20000e80
 8006948:	20000e6c 	.word	0x20000e6c
 800694c:	20000994 	.word	0x20000994
 8006950:	e000ed04 	.word	0xe000ed04

08006954 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d017      	beq.n	8006996 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006966:	4b13      	ldr	r3, [pc, #76]	; (80069b4 <vTaskDelay+0x60>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <vTaskDelay+0x30>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	60bb      	str	r3, [r7, #8]
}
 8006980:	bf00      	nop
 8006982:	e7fe      	b.n	8006982 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006984:	f000 f88a 	bl	8006a9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006988:	2100      	movs	r1, #0
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fd2a 	bl	80073e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006990:	f000 f892 	bl	8006ab8 <xTaskResumeAll>
 8006994:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d107      	bne.n	80069ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800699c:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <vTaskDelay+0x64>)
 800699e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20000e8c 	.word	0x20000e8c
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08a      	sub	sp, #40	; 0x28
 80069c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069ca:	463a      	mov	r2, r7
 80069cc:	1d39      	adds	r1, r7, #4
 80069ce:	f107 0308 	add.w	r3, r7, #8
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe ff52 	bl	800587c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	9202      	str	r2, [sp, #8]
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	2300      	movs	r3, #0
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	2300      	movs	r3, #0
 80069e8:	460a      	mov	r2, r1
 80069ea:	4924      	ldr	r1, [pc, #144]	; (8006a7c <vTaskStartScheduler+0xc0>)
 80069ec:	4824      	ldr	r0, [pc, #144]	; (8006a80 <vTaskStartScheduler+0xc4>)
 80069ee:	f7ff fe01 	bl	80065f4 <xTaskCreateStatic>
 80069f2:	4603      	mov	r3, r0
 80069f4:	4a23      	ldr	r2, [pc, #140]	; (8006a84 <vTaskStartScheduler+0xc8>)
 80069f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069f8:	4b22      	ldr	r3, [pc, #136]	; (8006a84 <vTaskStartScheduler+0xc8>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a00:	2301      	movs	r3, #1
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	e001      	b.n	8006a0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d102      	bne.n	8006a16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a10:	f000 fd3c 	bl	800748c <xTimerCreateTimerTask>
 8006a14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d11b      	bne.n	8006a54 <vTaskStartScheduler+0x98>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	613b      	str	r3, [r7, #16]
}
 8006a2e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a30:	4b15      	ldr	r3, [pc, #84]	; (8006a88 <vTaskStartScheduler+0xcc>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3354      	adds	r3, #84	; 0x54
 8006a36:	4a15      	ldr	r2, [pc, #84]	; (8006a8c <vTaskStartScheduler+0xd0>)
 8006a38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a3a:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <vTaskStartScheduler+0xd4>)
 8006a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a42:	4b14      	ldr	r3, [pc, #80]	; (8006a94 <vTaskStartScheduler+0xd8>)
 8006a44:	2201      	movs	r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006a48:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <vTaskStartScheduler+0xdc>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a4e:	f001 f8ab 	bl	8007ba8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a52:	e00e      	b.n	8006a72 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d10a      	bne.n	8006a72 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	60fb      	str	r3, [r7, #12]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <vTaskStartScheduler+0xb4>
}
 8006a72:	bf00      	nop
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	0800ce2c 	.word	0x0800ce2c
 8006a80:	08007111 	.word	0x08007111
 8006a84:	20000e88 	.word	0x20000e88
 8006a88:	20000990 	.word	0x20000990
 8006a8c:	20000014 	.word	0x20000014
 8006a90:	20000e84 	.word	0x20000e84
 8006a94:	20000e70 	.word	0x20000e70
 8006a98:	20000e68 	.word	0x20000e68

08006a9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006aa0:	4b04      	ldr	r3, [pc, #16]	; (8006ab4 <vTaskSuspendAll+0x18>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	4a03      	ldr	r2, [pc, #12]	; (8006ab4 <vTaskSuspendAll+0x18>)
 8006aa8:	6013      	str	r3, [r2, #0]
}
 8006aaa:	bf00      	nop
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bc80      	pop	{r7}
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20000e8c 	.word	0x20000e8c

08006ab8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ac6:	4b42      	ldr	r3, [pc, #264]	; (8006bd0 <xTaskResumeAll+0x118>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10a      	bne.n	8006ae4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	603b      	str	r3, [r7, #0]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ae4:	f001 f8d2 	bl	8007c8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ae8:	4b39      	ldr	r3, [pc, #228]	; (8006bd0 <xTaskResumeAll+0x118>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	4a38      	ldr	r2, [pc, #224]	; (8006bd0 <xTaskResumeAll+0x118>)
 8006af0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006af2:	4b37      	ldr	r3, [pc, #220]	; (8006bd0 <xTaskResumeAll+0x118>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d162      	bne.n	8006bc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006afa:	4b36      	ldr	r3, [pc, #216]	; (8006bd4 <xTaskResumeAll+0x11c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d05e      	beq.n	8006bc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b02:	e02f      	b.n	8006b64 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006b04:	4b34      	ldr	r3, [pc, #208]	; (8006bd8 <xTaskResumeAll+0x120>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3318      	adds	r3, #24
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fe ff6b 	bl	80059ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3304      	adds	r3, #4
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe ff66 	bl	80059ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b24:	4b2d      	ldr	r3, [pc, #180]	; (8006bdc <xTaskResumeAll+0x124>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d903      	bls.n	8006b34 <xTaskResumeAll+0x7c>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	4a2a      	ldr	r2, [pc, #168]	; (8006bdc <xTaskResumeAll+0x124>)
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4a27      	ldr	r2, [pc, #156]	; (8006be0 <xTaskResumeAll+0x128>)
 8006b42:	441a      	add	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3304      	adds	r3, #4
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	f7fe fef3 	bl	8005936 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b54:	4b23      	ldr	r3, [pc, #140]	; (8006be4 <xTaskResumeAll+0x12c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d302      	bcc.n	8006b64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006b5e:	4b22      	ldr	r3, [pc, #136]	; (8006be8 <xTaskResumeAll+0x130>)
 8006b60:	2201      	movs	r2, #1
 8006b62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b64:	4b1c      	ldr	r3, [pc, #112]	; (8006bd8 <xTaskResumeAll+0x120>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1cb      	bne.n	8006b04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b72:	f000 fb87 	bl	8007284 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b76:	4b1d      	ldr	r3, [pc, #116]	; (8006bec <xTaskResumeAll+0x134>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d010      	beq.n	8006ba4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b82:	f000 f845 	bl	8006c10 <xTaskIncrementTick>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006b8c:	4b16      	ldr	r3, [pc, #88]	; (8006be8 <xTaskResumeAll+0x130>)
 8006b8e:	2201      	movs	r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1f1      	bne.n	8006b82 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006b9e:	4b13      	ldr	r3, [pc, #76]	; (8006bec <xTaskResumeAll+0x134>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ba4:	4b10      	ldr	r3, [pc, #64]	; (8006be8 <xTaskResumeAll+0x130>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d009      	beq.n	8006bc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bac:	2301      	movs	r3, #1
 8006bae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bb0:	4b0f      	ldr	r3, [pc, #60]	; (8006bf0 <xTaskResumeAll+0x138>)
 8006bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bc0:	f001 f894 	bl	8007cec <vPortExitCritical>

	return xAlreadyYielded;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000e8c 	.word	0x20000e8c
 8006bd4:	20000e64 	.word	0x20000e64
 8006bd8:	20000e24 	.word	0x20000e24
 8006bdc:	20000e6c 	.word	0x20000e6c
 8006be0:	20000994 	.word	0x20000994
 8006be4:	20000990 	.word	0x20000990
 8006be8:	20000e78 	.word	0x20000e78
 8006bec:	20000e74 	.word	0x20000e74
 8006bf0:	e000ed04 	.word	0xe000ed04

08006bf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006bfa:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <xTaskGetTickCount+0x18>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c00:	687b      	ldr	r3, [r7, #4]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr
 8006c0c:	20000e68 	.word	0x20000e68

08006c10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c1a:	4b51      	ldr	r3, [pc, #324]	; (8006d60 <xTaskIncrementTick+0x150>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f040 808e 	bne.w	8006d40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c24:	4b4f      	ldr	r3, [pc, #316]	; (8006d64 <xTaskIncrementTick+0x154>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c2c:	4a4d      	ldr	r2, [pc, #308]	; (8006d64 <xTaskIncrementTick+0x154>)
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d120      	bne.n	8006c7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c38:	4b4b      	ldr	r3, [pc, #300]	; (8006d68 <xTaskIncrementTick+0x158>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <xTaskIncrementTick+0x48>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	603b      	str	r3, [r7, #0]
}
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <xTaskIncrementTick+0x46>
 8006c58:	4b43      	ldr	r3, [pc, #268]	; (8006d68 <xTaskIncrementTick+0x158>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	4b43      	ldr	r3, [pc, #268]	; (8006d6c <xTaskIncrementTick+0x15c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a41      	ldr	r2, [pc, #260]	; (8006d68 <xTaskIncrementTick+0x158>)
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	4a41      	ldr	r2, [pc, #260]	; (8006d6c <xTaskIncrementTick+0x15c>)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	4b40      	ldr	r3, [pc, #256]	; (8006d70 <xTaskIncrementTick+0x160>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3301      	adds	r3, #1
 8006c72:	4a3f      	ldr	r2, [pc, #252]	; (8006d70 <xTaskIncrementTick+0x160>)
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	f000 fb05 	bl	8007284 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c7a:	4b3e      	ldr	r3, [pc, #248]	; (8006d74 <xTaskIncrementTick+0x164>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d34e      	bcc.n	8006d22 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c84:	4b38      	ldr	r3, [pc, #224]	; (8006d68 <xTaskIncrementTick+0x158>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <xTaskIncrementTick+0x82>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e000      	b.n	8006c94 <xTaskIncrementTick+0x84>
 8006c92:	2300      	movs	r3, #0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d004      	beq.n	8006ca2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c98:	4b36      	ldr	r3, [pc, #216]	; (8006d74 <xTaskIncrementTick+0x164>)
 8006c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9e:	601a      	str	r2, [r3, #0]
					break;
 8006ca0:	e03f      	b.n	8006d22 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ca2:	4b31      	ldr	r3, [pc, #196]	; (8006d68 <xTaskIncrementTick+0x158>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d203      	bcs.n	8006cc2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cba:	4a2e      	ldr	r2, [pc, #184]	; (8006d74 <xTaskIncrementTick+0x164>)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6013      	str	r3, [r2, #0]
						break;
 8006cc0:	e02f      	b.n	8006d22 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fe fe90 	bl	80059ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	3318      	adds	r3, #24
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fe fe87 	bl	80059ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce2:	4b25      	ldr	r3, [pc, #148]	; (8006d78 <xTaskIncrementTick+0x168>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d903      	bls.n	8006cf2 <xTaskIncrementTick+0xe2>
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cee:	4a22      	ldr	r2, [pc, #136]	; (8006d78 <xTaskIncrementTick+0x168>)
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4a1f      	ldr	r2, [pc, #124]	; (8006d7c <xTaskIncrementTick+0x16c>)
 8006d00:	441a      	add	r2, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7fe fe14 	bl	8005936 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d12:	4b1b      	ldr	r3, [pc, #108]	; (8006d80 <xTaskIncrementTick+0x170>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d3b3      	bcc.n	8006c84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d20:	e7b0      	b.n	8006c84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d22:	4b17      	ldr	r3, [pc, #92]	; (8006d80 <xTaskIncrementTick+0x170>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d28:	4914      	ldr	r1, [pc, #80]	; (8006d7c <xTaskIncrementTick+0x16c>)
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d907      	bls.n	8006d4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	e004      	b.n	8006d4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006d40:	4b10      	ldr	r3, [pc, #64]	; (8006d84 <xTaskIncrementTick+0x174>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3301      	adds	r3, #1
 8006d46:	4a0f      	ldr	r2, [pc, #60]	; (8006d84 <xTaskIncrementTick+0x174>)
 8006d48:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006d4a:	4b0f      	ldr	r3, [pc, #60]	; (8006d88 <xTaskIncrementTick+0x178>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006d52:	2301      	movs	r3, #1
 8006d54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006d56:	697b      	ldr	r3, [r7, #20]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20000e8c 	.word	0x20000e8c
 8006d64:	20000e68 	.word	0x20000e68
 8006d68:	20000e1c 	.word	0x20000e1c
 8006d6c:	20000e20 	.word	0x20000e20
 8006d70:	20000e7c 	.word	0x20000e7c
 8006d74:	20000e84 	.word	0x20000e84
 8006d78:	20000e6c 	.word	0x20000e6c
 8006d7c:	20000994 	.word	0x20000994
 8006d80:	20000990 	.word	0x20000990
 8006d84:	20000e74 	.word	0x20000e74
 8006d88:	20000e78 	.word	0x20000e78

08006d8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d92:	4b3d      	ldr	r3, [pc, #244]	; (8006e88 <vTaskSwitchContext+0xfc>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d9a:	4b3c      	ldr	r3, [pc, #240]	; (8006e8c <vTaskSwitchContext+0x100>)
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006da0:	e06d      	b.n	8006e7e <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 8006da2:	4b3a      	ldr	r3, [pc, #232]	; (8006e8c <vTaskSwitchContext+0x100>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006da8:	4b39      	ldr	r3, [pc, #228]	; (8006e90 <vTaskSwitchContext+0x104>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d111      	bne.n	8006de4 <vTaskSwitchContext+0x58>
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d10b      	bne.n	8006de4 <vTaskSwitchContext+0x58>
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d105      	bne.n	8006de4 <vTaskSwitchContext+0x58>
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	330c      	adds	r3, #12
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d008      	beq.n	8006df6 <vTaskSwitchContext+0x6a>
 8006de4:	4b2a      	ldr	r3, [pc, #168]	; (8006e90 <vTaskSwitchContext+0x104>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	4b29      	ldr	r3, [pc, #164]	; (8006e90 <vTaskSwitchContext+0x104>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3334      	adds	r3, #52	; 0x34
 8006dee:	4619      	mov	r1, r3
 8006df0:	4610      	mov	r0, r2
 8006df2:	f7fa f9f1 	bl	80011d8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006df6:	4b27      	ldr	r3, [pc, #156]	; (8006e94 <vTaskSwitchContext+0x108>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	e010      	b.n	8006e20 <vTaskSwitchContext+0x94>
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <vTaskSwitchContext+0x8e>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	607b      	str	r3, [r7, #4]
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <vTaskSwitchContext+0x8c>
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	491d      	ldr	r1, [pc, #116]	; (8006e98 <vTaskSwitchContext+0x10c>)
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0e4      	beq.n	8006dfe <vTaskSwitchContext+0x72>
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4613      	mov	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4a16      	ldr	r2, [pc, #88]	; (8006e98 <vTaskSwitchContext+0x10c>)
 8006e40:	4413      	add	r3, r2
 8006e42:	60bb      	str	r3, [r7, #8]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	605a      	str	r2, [r3, #4]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	3308      	adds	r3, #8
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d104      	bne.n	8006e64 <vTaskSwitchContext+0xd8>
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	605a      	str	r2, [r3, #4]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	4a09      	ldr	r2, [pc, #36]	; (8006e90 <vTaskSwitchContext+0x104>)
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	4a09      	ldr	r2, [pc, #36]	; (8006e94 <vTaskSwitchContext+0x108>)
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e74:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <vTaskSwitchContext+0x104>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3354      	adds	r3, #84	; 0x54
 8006e7a:	4a08      	ldr	r2, [pc, #32]	; (8006e9c <vTaskSwitchContext+0x110>)
 8006e7c:	6013      	str	r3, [r2, #0]
}
 8006e7e:	bf00      	nop
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000e8c 	.word	0x20000e8c
 8006e8c:	20000e78 	.word	0x20000e78
 8006e90:	20000990 	.word	0x20000990
 8006e94:	20000e6c 	.word	0x20000e6c
 8006e98:	20000994 	.word	0x20000994
 8006e9c:	20000014 	.word	0x20000014

08006ea0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	60fb      	str	r3, [r7, #12]
}
 8006ec2:	bf00      	nop
 8006ec4:	e7fe      	b.n	8006ec4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ec6:	4b07      	ldr	r3, [pc, #28]	; (8006ee4 <vTaskPlaceOnEventList+0x44>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3318      	adds	r3, #24
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7fe fd54 	bl	800597c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	6838      	ldr	r0, [r7, #0]
 8006ed8:	f000 fa84 	bl	80073e4 <prvAddCurrentTaskToDelayedList>
}
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20000990 	.word	0x20000990

08006ee8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	617b      	str	r3, [r7, #20]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <vTaskPlaceOnEventListRestricted+0x54>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3318      	adds	r3, #24
 8006f16:	4619      	mov	r1, r3
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f7fe fd0c 	bl	8005936 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f24:	f04f 33ff 	mov.w	r3, #4294967295
 8006f28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	68b8      	ldr	r0, [r7, #8]
 8006f2e:	f000 fa59 	bl	80073e4 <prvAddCurrentTaskToDelayedList>
	}
 8006f32:	bf00      	nop
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000990 	.word	0x20000990

08006f40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10a      	bne.n	8006f6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	60fb      	str	r3, [r7, #12]
}
 8006f68:	bf00      	nop
 8006f6a:	e7fe      	b.n	8006f6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	3318      	adds	r3, #24
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe fd3b 	bl	80059ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f76:	4b1e      	ldr	r3, [pc, #120]	; (8006ff0 <xTaskRemoveFromEventList+0xb0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d11d      	bne.n	8006fba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	3304      	adds	r3, #4
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fd32 	bl	80059ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8c:	4b19      	ldr	r3, [pc, #100]	; (8006ff4 <xTaskRemoveFromEventList+0xb4>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d903      	bls.n	8006f9c <xTaskRemoveFromEventList+0x5c>
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	4a16      	ldr	r2, [pc, #88]	; (8006ff4 <xTaskRemoveFromEventList+0xb4>)
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4a13      	ldr	r2, [pc, #76]	; (8006ff8 <xTaskRemoveFromEventList+0xb8>)
 8006faa:	441a      	add	r2, r3
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	f7fe fcbf 	bl	8005936 <vListInsertEnd>
 8006fb8:	e005      	b.n	8006fc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	3318      	adds	r3, #24
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	480e      	ldr	r0, [pc, #56]	; (8006ffc <xTaskRemoveFromEventList+0xbc>)
 8006fc2:	f7fe fcb8 	bl	8005936 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fca:	4b0d      	ldr	r3, [pc, #52]	; (8007000 <xTaskRemoveFromEventList+0xc0>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d905      	bls.n	8006fe0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fd8:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <xTaskRemoveFromEventList+0xc4>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e001      	b.n	8006fe4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006fe4:	697b      	ldr	r3, [r7, #20]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20000e8c 	.word	0x20000e8c
 8006ff4:	20000e6c 	.word	0x20000e6c
 8006ff8:	20000994 	.word	0x20000994
 8006ffc:	20000e24 	.word	0x20000e24
 8007000:	20000990 	.word	0x20000990
 8007004:	20000e78 	.word	0x20000e78

08007008 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007010:	4b06      	ldr	r3, [pc, #24]	; (800702c <vTaskInternalSetTimeOutState+0x24>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007018:	4b05      	ldr	r3, [pc, #20]	; (8007030 <vTaskInternalSetTimeOutState+0x28>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	605a      	str	r2, [r3, #4]
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	bc80      	pop	{r7}
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000e7c 	.word	0x20000e7c
 8007030:	20000e68 	.word	0x20000e68

08007034 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10a      	bne.n	800705a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	613b      	str	r3, [r7, #16]
}
 8007056:	bf00      	nop
 8007058:	e7fe      	b.n	8007058 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10a      	bne.n	8007076 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	60fb      	str	r3, [r7, #12]
}
 8007072:	bf00      	nop
 8007074:	e7fe      	b.n	8007074 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007076:	f000 fe09 	bl	8007c8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800707a:	4b1d      	ldr	r3, [pc, #116]	; (80070f0 <xTaskCheckForTimeOut+0xbc>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007092:	d102      	bne.n	800709a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007094:	2300      	movs	r3, #0
 8007096:	61fb      	str	r3, [r7, #28]
 8007098:	e023      	b.n	80070e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	4b15      	ldr	r3, [pc, #84]	; (80070f4 <xTaskCheckForTimeOut+0xc0>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d007      	beq.n	80070b6 <xTaskCheckForTimeOut+0x82>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d302      	bcc.n	80070b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070b0:	2301      	movs	r3, #1
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	e015      	b.n	80070e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d20b      	bcs.n	80070d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	1ad2      	subs	r2, r2, r3
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7ff ff9b 	bl	8007008 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	e004      	b.n	80070e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070de:	2301      	movs	r3, #1
 80070e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070e2:	f000 fe03 	bl	8007cec <vPortExitCritical>

	return xReturn;
 80070e6:	69fb      	ldr	r3, [r7, #28]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3720      	adds	r7, #32
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000e68 	.word	0x20000e68
 80070f4:	20000e7c 	.word	0x20000e7c

080070f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070fc:	4b03      	ldr	r3, [pc, #12]	; (800710c <vTaskMissedYield+0x14>)
 80070fe:	2201      	movs	r2, #1
 8007100:	601a      	str	r2, [r3, #0]
}
 8007102:	bf00      	nop
 8007104:	46bd      	mov	sp, r7
 8007106:	bc80      	pop	{r7}
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	20000e78 	.word	0x20000e78

08007110 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007118:	f000 f852 	bl	80071c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800711c:	4b06      	ldr	r3, [pc, #24]	; (8007138 <prvIdleTask+0x28>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d9f9      	bls.n	8007118 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007124:	4b05      	ldr	r3, [pc, #20]	; (800713c <prvIdleTask+0x2c>)
 8007126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007134:	e7f0      	b.n	8007118 <prvIdleTask+0x8>
 8007136:	bf00      	nop
 8007138:	20000994 	.word	0x20000994
 800713c:	e000ed04 	.word	0xe000ed04

08007140 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007146:	2300      	movs	r3, #0
 8007148:	607b      	str	r3, [r7, #4]
 800714a:	e00c      	b.n	8007166 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	4613      	mov	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4a12      	ldr	r2, [pc, #72]	; (80071a0 <prvInitialiseTaskLists+0x60>)
 8007158:	4413      	add	r3, r2
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fbc0 	bl	80058e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3301      	adds	r3, #1
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b37      	cmp	r3, #55	; 0x37
 800716a:	d9ef      	bls.n	800714c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800716c:	480d      	ldr	r0, [pc, #52]	; (80071a4 <prvInitialiseTaskLists+0x64>)
 800716e:	f7fe fbb7 	bl	80058e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007172:	480d      	ldr	r0, [pc, #52]	; (80071a8 <prvInitialiseTaskLists+0x68>)
 8007174:	f7fe fbb4 	bl	80058e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007178:	480c      	ldr	r0, [pc, #48]	; (80071ac <prvInitialiseTaskLists+0x6c>)
 800717a:	f7fe fbb1 	bl	80058e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800717e:	480c      	ldr	r0, [pc, #48]	; (80071b0 <prvInitialiseTaskLists+0x70>)
 8007180:	f7fe fbae 	bl	80058e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007184:	480b      	ldr	r0, [pc, #44]	; (80071b4 <prvInitialiseTaskLists+0x74>)
 8007186:	f7fe fbab 	bl	80058e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800718a:	4b0b      	ldr	r3, [pc, #44]	; (80071b8 <prvInitialiseTaskLists+0x78>)
 800718c:	4a05      	ldr	r2, [pc, #20]	; (80071a4 <prvInitialiseTaskLists+0x64>)
 800718e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007190:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <prvInitialiseTaskLists+0x7c>)
 8007192:	4a05      	ldr	r2, [pc, #20]	; (80071a8 <prvInitialiseTaskLists+0x68>)
 8007194:	601a      	str	r2, [r3, #0]
}
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000994 	.word	0x20000994
 80071a4:	20000df4 	.word	0x20000df4
 80071a8:	20000e08 	.word	0x20000e08
 80071ac:	20000e24 	.word	0x20000e24
 80071b0:	20000e38 	.word	0x20000e38
 80071b4:	20000e50 	.word	0x20000e50
 80071b8:	20000e1c 	.word	0x20000e1c
 80071bc:	20000e20 	.word	0x20000e20

080071c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071c6:	e019      	b.n	80071fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071c8:	f000 fd60 	bl	8007c8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80071cc:	4b10      	ldr	r3, [pc, #64]	; (8007210 <prvCheckTasksWaitingTermination+0x50>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe fc07 	bl	80059ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071de:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <prvCheckTasksWaitingTermination+0x54>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	4a0b      	ldr	r2, [pc, #44]	; (8007214 <prvCheckTasksWaitingTermination+0x54>)
 80071e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071e8:	4b0b      	ldr	r3, [pc, #44]	; (8007218 <prvCheckTasksWaitingTermination+0x58>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3b01      	subs	r3, #1
 80071ee:	4a0a      	ldr	r2, [pc, #40]	; (8007218 <prvCheckTasksWaitingTermination+0x58>)
 80071f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071f2:	f000 fd7b 	bl	8007cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f810 	bl	800721c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071fc:	4b06      	ldr	r3, [pc, #24]	; (8007218 <prvCheckTasksWaitingTermination+0x58>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e1      	bne.n	80071c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20000e38 	.word	0x20000e38
 8007214:	20000e64 	.word	0x20000e64
 8007218:	20000e4c 	.word	0x20000e4c

0800721c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3354      	adds	r3, #84	; 0x54
 8007228:	4618      	mov	r0, r3
 800722a:	f002 f81f 	bl	800926c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007234:	2b00      	cmp	r3, #0
 8007236:	d108      	bne.n	800724a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fee9 	bl	8008014 <vPortFree>
				vPortFree( pxTCB );
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fee6 	bl	8008014 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007248:	e018      	b.n	800727c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007250:	2b01      	cmp	r3, #1
 8007252:	d103      	bne.n	800725c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fedd 	bl	8008014 <vPortFree>
	}
 800725a:	e00f      	b.n	800727c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007262:	2b02      	cmp	r3, #2
 8007264:	d00a      	beq.n	800727c <prvDeleteTCB+0x60>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	60fb      	str	r3, [r7, #12]
}
 8007278:	bf00      	nop
 800727a:	e7fe      	b.n	800727a <prvDeleteTCB+0x5e>
	}
 800727c:	bf00      	nop
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800728a:	4b0e      	ldr	r3, [pc, #56]	; (80072c4 <prvResetNextTaskUnblockTime+0x40>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <prvResetNextTaskUnblockTime+0x14>
 8007294:	2301      	movs	r3, #1
 8007296:	e000      	b.n	800729a <prvResetNextTaskUnblockTime+0x16>
 8007298:	2300      	movs	r3, #0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d004      	beq.n	80072a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800729e:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <prvResetNextTaskUnblockTime+0x44>)
 80072a0:	f04f 32ff 	mov.w	r2, #4294967295
 80072a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072a6:	e008      	b.n	80072ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80072a8:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <prvResetNextTaskUnblockTime+0x40>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	4a04      	ldr	r2, [pc, #16]	; (80072c8 <prvResetNextTaskUnblockTime+0x44>)
 80072b8:	6013      	str	r3, [r2, #0]
}
 80072ba:	bf00      	nop
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	bc80      	pop	{r7}
 80072c2:	4770      	bx	lr
 80072c4:	20000e1c 	.word	0x20000e1c
 80072c8:	20000e84 	.word	0x20000e84

080072cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072d2:	4b0b      	ldr	r3, [pc, #44]	; (8007300 <xTaskGetSchedulerState+0x34>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d102      	bne.n	80072e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072da:	2301      	movs	r3, #1
 80072dc:	607b      	str	r3, [r7, #4]
 80072de:	e008      	b.n	80072f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072e0:	4b08      	ldr	r3, [pc, #32]	; (8007304 <xTaskGetSchedulerState+0x38>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d102      	bne.n	80072ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072e8:	2302      	movs	r3, #2
 80072ea:	607b      	str	r3, [r7, #4]
 80072ec:	e001      	b.n	80072f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072ee:	2300      	movs	r3, #0
 80072f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072f2:	687b      	ldr	r3, [r7, #4]
	}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bc80      	pop	{r7}
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	20000e70 	.word	0x20000e70
 8007304:	20000e8c 	.word	0x20000e8c

08007308 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007314:	2300      	movs	r3, #0
 8007316:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d056      	beq.n	80073cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800731e:	4b2e      	ldr	r3, [pc, #184]	; (80073d8 <xTaskPriorityDisinherit+0xd0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	429a      	cmp	r2, r3
 8007326:	d00a      	beq.n	800733e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	60fb      	str	r3, [r7, #12]
}
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	60bb      	str	r3, [r7, #8]
}
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007360:	1e5a      	subs	r2, r3, #1
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736e:	429a      	cmp	r2, r3
 8007370:	d02c      	beq.n	80073cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007376:	2b00      	cmp	r3, #0
 8007378:	d128      	bne.n	80073cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	3304      	adds	r3, #4
 800737e:	4618      	mov	r0, r3
 8007380:	f7fe fb34 	bl	80059ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739c:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <xTaskPriorityDisinherit+0xd4>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d903      	bls.n	80073ac <xTaskPriorityDisinherit+0xa4>
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	4a0c      	ldr	r2, [pc, #48]	; (80073dc <xTaskPriorityDisinherit+0xd4>)
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4a09      	ldr	r2, [pc, #36]	; (80073e0 <xTaskPriorityDisinherit+0xd8>)
 80073ba:	441a      	add	r2, r3
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	3304      	adds	r3, #4
 80073c0:	4619      	mov	r1, r3
 80073c2:	4610      	mov	r0, r2
 80073c4:	f7fe fab7 	bl	8005936 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073c8:	2301      	movs	r3, #1
 80073ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073cc:	697b      	ldr	r3, [r7, #20]
	}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000990 	.word	0x20000990
 80073dc:	20000e6c 	.word	0x20000e6c
 80073e0:	20000994 	.word	0x20000994

080073e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073ee:	4b21      	ldr	r3, [pc, #132]	; (8007474 <prvAddCurrentTaskToDelayedList+0x90>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073f4:	4b20      	ldr	r3, [pc, #128]	; (8007478 <prvAddCurrentTaskToDelayedList+0x94>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3304      	adds	r3, #4
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe faf6 	bl	80059ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d10a      	bne.n	800741e <prvAddCurrentTaskToDelayedList+0x3a>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d007      	beq.n	800741e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800740e:	4b1a      	ldr	r3, [pc, #104]	; (8007478 <prvAddCurrentTaskToDelayedList+0x94>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3304      	adds	r3, #4
 8007414:	4619      	mov	r1, r3
 8007416:	4819      	ldr	r0, [pc, #100]	; (800747c <prvAddCurrentTaskToDelayedList+0x98>)
 8007418:	f7fe fa8d 	bl	8005936 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800741c:	e026      	b.n	800746c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4413      	add	r3, r2
 8007424:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007426:	4b14      	ldr	r3, [pc, #80]	; (8007478 <prvAddCurrentTaskToDelayedList+0x94>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	429a      	cmp	r2, r3
 8007434:	d209      	bcs.n	800744a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007436:	4b12      	ldr	r3, [pc, #72]	; (8007480 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <prvAddCurrentTaskToDelayedList+0x94>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3304      	adds	r3, #4
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f7fe fa9a 	bl	800597c <vListInsert>
}
 8007448:	e010      	b.n	800746c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800744a:	4b0e      	ldr	r3, [pc, #56]	; (8007484 <prvAddCurrentTaskToDelayedList+0xa0>)
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	4b0a      	ldr	r3, [pc, #40]	; (8007478 <prvAddCurrentTaskToDelayedList+0x94>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3304      	adds	r3, #4
 8007454:	4619      	mov	r1, r3
 8007456:	4610      	mov	r0, r2
 8007458:	f7fe fa90 	bl	800597c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800745c:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <prvAddCurrentTaskToDelayedList+0xa4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	429a      	cmp	r2, r3
 8007464:	d202      	bcs.n	800746c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007466:	4a08      	ldr	r2, [pc, #32]	; (8007488 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	6013      	str	r3, [r2, #0]
}
 800746c:	bf00      	nop
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	20000e68 	.word	0x20000e68
 8007478:	20000990 	.word	0x20000990
 800747c:	20000e50 	.word	0x20000e50
 8007480:	20000e20 	.word	0x20000e20
 8007484:	20000e1c 	.word	0x20000e1c
 8007488:	20000e84 	.word	0x20000e84

0800748c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08a      	sub	sp, #40	; 0x28
 8007490:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007492:	2300      	movs	r3, #0
 8007494:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007496:	f000 facb 	bl	8007a30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800749a:	4b1c      	ldr	r3, [pc, #112]	; (800750c <xTimerCreateTimerTask+0x80>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d021      	beq.n	80074e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074aa:	1d3a      	adds	r2, r7, #4
 80074ac:	f107 0108 	add.w	r1, r7, #8
 80074b0:	f107 030c 	add.w	r3, r7, #12
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fe f9f9 	bl	80058ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	9202      	str	r2, [sp, #8]
 80074c2:	9301      	str	r3, [sp, #4]
 80074c4:	2302      	movs	r3, #2
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	2300      	movs	r3, #0
 80074ca:	460a      	mov	r2, r1
 80074cc:	4910      	ldr	r1, [pc, #64]	; (8007510 <xTimerCreateTimerTask+0x84>)
 80074ce:	4811      	ldr	r0, [pc, #68]	; (8007514 <xTimerCreateTimerTask+0x88>)
 80074d0:	f7ff f890 	bl	80065f4 <xTaskCreateStatic>
 80074d4:	4603      	mov	r3, r0
 80074d6:	4a10      	ldr	r2, [pc, #64]	; (8007518 <xTimerCreateTimerTask+0x8c>)
 80074d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074da:	4b0f      	ldr	r3, [pc, #60]	; (8007518 <xTimerCreateTimerTask+0x8c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074e2:	2301      	movs	r3, #1
 80074e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10a      	bne.n	8007502 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	613b      	str	r3, [r7, #16]
}
 80074fe:	bf00      	nop
 8007500:	e7fe      	b.n	8007500 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007502:	697b      	ldr	r3, [r7, #20]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	20000ec0 	.word	0x20000ec0
 8007510:	0800ce34 	.word	0x0800ce34
 8007514:	08007639 	.word	0x08007639
 8007518:	20000ec4 	.word	0x20000ec4

0800751c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	; 0x28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800752a:	2300      	movs	r3, #0
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	623b      	str	r3, [r7, #32]
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800754a:	4b1a      	ldr	r3, [pc, #104]	; (80075b4 <xTimerGenericCommand+0x98>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d02a      	beq.n	80075a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b05      	cmp	r3, #5
 8007562:	dc18      	bgt.n	8007596 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007564:	f7ff feb2 	bl	80072cc <xTaskGetSchedulerState>
 8007568:	4603      	mov	r3, r0
 800756a:	2b02      	cmp	r3, #2
 800756c:	d109      	bne.n	8007582 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800756e:	4b11      	ldr	r3, [pc, #68]	; (80075b4 <xTimerGenericCommand+0x98>)
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	f107 0110 	add.w	r1, r7, #16
 8007576:	2300      	movs	r3, #0
 8007578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800757a:	f7fe fc0b 	bl	8005d94 <xQueueGenericSend>
 800757e:	6278      	str	r0, [r7, #36]	; 0x24
 8007580:	e012      	b.n	80075a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007582:	4b0c      	ldr	r3, [pc, #48]	; (80075b4 <xTimerGenericCommand+0x98>)
 8007584:	6818      	ldr	r0, [r3, #0]
 8007586:	f107 0110 	add.w	r1, r7, #16
 800758a:	2300      	movs	r3, #0
 800758c:	2200      	movs	r2, #0
 800758e:	f7fe fc01 	bl	8005d94 <xQueueGenericSend>
 8007592:	6278      	str	r0, [r7, #36]	; 0x24
 8007594:	e008      	b.n	80075a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007596:	4b07      	ldr	r3, [pc, #28]	; (80075b4 <xTimerGenericCommand+0x98>)
 8007598:	6818      	ldr	r0, [r3, #0]
 800759a:	f107 0110 	add.w	r1, r7, #16
 800759e:	2300      	movs	r3, #0
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	f7fe fcf5 	bl	8005f90 <xQueueGenericSendFromISR>
 80075a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3728      	adds	r7, #40	; 0x28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000ec0 	.word	0x20000ec0

080075b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af02      	add	r7, sp, #8
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075c2:	4b1c      	ldr	r3, [pc, #112]	; (8007634 <prvProcessExpiredTimer+0x7c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	3304      	adds	r3, #4
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fe fa0b 	bl	80059ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d122      	bne.n	8007624 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	699a      	ldr	r2, [r3, #24]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	18d1      	adds	r1, r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	6978      	ldr	r0, [r7, #20]
 80075ec:	f000 f8c8 	bl	8007780 <prvInsertTimerInActiveList>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d016      	beq.n	8007624 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075f6:	2300      	movs	r3, #0
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	2300      	movs	r3, #0
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	2100      	movs	r1, #0
 8007600:	6978      	ldr	r0, [r7, #20]
 8007602:	f7ff ff8b 	bl	800751c <xTimerGenericCommand>
 8007606:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	60fb      	str	r3, [r7, #12]
}
 8007620:	bf00      	nop
 8007622:	e7fe      	b.n	8007622 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	6978      	ldr	r0, [r7, #20]
 800762a:	4798      	blx	r3
}
 800762c:	bf00      	nop
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20000eb8 	.word	0x20000eb8

08007638 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007640:	f107 0308 	add.w	r3, r7, #8
 8007644:	4618      	mov	r0, r3
 8007646:	f000 f857 	bl	80076f8 <prvGetNextExpireTime>
 800764a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	4619      	mov	r1, r3
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 f803 	bl	800765c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007656:	f000 f8d5 	bl	8007804 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800765a:	e7f1      	b.n	8007640 <prvTimerTask+0x8>

0800765c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007666:	f7ff fa19 	bl	8006a9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800766a:	f107 0308 	add.w	r3, r7, #8
 800766e:	4618      	mov	r0, r3
 8007670:	f000 f866 	bl	8007740 <prvSampleTimeNow>
 8007674:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d130      	bne.n	80076de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10a      	bne.n	8007698 <prvProcessTimerOrBlockTask+0x3c>
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	429a      	cmp	r2, r3
 8007688:	d806      	bhi.n	8007698 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800768a:	f7ff fa15 	bl	8006ab8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800768e:	68f9      	ldr	r1, [r7, #12]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff ff91 	bl	80075b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007696:	e024      	b.n	80076e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d008      	beq.n	80076b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800769e:	4b13      	ldr	r3, [pc, #76]	; (80076ec <prvProcessTimerOrBlockTask+0x90>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bf0c      	ite	eq
 80076a8:	2301      	moveq	r3, #1
 80076aa:	2300      	movne	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076b0:	4b0f      	ldr	r3, [pc, #60]	; (80076f0 <prvProcessTimerOrBlockTask+0x94>)
 80076b2:	6818      	ldr	r0, [r3, #0]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	4619      	mov	r1, r3
 80076be:	f7fe ff65 	bl	800658c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076c2:	f7ff f9f9 	bl	8006ab8 <xTaskResumeAll>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076cc:	4b09      	ldr	r3, [pc, #36]	; (80076f4 <prvProcessTimerOrBlockTask+0x98>)
 80076ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	f3bf 8f6f 	isb	sy
}
 80076dc:	e001      	b.n	80076e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076de:	f7ff f9eb 	bl	8006ab8 <xTaskResumeAll>
}
 80076e2:	bf00      	nop
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	20000ebc 	.word	0x20000ebc
 80076f0:	20000ec0 	.word	0x20000ec0
 80076f4:	e000ed04 	.word	0xe000ed04

080076f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007700:	4b0e      	ldr	r3, [pc, #56]	; (800773c <prvGetNextExpireTime+0x44>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	bf0c      	ite	eq
 800770a:	2301      	moveq	r3, #1
 800770c:	2300      	movne	r3, #0
 800770e:	b2db      	uxtb	r3, r3
 8007710:	461a      	mov	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d105      	bne.n	800772a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800771e:	4b07      	ldr	r3, [pc, #28]	; (800773c <prvGetNextExpireTime+0x44>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	e001      	b.n	800772e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800772e:	68fb      	ldr	r3, [r7, #12]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	bc80      	pop	{r7}
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	20000eb8 	.word	0x20000eb8

08007740 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007748:	f7ff fa54 	bl	8006bf4 <xTaskGetTickCount>
 800774c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800774e:	4b0b      	ldr	r3, [pc, #44]	; (800777c <prvSampleTimeNow+0x3c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	429a      	cmp	r2, r3
 8007756:	d205      	bcs.n	8007764 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007758:	f000 f908 	bl	800796c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	e002      	b.n	800776a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800776a:	4a04      	ldr	r2, [pc, #16]	; (800777c <prvSampleTimeNow+0x3c>)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007770:	68fb      	ldr	r3, [r7, #12]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	20000ec8 	.word	0x20000ec8

08007780 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d812      	bhi.n	80077cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	1ad2      	subs	r2, r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d302      	bcc.n	80077ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077b4:	2301      	movs	r3, #1
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	e01b      	b.n	80077f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077ba:	4b10      	ldr	r3, [pc, #64]	; (80077fc <prvInsertTimerInActiveList+0x7c>)
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3304      	adds	r3, #4
 80077c2:	4619      	mov	r1, r3
 80077c4:	4610      	mov	r0, r2
 80077c6:	f7fe f8d9 	bl	800597c <vListInsert>
 80077ca:	e012      	b.n	80077f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d206      	bcs.n	80077e2 <prvInsertTimerInActiveList+0x62>
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d302      	bcc.n	80077e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077dc:	2301      	movs	r3, #1
 80077de:	617b      	str	r3, [r7, #20]
 80077e0:	e007      	b.n	80077f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077e2:	4b07      	ldr	r3, [pc, #28]	; (8007800 <prvInsertTimerInActiveList+0x80>)
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3304      	adds	r3, #4
 80077ea:	4619      	mov	r1, r3
 80077ec:	4610      	mov	r0, r2
 80077ee:	f7fe f8c5 	bl	800597c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077f2:	697b      	ldr	r3, [r7, #20]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	20000ebc 	.word	0x20000ebc
 8007800:	20000eb8 	.word	0x20000eb8

08007804 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08e      	sub	sp, #56	; 0x38
 8007808:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800780a:	e09d      	b.n	8007948 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	da18      	bge.n	8007844 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007812:	1d3b      	adds	r3, r7, #4
 8007814:	3304      	adds	r3, #4
 8007816:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10a      	bne.n	8007834 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	61fb      	str	r3, [r7, #28]
}
 8007830:	bf00      	nop
 8007832:	e7fe      	b.n	8007832 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800783a:	6850      	ldr	r0, [r2, #4]
 800783c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800783e:	6892      	ldr	r2, [r2, #8]
 8007840:	4611      	mov	r1, r2
 8007842:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	db7d      	blt.n	8007946 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d004      	beq.n	8007860 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	3304      	adds	r3, #4
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe f8c6 	bl	80059ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007860:	463b      	mov	r3, r7
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff ff6c 	bl	8007740 <prvSampleTimeNow>
 8007868:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b09      	cmp	r3, #9
 800786e:	d86b      	bhi.n	8007948 <prvProcessReceivedCommands+0x144>
 8007870:	a201      	add	r2, pc, #4	; (adr r2, 8007878 <prvProcessReceivedCommands+0x74>)
 8007872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007876:	bf00      	nop
 8007878:	080078a1 	.word	0x080078a1
 800787c:	080078a1 	.word	0x080078a1
 8007880:	080078a1 	.word	0x080078a1
 8007884:	08007949 	.word	0x08007949
 8007888:	080078fd 	.word	0x080078fd
 800788c:	08007935 	.word	0x08007935
 8007890:	080078a1 	.word	0x080078a1
 8007894:	080078a1 	.word	0x080078a1
 8007898:	08007949 	.word	0x08007949
 800789c:	080078fd 	.word	0x080078fd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	18d1      	adds	r1, r2, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ae:	f7ff ff67 	bl	8007780 <prvInsertTimerInActiveList>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d047      	beq.n	8007948 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d13f      	bne.n	8007948 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	441a      	add	r2, r3
 80078d0:	2300      	movs	r3, #0
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	2100      	movs	r1, #0
 80078d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078da:	f7ff fe1f 	bl	800751c <xTimerGenericCommand>
 80078de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d130      	bne.n	8007948 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	61bb      	str	r3, [r7, #24]
}
 80078f8:	bf00      	nop
 80078fa:	e7fe      	b.n	80078fa <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10a      	bne.n	8007920 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	617b      	str	r3, [r7, #20]
}
 800791c:	bf00      	nop
 800791e:	e7fe      	b.n	800791e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007922:	699a      	ldr	r2, [r3, #24]
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	18d1      	adds	r1, r2, r3
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800792c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800792e:	f7ff ff27 	bl	8007780 <prvInsertTimerInActiveList>
					break;
 8007932:	e009      	b.n	8007948 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800793a:	2b00      	cmp	r3, #0
 800793c:	d104      	bne.n	8007948 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800793e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007940:	f000 fb68 	bl	8008014 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007944:	e000      	b.n	8007948 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007946:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007948:	4b07      	ldr	r3, [pc, #28]	; (8007968 <prvProcessReceivedCommands+0x164>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	1d39      	adds	r1, r7, #4
 800794e:	2200      	movs	r2, #0
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe fbb5 	bl	80060c0 <xQueueReceive>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	f47f af57 	bne.w	800780c <prvProcessReceivedCommands+0x8>
	}
}
 800795e:	bf00      	nop
 8007960:	bf00      	nop
 8007962:	3730      	adds	r7, #48	; 0x30
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20000ec0 	.word	0x20000ec0

0800796c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b088      	sub	sp, #32
 8007970:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007972:	e045      	b.n	8007a00 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007974:	4b2c      	ldr	r3, [pc, #176]	; (8007a28 <prvSwitchTimerLists+0xbc>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800797e:	4b2a      	ldr	r3, [pc, #168]	; (8007a28 <prvSwitchTimerLists+0xbc>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3304      	adds	r3, #4
 800798c:	4618      	mov	r0, r3
 800798e:	f7fe f82d 	bl	80059ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d12e      	bne.n	8007a00 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	4413      	add	r3, r2
 80079aa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d90e      	bls.n	80079d2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079c0:	4b19      	ldr	r3, [pc, #100]	; (8007a28 <prvSwitchTimerLists+0xbc>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3304      	adds	r3, #4
 80079c8:	4619      	mov	r1, r3
 80079ca:	4610      	mov	r0, r2
 80079cc:	f7fd ffd6 	bl	800597c <vListInsert>
 80079d0:	e016      	b.n	8007a00 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079d2:	2300      	movs	r3, #0
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	2300      	movs	r3, #0
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	2100      	movs	r1, #0
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f7ff fd9d 	bl	800751c <xTimerGenericCommand>
 80079e2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10a      	bne.n	8007a00 <prvSwitchTimerLists+0x94>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	603b      	str	r3, [r7, #0]
}
 80079fc:	bf00      	nop
 80079fe:	e7fe      	b.n	80079fe <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a00:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <prvSwitchTimerLists+0xbc>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1b4      	bne.n	8007974 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a0a:	4b07      	ldr	r3, [pc, #28]	; (8007a28 <prvSwitchTimerLists+0xbc>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a10:	4b06      	ldr	r3, [pc, #24]	; (8007a2c <prvSwitchTimerLists+0xc0>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a04      	ldr	r2, [pc, #16]	; (8007a28 <prvSwitchTimerLists+0xbc>)
 8007a16:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a18:	4a04      	ldr	r2, [pc, #16]	; (8007a2c <prvSwitchTimerLists+0xc0>)
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	6013      	str	r3, [r2, #0]
}
 8007a1e:	bf00      	nop
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000eb8 	.word	0x20000eb8
 8007a2c:	20000ebc 	.word	0x20000ebc

08007a30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a36:	f000 f929 	bl	8007c8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a3a:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <prvCheckForValidListAndQueue+0x60>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d120      	bne.n	8007a84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a42:	4814      	ldr	r0, [pc, #80]	; (8007a94 <prvCheckForValidListAndQueue+0x64>)
 8007a44:	f7fd ff4c 	bl	80058e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a48:	4813      	ldr	r0, [pc, #76]	; (8007a98 <prvCheckForValidListAndQueue+0x68>)
 8007a4a:	f7fd ff49 	bl	80058e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a4e:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <prvCheckForValidListAndQueue+0x6c>)
 8007a50:	4a10      	ldr	r2, [pc, #64]	; (8007a94 <prvCheckForValidListAndQueue+0x64>)
 8007a52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a54:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <prvCheckForValidListAndQueue+0x70>)
 8007a56:	4a10      	ldr	r2, [pc, #64]	; (8007a98 <prvCheckForValidListAndQueue+0x68>)
 8007a58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <prvCheckForValidListAndQueue+0x74>)
 8007a60:	4a11      	ldr	r2, [pc, #68]	; (8007aa8 <prvCheckForValidListAndQueue+0x78>)
 8007a62:	2110      	movs	r1, #16
 8007a64:	200a      	movs	r0, #10
 8007a66:	f7fe f853 	bl	8005b10 <xQueueGenericCreateStatic>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4a08      	ldr	r2, [pc, #32]	; (8007a90 <prvCheckForValidListAndQueue+0x60>)
 8007a6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a70:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <prvCheckForValidListAndQueue+0x60>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a78:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <prvCheckForValidListAndQueue+0x60>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	490b      	ldr	r1, [pc, #44]	; (8007aac <prvCheckForValidListAndQueue+0x7c>)
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fd32 	bl	80064e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a84:	f000 f932 	bl	8007cec <vPortExitCritical>
}
 8007a88:	bf00      	nop
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20000ec0 	.word	0x20000ec0
 8007a94:	20000e90 	.word	0x20000e90
 8007a98:	20000ea4 	.word	0x20000ea4
 8007a9c:	20000eb8 	.word	0x20000eb8
 8007aa0:	20000ebc 	.word	0x20000ebc
 8007aa4:	20000f6c 	.word	0x20000f6c
 8007aa8:	20000ecc 	.word	0x20000ecc
 8007aac:	0800ce3c 	.word	0x0800ce3c

08007ab0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3b04      	subs	r3, #4
 8007ac0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3b04      	subs	r3, #4
 8007ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f023 0201 	bic.w	r2, r3, #1
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3b04      	subs	r3, #4
 8007ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ae0:	4a08      	ldr	r2, [pc, #32]	; (8007b04 <pxPortInitialiseStack+0x54>)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	3b14      	subs	r3, #20
 8007aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3b20      	subs	r3, #32
 8007af6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007af8:	68fb      	ldr	r3, [r7, #12]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bc80      	pop	{r7}
 8007b02:	4770      	bx	lr
 8007b04:	08007b09 	.word	0x08007b09

08007b08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b12:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <prvTaskExitError+0x54>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1a:	d00a      	beq.n	8007b32 <prvTaskExitError+0x2a>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	60fb      	str	r3, [r7, #12]
}
 8007b2e:	bf00      	nop
 8007b30:	e7fe      	b.n	8007b30 <prvTaskExitError+0x28>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	60bb      	str	r3, [r7, #8]
}
 8007b44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b46:	bf00      	nop
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0fc      	beq.n	8007b48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b4e:	bf00      	nop
 8007b50:	bf00      	nop
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bc80      	pop	{r7}
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	20000010 	.word	0x20000010

08007b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b60:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <pxCurrentTCBConst2>)
 8007b62:	6819      	ldr	r1, [r3, #0]
 8007b64:	6808      	ldr	r0, [r1, #0]
 8007b66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b6a:	f380 8809 	msr	PSP, r0
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f04f 0000 	mov.w	r0, #0
 8007b76:	f380 8811 	msr	BASEPRI, r0
 8007b7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007b7e:	4770      	bx	lr

08007b80 <pxCurrentTCBConst2>:
 8007b80:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop

08007b88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007b88:	4806      	ldr	r0, [pc, #24]	; (8007ba4 <prvPortStartFirstTask+0x1c>)
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	6800      	ldr	r0, [r0, #0]
 8007b8e:	f380 8808 	msr	MSP, r0
 8007b92:	b662      	cpsie	i
 8007b94:	b661      	cpsie	f
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	df00      	svc	0
 8007ba0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007ba2:	bf00      	nop
 8007ba4:	e000ed08 	.word	0xe000ed08

08007ba8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007bae:	4b32      	ldr	r3, [pc, #200]	; (8007c78 <xPortStartScheduler+0xd0>)
 8007bb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	22ff      	movs	r2, #255	; 0xff
 8007bbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	4b2a      	ldr	r3, [pc, #168]	; (8007c7c <xPortStartScheduler+0xd4>)
 8007bd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bd6:	4b2a      	ldr	r3, [pc, #168]	; (8007c80 <xPortStartScheduler+0xd8>)
 8007bd8:	2207      	movs	r2, #7
 8007bda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bdc:	e009      	b.n	8007bf2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007bde:	4b28      	ldr	r3, [pc, #160]	; (8007c80 <xPortStartScheduler+0xd8>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	4a26      	ldr	r2, [pc, #152]	; (8007c80 <xPortStartScheduler+0xd8>)
 8007be6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007be8:	78fb      	ldrb	r3, [r7, #3]
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bf2:	78fb      	ldrb	r3, [r7, #3]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bfa:	2b80      	cmp	r3, #128	; 0x80
 8007bfc:	d0ef      	beq.n	8007bde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bfe:	4b20      	ldr	r3, [pc, #128]	; (8007c80 <xPortStartScheduler+0xd8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f1c3 0307 	rsb	r3, r3, #7
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d00a      	beq.n	8007c20 <xPortStartScheduler+0x78>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	60bb      	str	r3, [r7, #8]
}
 8007c1c:	bf00      	nop
 8007c1e:	e7fe      	b.n	8007c1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c20:	4b17      	ldr	r3, [pc, #92]	; (8007c80 <xPortStartScheduler+0xd8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	021b      	lsls	r3, r3, #8
 8007c26:	4a16      	ldr	r2, [pc, #88]	; (8007c80 <xPortStartScheduler+0xd8>)
 8007c28:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c2a:	4b15      	ldr	r3, [pc, #84]	; (8007c80 <xPortStartScheduler+0xd8>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c32:	4a13      	ldr	r2, [pc, #76]	; (8007c80 <xPortStartScheduler+0xd8>)
 8007c34:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c3e:	4b11      	ldr	r3, [pc, #68]	; (8007c84 <xPortStartScheduler+0xdc>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a10      	ldr	r2, [pc, #64]	; (8007c84 <xPortStartScheduler+0xdc>)
 8007c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c4a:	4b0e      	ldr	r3, [pc, #56]	; (8007c84 <xPortStartScheduler+0xdc>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a0d      	ldr	r2, [pc, #52]	; (8007c84 <xPortStartScheduler+0xdc>)
 8007c50:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c54:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c56:	f000 f8b9 	bl	8007dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c5a:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <xPortStartScheduler+0xe0>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c60:	f7ff ff92 	bl	8007b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c64:	f7ff f892 	bl	8006d8c <vTaskSwitchContext>
	prvTaskExitError();
 8007c68:	f7ff ff4e 	bl	8007b08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	e000e400 	.word	0xe000e400
 8007c7c:	20000fbc 	.word	0x20000fbc
 8007c80:	20000fc0 	.word	0x20000fc0
 8007c84:	e000ed20 	.word	0xe000ed20
 8007c88:	20000010 	.word	0x20000010

08007c8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	607b      	str	r3, [r7, #4]
}
 8007ca4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ca6:	4b0f      	ldr	r3, [pc, #60]	; (8007ce4 <vPortEnterCritical+0x58>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3301      	adds	r3, #1
 8007cac:	4a0d      	ldr	r2, [pc, #52]	; (8007ce4 <vPortEnterCritical+0x58>)
 8007cae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ce4 <vPortEnterCritical+0x58>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d10f      	bne.n	8007cd8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cb8:	4b0b      	ldr	r3, [pc, #44]	; (8007ce8 <vPortEnterCritical+0x5c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <vPortEnterCritical+0x4c>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	603b      	str	r3, [r7, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	e7fe      	b.n	8007cd6 <vPortEnterCritical+0x4a>
	}
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bc80      	pop	{r7}
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	20000010 	.word	0x20000010
 8007ce8:	e000ed04 	.word	0xe000ed04

08007cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cf2:	4b11      	ldr	r3, [pc, #68]	; (8007d38 <vPortExitCritical+0x4c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10a      	bne.n	8007d10 <vPortExitCritical+0x24>
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	607b      	str	r3, [r7, #4]
}
 8007d0c:	bf00      	nop
 8007d0e:	e7fe      	b.n	8007d0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d10:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <vPortExitCritical+0x4c>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	4a08      	ldr	r2, [pc, #32]	; (8007d38 <vPortExitCritical+0x4c>)
 8007d18:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d1a:	4b07      	ldr	r3, [pc, #28]	; (8007d38 <vPortExitCritical+0x4c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d105      	bne.n	8007d2e <vPortExitCritical+0x42>
 8007d22:	2300      	movs	r3, #0
 8007d24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	f383 8811 	msr	BASEPRI, r3
}
 8007d2c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bc80      	pop	{r7}
 8007d36:	4770      	bx	lr
 8007d38:	20000010 	.word	0x20000010
 8007d3c:	00000000 	.word	0x00000000

08007d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d40:	f3ef 8009 	mrs	r0, PSP
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <pxCurrentTCBConst>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d50:	6010      	str	r0, [r2, #0]
 8007d52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007d56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d5a:	f380 8811 	msr	BASEPRI, r0
 8007d5e:	f7ff f815 	bl	8006d8c <vTaskSwitchContext>
 8007d62:	f04f 0000 	mov.w	r0, #0
 8007d66:	f380 8811 	msr	BASEPRI, r0
 8007d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d6e:	6819      	ldr	r1, [r3, #0]
 8007d70:	6808      	ldr	r0, [r1, #0]
 8007d72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d76:	f380 8809 	msr	PSP, r0
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	4770      	bx	lr

08007d80 <pxCurrentTCBConst>:
 8007d80:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop

08007d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	607b      	str	r3, [r7, #4]
}
 8007da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007da2:	f7fe ff35 	bl	8006c10 <xTaskIncrementTick>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dac:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <SysTick_Handler+0x40>)
 8007dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	2300      	movs	r3, #0
 8007db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	f383 8811 	msr	BASEPRI, r3
}
 8007dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	e000ed04 	.word	0xe000ed04

08007dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007dd0:	4b0a      	ldr	r3, [pc, #40]	; (8007dfc <vPortSetupTimerInterrupt+0x30>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007dd6:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <vPortSetupTimerInterrupt+0x34>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ddc:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <vPortSetupTimerInterrupt+0x38>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a09      	ldr	r2, [pc, #36]	; (8007e08 <vPortSetupTimerInterrupt+0x3c>)
 8007de2:	fba2 2303 	umull	r2, r3, r2, r3
 8007de6:	0b5b      	lsrs	r3, r3, #13
 8007de8:	4a08      	ldr	r2, [pc, #32]	; (8007e0c <vPortSetupTimerInterrupt+0x40>)
 8007dea:	3b01      	subs	r3, #1
 8007dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dee:	4b03      	ldr	r3, [pc, #12]	; (8007dfc <vPortSetupTimerInterrupt+0x30>)
 8007df0:	2207      	movs	r2, #7
 8007df2:	601a      	str	r2, [r3, #0]
}
 8007df4:	bf00      	nop
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bc80      	pop	{r7}
 8007dfa:	4770      	bx	lr
 8007dfc:	e000e010 	.word	0xe000e010
 8007e00:	e000e018 	.word	0xe000e018
 8007e04:	20000008 	.word	0x20000008
 8007e08:	d1b71759 	.word	0xd1b71759
 8007e0c:	e000e014 	.word	0xe000e014

08007e10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e16:	f3ef 8305 	mrs	r3, IPSR
 8007e1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2b0f      	cmp	r3, #15
 8007e20:	d914      	bls.n	8007e4c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e22:	4a16      	ldr	r2, [pc, #88]	; (8007e7c <vPortValidateInterruptPriority+0x6c>)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4413      	add	r3, r2
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e2c:	4b14      	ldr	r3, [pc, #80]	; (8007e80 <vPortValidateInterruptPriority+0x70>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	7afa      	ldrb	r2, [r7, #11]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d20a      	bcs.n	8007e4c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	607b      	str	r3, [r7, #4]
}
 8007e48:	bf00      	nop
 8007e4a:	e7fe      	b.n	8007e4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e4c:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <vPortValidateInterruptPriority+0x74>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e54:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <vPortValidateInterruptPriority+0x78>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d90a      	bls.n	8007e72 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	603b      	str	r3, [r7, #0]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <vPortValidateInterruptPriority+0x60>
	}
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bc80      	pop	{r7}
 8007e7a:	4770      	bx	lr
 8007e7c:	e000e3f0 	.word	0xe000e3f0
 8007e80:	20000fbc 	.word	0x20000fbc
 8007e84:	e000ed0c 	.word	0xe000ed0c
 8007e88:	20000fc0 	.word	0x20000fc0

08007e8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08a      	sub	sp, #40	; 0x28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e94:	2300      	movs	r3, #0
 8007e96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e98:	f7fe fe00 	bl	8006a9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e9c:	4b58      	ldr	r3, [pc, #352]	; (8008000 <pvPortMalloc+0x174>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ea4:	f000 f910 	bl	80080c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ea8:	4b56      	ldr	r3, [pc, #344]	; (8008004 <pvPortMalloc+0x178>)
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f040 808e 	bne.w	8007fd2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01d      	beq.n	8007ef8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ebc:	2208      	movs	r2, #8
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f003 0307 	and.w	r3, r3, #7
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d014      	beq.n	8007ef8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f023 0307 	bic.w	r3, r3, #7
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f003 0307 	and.w	r3, r3, #7
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <pvPortMalloc+0x6c>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	617b      	str	r3, [r7, #20]
}
 8007ef4:	bf00      	nop
 8007ef6:	e7fe      	b.n	8007ef6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d069      	beq.n	8007fd2 <pvPortMalloc+0x146>
 8007efe:	4b42      	ldr	r3, [pc, #264]	; (8008008 <pvPortMalloc+0x17c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d864      	bhi.n	8007fd2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f08:	4b40      	ldr	r3, [pc, #256]	; (800800c <pvPortMalloc+0x180>)
 8007f0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f0c:	4b3f      	ldr	r3, [pc, #252]	; (800800c <pvPortMalloc+0x180>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f12:	e004      	b.n	8007f1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d903      	bls.n	8007f30 <pvPortMalloc+0xa4>
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1f1      	bne.n	8007f14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f30:	4b33      	ldr	r3, [pc, #204]	; (8008000 <pvPortMalloc+0x174>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d04b      	beq.n	8007fd2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2208      	movs	r2, #8
 8007f40:	4413      	add	r3, r2
 8007f42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	1ad2      	subs	r2, r2, r3
 8007f54:	2308      	movs	r3, #8
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d91f      	bls.n	8007f9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4413      	add	r3, r2
 8007f62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	f003 0307 	and.w	r3, r3, #7
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00a      	beq.n	8007f84 <pvPortMalloc+0xf8>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	613b      	str	r3, [r7, #16]
}
 8007f80:	bf00      	nop
 8007f82:	e7fe      	b.n	8007f82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	1ad2      	subs	r2, r2, r3
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f96:	69b8      	ldr	r0, [r7, #24]
 8007f98:	f000 f8f8 	bl	800818c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f9c:	4b1a      	ldr	r3, [pc, #104]	; (8008008 <pvPortMalloc+0x17c>)
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	4a18      	ldr	r2, [pc, #96]	; (8008008 <pvPortMalloc+0x17c>)
 8007fa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007faa:	4b17      	ldr	r3, [pc, #92]	; (8008008 <pvPortMalloc+0x17c>)
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	4b18      	ldr	r3, [pc, #96]	; (8008010 <pvPortMalloc+0x184>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d203      	bcs.n	8007fbe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fb6:	4b14      	ldr	r3, [pc, #80]	; (8008008 <pvPortMalloc+0x17c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a15      	ldr	r2, [pc, #84]	; (8008010 <pvPortMalloc+0x184>)
 8007fbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	4b10      	ldr	r3, [pc, #64]	; (8008004 <pvPortMalloc+0x178>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fd2:	f7fe fd71 	bl	8006ab8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	f003 0307 	and.w	r3, r3, #7
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00a      	beq.n	8007ff6 <pvPortMalloc+0x16a>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	60fb      	str	r3, [r7, #12]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <pvPortMalloc+0x168>
	return pvReturn;
 8007ff6:	69fb      	ldr	r3, [r7, #28]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3728      	adds	r7, #40	; 0x28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	200036dc 	.word	0x200036dc
 8008004:	200036e8 	.word	0x200036e8
 8008008:	200036e0 	.word	0x200036e0
 800800c:	200036d4 	.word	0x200036d4
 8008010:	200036e4 	.word	0x200036e4

08008014 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d048      	beq.n	80080b8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008026:	2308      	movs	r3, #8
 8008028:	425b      	negs	r3, r3
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	4413      	add	r3, r2
 800802e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	4b21      	ldr	r3, [pc, #132]	; (80080c0 <vPortFree+0xac>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4013      	ands	r3, r2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10a      	bne.n	8008058 <vPortFree+0x44>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	60fb      	str	r3, [r7, #12]
}
 8008054:	bf00      	nop
 8008056:	e7fe      	b.n	8008056 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00a      	beq.n	8008076 <vPortFree+0x62>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	60bb      	str	r3, [r7, #8]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	4b11      	ldr	r3, [pc, #68]	; (80080c0 <vPortFree+0xac>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4013      	ands	r3, r2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d019      	beq.n	80080b8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d115      	bne.n	80080b8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <vPortFree+0xac>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	43db      	mvns	r3, r3
 8008096:	401a      	ands	r2, r3
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800809c:	f7fe fcfe 	bl	8006a9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	4b07      	ldr	r3, [pc, #28]	; (80080c4 <vPortFree+0xb0>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4413      	add	r3, r2
 80080aa:	4a06      	ldr	r2, [pc, #24]	; (80080c4 <vPortFree+0xb0>)
 80080ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080ae:	6938      	ldr	r0, [r7, #16]
 80080b0:	f000 f86c 	bl	800818c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80080b4:	f7fe fd00 	bl	8006ab8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080b8:	bf00      	nop
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	200036e8 	.word	0x200036e8
 80080c4:	200036e0 	.word	0x200036e0

080080c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080ce:	f242 7310 	movw	r3, #10000	; 0x2710
 80080d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080d4:	4b27      	ldr	r3, [pc, #156]	; (8008174 <prvHeapInit+0xac>)
 80080d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f003 0307 	and.w	r3, r3, #7
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00c      	beq.n	80080fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3307      	adds	r3, #7
 80080e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f023 0307 	bic.w	r3, r3, #7
 80080ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	4a1f      	ldr	r2, [pc, #124]	; (8008174 <prvHeapInit+0xac>)
 80080f8:	4413      	add	r3, r2
 80080fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008100:	4a1d      	ldr	r2, [pc, #116]	; (8008178 <prvHeapInit+0xb0>)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008106:	4b1c      	ldr	r3, [pc, #112]	; (8008178 <prvHeapInit+0xb0>)
 8008108:	2200      	movs	r2, #0
 800810a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	4413      	add	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008114:	2208      	movs	r2, #8
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	1a9b      	subs	r3, r3, r2
 800811a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f023 0307 	bic.w	r3, r3, #7
 8008122:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4a15      	ldr	r2, [pc, #84]	; (800817c <prvHeapInit+0xb4>)
 8008128:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800812a:	4b14      	ldr	r3, [pc, #80]	; (800817c <prvHeapInit+0xb4>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2200      	movs	r2, #0
 8008130:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008132:	4b12      	ldr	r3, [pc, #72]	; (800817c <prvHeapInit+0xb4>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	1ad2      	subs	r2, r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008148:	4b0c      	ldr	r3, [pc, #48]	; (800817c <prvHeapInit+0xb4>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	4a0a      	ldr	r2, [pc, #40]	; (8008180 <prvHeapInit+0xb8>)
 8008156:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	4a09      	ldr	r2, [pc, #36]	; (8008184 <prvHeapInit+0xbc>)
 800815e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008160:	4b09      	ldr	r3, [pc, #36]	; (8008188 <prvHeapInit+0xc0>)
 8008162:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008166:	601a      	str	r2, [r3, #0]
}
 8008168:	bf00      	nop
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	bc80      	pop	{r7}
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	20000fc4 	.word	0x20000fc4
 8008178:	200036d4 	.word	0x200036d4
 800817c:	200036dc 	.word	0x200036dc
 8008180:	200036e4 	.word	0x200036e4
 8008184:	200036e0 	.word	0x200036e0
 8008188:	200036e8 	.word	0x200036e8

0800818c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008194:	4b27      	ldr	r3, [pc, #156]	; (8008234 <prvInsertBlockIntoFreeList+0xa8>)
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	e002      	b.n	80081a0 <prvInsertBlockIntoFreeList+0x14>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d8f7      	bhi.n	800819a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	4413      	add	r3, r2
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d108      	bne.n	80081ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	441a      	add	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	441a      	add	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d118      	bne.n	8008214 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	4b14      	ldr	r3, [pc, #80]	; (8008238 <prvInsertBlockIntoFreeList+0xac>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d00d      	beq.n	800820a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	441a      	add	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	e008      	b.n	800821c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800820a:	4b0b      	ldr	r3, [pc, #44]	; (8008238 <prvInsertBlockIntoFreeList+0xac>)
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	e003      	b.n	800821c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	429a      	cmp	r2, r3
 8008222:	d002      	beq.n	800822a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800822a:	bf00      	nop
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	bc80      	pop	{r7}
 8008232:	4770      	bx	lr
 8008234:	200036d4 	.word	0x200036d4
 8008238:	200036dc 	.word	0x200036dc

0800823c <atof>:
 800823c:	2100      	movs	r1, #0
 800823e:	f001 bf29 	b.w	800a094 <strtod>
	...

08008244 <__errno>:
 8008244:	4b01      	ldr	r3, [pc, #4]	; (800824c <__errno+0x8>)
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	20000014 	.word	0x20000014

08008250 <std>:
 8008250:	2300      	movs	r3, #0
 8008252:	b510      	push	{r4, lr}
 8008254:	4604      	mov	r4, r0
 8008256:	e9c0 3300 	strd	r3, r3, [r0]
 800825a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800825e:	6083      	str	r3, [r0, #8]
 8008260:	8181      	strh	r1, [r0, #12]
 8008262:	6643      	str	r3, [r0, #100]	; 0x64
 8008264:	81c2      	strh	r2, [r0, #14]
 8008266:	6183      	str	r3, [r0, #24]
 8008268:	4619      	mov	r1, r3
 800826a:	2208      	movs	r2, #8
 800826c:	305c      	adds	r0, #92	; 0x5c
 800826e:	f000 f91a 	bl	80084a6 <memset>
 8008272:	4b05      	ldr	r3, [pc, #20]	; (8008288 <std+0x38>)
 8008274:	6224      	str	r4, [r4, #32]
 8008276:	6263      	str	r3, [r4, #36]	; 0x24
 8008278:	4b04      	ldr	r3, [pc, #16]	; (800828c <std+0x3c>)
 800827a:	62a3      	str	r3, [r4, #40]	; 0x28
 800827c:	4b04      	ldr	r3, [pc, #16]	; (8008290 <std+0x40>)
 800827e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008280:	4b04      	ldr	r3, [pc, #16]	; (8008294 <std+0x44>)
 8008282:	6323      	str	r3, [r4, #48]	; 0x30
 8008284:	bd10      	pop	{r4, pc}
 8008286:	bf00      	nop
 8008288:	0800938d 	.word	0x0800938d
 800828c:	080093af 	.word	0x080093af
 8008290:	080093e7 	.word	0x080093e7
 8008294:	0800940b 	.word	0x0800940b

08008298 <_cleanup_r>:
 8008298:	4901      	ldr	r1, [pc, #4]	; (80082a0 <_cleanup_r+0x8>)
 800829a:	f000 b8af 	b.w	80083fc <_fwalk_reent>
 800829e:	bf00      	nop
 80082a0:	0800b111 	.word	0x0800b111

080082a4 <__sfmoreglue>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	2568      	movs	r5, #104	; 0x68
 80082a8:	1e4a      	subs	r2, r1, #1
 80082aa:	4355      	muls	r5, r2
 80082ac:	460e      	mov	r6, r1
 80082ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082b2:	f000 f901 	bl	80084b8 <_malloc_r>
 80082b6:	4604      	mov	r4, r0
 80082b8:	b140      	cbz	r0, 80082cc <__sfmoreglue+0x28>
 80082ba:	2100      	movs	r1, #0
 80082bc:	e9c0 1600 	strd	r1, r6, [r0]
 80082c0:	300c      	adds	r0, #12
 80082c2:	60a0      	str	r0, [r4, #8]
 80082c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082c8:	f000 f8ed 	bl	80084a6 <memset>
 80082cc:	4620      	mov	r0, r4
 80082ce:	bd70      	pop	{r4, r5, r6, pc}

080082d0 <__sfp_lock_acquire>:
 80082d0:	4801      	ldr	r0, [pc, #4]	; (80082d8 <__sfp_lock_acquire+0x8>)
 80082d2:	f000 b8d8 	b.w	8008486 <__retarget_lock_acquire_recursive>
 80082d6:	bf00      	nop
 80082d8:	20003b34 	.word	0x20003b34

080082dc <__sfp_lock_release>:
 80082dc:	4801      	ldr	r0, [pc, #4]	; (80082e4 <__sfp_lock_release+0x8>)
 80082de:	f000 b8d3 	b.w	8008488 <__retarget_lock_release_recursive>
 80082e2:	bf00      	nop
 80082e4:	20003b34 	.word	0x20003b34

080082e8 <__sinit_lock_acquire>:
 80082e8:	4801      	ldr	r0, [pc, #4]	; (80082f0 <__sinit_lock_acquire+0x8>)
 80082ea:	f000 b8cc 	b.w	8008486 <__retarget_lock_acquire_recursive>
 80082ee:	bf00      	nop
 80082f0:	20003b2f 	.word	0x20003b2f

080082f4 <__sinit_lock_release>:
 80082f4:	4801      	ldr	r0, [pc, #4]	; (80082fc <__sinit_lock_release+0x8>)
 80082f6:	f000 b8c7 	b.w	8008488 <__retarget_lock_release_recursive>
 80082fa:	bf00      	nop
 80082fc:	20003b2f 	.word	0x20003b2f

08008300 <__sinit>:
 8008300:	b510      	push	{r4, lr}
 8008302:	4604      	mov	r4, r0
 8008304:	f7ff fff0 	bl	80082e8 <__sinit_lock_acquire>
 8008308:	69a3      	ldr	r3, [r4, #24]
 800830a:	b11b      	cbz	r3, 8008314 <__sinit+0x14>
 800830c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008310:	f7ff bff0 	b.w	80082f4 <__sinit_lock_release>
 8008314:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008318:	6523      	str	r3, [r4, #80]	; 0x50
 800831a:	4b13      	ldr	r3, [pc, #76]	; (8008368 <__sinit+0x68>)
 800831c:	4a13      	ldr	r2, [pc, #76]	; (800836c <__sinit+0x6c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	62a2      	str	r2, [r4, #40]	; 0x28
 8008322:	42a3      	cmp	r3, r4
 8008324:	bf08      	it	eq
 8008326:	2301      	moveq	r3, #1
 8008328:	4620      	mov	r0, r4
 800832a:	bf08      	it	eq
 800832c:	61a3      	streq	r3, [r4, #24]
 800832e:	f000 f81f 	bl	8008370 <__sfp>
 8008332:	6060      	str	r0, [r4, #4]
 8008334:	4620      	mov	r0, r4
 8008336:	f000 f81b 	bl	8008370 <__sfp>
 800833a:	60a0      	str	r0, [r4, #8]
 800833c:	4620      	mov	r0, r4
 800833e:	f000 f817 	bl	8008370 <__sfp>
 8008342:	2200      	movs	r2, #0
 8008344:	2104      	movs	r1, #4
 8008346:	60e0      	str	r0, [r4, #12]
 8008348:	6860      	ldr	r0, [r4, #4]
 800834a:	f7ff ff81 	bl	8008250 <std>
 800834e:	2201      	movs	r2, #1
 8008350:	2109      	movs	r1, #9
 8008352:	68a0      	ldr	r0, [r4, #8]
 8008354:	f7ff ff7c 	bl	8008250 <std>
 8008358:	2202      	movs	r2, #2
 800835a:	2112      	movs	r1, #18
 800835c:	68e0      	ldr	r0, [r4, #12]
 800835e:	f7ff ff77 	bl	8008250 <std>
 8008362:	2301      	movs	r3, #1
 8008364:	61a3      	str	r3, [r4, #24]
 8008366:	e7d1      	b.n	800830c <__sinit+0xc>
 8008368:	0800cf68 	.word	0x0800cf68
 800836c:	08008299 	.word	0x08008299

08008370 <__sfp>:
 8008370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008372:	4607      	mov	r7, r0
 8008374:	f7ff ffac 	bl	80082d0 <__sfp_lock_acquire>
 8008378:	4b1e      	ldr	r3, [pc, #120]	; (80083f4 <__sfp+0x84>)
 800837a:	681e      	ldr	r6, [r3, #0]
 800837c:	69b3      	ldr	r3, [r6, #24]
 800837e:	b913      	cbnz	r3, 8008386 <__sfp+0x16>
 8008380:	4630      	mov	r0, r6
 8008382:	f7ff ffbd 	bl	8008300 <__sinit>
 8008386:	3648      	adds	r6, #72	; 0x48
 8008388:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800838c:	3b01      	subs	r3, #1
 800838e:	d503      	bpl.n	8008398 <__sfp+0x28>
 8008390:	6833      	ldr	r3, [r6, #0]
 8008392:	b30b      	cbz	r3, 80083d8 <__sfp+0x68>
 8008394:	6836      	ldr	r6, [r6, #0]
 8008396:	e7f7      	b.n	8008388 <__sfp+0x18>
 8008398:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800839c:	b9d5      	cbnz	r5, 80083d4 <__sfp+0x64>
 800839e:	4b16      	ldr	r3, [pc, #88]	; (80083f8 <__sfp+0x88>)
 80083a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083a4:	60e3      	str	r3, [r4, #12]
 80083a6:	6665      	str	r5, [r4, #100]	; 0x64
 80083a8:	f000 f86c 	bl	8008484 <__retarget_lock_init_recursive>
 80083ac:	f7ff ff96 	bl	80082dc <__sfp_lock_release>
 80083b0:	2208      	movs	r2, #8
 80083b2:	4629      	mov	r1, r5
 80083b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083bc:	6025      	str	r5, [r4, #0]
 80083be:	61a5      	str	r5, [r4, #24]
 80083c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083c4:	f000 f86f 	bl	80084a6 <memset>
 80083c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083d0:	4620      	mov	r0, r4
 80083d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d4:	3468      	adds	r4, #104	; 0x68
 80083d6:	e7d9      	b.n	800838c <__sfp+0x1c>
 80083d8:	2104      	movs	r1, #4
 80083da:	4638      	mov	r0, r7
 80083dc:	f7ff ff62 	bl	80082a4 <__sfmoreglue>
 80083e0:	4604      	mov	r4, r0
 80083e2:	6030      	str	r0, [r6, #0]
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d1d5      	bne.n	8008394 <__sfp+0x24>
 80083e8:	f7ff ff78 	bl	80082dc <__sfp_lock_release>
 80083ec:	230c      	movs	r3, #12
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	e7ee      	b.n	80083d0 <__sfp+0x60>
 80083f2:	bf00      	nop
 80083f4:	0800cf68 	.word	0x0800cf68
 80083f8:	ffff0001 	.word	0xffff0001

080083fc <_fwalk_reent>:
 80083fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008400:	4606      	mov	r6, r0
 8008402:	4688      	mov	r8, r1
 8008404:	2700      	movs	r7, #0
 8008406:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800840a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800840e:	f1b9 0901 	subs.w	r9, r9, #1
 8008412:	d505      	bpl.n	8008420 <_fwalk_reent+0x24>
 8008414:	6824      	ldr	r4, [r4, #0]
 8008416:	2c00      	cmp	r4, #0
 8008418:	d1f7      	bne.n	800840a <_fwalk_reent+0xe>
 800841a:	4638      	mov	r0, r7
 800841c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008420:	89ab      	ldrh	r3, [r5, #12]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d907      	bls.n	8008436 <_fwalk_reent+0x3a>
 8008426:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800842a:	3301      	adds	r3, #1
 800842c:	d003      	beq.n	8008436 <_fwalk_reent+0x3a>
 800842e:	4629      	mov	r1, r5
 8008430:	4630      	mov	r0, r6
 8008432:	47c0      	blx	r8
 8008434:	4307      	orrs	r7, r0
 8008436:	3568      	adds	r5, #104	; 0x68
 8008438:	e7e9      	b.n	800840e <_fwalk_reent+0x12>
	...

0800843c <__libc_init_array>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	2600      	movs	r6, #0
 8008440:	4d0c      	ldr	r5, [pc, #48]	; (8008474 <__libc_init_array+0x38>)
 8008442:	4c0d      	ldr	r4, [pc, #52]	; (8008478 <__libc_init_array+0x3c>)
 8008444:	1b64      	subs	r4, r4, r5
 8008446:	10a4      	asrs	r4, r4, #2
 8008448:	42a6      	cmp	r6, r4
 800844a:	d109      	bne.n	8008460 <__libc_init_array+0x24>
 800844c:	f004 fc36 	bl	800ccbc <_init>
 8008450:	2600      	movs	r6, #0
 8008452:	4d0a      	ldr	r5, [pc, #40]	; (800847c <__libc_init_array+0x40>)
 8008454:	4c0a      	ldr	r4, [pc, #40]	; (8008480 <__libc_init_array+0x44>)
 8008456:	1b64      	subs	r4, r4, r5
 8008458:	10a4      	asrs	r4, r4, #2
 800845a:	42a6      	cmp	r6, r4
 800845c:	d105      	bne.n	800846a <__libc_init_array+0x2e>
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	f855 3b04 	ldr.w	r3, [r5], #4
 8008464:	4798      	blx	r3
 8008466:	3601      	adds	r6, #1
 8008468:	e7ee      	b.n	8008448 <__libc_init_array+0xc>
 800846a:	f855 3b04 	ldr.w	r3, [r5], #4
 800846e:	4798      	blx	r3
 8008470:	3601      	adds	r6, #1
 8008472:	e7f2      	b.n	800845a <__libc_init_array+0x1e>
 8008474:	0800d418 	.word	0x0800d418
 8008478:	0800d418 	.word	0x0800d418
 800847c:	0800d418 	.word	0x0800d418
 8008480:	0800d41c 	.word	0x0800d41c

08008484 <__retarget_lock_init_recursive>:
 8008484:	4770      	bx	lr

08008486 <__retarget_lock_acquire_recursive>:
 8008486:	4770      	bx	lr

08008488 <__retarget_lock_release_recursive>:
 8008488:	4770      	bx	lr

0800848a <memcpy>:
 800848a:	440a      	add	r2, r1
 800848c:	4291      	cmp	r1, r2
 800848e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008492:	d100      	bne.n	8008496 <memcpy+0xc>
 8008494:	4770      	bx	lr
 8008496:	b510      	push	{r4, lr}
 8008498:	f811 4b01 	ldrb.w	r4, [r1], #1
 800849c:	4291      	cmp	r1, r2
 800849e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084a2:	d1f9      	bne.n	8008498 <memcpy+0xe>
 80084a4:	bd10      	pop	{r4, pc}

080084a6 <memset>:
 80084a6:	4603      	mov	r3, r0
 80084a8:	4402      	add	r2, r0
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d100      	bne.n	80084b0 <memset+0xa>
 80084ae:	4770      	bx	lr
 80084b0:	f803 1b01 	strb.w	r1, [r3], #1
 80084b4:	e7f9      	b.n	80084aa <memset+0x4>
	...

080084b8 <_malloc_r>:
 80084b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ba:	1ccd      	adds	r5, r1, #3
 80084bc:	f025 0503 	bic.w	r5, r5, #3
 80084c0:	3508      	adds	r5, #8
 80084c2:	2d0c      	cmp	r5, #12
 80084c4:	bf38      	it	cc
 80084c6:	250c      	movcc	r5, #12
 80084c8:	2d00      	cmp	r5, #0
 80084ca:	4606      	mov	r6, r0
 80084cc:	db01      	blt.n	80084d2 <_malloc_r+0x1a>
 80084ce:	42a9      	cmp	r1, r5
 80084d0:	d903      	bls.n	80084da <_malloc_r+0x22>
 80084d2:	230c      	movs	r3, #12
 80084d4:	6033      	str	r3, [r6, #0]
 80084d6:	2000      	movs	r0, #0
 80084d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084da:	f003 fa0b 	bl	800b8f4 <__malloc_lock>
 80084de:	4921      	ldr	r1, [pc, #132]	; (8008564 <_malloc_r+0xac>)
 80084e0:	680a      	ldr	r2, [r1, #0]
 80084e2:	4614      	mov	r4, r2
 80084e4:	b99c      	cbnz	r4, 800850e <_malloc_r+0x56>
 80084e6:	4f20      	ldr	r7, [pc, #128]	; (8008568 <_malloc_r+0xb0>)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	b923      	cbnz	r3, 80084f6 <_malloc_r+0x3e>
 80084ec:	4621      	mov	r1, r4
 80084ee:	4630      	mov	r0, r6
 80084f0:	f000 ff18 	bl	8009324 <_sbrk_r>
 80084f4:	6038      	str	r0, [r7, #0]
 80084f6:	4629      	mov	r1, r5
 80084f8:	4630      	mov	r0, r6
 80084fa:	f000 ff13 	bl	8009324 <_sbrk_r>
 80084fe:	1c43      	adds	r3, r0, #1
 8008500:	d123      	bne.n	800854a <_malloc_r+0x92>
 8008502:	230c      	movs	r3, #12
 8008504:	4630      	mov	r0, r6
 8008506:	6033      	str	r3, [r6, #0]
 8008508:	f003 f9fa 	bl	800b900 <__malloc_unlock>
 800850c:	e7e3      	b.n	80084d6 <_malloc_r+0x1e>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	1b5b      	subs	r3, r3, r5
 8008512:	d417      	bmi.n	8008544 <_malloc_r+0x8c>
 8008514:	2b0b      	cmp	r3, #11
 8008516:	d903      	bls.n	8008520 <_malloc_r+0x68>
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	441c      	add	r4, r3
 800851c:	6025      	str	r5, [r4, #0]
 800851e:	e004      	b.n	800852a <_malloc_r+0x72>
 8008520:	6863      	ldr	r3, [r4, #4]
 8008522:	42a2      	cmp	r2, r4
 8008524:	bf0c      	ite	eq
 8008526:	600b      	streq	r3, [r1, #0]
 8008528:	6053      	strne	r3, [r2, #4]
 800852a:	4630      	mov	r0, r6
 800852c:	f003 f9e8 	bl	800b900 <__malloc_unlock>
 8008530:	f104 000b 	add.w	r0, r4, #11
 8008534:	1d23      	adds	r3, r4, #4
 8008536:	f020 0007 	bic.w	r0, r0, #7
 800853a:	1ac2      	subs	r2, r0, r3
 800853c:	d0cc      	beq.n	80084d8 <_malloc_r+0x20>
 800853e:	1a1b      	subs	r3, r3, r0
 8008540:	50a3      	str	r3, [r4, r2]
 8008542:	e7c9      	b.n	80084d8 <_malloc_r+0x20>
 8008544:	4622      	mov	r2, r4
 8008546:	6864      	ldr	r4, [r4, #4]
 8008548:	e7cc      	b.n	80084e4 <_malloc_r+0x2c>
 800854a:	1cc4      	adds	r4, r0, #3
 800854c:	f024 0403 	bic.w	r4, r4, #3
 8008550:	42a0      	cmp	r0, r4
 8008552:	d0e3      	beq.n	800851c <_malloc_r+0x64>
 8008554:	1a21      	subs	r1, r4, r0
 8008556:	4630      	mov	r0, r6
 8008558:	f000 fee4 	bl	8009324 <_sbrk_r>
 800855c:	3001      	adds	r0, #1
 800855e:	d1dd      	bne.n	800851c <_malloc_r+0x64>
 8008560:	e7cf      	b.n	8008502 <_malloc_r+0x4a>
 8008562:	bf00      	nop
 8008564:	200036ec 	.word	0x200036ec
 8008568:	200036f0 	.word	0x200036f0

0800856c <__cvt>:
 800856c:	2b00      	cmp	r3, #0
 800856e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008572:	461f      	mov	r7, r3
 8008574:	bfbb      	ittet	lt
 8008576:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800857a:	461f      	movlt	r7, r3
 800857c:	2300      	movge	r3, #0
 800857e:	232d      	movlt	r3, #45	; 0x2d
 8008580:	b088      	sub	sp, #32
 8008582:	4614      	mov	r4, r2
 8008584:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008586:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008588:	7013      	strb	r3, [r2, #0]
 800858a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800858c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008590:	f023 0820 	bic.w	r8, r3, #32
 8008594:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008598:	d005      	beq.n	80085a6 <__cvt+0x3a>
 800859a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800859e:	d100      	bne.n	80085a2 <__cvt+0x36>
 80085a0:	3501      	adds	r5, #1
 80085a2:	2302      	movs	r3, #2
 80085a4:	e000      	b.n	80085a8 <__cvt+0x3c>
 80085a6:	2303      	movs	r3, #3
 80085a8:	aa07      	add	r2, sp, #28
 80085aa:	9204      	str	r2, [sp, #16]
 80085ac:	aa06      	add	r2, sp, #24
 80085ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80085b2:	e9cd 3500 	strd	r3, r5, [sp]
 80085b6:	4622      	mov	r2, r4
 80085b8:	463b      	mov	r3, r7
 80085ba:	f001 ff35 	bl	800a428 <_dtoa_r>
 80085be:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80085c2:	4606      	mov	r6, r0
 80085c4:	d102      	bne.n	80085cc <__cvt+0x60>
 80085c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085c8:	07db      	lsls	r3, r3, #31
 80085ca:	d522      	bpl.n	8008612 <__cvt+0xa6>
 80085cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085d0:	eb06 0905 	add.w	r9, r6, r5
 80085d4:	d110      	bne.n	80085f8 <__cvt+0x8c>
 80085d6:	7833      	ldrb	r3, [r6, #0]
 80085d8:	2b30      	cmp	r3, #48	; 0x30
 80085da:	d10a      	bne.n	80085f2 <__cvt+0x86>
 80085dc:	2200      	movs	r2, #0
 80085de:	2300      	movs	r3, #0
 80085e0:	4620      	mov	r0, r4
 80085e2:	4639      	mov	r1, r7
 80085e4:	f7f8 f9e0 	bl	80009a8 <__aeabi_dcmpeq>
 80085e8:	b918      	cbnz	r0, 80085f2 <__cvt+0x86>
 80085ea:	f1c5 0501 	rsb	r5, r5, #1
 80085ee:	f8ca 5000 	str.w	r5, [sl]
 80085f2:	f8da 3000 	ldr.w	r3, [sl]
 80085f6:	4499      	add	r9, r3
 80085f8:	2200      	movs	r2, #0
 80085fa:	2300      	movs	r3, #0
 80085fc:	4620      	mov	r0, r4
 80085fe:	4639      	mov	r1, r7
 8008600:	f7f8 f9d2 	bl	80009a8 <__aeabi_dcmpeq>
 8008604:	b108      	cbz	r0, 800860a <__cvt+0x9e>
 8008606:	f8cd 901c 	str.w	r9, [sp, #28]
 800860a:	2230      	movs	r2, #48	; 0x30
 800860c:	9b07      	ldr	r3, [sp, #28]
 800860e:	454b      	cmp	r3, r9
 8008610:	d307      	bcc.n	8008622 <__cvt+0xb6>
 8008612:	4630      	mov	r0, r6
 8008614:	9b07      	ldr	r3, [sp, #28]
 8008616:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008618:	1b9b      	subs	r3, r3, r6
 800861a:	6013      	str	r3, [r2, #0]
 800861c:	b008      	add	sp, #32
 800861e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008622:	1c59      	adds	r1, r3, #1
 8008624:	9107      	str	r1, [sp, #28]
 8008626:	701a      	strb	r2, [r3, #0]
 8008628:	e7f0      	b.n	800860c <__cvt+0xa0>

0800862a <__exponent>:
 800862a:	4603      	mov	r3, r0
 800862c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800862e:	2900      	cmp	r1, #0
 8008630:	f803 2b02 	strb.w	r2, [r3], #2
 8008634:	bfb6      	itet	lt
 8008636:	222d      	movlt	r2, #45	; 0x2d
 8008638:	222b      	movge	r2, #43	; 0x2b
 800863a:	4249      	neglt	r1, r1
 800863c:	2909      	cmp	r1, #9
 800863e:	7042      	strb	r2, [r0, #1]
 8008640:	dd2b      	ble.n	800869a <__exponent+0x70>
 8008642:	f10d 0407 	add.w	r4, sp, #7
 8008646:	46a4      	mov	ip, r4
 8008648:	270a      	movs	r7, #10
 800864a:	fb91 f6f7 	sdiv	r6, r1, r7
 800864e:	460a      	mov	r2, r1
 8008650:	46a6      	mov	lr, r4
 8008652:	fb07 1516 	mls	r5, r7, r6, r1
 8008656:	2a63      	cmp	r2, #99	; 0x63
 8008658:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800865c:	4631      	mov	r1, r6
 800865e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008662:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008666:	dcf0      	bgt.n	800864a <__exponent+0x20>
 8008668:	3130      	adds	r1, #48	; 0x30
 800866a:	f1ae 0502 	sub.w	r5, lr, #2
 800866e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008672:	4629      	mov	r1, r5
 8008674:	1c44      	adds	r4, r0, #1
 8008676:	4561      	cmp	r1, ip
 8008678:	d30a      	bcc.n	8008690 <__exponent+0x66>
 800867a:	f10d 0209 	add.w	r2, sp, #9
 800867e:	eba2 020e 	sub.w	r2, r2, lr
 8008682:	4565      	cmp	r5, ip
 8008684:	bf88      	it	hi
 8008686:	2200      	movhi	r2, #0
 8008688:	4413      	add	r3, r2
 800868a:	1a18      	subs	r0, r3, r0
 800868c:	b003      	add	sp, #12
 800868e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008690:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008694:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008698:	e7ed      	b.n	8008676 <__exponent+0x4c>
 800869a:	2330      	movs	r3, #48	; 0x30
 800869c:	3130      	adds	r1, #48	; 0x30
 800869e:	7083      	strb	r3, [r0, #2]
 80086a0:	70c1      	strb	r1, [r0, #3]
 80086a2:	1d03      	adds	r3, r0, #4
 80086a4:	e7f1      	b.n	800868a <__exponent+0x60>
	...

080086a8 <_printf_float>:
 80086a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	b091      	sub	sp, #68	; 0x44
 80086ae:	460c      	mov	r4, r1
 80086b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80086b4:	4616      	mov	r6, r2
 80086b6:	461f      	mov	r7, r3
 80086b8:	4605      	mov	r5, r0
 80086ba:	f003 f8dd 	bl	800b878 <_localeconv_r>
 80086be:	6803      	ldr	r3, [r0, #0]
 80086c0:	4618      	mov	r0, r3
 80086c2:	9309      	str	r3, [sp, #36]	; 0x24
 80086c4:	f7f7 fd44 	bl	8000150 <strlen>
 80086c8:	2300      	movs	r3, #0
 80086ca:	930e      	str	r3, [sp, #56]	; 0x38
 80086cc:	f8d8 3000 	ldr.w	r3, [r8]
 80086d0:	900a      	str	r0, [sp, #40]	; 0x28
 80086d2:	3307      	adds	r3, #7
 80086d4:	f023 0307 	bic.w	r3, r3, #7
 80086d8:	f103 0208 	add.w	r2, r3, #8
 80086dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80086e0:	f8d4 b000 	ldr.w	fp, [r4]
 80086e4:	f8c8 2000 	str.w	r2, [r8]
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086f0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80086f4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80086f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80086fa:	f04f 32ff 	mov.w	r2, #4294967295
 80086fe:	4640      	mov	r0, r8
 8008700:	4b9c      	ldr	r3, [pc, #624]	; (8008974 <_printf_float+0x2cc>)
 8008702:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008704:	f7f8 f982 	bl	8000a0c <__aeabi_dcmpun>
 8008708:	bb70      	cbnz	r0, 8008768 <_printf_float+0xc0>
 800870a:	f04f 32ff 	mov.w	r2, #4294967295
 800870e:	4640      	mov	r0, r8
 8008710:	4b98      	ldr	r3, [pc, #608]	; (8008974 <_printf_float+0x2cc>)
 8008712:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008714:	f7f8 f95c 	bl	80009d0 <__aeabi_dcmple>
 8008718:	bb30      	cbnz	r0, 8008768 <_printf_float+0xc0>
 800871a:	2200      	movs	r2, #0
 800871c:	2300      	movs	r3, #0
 800871e:	4640      	mov	r0, r8
 8008720:	4651      	mov	r1, sl
 8008722:	f7f8 f94b 	bl	80009bc <__aeabi_dcmplt>
 8008726:	b110      	cbz	r0, 800872e <_printf_float+0x86>
 8008728:	232d      	movs	r3, #45	; 0x2d
 800872a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800872e:	4b92      	ldr	r3, [pc, #584]	; (8008978 <_printf_float+0x2d0>)
 8008730:	4892      	ldr	r0, [pc, #584]	; (800897c <_printf_float+0x2d4>)
 8008732:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008736:	bf94      	ite	ls
 8008738:	4698      	movls	r8, r3
 800873a:	4680      	movhi	r8, r0
 800873c:	2303      	movs	r3, #3
 800873e:	f04f 0a00 	mov.w	sl, #0
 8008742:	6123      	str	r3, [r4, #16]
 8008744:	f02b 0304 	bic.w	r3, fp, #4
 8008748:	6023      	str	r3, [r4, #0]
 800874a:	4633      	mov	r3, r6
 800874c:	4621      	mov	r1, r4
 800874e:	4628      	mov	r0, r5
 8008750:	9700      	str	r7, [sp, #0]
 8008752:	aa0f      	add	r2, sp, #60	; 0x3c
 8008754:	f000 f9d4 	bl	8008b00 <_printf_common>
 8008758:	3001      	adds	r0, #1
 800875a:	f040 8090 	bne.w	800887e <_printf_float+0x1d6>
 800875e:	f04f 30ff 	mov.w	r0, #4294967295
 8008762:	b011      	add	sp, #68	; 0x44
 8008764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008768:	4642      	mov	r2, r8
 800876a:	4653      	mov	r3, sl
 800876c:	4640      	mov	r0, r8
 800876e:	4651      	mov	r1, sl
 8008770:	f7f8 f94c 	bl	8000a0c <__aeabi_dcmpun>
 8008774:	b148      	cbz	r0, 800878a <_printf_float+0xe2>
 8008776:	f1ba 0f00 	cmp.w	sl, #0
 800877a:	bfb8      	it	lt
 800877c:	232d      	movlt	r3, #45	; 0x2d
 800877e:	4880      	ldr	r0, [pc, #512]	; (8008980 <_printf_float+0x2d8>)
 8008780:	bfb8      	it	lt
 8008782:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008786:	4b7f      	ldr	r3, [pc, #508]	; (8008984 <_printf_float+0x2dc>)
 8008788:	e7d3      	b.n	8008732 <_printf_float+0x8a>
 800878a:	6863      	ldr	r3, [r4, #4]
 800878c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	d142      	bne.n	800881a <_printf_float+0x172>
 8008794:	2306      	movs	r3, #6
 8008796:	6063      	str	r3, [r4, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	9206      	str	r2, [sp, #24]
 800879c:	aa0e      	add	r2, sp, #56	; 0x38
 800879e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80087a2:	aa0d      	add	r2, sp, #52	; 0x34
 80087a4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80087a8:	9203      	str	r2, [sp, #12]
 80087aa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80087ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80087b2:	6023      	str	r3, [r4, #0]
 80087b4:	6863      	ldr	r3, [r4, #4]
 80087b6:	4642      	mov	r2, r8
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	4628      	mov	r0, r5
 80087bc:	4653      	mov	r3, sl
 80087be:	910b      	str	r1, [sp, #44]	; 0x2c
 80087c0:	f7ff fed4 	bl	800856c <__cvt>
 80087c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087c6:	4680      	mov	r8, r0
 80087c8:	2947      	cmp	r1, #71	; 0x47
 80087ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80087cc:	d108      	bne.n	80087e0 <_printf_float+0x138>
 80087ce:	1cc8      	adds	r0, r1, #3
 80087d0:	db02      	blt.n	80087d8 <_printf_float+0x130>
 80087d2:	6863      	ldr	r3, [r4, #4]
 80087d4:	4299      	cmp	r1, r3
 80087d6:	dd40      	ble.n	800885a <_printf_float+0x1b2>
 80087d8:	f1a9 0902 	sub.w	r9, r9, #2
 80087dc:	fa5f f989 	uxtb.w	r9, r9
 80087e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80087e4:	d81f      	bhi.n	8008826 <_printf_float+0x17e>
 80087e6:	464a      	mov	r2, r9
 80087e8:	3901      	subs	r1, #1
 80087ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087ee:	910d      	str	r1, [sp, #52]	; 0x34
 80087f0:	f7ff ff1b 	bl	800862a <__exponent>
 80087f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087f6:	4682      	mov	sl, r0
 80087f8:	1813      	adds	r3, r2, r0
 80087fa:	2a01      	cmp	r2, #1
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	dc02      	bgt.n	8008806 <_printf_float+0x15e>
 8008800:	6822      	ldr	r2, [r4, #0]
 8008802:	07d2      	lsls	r2, r2, #31
 8008804:	d501      	bpl.n	800880a <_printf_float+0x162>
 8008806:	3301      	adds	r3, #1
 8008808:	6123      	str	r3, [r4, #16]
 800880a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800880e:	2b00      	cmp	r3, #0
 8008810:	d09b      	beq.n	800874a <_printf_float+0xa2>
 8008812:	232d      	movs	r3, #45	; 0x2d
 8008814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008818:	e797      	b.n	800874a <_printf_float+0xa2>
 800881a:	2947      	cmp	r1, #71	; 0x47
 800881c:	d1bc      	bne.n	8008798 <_printf_float+0xf0>
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1ba      	bne.n	8008798 <_printf_float+0xf0>
 8008822:	2301      	movs	r3, #1
 8008824:	e7b7      	b.n	8008796 <_printf_float+0xee>
 8008826:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800882a:	d118      	bne.n	800885e <_printf_float+0x1b6>
 800882c:	2900      	cmp	r1, #0
 800882e:	6863      	ldr	r3, [r4, #4]
 8008830:	dd0b      	ble.n	800884a <_printf_float+0x1a2>
 8008832:	6121      	str	r1, [r4, #16]
 8008834:	b913      	cbnz	r3, 800883c <_printf_float+0x194>
 8008836:	6822      	ldr	r2, [r4, #0]
 8008838:	07d0      	lsls	r0, r2, #31
 800883a:	d502      	bpl.n	8008842 <_printf_float+0x19a>
 800883c:	3301      	adds	r3, #1
 800883e:	440b      	add	r3, r1
 8008840:	6123      	str	r3, [r4, #16]
 8008842:	f04f 0a00 	mov.w	sl, #0
 8008846:	65a1      	str	r1, [r4, #88]	; 0x58
 8008848:	e7df      	b.n	800880a <_printf_float+0x162>
 800884a:	b913      	cbnz	r3, 8008852 <_printf_float+0x1aa>
 800884c:	6822      	ldr	r2, [r4, #0]
 800884e:	07d2      	lsls	r2, r2, #31
 8008850:	d501      	bpl.n	8008856 <_printf_float+0x1ae>
 8008852:	3302      	adds	r3, #2
 8008854:	e7f4      	b.n	8008840 <_printf_float+0x198>
 8008856:	2301      	movs	r3, #1
 8008858:	e7f2      	b.n	8008840 <_printf_float+0x198>
 800885a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800885e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008860:	4299      	cmp	r1, r3
 8008862:	db05      	blt.n	8008870 <_printf_float+0x1c8>
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	6121      	str	r1, [r4, #16]
 8008868:	07d8      	lsls	r0, r3, #31
 800886a:	d5ea      	bpl.n	8008842 <_printf_float+0x19a>
 800886c:	1c4b      	adds	r3, r1, #1
 800886e:	e7e7      	b.n	8008840 <_printf_float+0x198>
 8008870:	2900      	cmp	r1, #0
 8008872:	bfcc      	ite	gt
 8008874:	2201      	movgt	r2, #1
 8008876:	f1c1 0202 	rsble	r2, r1, #2
 800887a:	4413      	add	r3, r2
 800887c:	e7e0      	b.n	8008840 <_printf_float+0x198>
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	055a      	lsls	r2, r3, #21
 8008882:	d407      	bmi.n	8008894 <_printf_float+0x1ec>
 8008884:	6923      	ldr	r3, [r4, #16]
 8008886:	4642      	mov	r2, r8
 8008888:	4631      	mov	r1, r6
 800888a:	4628      	mov	r0, r5
 800888c:	47b8      	blx	r7
 800888e:	3001      	adds	r0, #1
 8008890:	d12b      	bne.n	80088ea <_printf_float+0x242>
 8008892:	e764      	b.n	800875e <_printf_float+0xb6>
 8008894:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008898:	f240 80dd 	bls.w	8008a56 <_printf_float+0x3ae>
 800889c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088a0:	2200      	movs	r2, #0
 80088a2:	2300      	movs	r3, #0
 80088a4:	f7f8 f880 	bl	80009a8 <__aeabi_dcmpeq>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d033      	beq.n	8008914 <_printf_float+0x26c>
 80088ac:	2301      	movs	r3, #1
 80088ae:	4631      	mov	r1, r6
 80088b0:	4628      	mov	r0, r5
 80088b2:	4a35      	ldr	r2, [pc, #212]	; (8008988 <_printf_float+0x2e0>)
 80088b4:	47b8      	blx	r7
 80088b6:	3001      	adds	r0, #1
 80088b8:	f43f af51 	beq.w	800875e <_printf_float+0xb6>
 80088bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80088c0:	429a      	cmp	r2, r3
 80088c2:	db02      	blt.n	80088ca <_printf_float+0x222>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	07d8      	lsls	r0, r3, #31
 80088c8:	d50f      	bpl.n	80088ea <_printf_float+0x242>
 80088ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	f43f af42 	beq.w	800875e <_printf_float+0xb6>
 80088da:	f04f 0800 	mov.w	r8, #0
 80088de:	f104 091a 	add.w	r9, r4, #26
 80088e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088e4:	3b01      	subs	r3, #1
 80088e6:	4543      	cmp	r3, r8
 80088e8:	dc09      	bgt.n	80088fe <_printf_float+0x256>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	079b      	lsls	r3, r3, #30
 80088ee:	f100 8102 	bmi.w	8008af6 <_printf_float+0x44e>
 80088f2:	68e0      	ldr	r0, [r4, #12]
 80088f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088f6:	4298      	cmp	r0, r3
 80088f8:	bfb8      	it	lt
 80088fa:	4618      	movlt	r0, r3
 80088fc:	e731      	b.n	8008762 <_printf_float+0xba>
 80088fe:	2301      	movs	r3, #1
 8008900:	464a      	mov	r2, r9
 8008902:	4631      	mov	r1, r6
 8008904:	4628      	mov	r0, r5
 8008906:	47b8      	blx	r7
 8008908:	3001      	adds	r0, #1
 800890a:	f43f af28 	beq.w	800875e <_printf_float+0xb6>
 800890e:	f108 0801 	add.w	r8, r8, #1
 8008912:	e7e6      	b.n	80088e2 <_printf_float+0x23a>
 8008914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008916:	2b00      	cmp	r3, #0
 8008918:	dc38      	bgt.n	800898c <_printf_float+0x2e4>
 800891a:	2301      	movs	r3, #1
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	4a19      	ldr	r2, [pc, #100]	; (8008988 <_printf_float+0x2e0>)
 8008922:	47b8      	blx	r7
 8008924:	3001      	adds	r0, #1
 8008926:	f43f af1a 	beq.w	800875e <_printf_float+0xb6>
 800892a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800892e:	4313      	orrs	r3, r2
 8008930:	d102      	bne.n	8008938 <_printf_float+0x290>
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	07d9      	lsls	r1, r3, #31
 8008936:	d5d8      	bpl.n	80088ea <_printf_float+0x242>
 8008938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800893c:	4631      	mov	r1, r6
 800893e:	4628      	mov	r0, r5
 8008940:	47b8      	blx	r7
 8008942:	3001      	adds	r0, #1
 8008944:	f43f af0b 	beq.w	800875e <_printf_float+0xb6>
 8008948:	f04f 0900 	mov.w	r9, #0
 800894c:	f104 0a1a 	add.w	sl, r4, #26
 8008950:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008952:	425b      	negs	r3, r3
 8008954:	454b      	cmp	r3, r9
 8008956:	dc01      	bgt.n	800895c <_printf_float+0x2b4>
 8008958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800895a:	e794      	b.n	8008886 <_printf_float+0x1de>
 800895c:	2301      	movs	r3, #1
 800895e:	4652      	mov	r2, sl
 8008960:	4631      	mov	r1, r6
 8008962:	4628      	mov	r0, r5
 8008964:	47b8      	blx	r7
 8008966:	3001      	adds	r0, #1
 8008968:	f43f aef9 	beq.w	800875e <_printf_float+0xb6>
 800896c:	f109 0901 	add.w	r9, r9, #1
 8008970:	e7ee      	b.n	8008950 <_printf_float+0x2a8>
 8008972:	bf00      	nop
 8008974:	7fefffff 	.word	0x7fefffff
 8008978:	0800cf6c 	.word	0x0800cf6c
 800897c:	0800cf70 	.word	0x0800cf70
 8008980:	0800cf78 	.word	0x0800cf78
 8008984:	0800cf74 	.word	0x0800cf74
 8008988:	0800cf7c 	.word	0x0800cf7c
 800898c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800898e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008990:	429a      	cmp	r2, r3
 8008992:	bfa8      	it	ge
 8008994:	461a      	movge	r2, r3
 8008996:	2a00      	cmp	r2, #0
 8008998:	4691      	mov	r9, r2
 800899a:	dc37      	bgt.n	8008a0c <_printf_float+0x364>
 800899c:	f04f 0b00 	mov.w	fp, #0
 80089a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089a4:	f104 021a 	add.w	r2, r4, #26
 80089a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80089ac:	ebaa 0309 	sub.w	r3, sl, r9
 80089b0:	455b      	cmp	r3, fp
 80089b2:	dc33      	bgt.n	8008a1c <_printf_float+0x374>
 80089b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80089b8:	429a      	cmp	r2, r3
 80089ba:	db3b      	blt.n	8008a34 <_printf_float+0x38c>
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	07da      	lsls	r2, r3, #31
 80089c0:	d438      	bmi.n	8008a34 <_printf_float+0x38c>
 80089c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80089c6:	eba2 030a 	sub.w	r3, r2, sl
 80089ca:	eba2 0901 	sub.w	r9, r2, r1
 80089ce:	4599      	cmp	r9, r3
 80089d0:	bfa8      	it	ge
 80089d2:	4699      	movge	r9, r3
 80089d4:	f1b9 0f00 	cmp.w	r9, #0
 80089d8:	dc34      	bgt.n	8008a44 <_printf_float+0x39c>
 80089da:	f04f 0800 	mov.w	r8, #0
 80089de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089e2:	f104 0a1a 	add.w	sl, r4, #26
 80089e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80089ea:	1a9b      	subs	r3, r3, r2
 80089ec:	eba3 0309 	sub.w	r3, r3, r9
 80089f0:	4543      	cmp	r3, r8
 80089f2:	f77f af7a 	ble.w	80088ea <_printf_float+0x242>
 80089f6:	2301      	movs	r3, #1
 80089f8:	4652      	mov	r2, sl
 80089fa:	4631      	mov	r1, r6
 80089fc:	4628      	mov	r0, r5
 80089fe:	47b8      	blx	r7
 8008a00:	3001      	adds	r0, #1
 8008a02:	f43f aeac 	beq.w	800875e <_printf_float+0xb6>
 8008a06:	f108 0801 	add.w	r8, r8, #1
 8008a0a:	e7ec      	b.n	80089e6 <_printf_float+0x33e>
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	4631      	mov	r1, r6
 8008a10:	4642      	mov	r2, r8
 8008a12:	4628      	mov	r0, r5
 8008a14:	47b8      	blx	r7
 8008a16:	3001      	adds	r0, #1
 8008a18:	d1c0      	bne.n	800899c <_printf_float+0x2f4>
 8008a1a:	e6a0      	b.n	800875e <_printf_float+0xb6>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	4631      	mov	r1, r6
 8008a20:	4628      	mov	r0, r5
 8008a22:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	f43f ae99 	beq.w	800875e <_printf_float+0xb6>
 8008a2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a2e:	f10b 0b01 	add.w	fp, fp, #1
 8008a32:	e7b9      	b.n	80089a8 <_printf_float+0x300>
 8008a34:	4631      	mov	r1, r6
 8008a36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	3001      	adds	r0, #1
 8008a40:	d1bf      	bne.n	80089c2 <_printf_float+0x31a>
 8008a42:	e68c      	b.n	800875e <_printf_float+0xb6>
 8008a44:	464b      	mov	r3, r9
 8008a46:	4631      	mov	r1, r6
 8008a48:	4628      	mov	r0, r5
 8008a4a:	eb08 020a 	add.w	r2, r8, sl
 8008a4e:	47b8      	blx	r7
 8008a50:	3001      	adds	r0, #1
 8008a52:	d1c2      	bne.n	80089da <_printf_float+0x332>
 8008a54:	e683      	b.n	800875e <_printf_float+0xb6>
 8008a56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a58:	2a01      	cmp	r2, #1
 8008a5a:	dc01      	bgt.n	8008a60 <_printf_float+0x3b8>
 8008a5c:	07db      	lsls	r3, r3, #31
 8008a5e:	d537      	bpl.n	8008ad0 <_printf_float+0x428>
 8008a60:	2301      	movs	r3, #1
 8008a62:	4642      	mov	r2, r8
 8008a64:	4631      	mov	r1, r6
 8008a66:	4628      	mov	r0, r5
 8008a68:	47b8      	blx	r7
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	f43f ae77 	beq.w	800875e <_printf_float+0xb6>
 8008a70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a74:	4631      	mov	r1, r6
 8008a76:	4628      	mov	r0, r5
 8008a78:	47b8      	blx	r7
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	f43f ae6f 	beq.w	800875e <_printf_float+0xb6>
 8008a80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a84:	2200      	movs	r2, #0
 8008a86:	2300      	movs	r3, #0
 8008a88:	f7f7 ff8e 	bl	80009a8 <__aeabi_dcmpeq>
 8008a8c:	b9d8      	cbnz	r0, 8008ac6 <_printf_float+0x41e>
 8008a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a90:	f108 0201 	add.w	r2, r8, #1
 8008a94:	3b01      	subs	r3, #1
 8008a96:	4631      	mov	r1, r6
 8008a98:	4628      	mov	r0, r5
 8008a9a:	47b8      	blx	r7
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d10e      	bne.n	8008abe <_printf_float+0x416>
 8008aa0:	e65d      	b.n	800875e <_printf_float+0xb6>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	464a      	mov	r2, r9
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	47b8      	blx	r7
 8008aac:	3001      	adds	r0, #1
 8008aae:	f43f ae56 	beq.w	800875e <_printf_float+0xb6>
 8008ab2:	f108 0801 	add.w	r8, r8, #1
 8008ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	4543      	cmp	r3, r8
 8008abc:	dcf1      	bgt.n	8008aa2 <_printf_float+0x3fa>
 8008abe:	4653      	mov	r3, sl
 8008ac0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ac4:	e6e0      	b.n	8008888 <_printf_float+0x1e0>
 8008ac6:	f04f 0800 	mov.w	r8, #0
 8008aca:	f104 091a 	add.w	r9, r4, #26
 8008ace:	e7f2      	b.n	8008ab6 <_printf_float+0x40e>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	4642      	mov	r2, r8
 8008ad4:	e7df      	b.n	8008a96 <_printf_float+0x3ee>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	464a      	mov	r2, r9
 8008ada:	4631      	mov	r1, r6
 8008adc:	4628      	mov	r0, r5
 8008ade:	47b8      	blx	r7
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	f43f ae3c 	beq.w	800875e <_printf_float+0xb6>
 8008ae6:	f108 0801 	add.w	r8, r8, #1
 8008aea:	68e3      	ldr	r3, [r4, #12]
 8008aec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008aee:	1a5b      	subs	r3, r3, r1
 8008af0:	4543      	cmp	r3, r8
 8008af2:	dcf0      	bgt.n	8008ad6 <_printf_float+0x42e>
 8008af4:	e6fd      	b.n	80088f2 <_printf_float+0x24a>
 8008af6:	f04f 0800 	mov.w	r8, #0
 8008afa:	f104 0919 	add.w	r9, r4, #25
 8008afe:	e7f4      	b.n	8008aea <_printf_float+0x442>

08008b00 <_printf_common>:
 8008b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b04:	4616      	mov	r6, r2
 8008b06:	4699      	mov	r9, r3
 8008b08:	688a      	ldr	r2, [r1, #8]
 8008b0a:	690b      	ldr	r3, [r1, #16]
 8008b0c:	4607      	mov	r7, r0
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	bfb8      	it	lt
 8008b12:	4613      	movlt	r3, r2
 8008b14:	6033      	str	r3, [r6, #0]
 8008b16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b20:	b10a      	cbz	r2, 8008b26 <_printf_common+0x26>
 8008b22:	3301      	adds	r3, #1
 8008b24:	6033      	str	r3, [r6, #0]
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	0699      	lsls	r1, r3, #26
 8008b2a:	bf42      	ittt	mi
 8008b2c:	6833      	ldrmi	r3, [r6, #0]
 8008b2e:	3302      	addmi	r3, #2
 8008b30:	6033      	strmi	r3, [r6, #0]
 8008b32:	6825      	ldr	r5, [r4, #0]
 8008b34:	f015 0506 	ands.w	r5, r5, #6
 8008b38:	d106      	bne.n	8008b48 <_printf_common+0x48>
 8008b3a:	f104 0a19 	add.w	sl, r4, #25
 8008b3e:	68e3      	ldr	r3, [r4, #12]
 8008b40:	6832      	ldr	r2, [r6, #0]
 8008b42:	1a9b      	subs	r3, r3, r2
 8008b44:	42ab      	cmp	r3, r5
 8008b46:	dc28      	bgt.n	8008b9a <_printf_common+0x9a>
 8008b48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b4c:	1e13      	subs	r3, r2, #0
 8008b4e:	6822      	ldr	r2, [r4, #0]
 8008b50:	bf18      	it	ne
 8008b52:	2301      	movne	r3, #1
 8008b54:	0692      	lsls	r2, r2, #26
 8008b56:	d42d      	bmi.n	8008bb4 <_printf_common+0xb4>
 8008b58:	4649      	mov	r1, r9
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b60:	47c0      	blx	r8
 8008b62:	3001      	adds	r0, #1
 8008b64:	d020      	beq.n	8008ba8 <_printf_common+0xa8>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	68e5      	ldr	r5, [r4, #12]
 8008b6a:	f003 0306 	and.w	r3, r3, #6
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	bf18      	it	ne
 8008b72:	2500      	movne	r5, #0
 8008b74:	6832      	ldr	r2, [r6, #0]
 8008b76:	f04f 0600 	mov.w	r6, #0
 8008b7a:	68a3      	ldr	r3, [r4, #8]
 8008b7c:	bf08      	it	eq
 8008b7e:	1aad      	subeq	r5, r5, r2
 8008b80:	6922      	ldr	r2, [r4, #16]
 8008b82:	bf08      	it	eq
 8008b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	bfc4      	itt	gt
 8008b8c:	1a9b      	subgt	r3, r3, r2
 8008b8e:	18ed      	addgt	r5, r5, r3
 8008b90:	341a      	adds	r4, #26
 8008b92:	42b5      	cmp	r5, r6
 8008b94:	d11a      	bne.n	8008bcc <_printf_common+0xcc>
 8008b96:	2000      	movs	r0, #0
 8008b98:	e008      	b.n	8008bac <_printf_common+0xac>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	4652      	mov	r2, sl
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	47c0      	blx	r8
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d103      	bne.n	8008bb0 <_printf_common+0xb0>
 8008ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb0:	3501      	adds	r5, #1
 8008bb2:	e7c4      	b.n	8008b3e <_printf_common+0x3e>
 8008bb4:	2030      	movs	r0, #48	; 0x30
 8008bb6:	18e1      	adds	r1, r4, r3
 8008bb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bc2:	4422      	add	r2, r4
 8008bc4:	3302      	adds	r3, #2
 8008bc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bca:	e7c5      	b.n	8008b58 <_printf_common+0x58>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	4622      	mov	r2, r4
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	47c0      	blx	r8
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	d0e6      	beq.n	8008ba8 <_printf_common+0xa8>
 8008bda:	3601      	adds	r6, #1
 8008bdc:	e7d9      	b.n	8008b92 <_printf_common+0x92>
	...

08008be0 <_printf_i>:
 8008be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008be4:	460c      	mov	r4, r1
 8008be6:	7e27      	ldrb	r7, [r4, #24]
 8008be8:	4691      	mov	r9, r2
 8008bea:	2f78      	cmp	r7, #120	; 0x78
 8008bec:	4680      	mov	r8, r0
 8008bee:	469a      	mov	sl, r3
 8008bf0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008bf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bf6:	d807      	bhi.n	8008c08 <_printf_i+0x28>
 8008bf8:	2f62      	cmp	r7, #98	; 0x62
 8008bfa:	d80a      	bhi.n	8008c12 <_printf_i+0x32>
 8008bfc:	2f00      	cmp	r7, #0
 8008bfe:	f000 80d9 	beq.w	8008db4 <_printf_i+0x1d4>
 8008c02:	2f58      	cmp	r7, #88	; 0x58
 8008c04:	f000 80a4 	beq.w	8008d50 <_printf_i+0x170>
 8008c08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c10:	e03a      	b.n	8008c88 <_printf_i+0xa8>
 8008c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c16:	2b15      	cmp	r3, #21
 8008c18:	d8f6      	bhi.n	8008c08 <_printf_i+0x28>
 8008c1a:	a001      	add	r0, pc, #4	; (adr r0, 8008c20 <_printf_i+0x40>)
 8008c1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c20:	08008c79 	.word	0x08008c79
 8008c24:	08008c8d 	.word	0x08008c8d
 8008c28:	08008c09 	.word	0x08008c09
 8008c2c:	08008c09 	.word	0x08008c09
 8008c30:	08008c09 	.word	0x08008c09
 8008c34:	08008c09 	.word	0x08008c09
 8008c38:	08008c8d 	.word	0x08008c8d
 8008c3c:	08008c09 	.word	0x08008c09
 8008c40:	08008c09 	.word	0x08008c09
 8008c44:	08008c09 	.word	0x08008c09
 8008c48:	08008c09 	.word	0x08008c09
 8008c4c:	08008d9b 	.word	0x08008d9b
 8008c50:	08008cbd 	.word	0x08008cbd
 8008c54:	08008d7d 	.word	0x08008d7d
 8008c58:	08008c09 	.word	0x08008c09
 8008c5c:	08008c09 	.word	0x08008c09
 8008c60:	08008dbd 	.word	0x08008dbd
 8008c64:	08008c09 	.word	0x08008c09
 8008c68:	08008cbd 	.word	0x08008cbd
 8008c6c:	08008c09 	.word	0x08008c09
 8008c70:	08008c09 	.word	0x08008c09
 8008c74:	08008d85 	.word	0x08008d85
 8008c78:	680b      	ldr	r3, [r1, #0]
 8008c7a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c7e:	1d1a      	adds	r2, r3, #4
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	600a      	str	r2, [r1, #0]
 8008c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e0a4      	b.n	8008dd6 <_printf_i+0x1f6>
 8008c8c:	6825      	ldr	r5, [r4, #0]
 8008c8e:	6808      	ldr	r0, [r1, #0]
 8008c90:	062e      	lsls	r6, r5, #24
 8008c92:	f100 0304 	add.w	r3, r0, #4
 8008c96:	d50a      	bpl.n	8008cae <_printf_i+0xce>
 8008c98:	6805      	ldr	r5, [r0, #0]
 8008c9a:	600b      	str	r3, [r1, #0]
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	da03      	bge.n	8008ca8 <_printf_i+0xc8>
 8008ca0:	232d      	movs	r3, #45	; 0x2d
 8008ca2:	426d      	negs	r5, r5
 8008ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ca8:	230a      	movs	r3, #10
 8008caa:	485e      	ldr	r0, [pc, #376]	; (8008e24 <_printf_i+0x244>)
 8008cac:	e019      	b.n	8008ce2 <_printf_i+0x102>
 8008cae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008cb2:	6805      	ldr	r5, [r0, #0]
 8008cb4:	600b      	str	r3, [r1, #0]
 8008cb6:	bf18      	it	ne
 8008cb8:	b22d      	sxthne	r5, r5
 8008cba:	e7ef      	b.n	8008c9c <_printf_i+0xbc>
 8008cbc:	680b      	ldr	r3, [r1, #0]
 8008cbe:	6825      	ldr	r5, [r4, #0]
 8008cc0:	1d18      	adds	r0, r3, #4
 8008cc2:	6008      	str	r0, [r1, #0]
 8008cc4:	0628      	lsls	r0, r5, #24
 8008cc6:	d501      	bpl.n	8008ccc <_printf_i+0xec>
 8008cc8:	681d      	ldr	r5, [r3, #0]
 8008cca:	e002      	b.n	8008cd2 <_printf_i+0xf2>
 8008ccc:	0669      	lsls	r1, r5, #25
 8008cce:	d5fb      	bpl.n	8008cc8 <_printf_i+0xe8>
 8008cd0:	881d      	ldrh	r5, [r3, #0]
 8008cd2:	2f6f      	cmp	r7, #111	; 0x6f
 8008cd4:	bf0c      	ite	eq
 8008cd6:	2308      	moveq	r3, #8
 8008cd8:	230a      	movne	r3, #10
 8008cda:	4852      	ldr	r0, [pc, #328]	; (8008e24 <_printf_i+0x244>)
 8008cdc:	2100      	movs	r1, #0
 8008cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ce2:	6866      	ldr	r6, [r4, #4]
 8008ce4:	2e00      	cmp	r6, #0
 8008ce6:	bfa8      	it	ge
 8008ce8:	6821      	ldrge	r1, [r4, #0]
 8008cea:	60a6      	str	r6, [r4, #8]
 8008cec:	bfa4      	itt	ge
 8008cee:	f021 0104 	bicge.w	r1, r1, #4
 8008cf2:	6021      	strge	r1, [r4, #0]
 8008cf4:	b90d      	cbnz	r5, 8008cfa <_printf_i+0x11a>
 8008cf6:	2e00      	cmp	r6, #0
 8008cf8:	d04d      	beq.n	8008d96 <_printf_i+0x1b6>
 8008cfa:	4616      	mov	r6, r2
 8008cfc:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d00:	fb03 5711 	mls	r7, r3, r1, r5
 8008d04:	5dc7      	ldrb	r7, [r0, r7]
 8008d06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d0a:	462f      	mov	r7, r5
 8008d0c:	42bb      	cmp	r3, r7
 8008d0e:	460d      	mov	r5, r1
 8008d10:	d9f4      	bls.n	8008cfc <_printf_i+0x11c>
 8008d12:	2b08      	cmp	r3, #8
 8008d14:	d10b      	bne.n	8008d2e <_printf_i+0x14e>
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	07df      	lsls	r7, r3, #31
 8008d1a:	d508      	bpl.n	8008d2e <_printf_i+0x14e>
 8008d1c:	6923      	ldr	r3, [r4, #16]
 8008d1e:	6861      	ldr	r1, [r4, #4]
 8008d20:	4299      	cmp	r1, r3
 8008d22:	bfde      	ittt	le
 8008d24:	2330      	movle	r3, #48	; 0x30
 8008d26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d2e:	1b92      	subs	r2, r2, r6
 8008d30:	6122      	str	r2, [r4, #16]
 8008d32:	464b      	mov	r3, r9
 8008d34:	4621      	mov	r1, r4
 8008d36:	4640      	mov	r0, r8
 8008d38:	f8cd a000 	str.w	sl, [sp]
 8008d3c:	aa03      	add	r2, sp, #12
 8008d3e:	f7ff fedf 	bl	8008b00 <_printf_common>
 8008d42:	3001      	adds	r0, #1
 8008d44:	d14c      	bne.n	8008de0 <_printf_i+0x200>
 8008d46:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4a:	b004      	add	sp, #16
 8008d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d50:	4834      	ldr	r0, [pc, #208]	; (8008e24 <_printf_i+0x244>)
 8008d52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d56:	680e      	ldr	r6, [r1, #0]
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8008d5e:	061f      	lsls	r7, r3, #24
 8008d60:	600e      	str	r6, [r1, #0]
 8008d62:	d514      	bpl.n	8008d8e <_printf_i+0x1ae>
 8008d64:	07d9      	lsls	r1, r3, #31
 8008d66:	bf44      	itt	mi
 8008d68:	f043 0320 	orrmi.w	r3, r3, #32
 8008d6c:	6023      	strmi	r3, [r4, #0]
 8008d6e:	b91d      	cbnz	r5, 8008d78 <_printf_i+0x198>
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	f023 0320 	bic.w	r3, r3, #32
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	2310      	movs	r3, #16
 8008d7a:	e7af      	b.n	8008cdc <_printf_i+0xfc>
 8008d7c:	6823      	ldr	r3, [r4, #0]
 8008d7e:	f043 0320 	orr.w	r3, r3, #32
 8008d82:	6023      	str	r3, [r4, #0]
 8008d84:	2378      	movs	r3, #120	; 0x78
 8008d86:	4828      	ldr	r0, [pc, #160]	; (8008e28 <_printf_i+0x248>)
 8008d88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d8c:	e7e3      	b.n	8008d56 <_printf_i+0x176>
 8008d8e:	065e      	lsls	r6, r3, #25
 8008d90:	bf48      	it	mi
 8008d92:	b2ad      	uxthmi	r5, r5
 8008d94:	e7e6      	b.n	8008d64 <_printf_i+0x184>
 8008d96:	4616      	mov	r6, r2
 8008d98:	e7bb      	b.n	8008d12 <_printf_i+0x132>
 8008d9a:	680b      	ldr	r3, [r1, #0]
 8008d9c:	6826      	ldr	r6, [r4, #0]
 8008d9e:	1d1d      	adds	r5, r3, #4
 8008da0:	6960      	ldr	r0, [r4, #20]
 8008da2:	600d      	str	r5, [r1, #0]
 8008da4:	0635      	lsls	r5, r6, #24
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	d501      	bpl.n	8008dae <_printf_i+0x1ce>
 8008daa:	6018      	str	r0, [r3, #0]
 8008dac:	e002      	b.n	8008db4 <_printf_i+0x1d4>
 8008dae:	0671      	lsls	r1, r6, #25
 8008db0:	d5fb      	bpl.n	8008daa <_printf_i+0x1ca>
 8008db2:	8018      	strh	r0, [r3, #0]
 8008db4:	2300      	movs	r3, #0
 8008db6:	4616      	mov	r6, r2
 8008db8:	6123      	str	r3, [r4, #16]
 8008dba:	e7ba      	b.n	8008d32 <_printf_i+0x152>
 8008dbc:	680b      	ldr	r3, [r1, #0]
 8008dbe:	1d1a      	adds	r2, r3, #4
 8008dc0:	600a      	str	r2, [r1, #0]
 8008dc2:	681e      	ldr	r6, [r3, #0]
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	6862      	ldr	r2, [r4, #4]
 8008dca:	f002 fd85 	bl	800b8d8 <memchr>
 8008dce:	b108      	cbz	r0, 8008dd4 <_printf_i+0x1f4>
 8008dd0:	1b80      	subs	r0, r0, r6
 8008dd2:	6060      	str	r0, [r4, #4]
 8008dd4:	6863      	ldr	r3, [r4, #4]
 8008dd6:	6123      	str	r3, [r4, #16]
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dde:	e7a8      	b.n	8008d32 <_printf_i+0x152>
 8008de0:	4632      	mov	r2, r6
 8008de2:	4649      	mov	r1, r9
 8008de4:	4640      	mov	r0, r8
 8008de6:	6923      	ldr	r3, [r4, #16]
 8008de8:	47d0      	blx	sl
 8008dea:	3001      	adds	r0, #1
 8008dec:	d0ab      	beq.n	8008d46 <_printf_i+0x166>
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	079b      	lsls	r3, r3, #30
 8008df2:	d413      	bmi.n	8008e1c <_printf_i+0x23c>
 8008df4:	68e0      	ldr	r0, [r4, #12]
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	4298      	cmp	r0, r3
 8008dfa:	bfb8      	it	lt
 8008dfc:	4618      	movlt	r0, r3
 8008dfe:	e7a4      	b.n	8008d4a <_printf_i+0x16a>
 8008e00:	2301      	movs	r3, #1
 8008e02:	4632      	mov	r2, r6
 8008e04:	4649      	mov	r1, r9
 8008e06:	4640      	mov	r0, r8
 8008e08:	47d0      	blx	sl
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	d09b      	beq.n	8008d46 <_printf_i+0x166>
 8008e0e:	3501      	adds	r5, #1
 8008e10:	68e3      	ldr	r3, [r4, #12]
 8008e12:	9903      	ldr	r1, [sp, #12]
 8008e14:	1a5b      	subs	r3, r3, r1
 8008e16:	42ab      	cmp	r3, r5
 8008e18:	dcf2      	bgt.n	8008e00 <_printf_i+0x220>
 8008e1a:	e7eb      	b.n	8008df4 <_printf_i+0x214>
 8008e1c:	2500      	movs	r5, #0
 8008e1e:	f104 0619 	add.w	r6, r4, #25
 8008e22:	e7f5      	b.n	8008e10 <_printf_i+0x230>
 8008e24:	0800cf7e 	.word	0x0800cf7e
 8008e28:	0800cf8f 	.word	0x0800cf8f

08008e2c <_scanf_float>:
 8008e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e30:	b087      	sub	sp, #28
 8008e32:	9303      	str	r3, [sp, #12]
 8008e34:	688b      	ldr	r3, [r1, #8]
 8008e36:	4617      	mov	r7, r2
 8008e38:	1e5a      	subs	r2, r3, #1
 8008e3a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e3e:	bf85      	ittet	hi
 8008e40:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e44:	195b      	addhi	r3, r3, r5
 8008e46:	2300      	movls	r3, #0
 8008e48:	9302      	strhi	r3, [sp, #8]
 8008e4a:	bf88      	it	hi
 8008e4c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e50:	468b      	mov	fp, r1
 8008e52:	f04f 0500 	mov.w	r5, #0
 8008e56:	bf8c      	ite	hi
 8008e58:	608b      	strhi	r3, [r1, #8]
 8008e5a:	9302      	strls	r3, [sp, #8]
 8008e5c:	680b      	ldr	r3, [r1, #0]
 8008e5e:	4680      	mov	r8, r0
 8008e60:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e64:	f84b 3b1c 	str.w	r3, [fp], #28
 8008e68:	460c      	mov	r4, r1
 8008e6a:	465e      	mov	r6, fp
 8008e6c:	46aa      	mov	sl, r5
 8008e6e:	46a9      	mov	r9, r5
 8008e70:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e74:	9501      	str	r5, [sp, #4]
 8008e76:	68a2      	ldr	r2, [r4, #8]
 8008e78:	b152      	cbz	r2, 8008e90 <_scanf_float+0x64>
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2b4e      	cmp	r3, #78	; 0x4e
 8008e80:	d864      	bhi.n	8008f4c <_scanf_float+0x120>
 8008e82:	2b40      	cmp	r3, #64	; 0x40
 8008e84:	d83c      	bhi.n	8008f00 <_scanf_float+0xd4>
 8008e86:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e8a:	b2c8      	uxtb	r0, r1
 8008e8c:	280e      	cmp	r0, #14
 8008e8e:	d93a      	bls.n	8008f06 <_scanf_float+0xda>
 8008e90:	f1b9 0f00 	cmp.w	r9, #0
 8008e94:	d003      	beq.n	8008e9e <_scanf_float+0x72>
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ea2:	f1ba 0f01 	cmp.w	sl, #1
 8008ea6:	f200 8113 	bhi.w	80090d0 <_scanf_float+0x2a4>
 8008eaa:	455e      	cmp	r6, fp
 8008eac:	f200 8105 	bhi.w	80090ba <_scanf_float+0x28e>
 8008eb0:	2501      	movs	r5, #1
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	b007      	add	sp, #28
 8008eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008ebe:	2a0d      	cmp	r2, #13
 8008ec0:	d8e6      	bhi.n	8008e90 <_scanf_float+0x64>
 8008ec2:	a101      	add	r1, pc, #4	; (adr r1, 8008ec8 <_scanf_float+0x9c>)
 8008ec4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ec8:	08009007 	.word	0x08009007
 8008ecc:	08008e91 	.word	0x08008e91
 8008ed0:	08008e91 	.word	0x08008e91
 8008ed4:	08008e91 	.word	0x08008e91
 8008ed8:	08009067 	.word	0x08009067
 8008edc:	0800903f 	.word	0x0800903f
 8008ee0:	08008e91 	.word	0x08008e91
 8008ee4:	08008e91 	.word	0x08008e91
 8008ee8:	08009015 	.word	0x08009015
 8008eec:	08008e91 	.word	0x08008e91
 8008ef0:	08008e91 	.word	0x08008e91
 8008ef4:	08008e91 	.word	0x08008e91
 8008ef8:	08008e91 	.word	0x08008e91
 8008efc:	08008fcd 	.word	0x08008fcd
 8008f00:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008f04:	e7db      	b.n	8008ebe <_scanf_float+0x92>
 8008f06:	290e      	cmp	r1, #14
 8008f08:	d8c2      	bhi.n	8008e90 <_scanf_float+0x64>
 8008f0a:	a001      	add	r0, pc, #4	; (adr r0, 8008f10 <_scanf_float+0xe4>)
 8008f0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008f10:	08008fbf 	.word	0x08008fbf
 8008f14:	08008e91 	.word	0x08008e91
 8008f18:	08008fbf 	.word	0x08008fbf
 8008f1c:	08009053 	.word	0x08009053
 8008f20:	08008e91 	.word	0x08008e91
 8008f24:	08008f6d 	.word	0x08008f6d
 8008f28:	08008fa9 	.word	0x08008fa9
 8008f2c:	08008fa9 	.word	0x08008fa9
 8008f30:	08008fa9 	.word	0x08008fa9
 8008f34:	08008fa9 	.word	0x08008fa9
 8008f38:	08008fa9 	.word	0x08008fa9
 8008f3c:	08008fa9 	.word	0x08008fa9
 8008f40:	08008fa9 	.word	0x08008fa9
 8008f44:	08008fa9 	.word	0x08008fa9
 8008f48:	08008fa9 	.word	0x08008fa9
 8008f4c:	2b6e      	cmp	r3, #110	; 0x6e
 8008f4e:	d809      	bhi.n	8008f64 <_scanf_float+0x138>
 8008f50:	2b60      	cmp	r3, #96	; 0x60
 8008f52:	d8b2      	bhi.n	8008eba <_scanf_float+0x8e>
 8008f54:	2b54      	cmp	r3, #84	; 0x54
 8008f56:	d077      	beq.n	8009048 <_scanf_float+0x21c>
 8008f58:	2b59      	cmp	r3, #89	; 0x59
 8008f5a:	d199      	bne.n	8008e90 <_scanf_float+0x64>
 8008f5c:	2d07      	cmp	r5, #7
 8008f5e:	d197      	bne.n	8008e90 <_scanf_float+0x64>
 8008f60:	2508      	movs	r5, #8
 8008f62:	e029      	b.n	8008fb8 <_scanf_float+0x18c>
 8008f64:	2b74      	cmp	r3, #116	; 0x74
 8008f66:	d06f      	beq.n	8009048 <_scanf_float+0x21c>
 8008f68:	2b79      	cmp	r3, #121	; 0x79
 8008f6a:	e7f6      	b.n	8008f5a <_scanf_float+0x12e>
 8008f6c:	6821      	ldr	r1, [r4, #0]
 8008f6e:	05c8      	lsls	r0, r1, #23
 8008f70:	d51a      	bpl.n	8008fa8 <_scanf_float+0x17c>
 8008f72:	9b02      	ldr	r3, [sp, #8]
 8008f74:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008f78:	6021      	str	r1, [r4, #0]
 8008f7a:	f109 0901 	add.w	r9, r9, #1
 8008f7e:	b11b      	cbz	r3, 8008f88 <_scanf_float+0x15c>
 8008f80:	3b01      	subs	r3, #1
 8008f82:	3201      	adds	r2, #1
 8008f84:	9302      	str	r3, [sp, #8]
 8008f86:	60a2      	str	r2, [r4, #8]
 8008f88:	68a3      	ldr	r3, [r4, #8]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	60a3      	str	r3, [r4, #8]
 8008f8e:	6923      	ldr	r3, [r4, #16]
 8008f90:	3301      	adds	r3, #1
 8008f92:	6123      	str	r3, [r4, #16]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	607b      	str	r3, [r7, #4]
 8008f9c:	f340 8084 	ble.w	80090a8 <_scanf_float+0x27c>
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	603b      	str	r3, [r7, #0]
 8008fa6:	e766      	b.n	8008e76 <_scanf_float+0x4a>
 8008fa8:	eb1a 0f05 	cmn.w	sl, r5
 8008fac:	f47f af70 	bne.w	8008e90 <_scanf_float+0x64>
 8008fb0:	6822      	ldr	r2, [r4, #0]
 8008fb2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008fb6:	6022      	str	r2, [r4, #0]
 8008fb8:	f806 3b01 	strb.w	r3, [r6], #1
 8008fbc:	e7e4      	b.n	8008f88 <_scanf_float+0x15c>
 8008fbe:	6822      	ldr	r2, [r4, #0]
 8008fc0:	0610      	lsls	r0, r2, #24
 8008fc2:	f57f af65 	bpl.w	8008e90 <_scanf_float+0x64>
 8008fc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fca:	e7f4      	b.n	8008fb6 <_scanf_float+0x18a>
 8008fcc:	f1ba 0f00 	cmp.w	sl, #0
 8008fd0:	d10e      	bne.n	8008ff0 <_scanf_float+0x1c4>
 8008fd2:	f1b9 0f00 	cmp.w	r9, #0
 8008fd6:	d10e      	bne.n	8008ff6 <_scanf_float+0x1ca>
 8008fd8:	6822      	ldr	r2, [r4, #0]
 8008fda:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008fde:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fe2:	d108      	bne.n	8008ff6 <_scanf_float+0x1ca>
 8008fe4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fe8:	f04f 0a01 	mov.w	sl, #1
 8008fec:	6022      	str	r2, [r4, #0]
 8008fee:	e7e3      	b.n	8008fb8 <_scanf_float+0x18c>
 8008ff0:	f1ba 0f02 	cmp.w	sl, #2
 8008ff4:	d055      	beq.n	80090a2 <_scanf_float+0x276>
 8008ff6:	2d01      	cmp	r5, #1
 8008ff8:	d002      	beq.n	8009000 <_scanf_float+0x1d4>
 8008ffa:	2d04      	cmp	r5, #4
 8008ffc:	f47f af48 	bne.w	8008e90 <_scanf_float+0x64>
 8009000:	3501      	adds	r5, #1
 8009002:	b2ed      	uxtb	r5, r5
 8009004:	e7d8      	b.n	8008fb8 <_scanf_float+0x18c>
 8009006:	f1ba 0f01 	cmp.w	sl, #1
 800900a:	f47f af41 	bne.w	8008e90 <_scanf_float+0x64>
 800900e:	f04f 0a02 	mov.w	sl, #2
 8009012:	e7d1      	b.n	8008fb8 <_scanf_float+0x18c>
 8009014:	b97d      	cbnz	r5, 8009036 <_scanf_float+0x20a>
 8009016:	f1b9 0f00 	cmp.w	r9, #0
 800901a:	f47f af3c 	bne.w	8008e96 <_scanf_float+0x6a>
 800901e:	6822      	ldr	r2, [r4, #0]
 8009020:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009024:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009028:	f47f af39 	bne.w	8008e9e <_scanf_float+0x72>
 800902c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009030:	2501      	movs	r5, #1
 8009032:	6022      	str	r2, [r4, #0]
 8009034:	e7c0      	b.n	8008fb8 <_scanf_float+0x18c>
 8009036:	2d03      	cmp	r5, #3
 8009038:	d0e2      	beq.n	8009000 <_scanf_float+0x1d4>
 800903a:	2d05      	cmp	r5, #5
 800903c:	e7de      	b.n	8008ffc <_scanf_float+0x1d0>
 800903e:	2d02      	cmp	r5, #2
 8009040:	f47f af26 	bne.w	8008e90 <_scanf_float+0x64>
 8009044:	2503      	movs	r5, #3
 8009046:	e7b7      	b.n	8008fb8 <_scanf_float+0x18c>
 8009048:	2d06      	cmp	r5, #6
 800904a:	f47f af21 	bne.w	8008e90 <_scanf_float+0x64>
 800904e:	2507      	movs	r5, #7
 8009050:	e7b2      	b.n	8008fb8 <_scanf_float+0x18c>
 8009052:	6822      	ldr	r2, [r4, #0]
 8009054:	0591      	lsls	r1, r2, #22
 8009056:	f57f af1b 	bpl.w	8008e90 <_scanf_float+0x64>
 800905a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800905e:	6022      	str	r2, [r4, #0]
 8009060:	f8cd 9004 	str.w	r9, [sp, #4]
 8009064:	e7a8      	b.n	8008fb8 <_scanf_float+0x18c>
 8009066:	6822      	ldr	r2, [r4, #0]
 8009068:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800906c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009070:	d006      	beq.n	8009080 <_scanf_float+0x254>
 8009072:	0550      	lsls	r0, r2, #21
 8009074:	f57f af0c 	bpl.w	8008e90 <_scanf_float+0x64>
 8009078:	f1b9 0f00 	cmp.w	r9, #0
 800907c:	f43f af0f 	beq.w	8008e9e <_scanf_float+0x72>
 8009080:	0591      	lsls	r1, r2, #22
 8009082:	bf58      	it	pl
 8009084:	9901      	ldrpl	r1, [sp, #4]
 8009086:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800908a:	bf58      	it	pl
 800908c:	eba9 0101 	subpl.w	r1, r9, r1
 8009090:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009094:	f04f 0900 	mov.w	r9, #0
 8009098:	bf58      	it	pl
 800909a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800909e:	6022      	str	r2, [r4, #0]
 80090a0:	e78a      	b.n	8008fb8 <_scanf_float+0x18c>
 80090a2:	f04f 0a03 	mov.w	sl, #3
 80090a6:	e787      	b.n	8008fb8 <_scanf_float+0x18c>
 80090a8:	4639      	mov	r1, r7
 80090aa:	4640      	mov	r0, r8
 80090ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80090b0:	4798      	blx	r3
 80090b2:	2800      	cmp	r0, #0
 80090b4:	f43f aedf 	beq.w	8008e76 <_scanf_float+0x4a>
 80090b8:	e6ea      	b.n	8008e90 <_scanf_float+0x64>
 80090ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090be:	463a      	mov	r2, r7
 80090c0:	4640      	mov	r0, r8
 80090c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090c6:	4798      	blx	r3
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	6123      	str	r3, [r4, #16]
 80090ce:	e6ec      	b.n	8008eaa <_scanf_float+0x7e>
 80090d0:	1e6b      	subs	r3, r5, #1
 80090d2:	2b06      	cmp	r3, #6
 80090d4:	d825      	bhi.n	8009122 <_scanf_float+0x2f6>
 80090d6:	2d02      	cmp	r5, #2
 80090d8:	d836      	bhi.n	8009148 <_scanf_float+0x31c>
 80090da:	455e      	cmp	r6, fp
 80090dc:	f67f aee8 	bls.w	8008eb0 <_scanf_float+0x84>
 80090e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090e4:	463a      	mov	r2, r7
 80090e6:	4640      	mov	r0, r8
 80090e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090ec:	4798      	blx	r3
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	3b01      	subs	r3, #1
 80090f2:	6123      	str	r3, [r4, #16]
 80090f4:	e7f1      	b.n	80090da <_scanf_float+0x2ae>
 80090f6:	9802      	ldr	r0, [sp, #8]
 80090f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009100:	463a      	mov	r2, r7
 8009102:	9002      	str	r0, [sp, #8]
 8009104:	4640      	mov	r0, r8
 8009106:	4798      	blx	r3
 8009108:	6923      	ldr	r3, [r4, #16]
 800910a:	3b01      	subs	r3, #1
 800910c:	6123      	str	r3, [r4, #16]
 800910e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009112:	fa5f fa8a 	uxtb.w	sl, sl
 8009116:	f1ba 0f02 	cmp.w	sl, #2
 800911a:	d1ec      	bne.n	80090f6 <_scanf_float+0x2ca>
 800911c:	3d03      	subs	r5, #3
 800911e:	b2ed      	uxtb	r5, r5
 8009120:	1b76      	subs	r6, r6, r5
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	05da      	lsls	r2, r3, #23
 8009126:	d52f      	bpl.n	8009188 <_scanf_float+0x35c>
 8009128:	055b      	lsls	r3, r3, #21
 800912a:	d510      	bpl.n	800914e <_scanf_float+0x322>
 800912c:	455e      	cmp	r6, fp
 800912e:	f67f aebf 	bls.w	8008eb0 <_scanf_float+0x84>
 8009132:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009136:	463a      	mov	r2, r7
 8009138:	4640      	mov	r0, r8
 800913a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800913e:	4798      	blx	r3
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	3b01      	subs	r3, #1
 8009144:	6123      	str	r3, [r4, #16]
 8009146:	e7f1      	b.n	800912c <_scanf_float+0x300>
 8009148:	46aa      	mov	sl, r5
 800914a:	9602      	str	r6, [sp, #8]
 800914c:	e7df      	b.n	800910e <_scanf_float+0x2e2>
 800914e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009152:	6923      	ldr	r3, [r4, #16]
 8009154:	2965      	cmp	r1, #101	; 0x65
 8009156:	f103 33ff 	add.w	r3, r3, #4294967295
 800915a:	f106 35ff 	add.w	r5, r6, #4294967295
 800915e:	6123      	str	r3, [r4, #16]
 8009160:	d00c      	beq.n	800917c <_scanf_float+0x350>
 8009162:	2945      	cmp	r1, #69	; 0x45
 8009164:	d00a      	beq.n	800917c <_scanf_float+0x350>
 8009166:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800916a:	463a      	mov	r2, r7
 800916c:	4640      	mov	r0, r8
 800916e:	4798      	blx	r3
 8009170:	6923      	ldr	r3, [r4, #16]
 8009172:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009176:	3b01      	subs	r3, #1
 8009178:	1eb5      	subs	r5, r6, #2
 800917a:	6123      	str	r3, [r4, #16]
 800917c:	463a      	mov	r2, r7
 800917e:	4640      	mov	r0, r8
 8009180:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009184:	4798      	blx	r3
 8009186:	462e      	mov	r6, r5
 8009188:	6825      	ldr	r5, [r4, #0]
 800918a:	f015 0510 	ands.w	r5, r5, #16
 800918e:	d159      	bne.n	8009244 <_scanf_float+0x418>
 8009190:	7035      	strb	r5, [r6, #0]
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800919c:	d11c      	bne.n	80091d8 <_scanf_float+0x3ac>
 800919e:	9b01      	ldr	r3, [sp, #4]
 80091a0:	454b      	cmp	r3, r9
 80091a2:	eba3 0209 	sub.w	r2, r3, r9
 80091a6:	d124      	bne.n	80091f2 <_scanf_float+0x3c6>
 80091a8:	2200      	movs	r2, #0
 80091aa:	4659      	mov	r1, fp
 80091ac:	4640      	mov	r0, r8
 80091ae:	f000 ff6b 	bl	800a088 <_strtod_r>
 80091b2:	f8d4 c000 	ldr.w	ip, [r4]
 80091b6:	9b03      	ldr	r3, [sp, #12]
 80091b8:	f01c 0f02 	tst.w	ip, #2
 80091bc:	4606      	mov	r6, r0
 80091be:	460f      	mov	r7, r1
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	d021      	beq.n	8009208 <_scanf_float+0x3dc>
 80091c4:	9903      	ldr	r1, [sp, #12]
 80091c6:	1d1a      	adds	r2, r3, #4
 80091c8:	600a      	str	r2, [r1, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	e9c3 6700 	strd	r6, r7, [r3]
 80091d0:	68e3      	ldr	r3, [r4, #12]
 80091d2:	3301      	adds	r3, #1
 80091d4:	60e3      	str	r3, [r4, #12]
 80091d6:	e66c      	b.n	8008eb2 <_scanf_float+0x86>
 80091d8:	9b04      	ldr	r3, [sp, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0e4      	beq.n	80091a8 <_scanf_float+0x37c>
 80091de:	9905      	ldr	r1, [sp, #20]
 80091e0:	230a      	movs	r3, #10
 80091e2:	462a      	mov	r2, r5
 80091e4:	4640      	mov	r0, r8
 80091e6:	3101      	adds	r1, #1
 80091e8:	f001 f842 	bl	800a270 <_strtol_r>
 80091ec:	9b04      	ldr	r3, [sp, #16]
 80091ee:	9e05      	ldr	r6, [sp, #20]
 80091f0:	1ac2      	subs	r2, r0, r3
 80091f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80091f6:	429e      	cmp	r6, r3
 80091f8:	bf28      	it	cs
 80091fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80091fe:	4630      	mov	r0, r6
 8009200:	4911      	ldr	r1, [pc, #68]	; (8009248 <_scanf_float+0x41c>)
 8009202:	f000 f8a3 	bl	800934c <siprintf>
 8009206:	e7cf      	b.n	80091a8 <_scanf_float+0x37c>
 8009208:	f01c 0f04 	tst.w	ip, #4
 800920c:	f103 0e04 	add.w	lr, r3, #4
 8009210:	d003      	beq.n	800921a <_scanf_float+0x3ee>
 8009212:	9903      	ldr	r1, [sp, #12]
 8009214:	f8c1 e000 	str.w	lr, [r1]
 8009218:	e7d7      	b.n	80091ca <_scanf_float+0x39e>
 800921a:	9a03      	ldr	r2, [sp, #12]
 800921c:	f8c2 e000 	str.w	lr, [r2]
 8009220:	f8d3 8000 	ldr.w	r8, [r3]
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	f7f7 fbf0 	bl	8000a0c <__aeabi_dcmpun>
 800922c:	b128      	cbz	r0, 800923a <_scanf_float+0x40e>
 800922e:	4807      	ldr	r0, [pc, #28]	; (800924c <_scanf_float+0x420>)
 8009230:	f000 f888 	bl	8009344 <nanf>
 8009234:	f8c8 0000 	str.w	r0, [r8]
 8009238:	e7ca      	b.n	80091d0 <_scanf_float+0x3a4>
 800923a:	4630      	mov	r0, r6
 800923c:	4639      	mov	r1, r7
 800923e:	f7f7 fc43 	bl	8000ac8 <__aeabi_d2f>
 8009242:	e7f7      	b.n	8009234 <_scanf_float+0x408>
 8009244:	2500      	movs	r5, #0
 8009246:	e634      	b.n	8008eb2 <_scanf_float+0x86>
 8009248:	0800cfa0 	.word	0x0800cfa0
 800924c:	0800d0ab 	.word	0x0800d0ab

08009250 <cleanup_glue>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	460c      	mov	r4, r1
 8009254:	6809      	ldr	r1, [r1, #0]
 8009256:	4605      	mov	r5, r0
 8009258:	b109      	cbz	r1, 800925e <cleanup_glue+0xe>
 800925a:	f7ff fff9 	bl	8009250 <cleanup_glue>
 800925e:	4621      	mov	r1, r4
 8009260:	4628      	mov	r0, r5
 8009262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009266:	f003 b817 	b.w	800c298 <_free_r>
	...

0800926c <_reclaim_reent>:
 800926c:	4b2c      	ldr	r3, [pc, #176]	; (8009320 <_reclaim_reent+0xb4>)
 800926e:	b570      	push	{r4, r5, r6, lr}
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4604      	mov	r4, r0
 8009274:	4283      	cmp	r3, r0
 8009276:	d051      	beq.n	800931c <_reclaim_reent+0xb0>
 8009278:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800927a:	b143      	cbz	r3, 800928e <_reclaim_reent+0x22>
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d14a      	bne.n	8009318 <_reclaim_reent+0xac>
 8009282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009284:	6819      	ldr	r1, [r3, #0]
 8009286:	b111      	cbz	r1, 800928e <_reclaim_reent+0x22>
 8009288:	4620      	mov	r0, r4
 800928a:	f003 f805 	bl	800c298 <_free_r>
 800928e:	6961      	ldr	r1, [r4, #20]
 8009290:	b111      	cbz	r1, 8009298 <_reclaim_reent+0x2c>
 8009292:	4620      	mov	r0, r4
 8009294:	f003 f800 	bl	800c298 <_free_r>
 8009298:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800929a:	b111      	cbz	r1, 80092a2 <_reclaim_reent+0x36>
 800929c:	4620      	mov	r0, r4
 800929e:	f002 fffb 	bl	800c298 <_free_r>
 80092a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80092a4:	b111      	cbz	r1, 80092ac <_reclaim_reent+0x40>
 80092a6:	4620      	mov	r0, r4
 80092a8:	f002 fff6 	bl	800c298 <_free_r>
 80092ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80092ae:	b111      	cbz	r1, 80092b6 <_reclaim_reent+0x4a>
 80092b0:	4620      	mov	r0, r4
 80092b2:	f002 fff1 	bl	800c298 <_free_r>
 80092b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80092b8:	b111      	cbz	r1, 80092c0 <_reclaim_reent+0x54>
 80092ba:	4620      	mov	r0, r4
 80092bc:	f002 ffec 	bl	800c298 <_free_r>
 80092c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80092c2:	b111      	cbz	r1, 80092ca <_reclaim_reent+0x5e>
 80092c4:	4620      	mov	r0, r4
 80092c6:	f002 ffe7 	bl	800c298 <_free_r>
 80092ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80092cc:	b111      	cbz	r1, 80092d4 <_reclaim_reent+0x68>
 80092ce:	4620      	mov	r0, r4
 80092d0:	f002 ffe2 	bl	800c298 <_free_r>
 80092d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092d6:	b111      	cbz	r1, 80092de <_reclaim_reent+0x72>
 80092d8:	4620      	mov	r0, r4
 80092da:	f002 ffdd 	bl	800c298 <_free_r>
 80092de:	69a3      	ldr	r3, [r4, #24]
 80092e0:	b1e3      	cbz	r3, 800931c <_reclaim_reent+0xb0>
 80092e2:	4620      	mov	r0, r4
 80092e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80092e6:	4798      	blx	r3
 80092e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80092ea:	b1b9      	cbz	r1, 800931c <_reclaim_reent+0xb0>
 80092ec:	4620      	mov	r0, r4
 80092ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092f2:	f7ff bfad 	b.w	8009250 <cleanup_glue>
 80092f6:	5949      	ldr	r1, [r1, r5]
 80092f8:	b941      	cbnz	r1, 800930c <_reclaim_reent+0xa0>
 80092fa:	3504      	adds	r5, #4
 80092fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092fe:	2d80      	cmp	r5, #128	; 0x80
 8009300:	68d9      	ldr	r1, [r3, #12]
 8009302:	d1f8      	bne.n	80092f6 <_reclaim_reent+0x8a>
 8009304:	4620      	mov	r0, r4
 8009306:	f002 ffc7 	bl	800c298 <_free_r>
 800930a:	e7ba      	b.n	8009282 <_reclaim_reent+0x16>
 800930c:	680e      	ldr	r6, [r1, #0]
 800930e:	4620      	mov	r0, r4
 8009310:	f002 ffc2 	bl	800c298 <_free_r>
 8009314:	4631      	mov	r1, r6
 8009316:	e7ef      	b.n	80092f8 <_reclaim_reent+0x8c>
 8009318:	2500      	movs	r5, #0
 800931a:	e7ef      	b.n	80092fc <_reclaim_reent+0x90>
 800931c:	bd70      	pop	{r4, r5, r6, pc}
 800931e:	bf00      	nop
 8009320:	20000014 	.word	0x20000014

08009324 <_sbrk_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	2300      	movs	r3, #0
 8009328:	4d05      	ldr	r5, [pc, #20]	; (8009340 <_sbrk_r+0x1c>)
 800932a:	4604      	mov	r4, r0
 800932c:	4608      	mov	r0, r1
 800932e:	602b      	str	r3, [r5, #0]
 8009330:	f7f8 fc48 	bl	8001bc4 <_sbrk>
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d102      	bne.n	800933e <_sbrk_r+0x1a>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	b103      	cbz	r3, 800933e <_sbrk_r+0x1a>
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	bd38      	pop	{r3, r4, r5, pc}
 8009340:	20003b38 	.word	0x20003b38

08009344 <nanf>:
 8009344:	4800      	ldr	r0, [pc, #0]	; (8009348 <nanf+0x4>)
 8009346:	4770      	bx	lr
 8009348:	7fc00000 	.word	0x7fc00000

0800934c <siprintf>:
 800934c:	b40e      	push	{r1, r2, r3}
 800934e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009352:	b500      	push	{lr}
 8009354:	b09c      	sub	sp, #112	; 0x70
 8009356:	ab1d      	add	r3, sp, #116	; 0x74
 8009358:	9002      	str	r0, [sp, #8]
 800935a:	9006      	str	r0, [sp, #24]
 800935c:	9107      	str	r1, [sp, #28]
 800935e:	9104      	str	r1, [sp, #16]
 8009360:	4808      	ldr	r0, [pc, #32]	; (8009384 <siprintf+0x38>)
 8009362:	4909      	ldr	r1, [pc, #36]	; (8009388 <siprintf+0x3c>)
 8009364:	f853 2b04 	ldr.w	r2, [r3], #4
 8009368:	9105      	str	r1, [sp, #20]
 800936a:	6800      	ldr	r0, [r0, #0]
 800936c:	a902      	add	r1, sp, #8
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	f003 f83a 	bl	800c3e8 <_svfiprintf_r>
 8009374:	2200      	movs	r2, #0
 8009376:	9b02      	ldr	r3, [sp, #8]
 8009378:	701a      	strb	r2, [r3, #0]
 800937a:	b01c      	add	sp, #112	; 0x70
 800937c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009380:	b003      	add	sp, #12
 8009382:	4770      	bx	lr
 8009384:	20000014 	.word	0x20000014
 8009388:	ffff0208 	.word	0xffff0208

0800938c <__sread>:
 800938c:	b510      	push	{r4, lr}
 800938e:	460c      	mov	r4, r1
 8009390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009394:	f003 fa80 	bl	800c898 <_read_r>
 8009398:	2800      	cmp	r0, #0
 800939a:	bfab      	itete	ge
 800939c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800939e:	89a3      	ldrhlt	r3, [r4, #12]
 80093a0:	181b      	addge	r3, r3, r0
 80093a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093a6:	bfac      	ite	ge
 80093a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80093aa:	81a3      	strhlt	r3, [r4, #12]
 80093ac:	bd10      	pop	{r4, pc}

080093ae <__swrite>:
 80093ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b2:	461f      	mov	r7, r3
 80093b4:	898b      	ldrh	r3, [r1, #12]
 80093b6:	4605      	mov	r5, r0
 80093b8:	05db      	lsls	r3, r3, #23
 80093ba:	460c      	mov	r4, r1
 80093bc:	4616      	mov	r6, r2
 80093be:	d505      	bpl.n	80093cc <__swrite+0x1e>
 80093c0:	2302      	movs	r3, #2
 80093c2:	2200      	movs	r2, #0
 80093c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c8:	f002 fa5a 	bl	800b880 <_lseek_r>
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	4632      	mov	r2, r6
 80093d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	4628      	mov	r0, r5
 80093d8:	463b      	mov	r3, r7
 80093da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093e2:	f000 bf51 	b.w	800a288 <_write_r>

080093e6 <__sseek>:
 80093e6:	b510      	push	{r4, lr}
 80093e8:	460c      	mov	r4, r1
 80093ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ee:	f002 fa47 	bl	800b880 <_lseek_r>
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	bf15      	itete	ne
 80093f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80093fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009402:	81a3      	strheq	r3, [r4, #12]
 8009404:	bf18      	it	ne
 8009406:	81a3      	strhne	r3, [r4, #12]
 8009408:	bd10      	pop	{r4, pc}

0800940a <__sclose>:
 800940a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800940e:	f000 bf6b 	b.w	800a2e8 <_close_r>

08009412 <strchr>:
 8009412:	4603      	mov	r3, r0
 8009414:	b2c9      	uxtb	r1, r1
 8009416:	4618      	mov	r0, r3
 8009418:	f813 2b01 	ldrb.w	r2, [r3], #1
 800941c:	b112      	cbz	r2, 8009424 <strchr+0x12>
 800941e:	428a      	cmp	r2, r1
 8009420:	d1f9      	bne.n	8009416 <strchr+0x4>
 8009422:	4770      	bx	lr
 8009424:	2900      	cmp	r1, #0
 8009426:	bf18      	it	ne
 8009428:	2000      	movne	r0, #0
 800942a:	4770      	bx	lr

0800942c <strstr>:
 800942c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800942e:	780c      	ldrb	r4, [r1, #0]
 8009430:	b164      	cbz	r4, 800944c <strstr+0x20>
 8009432:	4603      	mov	r3, r0
 8009434:	781a      	ldrb	r2, [r3, #0]
 8009436:	4618      	mov	r0, r3
 8009438:	1c5e      	adds	r6, r3, #1
 800943a:	b90a      	cbnz	r2, 8009440 <strstr+0x14>
 800943c:	4610      	mov	r0, r2
 800943e:	e005      	b.n	800944c <strstr+0x20>
 8009440:	4294      	cmp	r4, r2
 8009442:	d108      	bne.n	8009456 <strstr+0x2a>
 8009444:	460d      	mov	r5, r1
 8009446:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800944a:	b902      	cbnz	r2, 800944e <strstr+0x22>
 800944c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800944e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009452:	4297      	cmp	r7, r2
 8009454:	d0f7      	beq.n	8009446 <strstr+0x1a>
 8009456:	4633      	mov	r3, r6
 8009458:	e7ec      	b.n	8009434 <strstr+0x8>

0800945a <sulp>:
 800945a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800945e:	460f      	mov	r7, r1
 8009460:	4690      	mov	r8, r2
 8009462:	f002 fdc3 	bl	800bfec <__ulp>
 8009466:	4604      	mov	r4, r0
 8009468:	460d      	mov	r5, r1
 800946a:	f1b8 0f00 	cmp.w	r8, #0
 800946e:	d011      	beq.n	8009494 <sulp+0x3a>
 8009470:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009474:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009478:	2b00      	cmp	r3, #0
 800947a:	dd0b      	ble.n	8009494 <sulp+0x3a>
 800947c:	2400      	movs	r4, #0
 800947e:	051b      	lsls	r3, r3, #20
 8009480:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009484:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009488:	4622      	mov	r2, r4
 800948a:	462b      	mov	r3, r5
 800948c:	f7f7 f824 	bl	80004d8 <__aeabi_dmul>
 8009490:	4604      	mov	r4, r0
 8009492:	460d      	mov	r5, r1
 8009494:	4620      	mov	r0, r4
 8009496:	4629      	mov	r1, r5
 8009498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800949c:	0000      	movs	r0, r0
	...

080094a0 <_strtod_l>:
 80094a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	469b      	mov	fp, r3
 80094a6:	2300      	movs	r3, #0
 80094a8:	b0a1      	sub	sp, #132	; 0x84
 80094aa:	931c      	str	r3, [sp, #112]	; 0x70
 80094ac:	4ba1      	ldr	r3, [pc, #644]	; (8009734 <_strtod_l+0x294>)
 80094ae:	4682      	mov	sl, r0
 80094b0:	681f      	ldr	r7, [r3, #0]
 80094b2:	460e      	mov	r6, r1
 80094b4:	4638      	mov	r0, r7
 80094b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80094b8:	f7f6 fe4a 	bl	8000150 <strlen>
 80094bc:	f04f 0800 	mov.w	r8, #0
 80094c0:	4604      	mov	r4, r0
 80094c2:	f04f 0900 	mov.w	r9, #0
 80094c6:	961b      	str	r6, [sp, #108]	; 0x6c
 80094c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094ca:	781a      	ldrb	r2, [r3, #0]
 80094cc:	2a2b      	cmp	r2, #43	; 0x2b
 80094ce:	d04c      	beq.n	800956a <_strtod_l+0xca>
 80094d0:	d83a      	bhi.n	8009548 <_strtod_l+0xa8>
 80094d2:	2a0d      	cmp	r2, #13
 80094d4:	d833      	bhi.n	800953e <_strtod_l+0x9e>
 80094d6:	2a08      	cmp	r2, #8
 80094d8:	d833      	bhi.n	8009542 <_strtod_l+0xa2>
 80094da:	2a00      	cmp	r2, #0
 80094dc:	d03d      	beq.n	800955a <_strtod_l+0xba>
 80094de:	2300      	movs	r3, #0
 80094e0:	930c      	str	r3, [sp, #48]	; 0x30
 80094e2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80094e4:	782b      	ldrb	r3, [r5, #0]
 80094e6:	2b30      	cmp	r3, #48	; 0x30
 80094e8:	f040 80af 	bne.w	800964a <_strtod_l+0x1aa>
 80094ec:	786b      	ldrb	r3, [r5, #1]
 80094ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094f2:	2b58      	cmp	r3, #88	; 0x58
 80094f4:	d16c      	bne.n	80095d0 <_strtod_l+0x130>
 80094f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094f8:	4650      	mov	r0, sl
 80094fa:	9301      	str	r3, [sp, #4]
 80094fc:	ab1c      	add	r3, sp, #112	; 0x70
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	4a8d      	ldr	r2, [pc, #564]	; (8009738 <_strtod_l+0x298>)
 8009502:	f8cd b008 	str.w	fp, [sp, #8]
 8009506:	ab1d      	add	r3, sp, #116	; 0x74
 8009508:	a91b      	add	r1, sp, #108	; 0x6c
 800950a:	f001 feb7 	bl	800b27c <__gethex>
 800950e:	f010 0607 	ands.w	r6, r0, #7
 8009512:	4604      	mov	r4, r0
 8009514:	d005      	beq.n	8009522 <_strtod_l+0x82>
 8009516:	2e06      	cmp	r6, #6
 8009518:	d129      	bne.n	800956e <_strtod_l+0xce>
 800951a:	2300      	movs	r3, #0
 800951c:	3501      	adds	r5, #1
 800951e:	951b      	str	r5, [sp, #108]	; 0x6c
 8009520:	930c      	str	r3, [sp, #48]	; 0x30
 8009522:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009524:	2b00      	cmp	r3, #0
 8009526:	f040 8596 	bne.w	800a056 <_strtod_l+0xbb6>
 800952a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800952c:	b1d3      	cbz	r3, 8009564 <_strtod_l+0xc4>
 800952e:	4642      	mov	r2, r8
 8009530:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009534:	4610      	mov	r0, r2
 8009536:	4619      	mov	r1, r3
 8009538:	b021      	add	sp, #132	; 0x84
 800953a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953e:	2a20      	cmp	r2, #32
 8009540:	d1cd      	bne.n	80094de <_strtod_l+0x3e>
 8009542:	3301      	adds	r3, #1
 8009544:	931b      	str	r3, [sp, #108]	; 0x6c
 8009546:	e7bf      	b.n	80094c8 <_strtod_l+0x28>
 8009548:	2a2d      	cmp	r2, #45	; 0x2d
 800954a:	d1c8      	bne.n	80094de <_strtod_l+0x3e>
 800954c:	2201      	movs	r2, #1
 800954e:	920c      	str	r2, [sp, #48]	; 0x30
 8009550:	1c5a      	adds	r2, r3, #1
 8009552:	921b      	str	r2, [sp, #108]	; 0x6c
 8009554:	785b      	ldrb	r3, [r3, #1]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1c3      	bne.n	80094e2 <_strtod_l+0x42>
 800955a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800955c:	961b      	str	r6, [sp, #108]	; 0x6c
 800955e:	2b00      	cmp	r3, #0
 8009560:	f040 8577 	bne.w	800a052 <_strtod_l+0xbb2>
 8009564:	4642      	mov	r2, r8
 8009566:	464b      	mov	r3, r9
 8009568:	e7e4      	b.n	8009534 <_strtod_l+0x94>
 800956a:	2200      	movs	r2, #0
 800956c:	e7ef      	b.n	800954e <_strtod_l+0xae>
 800956e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009570:	b13a      	cbz	r2, 8009582 <_strtod_l+0xe2>
 8009572:	2135      	movs	r1, #53	; 0x35
 8009574:	a81e      	add	r0, sp, #120	; 0x78
 8009576:	f002 fe3d 	bl	800c1f4 <__copybits>
 800957a:	4650      	mov	r0, sl
 800957c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800957e:	f002 fa05 	bl	800b98c <_Bfree>
 8009582:	3e01      	subs	r6, #1
 8009584:	2e05      	cmp	r6, #5
 8009586:	d807      	bhi.n	8009598 <_strtod_l+0xf8>
 8009588:	e8df f006 	tbb	[pc, r6]
 800958c:	1d180b0e 	.word	0x1d180b0e
 8009590:	030e      	.short	0x030e
 8009592:	f04f 0900 	mov.w	r9, #0
 8009596:	46c8      	mov	r8, r9
 8009598:	0721      	lsls	r1, r4, #28
 800959a:	d5c2      	bpl.n	8009522 <_strtod_l+0x82>
 800959c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80095a0:	e7bf      	b.n	8009522 <_strtod_l+0x82>
 80095a2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80095a6:	e7f7      	b.n	8009598 <_strtod_l+0xf8>
 80095a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80095aa:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80095ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80095b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80095b6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80095ba:	e7ed      	b.n	8009598 <_strtod_l+0xf8>
 80095bc:	f04f 0800 	mov.w	r8, #0
 80095c0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800973c <_strtod_l+0x29c>
 80095c4:	e7e8      	b.n	8009598 <_strtod_l+0xf8>
 80095c6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80095ca:	f04f 38ff 	mov.w	r8, #4294967295
 80095ce:	e7e3      	b.n	8009598 <_strtod_l+0xf8>
 80095d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095d2:	1c5a      	adds	r2, r3, #1
 80095d4:	921b      	str	r2, [sp, #108]	; 0x6c
 80095d6:	785b      	ldrb	r3, [r3, #1]
 80095d8:	2b30      	cmp	r3, #48	; 0x30
 80095da:	d0f9      	beq.n	80095d0 <_strtod_l+0x130>
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d0a0      	beq.n	8009522 <_strtod_l+0x82>
 80095e0:	2301      	movs	r3, #1
 80095e2:	9307      	str	r3, [sp, #28]
 80095e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095e6:	220a      	movs	r2, #10
 80095e8:	9308      	str	r3, [sp, #32]
 80095ea:	2300      	movs	r3, #0
 80095ec:	469b      	mov	fp, r3
 80095ee:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80095f2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80095f4:	7805      	ldrb	r5, [r0, #0]
 80095f6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80095fa:	b2d9      	uxtb	r1, r3
 80095fc:	2909      	cmp	r1, #9
 80095fe:	d926      	bls.n	800964e <_strtod_l+0x1ae>
 8009600:	4622      	mov	r2, r4
 8009602:	4639      	mov	r1, r7
 8009604:	f003 f960 	bl	800c8c8 <strncmp>
 8009608:	2800      	cmp	r0, #0
 800960a:	d032      	beq.n	8009672 <_strtod_l+0x1d2>
 800960c:	2000      	movs	r0, #0
 800960e:	462b      	mov	r3, r5
 8009610:	465c      	mov	r4, fp
 8009612:	4602      	mov	r2, r0
 8009614:	9004      	str	r0, [sp, #16]
 8009616:	2b65      	cmp	r3, #101	; 0x65
 8009618:	d001      	beq.n	800961e <_strtod_l+0x17e>
 800961a:	2b45      	cmp	r3, #69	; 0x45
 800961c:	d113      	bne.n	8009646 <_strtod_l+0x1a6>
 800961e:	b91c      	cbnz	r4, 8009628 <_strtod_l+0x188>
 8009620:	9b07      	ldr	r3, [sp, #28]
 8009622:	4303      	orrs	r3, r0
 8009624:	d099      	beq.n	800955a <_strtod_l+0xba>
 8009626:	2400      	movs	r4, #0
 8009628:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800962a:	1c73      	adds	r3, r6, #1
 800962c:	931b      	str	r3, [sp, #108]	; 0x6c
 800962e:	7873      	ldrb	r3, [r6, #1]
 8009630:	2b2b      	cmp	r3, #43	; 0x2b
 8009632:	d078      	beq.n	8009726 <_strtod_l+0x286>
 8009634:	2b2d      	cmp	r3, #45	; 0x2d
 8009636:	d07b      	beq.n	8009730 <_strtod_l+0x290>
 8009638:	2700      	movs	r7, #0
 800963a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800963e:	2909      	cmp	r1, #9
 8009640:	f240 8082 	bls.w	8009748 <_strtod_l+0x2a8>
 8009644:	961b      	str	r6, [sp, #108]	; 0x6c
 8009646:	2500      	movs	r5, #0
 8009648:	e09e      	b.n	8009788 <_strtod_l+0x2e8>
 800964a:	2300      	movs	r3, #0
 800964c:	e7c9      	b.n	80095e2 <_strtod_l+0x142>
 800964e:	f1bb 0f08 	cmp.w	fp, #8
 8009652:	bfd5      	itete	le
 8009654:	9906      	ldrle	r1, [sp, #24]
 8009656:	9905      	ldrgt	r1, [sp, #20]
 8009658:	fb02 3301 	mlale	r3, r2, r1, r3
 800965c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009660:	f100 0001 	add.w	r0, r0, #1
 8009664:	bfd4      	ite	le
 8009666:	9306      	strle	r3, [sp, #24]
 8009668:	9305      	strgt	r3, [sp, #20]
 800966a:	f10b 0b01 	add.w	fp, fp, #1
 800966e:	901b      	str	r0, [sp, #108]	; 0x6c
 8009670:	e7bf      	b.n	80095f2 <_strtod_l+0x152>
 8009672:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009674:	191a      	adds	r2, r3, r4
 8009676:	921b      	str	r2, [sp, #108]	; 0x6c
 8009678:	5d1b      	ldrb	r3, [r3, r4]
 800967a:	f1bb 0f00 	cmp.w	fp, #0
 800967e:	d036      	beq.n	80096ee <_strtod_l+0x24e>
 8009680:	465c      	mov	r4, fp
 8009682:	9004      	str	r0, [sp, #16]
 8009684:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009688:	2a09      	cmp	r2, #9
 800968a:	d912      	bls.n	80096b2 <_strtod_l+0x212>
 800968c:	2201      	movs	r2, #1
 800968e:	e7c2      	b.n	8009616 <_strtod_l+0x176>
 8009690:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009692:	3001      	adds	r0, #1
 8009694:	1c5a      	adds	r2, r3, #1
 8009696:	921b      	str	r2, [sp, #108]	; 0x6c
 8009698:	785b      	ldrb	r3, [r3, #1]
 800969a:	2b30      	cmp	r3, #48	; 0x30
 800969c:	d0f8      	beq.n	8009690 <_strtod_l+0x1f0>
 800969e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80096a2:	2a08      	cmp	r2, #8
 80096a4:	f200 84dc 	bhi.w	800a060 <_strtod_l+0xbc0>
 80096a8:	9004      	str	r0, [sp, #16]
 80096aa:	2000      	movs	r0, #0
 80096ac:	4604      	mov	r4, r0
 80096ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80096b0:	9208      	str	r2, [sp, #32]
 80096b2:	3b30      	subs	r3, #48	; 0x30
 80096b4:	f100 0201 	add.w	r2, r0, #1
 80096b8:	d013      	beq.n	80096e2 <_strtod_l+0x242>
 80096ba:	9904      	ldr	r1, [sp, #16]
 80096bc:	1905      	adds	r5, r0, r4
 80096be:	4411      	add	r1, r2
 80096c0:	9104      	str	r1, [sp, #16]
 80096c2:	4622      	mov	r2, r4
 80096c4:	210a      	movs	r1, #10
 80096c6:	42aa      	cmp	r2, r5
 80096c8:	d113      	bne.n	80096f2 <_strtod_l+0x252>
 80096ca:	1822      	adds	r2, r4, r0
 80096cc:	2a08      	cmp	r2, #8
 80096ce:	f104 0401 	add.w	r4, r4, #1
 80096d2:	4404      	add	r4, r0
 80096d4:	dc1b      	bgt.n	800970e <_strtod_l+0x26e>
 80096d6:	220a      	movs	r2, #10
 80096d8:	9906      	ldr	r1, [sp, #24]
 80096da:	fb02 3301 	mla	r3, r2, r1, r3
 80096de:	9306      	str	r3, [sp, #24]
 80096e0:	2200      	movs	r2, #0
 80096e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096e4:	4610      	mov	r0, r2
 80096e6:	1c59      	adds	r1, r3, #1
 80096e8:	911b      	str	r1, [sp, #108]	; 0x6c
 80096ea:	785b      	ldrb	r3, [r3, #1]
 80096ec:	e7ca      	b.n	8009684 <_strtod_l+0x1e4>
 80096ee:	4658      	mov	r0, fp
 80096f0:	e7d3      	b.n	800969a <_strtod_l+0x1fa>
 80096f2:	2a08      	cmp	r2, #8
 80096f4:	dc04      	bgt.n	8009700 <_strtod_l+0x260>
 80096f6:	9f06      	ldr	r7, [sp, #24]
 80096f8:	434f      	muls	r7, r1
 80096fa:	9706      	str	r7, [sp, #24]
 80096fc:	3201      	adds	r2, #1
 80096fe:	e7e2      	b.n	80096c6 <_strtod_l+0x226>
 8009700:	1c57      	adds	r7, r2, #1
 8009702:	2f10      	cmp	r7, #16
 8009704:	bfde      	ittt	le
 8009706:	9f05      	ldrle	r7, [sp, #20]
 8009708:	434f      	mulle	r7, r1
 800970a:	9705      	strle	r7, [sp, #20]
 800970c:	e7f6      	b.n	80096fc <_strtod_l+0x25c>
 800970e:	2c10      	cmp	r4, #16
 8009710:	bfdf      	itttt	le
 8009712:	220a      	movle	r2, #10
 8009714:	9905      	ldrle	r1, [sp, #20]
 8009716:	fb02 3301 	mlale	r3, r2, r1, r3
 800971a:	9305      	strle	r3, [sp, #20]
 800971c:	e7e0      	b.n	80096e0 <_strtod_l+0x240>
 800971e:	2300      	movs	r3, #0
 8009720:	2201      	movs	r2, #1
 8009722:	9304      	str	r3, [sp, #16]
 8009724:	e77c      	b.n	8009620 <_strtod_l+0x180>
 8009726:	2700      	movs	r7, #0
 8009728:	1cb3      	adds	r3, r6, #2
 800972a:	931b      	str	r3, [sp, #108]	; 0x6c
 800972c:	78b3      	ldrb	r3, [r6, #2]
 800972e:	e784      	b.n	800963a <_strtod_l+0x19a>
 8009730:	2701      	movs	r7, #1
 8009732:	e7f9      	b.n	8009728 <_strtod_l+0x288>
 8009734:	0800d294 	.word	0x0800d294
 8009738:	0800cfa8 	.word	0x0800cfa8
 800973c:	7ff00000 	.word	0x7ff00000
 8009740:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009742:	1c59      	adds	r1, r3, #1
 8009744:	911b      	str	r1, [sp, #108]	; 0x6c
 8009746:	785b      	ldrb	r3, [r3, #1]
 8009748:	2b30      	cmp	r3, #48	; 0x30
 800974a:	d0f9      	beq.n	8009740 <_strtod_l+0x2a0>
 800974c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009750:	2908      	cmp	r1, #8
 8009752:	f63f af78 	bhi.w	8009646 <_strtod_l+0x1a6>
 8009756:	f04f 0e0a 	mov.w	lr, #10
 800975a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800975e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009760:	9309      	str	r3, [sp, #36]	; 0x24
 8009762:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009764:	1c59      	adds	r1, r3, #1
 8009766:	911b      	str	r1, [sp, #108]	; 0x6c
 8009768:	785b      	ldrb	r3, [r3, #1]
 800976a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800976e:	2d09      	cmp	r5, #9
 8009770:	d935      	bls.n	80097de <_strtod_l+0x33e>
 8009772:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009774:	1b49      	subs	r1, r1, r5
 8009776:	2908      	cmp	r1, #8
 8009778:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800977c:	dc02      	bgt.n	8009784 <_strtod_l+0x2e4>
 800977e:	4565      	cmp	r5, ip
 8009780:	bfa8      	it	ge
 8009782:	4665      	movge	r5, ip
 8009784:	b107      	cbz	r7, 8009788 <_strtod_l+0x2e8>
 8009786:	426d      	negs	r5, r5
 8009788:	2c00      	cmp	r4, #0
 800978a:	d14c      	bne.n	8009826 <_strtod_l+0x386>
 800978c:	9907      	ldr	r1, [sp, #28]
 800978e:	4301      	orrs	r1, r0
 8009790:	f47f aec7 	bne.w	8009522 <_strtod_l+0x82>
 8009794:	2a00      	cmp	r2, #0
 8009796:	f47f aee0 	bne.w	800955a <_strtod_l+0xba>
 800979a:	2b69      	cmp	r3, #105	; 0x69
 800979c:	d026      	beq.n	80097ec <_strtod_l+0x34c>
 800979e:	dc23      	bgt.n	80097e8 <_strtod_l+0x348>
 80097a0:	2b49      	cmp	r3, #73	; 0x49
 80097a2:	d023      	beq.n	80097ec <_strtod_l+0x34c>
 80097a4:	2b4e      	cmp	r3, #78	; 0x4e
 80097a6:	f47f aed8 	bne.w	800955a <_strtod_l+0xba>
 80097aa:	499c      	ldr	r1, [pc, #624]	; (8009a1c <_strtod_l+0x57c>)
 80097ac:	a81b      	add	r0, sp, #108	; 0x6c
 80097ae:	f001 ffb3 	bl	800b718 <__match>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f43f aed1 	beq.w	800955a <_strtod_l+0xba>
 80097b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b28      	cmp	r3, #40	; 0x28
 80097be:	d12c      	bne.n	800981a <_strtod_l+0x37a>
 80097c0:	4997      	ldr	r1, [pc, #604]	; (8009a20 <_strtod_l+0x580>)
 80097c2:	aa1e      	add	r2, sp, #120	; 0x78
 80097c4:	a81b      	add	r0, sp, #108	; 0x6c
 80097c6:	f001 ffbb 	bl	800b740 <__hexnan>
 80097ca:	2805      	cmp	r0, #5
 80097cc:	d125      	bne.n	800981a <_strtod_l+0x37a>
 80097ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80097d0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80097d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80097d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80097dc:	e6a1      	b.n	8009522 <_strtod_l+0x82>
 80097de:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80097e2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80097e6:	e7bc      	b.n	8009762 <_strtod_l+0x2c2>
 80097e8:	2b6e      	cmp	r3, #110	; 0x6e
 80097ea:	e7dc      	b.n	80097a6 <_strtod_l+0x306>
 80097ec:	498d      	ldr	r1, [pc, #564]	; (8009a24 <_strtod_l+0x584>)
 80097ee:	a81b      	add	r0, sp, #108	; 0x6c
 80097f0:	f001 ff92 	bl	800b718 <__match>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	f43f aeb0 	beq.w	800955a <_strtod_l+0xba>
 80097fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097fc:	498a      	ldr	r1, [pc, #552]	; (8009a28 <_strtod_l+0x588>)
 80097fe:	3b01      	subs	r3, #1
 8009800:	a81b      	add	r0, sp, #108	; 0x6c
 8009802:	931b      	str	r3, [sp, #108]	; 0x6c
 8009804:	f001 ff88 	bl	800b718 <__match>
 8009808:	b910      	cbnz	r0, 8009810 <_strtod_l+0x370>
 800980a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800980c:	3301      	adds	r3, #1
 800980e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009810:	f04f 0800 	mov.w	r8, #0
 8009814:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8009a38 <_strtod_l+0x598>
 8009818:	e683      	b.n	8009522 <_strtod_l+0x82>
 800981a:	4884      	ldr	r0, [pc, #528]	; (8009a2c <_strtod_l+0x58c>)
 800981c:	f003 f84e 	bl	800c8bc <nan>
 8009820:	4680      	mov	r8, r0
 8009822:	4689      	mov	r9, r1
 8009824:	e67d      	b.n	8009522 <_strtod_l+0x82>
 8009826:	9b04      	ldr	r3, [sp, #16]
 8009828:	f1bb 0f00 	cmp.w	fp, #0
 800982c:	bf08      	it	eq
 800982e:	46a3      	moveq	fp, r4
 8009830:	1aeb      	subs	r3, r5, r3
 8009832:	2c10      	cmp	r4, #16
 8009834:	9806      	ldr	r0, [sp, #24]
 8009836:	4626      	mov	r6, r4
 8009838:	9307      	str	r3, [sp, #28]
 800983a:	bfa8      	it	ge
 800983c:	2610      	movge	r6, #16
 800983e:	f7f6 fdd1 	bl	80003e4 <__aeabi_ui2d>
 8009842:	2c09      	cmp	r4, #9
 8009844:	4680      	mov	r8, r0
 8009846:	4689      	mov	r9, r1
 8009848:	dd13      	ble.n	8009872 <_strtod_l+0x3d2>
 800984a:	4b79      	ldr	r3, [pc, #484]	; (8009a30 <_strtod_l+0x590>)
 800984c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009850:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009854:	f7f6 fe40 	bl	80004d8 <__aeabi_dmul>
 8009858:	4680      	mov	r8, r0
 800985a:	9805      	ldr	r0, [sp, #20]
 800985c:	4689      	mov	r9, r1
 800985e:	f7f6 fdc1 	bl	80003e4 <__aeabi_ui2d>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	4640      	mov	r0, r8
 8009868:	4649      	mov	r1, r9
 800986a:	f7f6 fc7f 	bl	800016c <__adddf3>
 800986e:	4680      	mov	r8, r0
 8009870:	4689      	mov	r9, r1
 8009872:	2c0f      	cmp	r4, #15
 8009874:	dc36      	bgt.n	80098e4 <_strtod_l+0x444>
 8009876:	9b07      	ldr	r3, [sp, #28]
 8009878:	2b00      	cmp	r3, #0
 800987a:	f43f ae52 	beq.w	8009522 <_strtod_l+0x82>
 800987e:	dd22      	ble.n	80098c6 <_strtod_l+0x426>
 8009880:	2b16      	cmp	r3, #22
 8009882:	dc09      	bgt.n	8009898 <_strtod_l+0x3f8>
 8009884:	4c6a      	ldr	r4, [pc, #424]	; (8009a30 <_strtod_l+0x590>)
 8009886:	4642      	mov	r2, r8
 8009888:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800988c:	464b      	mov	r3, r9
 800988e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009892:	f7f6 fe21 	bl	80004d8 <__aeabi_dmul>
 8009896:	e7c3      	b.n	8009820 <_strtod_l+0x380>
 8009898:	9a07      	ldr	r2, [sp, #28]
 800989a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800989e:	4293      	cmp	r3, r2
 80098a0:	db20      	blt.n	80098e4 <_strtod_l+0x444>
 80098a2:	4d63      	ldr	r5, [pc, #396]	; (8009a30 <_strtod_l+0x590>)
 80098a4:	f1c4 040f 	rsb	r4, r4, #15
 80098a8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80098ac:	4642      	mov	r2, r8
 80098ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098b2:	464b      	mov	r3, r9
 80098b4:	f7f6 fe10 	bl	80004d8 <__aeabi_dmul>
 80098b8:	9b07      	ldr	r3, [sp, #28]
 80098ba:	1b1c      	subs	r4, r3, r4
 80098bc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80098c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098c4:	e7e5      	b.n	8009892 <_strtod_l+0x3f2>
 80098c6:	9b07      	ldr	r3, [sp, #28]
 80098c8:	3316      	adds	r3, #22
 80098ca:	db0b      	blt.n	80098e4 <_strtod_l+0x444>
 80098cc:	9b04      	ldr	r3, [sp, #16]
 80098ce:	4a58      	ldr	r2, [pc, #352]	; (8009a30 <_strtod_l+0x590>)
 80098d0:	1b5d      	subs	r5, r3, r5
 80098d2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80098d6:	4640      	mov	r0, r8
 80098d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098dc:	4649      	mov	r1, r9
 80098de:	f7f6 ff25 	bl	800072c <__aeabi_ddiv>
 80098e2:	e79d      	b.n	8009820 <_strtod_l+0x380>
 80098e4:	9b07      	ldr	r3, [sp, #28]
 80098e6:	1ba6      	subs	r6, r4, r6
 80098e8:	441e      	add	r6, r3
 80098ea:	2e00      	cmp	r6, #0
 80098ec:	dd71      	ble.n	80099d2 <_strtod_l+0x532>
 80098ee:	f016 030f 	ands.w	r3, r6, #15
 80098f2:	d00a      	beq.n	800990a <_strtod_l+0x46a>
 80098f4:	494e      	ldr	r1, [pc, #312]	; (8009a30 <_strtod_l+0x590>)
 80098f6:	4642      	mov	r2, r8
 80098f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80098fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009900:	464b      	mov	r3, r9
 8009902:	f7f6 fde9 	bl	80004d8 <__aeabi_dmul>
 8009906:	4680      	mov	r8, r0
 8009908:	4689      	mov	r9, r1
 800990a:	f036 060f 	bics.w	r6, r6, #15
 800990e:	d050      	beq.n	80099b2 <_strtod_l+0x512>
 8009910:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009914:	dd27      	ble.n	8009966 <_strtod_l+0x4c6>
 8009916:	f04f 0b00 	mov.w	fp, #0
 800991a:	f8cd b010 	str.w	fp, [sp, #16]
 800991e:	f8cd b020 	str.w	fp, [sp, #32]
 8009922:	f8cd b018 	str.w	fp, [sp, #24]
 8009926:	2322      	movs	r3, #34	; 0x22
 8009928:	f04f 0800 	mov.w	r8, #0
 800992c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009a38 <_strtod_l+0x598>
 8009930:	f8ca 3000 	str.w	r3, [sl]
 8009934:	9b08      	ldr	r3, [sp, #32]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f43f adf3 	beq.w	8009522 <_strtod_l+0x82>
 800993c:	4650      	mov	r0, sl
 800993e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009940:	f002 f824 	bl	800b98c <_Bfree>
 8009944:	4650      	mov	r0, sl
 8009946:	9906      	ldr	r1, [sp, #24]
 8009948:	f002 f820 	bl	800b98c <_Bfree>
 800994c:	4650      	mov	r0, sl
 800994e:	9904      	ldr	r1, [sp, #16]
 8009950:	f002 f81c 	bl	800b98c <_Bfree>
 8009954:	4650      	mov	r0, sl
 8009956:	9908      	ldr	r1, [sp, #32]
 8009958:	f002 f818 	bl	800b98c <_Bfree>
 800995c:	4659      	mov	r1, fp
 800995e:	4650      	mov	r0, sl
 8009960:	f002 f814 	bl	800b98c <_Bfree>
 8009964:	e5dd      	b.n	8009522 <_strtod_l+0x82>
 8009966:	2300      	movs	r3, #0
 8009968:	4640      	mov	r0, r8
 800996a:	4649      	mov	r1, r9
 800996c:	461f      	mov	r7, r3
 800996e:	1136      	asrs	r6, r6, #4
 8009970:	2e01      	cmp	r6, #1
 8009972:	dc21      	bgt.n	80099b8 <_strtod_l+0x518>
 8009974:	b10b      	cbz	r3, 800997a <_strtod_l+0x4da>
 8009976:	4680      	mov	r8, r0
 8009978:	4689      	mov	r9, r1
 800997a:	4b2e      	ldr	r3, [pc, #184]	; (8009a34 <_strtod_l+0x594>)
 800997c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009980:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009984:	4642      	mov	r2, r8
 8009986:	e9d7 0100 	ldrd	r0, r1, [r7]
 800998a:	464b      	mov	r3, r9
 800998c:	f7f6 fda4 	bl	80004d8 <__aeabi_dmul>
 8009990:	4b29      	ldr	r3, [pc, #164]	; (8009a38 <_strtod_l+0x598>)
 8009992:	460a      	mov	r2, r1
 8009994:	400b      	ands	r3, r1
 8009996:	4929      	ldr	r1, [pc, #164]	; (8009a3c <_strtod_l+0x59c>)
 8009998:	4680      	mov	r8, r0
 800999a:	428b      	cmp	r3, r1
 800999c:	d8bb      	bhi.n	8009916 <_strtod_l+0x476>
 800999e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80099a2:	428b      	cmp	r3, r1
 80099a4:	bf86      	itte	hi
 80099a6:	f04f 38ff 	movhi.w	r8, #4294967295
 80099aa:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009a40 <_strtod_l+0x5a0>
 80099ae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80099b2:	2300      	movs	r3, #0
 80099b4:	9305      	str	r3, [sp, #20]
 80099b6:	e07e      	b.n	8009ab6 <_strtod_l+0x616>
 80099b8:	07f2      	lsls	r2, r6, #31
 80099ba:	d507      	bpl.n	80099cc <_strtod_l+0x52c>
 80099bc:	4b1d      	ldr	r3, [pc, #116]	; (8009a34 <_strtod_l+0x594>)
 80099be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	f7f6 fd87 	bl	80004d8 <__aeabi_dmul>
 80099ca:	2301      	movs	r3, #1
 80099cc:	3701      	adds	r7, #1
 80099ce:	1076      	asrs	r6, r6, #1
 80099d0:	e7ce      	b.n	8009970 <_strtod_l+0x4d0>
 80099d2:	d0ee      	beq.n	80099b2 <_strtod_l+0x512>
 80099d4:	4276      	negs	r6, r6
 80099d6:	f016 020f 	ands.w	r2, r6, #15
 80099da:	d00a      	beq.n	80099f2 <_strtod_l+0x552>
 80099dc:	4b14      	ldr	r3, [pc, #80]	; (8009a30 <_strtod_l+0x590>)
 80099de:	4640      	mov	r0, r8
 80099e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099e4:	4649      	mov	r1, r9
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	f7f6 fe9f 	bl	800072c <__aeabi_ddiv>
 80099ee:	4680      	mov	r8, r0
 80099f0:	4689      	mov	r9, r1
 80099f2:	1136      	asrs	r6, r6, #4
 80099f4:	d0dd      	beq.n	80099b2 <_strtod_l+0x512>
 80099f6:	2e1f      	cmp	r6, #31
 80099f8:	dd24      	ble.n	8009a44 <_strtod_l+0x5a4>
 80099fa:	f04f 0b00 	mov.w	fp, #0
 80099fe:	f8cd b010 	str.w	fp, [sp, #16]
 8009a02:	f8cd b020 	str.w	fp, [sp, #32]
 8009a06:	f8cd b018 	str.w	fp, [sp, #24]
 8009a0a:	2322      	movs	r3, #34	; 0x22
 8009a0c:	f04f 0800 	mov.w	r8, #0
 8009a10:	f04f 0900 	mov.w	r9, #0
 8009a14:	f8ca 3000 	str.w	r3, [sl]
 8009a18:	e78c      	b.n	8009934 <_strtod_l+0x494>
 8009a1a:	bf00      	nop
 8009a1c:	0800cf79 	.word	0x0800cf79
 8009a20:	0800cfbc 	.word	0x0800cfbc
 8009a24:	0800cf71 	.word	0x0800cf71
 8009a28:	0800d1b0 	.word	0x0800d1b0
 8009a2c:	0800d0ab 	.word	0x0800d0ab
 8009a30:	0800d330 	.word	0x0800d330
 8009a34:	0800d308 	.word	0x0800d308
 8009a38:	7ff00000 	.word	0x7ff00000
 8009a3c:	7ca00000 	.word	0x7ca00000
 8009a40:	7fefffff 	.word	0x7fefffff
 8009a44:	f016 0310 	ands.w	r3, r6, #16
 8009a48:	bf18      	it	ne
 8009a4a:	236a      	movne	r3, #106	; 0x6a
 8009a4c:	4640      	mov	r0, r8
 8009a4e:	9305      	str	r3, [sp, #20]
 8009a50:	4649      	mov	r1, r9
 8009a52:	2300      	movs	r3, #0
 8009a54:	4fb2      	ldr	r7, [pc, #712]	; (8009d20 <_strtod_l+0x880>)
 8009a56:	07f2      	lsls	r2, r6, #31
 8009a58:	d504      	bpl.n	8009a64 <_strtod_l+0x5c4>
 8009a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a5e:	f7f6 fd3b 	bl	80004d8 <__aeabi_dmul>
 8009a62:	2301      	movs	r3, #1
 8009a64:	1076      	asrs	r6, r6, #1
 8009a66:	f107 0708 	add.w	r7, r7, #8
 8009a6a:	d1f4      	bne.n	8009a56 <_strtod_l+0x5b6>
 8009a6c:	b10b      	cbz	r3, 8009a72 <_strtod_l+0x5d2>
 8009a6e:	4680      	mov	r8, r0
 8009a70:	4689      	mov	r9, r1
 8009a72:	9b05      	ldr	r3, [sp, #20]
 8009a74:	b1bb      	cbz	r3, 8009aa6 <_strtod_l+0x606>
 8009a76:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8009a7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	4649      	mov	r1, r9
 8009a82:	dd10      	ble.n	8009aa6 <_strtod_l+0x606>
 8009a84:	2b1f      	cmp	r3, #31
 8009a86:	f340 812b 	ble.w	8009ce0 <_strtod_l+0x840>
 8009a8a:	2b34      	cmp	r3, #52	; 0x34
 8009a8c:	bfd8      	it	le
 8009a8e:	f04f 32ff 	movle.w	r2, #4294967295
 8009a92:	f04f 0800 	mov.w	r8, #0
 8009a96:	bfcf      	iteee	gt
 8009a98:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009a9c:	3b20      	suble	r3, #32
 8009a9e:	fa02 f303 	lslle.w	r3, r2, r3
 8009aa2:	ea03 0901 	andle.w	r9, r3, r1
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	4640      	mov	r0, r8
 8009aac:	4649      	mov	r1, r9
 8009aae:	f7f6 ff7b 	bl	80009a8 <__aeabi_dcmpeq>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d1a1      	bne.n	80099fa <_strtod_l+0x55a>
 8009ab6:	9b06      	ldr	r3, [sp, #24]
 8009ab8:	465a      	mov	r2, fp
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	4650      	mov	r0, sl
 8009abe:	4623      	mov	r3, r4
 8009ac0:	9908      	ldr	r1, [sp, #32]
 8009ac2:	f001 ffcf 	bl	800ba64 <__s2b>
 8009ac6:	9008      	str	r0, [sp, #32]
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	f43f af24 	beq.w	8009916 <_strtod_l+0x476>
 8009ace:	9b04      	ldr	r3, [sp, #16]
 8009ad0:	f04f 0b00 	mov.w	fp, #0
 8009ad4:	1b5d      	subs	r5, r3, r5
 8009ad6:	9b07      	ldr	r3, [sp, #28]
 8009ad8:	f8cd b010 	str.w	fp, [sp, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	bfb4      	ite	lt
 8009ae0:	462b      	movlt	r3, r5
 8009ae2:	2300      	movge	r3, #0
 8009ae4:	930e      	str	r3, [sp, #56]	; 0x38
 8009ae6:	9b07      	ldr	r3, [sp, #28]
 8009ae8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009aec:	9316      	str	r3, [sp, #88]	; 0x58
 8009aee:	9b08      	ldr	r3, [sp, #32]
 8009af0:	4650      	mov	r0, sl
 8009af2:	6859      	ldr	r1, [r3, #4]
 8009af4:	f001 ff0a 	bl	800b90c <_Balloc>
 8009af8:	9006      	str	r0, [sp, #24]
 8009afa:	2800      	cmp	r0, #0
 8009afc:	f43f af13 	beq.w	8009926 <_strtod_l+0x486>
 8009b00:	9b08      	ldr	r3, [sp, #32]
 8009b02:	300c      	adds	r0, #12
 8009b04:	691a      	ldr	r2, [r3, #16]
 8009b06:	f103 010c 	add.w	r1, r3, #12
 8009b0a:	3202      	adds	r2, #2
 8009b0c:	0092      	lsls	r2, r2, #2
 8009b0e:	f7fe fcbc 	bl	800848a <memcpy>
 8009b12:	ab1e      	add	r3, sp, #120	; 0x78
 8009b14:	9301      	str	r3, [sp, #4]
 8009b16:	ab1d      	add	r3, sp, #116	; 0x74
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	4642      	mov	r2, r8
 8009b1c:	464b      	mov	r3, r9
 8009b1e:	4650      	mov	r0, sl
 8009b20:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8009b24:	f002 fadc 	bl	800c0e0 <__d2b>
 8009b28:	901c      	str	r0, [sp, #112]	; 0x70
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	f43f aefb 	beq.w	8009926 <_strtod_l+0x486>
 8009b30:	2101      	movs	r1, #1
 8009b32:	4650      	mov	r0, sl
 8009b34:	f002 f82e 	bl	800bb94 <__i2b>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	9004      	str	r0, [sp, #16]
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	f43f aef2 	beq.w	8009926 <_strtod_l+0x486>
 8009b42:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009b44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009b46:	2d00      	cmp	r5, #0
 8009b48:	bfab      	itete	ge
 8009b4a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009b4c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009b4e:	18ee      	addge	r6, r5, r3
 8009b50:	1b5c      	sublt	r4, r3, r5
 8009b52:	9b05      	ldr	r3, [sp, #20]
 8009b54:	bfa8      	it	ge
 8009b56:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8009b58:	eba5 0503 	sub.w	r5, r5, r3
 8009b5c:	4415      	add	r5, r2
 8009b5e:	4b71      	ldr	r3, [pc, #452]	; (8009d24 <_strtod_l+0x884>)
 8009b60:	f105 35ff 	add.w	r5, r5, #4294967295
 8009b64:	bfb8      	it	lt
 8009b66:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009b68:	429d      	cmp	r5, r3
 8009b6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009b6e:	f280 80c9 	bge.w	8009d04 <_strtod_l+0x864>
 8009b72:	1b5b      	subs	r3, r3, r5
 8009b74:	2b1f      	cmp	r3, #31
 8009b76:	f04f 0701 	mov.w	r7, #1
 8009b7a:	eba2 0203 	sub.w	r2, r2, r3
 8009b7e:	f300 80b6 	bgt.w	8009cee <_strtod_l+0x84e>
 8009b82:	2500      	movs	r5, #0
 8009b84:	fa07 f303 	lsl.w	r3, r7, r3
 8009b88:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b8a:	18b7      	adds	r7, r6, r2
 8009b8c:	9b05      	ldr	r3, [sp, #20]
 8009b8e:	42be      	cmp	r6, r7
 8009b90:	4414      	add	r4, r2
 8009b92:	441c      	add	r4, r3
 8009b94:	4633      	mov	r3, r6
 8009b96:	bfa8      	it	ge
 8009b98:	463b      	movge	r3, r7
 8009b9a:	42a3      	cmp	r3, r4
 8009b9c:	bfa8      	it	ge
 8009b9e:	4623      	movge	r3, r4
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	bfc2      	ittt	gt
 8009ba4:	1aff      	subgt	r7, r7, r3
 8009ba6:	1ae4      	subgt	r4, r4, r3
 8009ba8:	1af6      	subgt	r6, r6, r3
 8009baa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	dd17      	ble.n	8009be0 <_strtod_l+0x740>
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	4650      	mov	r0, sl
 8009bb4:	9904      	ldr	r1, [sp, #16]
 8009bb6:	f002 f8a7 	bl	800bd08 <__pow5mult>
 8009bba:	9004      	str	r0, [sp, #16]
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	f43f aeb2 	beq.w	8009926 <_strtod_l+0x486>
 8009bc2:	4601      	mov	r1, r0
 8009bc4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	f001 fffa 	bl	800bbc0 <__multiply>
 8009bcc:	9009      	str	r0, [sp, #36]	; 0x24
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	f43f aea9 	beq.w	8009926 <_strtod_l+0x486>
 8009bd4:	4650      	mov	r0, sl
 8009bd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009bd8:	f001 fed8 	bl	800b98c <_Bfree>
 8009bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bde:	931c      	str	r3, [sp, #112]	; 0x70
 8009be0:	2f00      	cmp	r7, #0
 8009be2:	f300 8093 	bgt.w	8009d0c <_strtod_l+0x86c>
 8009be6:	9b07      	ldr	r3, [sp, #28]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	dd08      	ble.n	8009bfe <_strtod_l+0x75e>
 8009bec:	4650      	mov	r0, sl
 8009bee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009bf0:	9906      	ldr	r1, [sp, #24]
 8009bf2:	f002 f889 	bl	800bd08 <__pow5mult>
 8009bf6:	9006      	str	r0, [sp, #24]
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	f43f ae94 	beq.w	8009926 <_strtod_l+0x486>
 8009bfe:	2c00      	cmp	r4, #0
 8009c00:	dd08      	ble.n	8009c14 <_strtod_l+0x774>
 8009c02:	4622      	mov	r2, r4
 8009c04:	4650      	mov	r0, sl
 8009c06:	9906      	ldr	r1, [sp, #24]
 8009c08:	f002 f8d8 	bl	800bdbc <__lshift>
 8009c0c:	9006      	str	r0, [sp, #24]
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	f43f ae89 	beq.w	8009926 <_strtod_l+0x486>
 8009c14:	2e00      	cmp	r6, #0
 8009c16:	dd08      	ble.n	8009c2a <_strtod_l+0x78a>
 8009c18:	4632      	mov	r2, r6
 8009c1a:	4650      	mov	r0, sl
 8009c1c:	9904      	ldr	r1, [sp, #16]
 8009c1e:	f002 f8cd 	bl	800bdbc <__lshift>
 8009c22:	9004      	str	r0, [sp, #16]
 8009c24:	2800      	cmp	r0, #0
 8009c26:	f43f ae7e 	beq.w	8009926 <_strtod_l+0x486>
 8009c2a:	4650      	mov	r0, sl
 8009c2c:	9a06      	ldr	r2, [sp, #24]
 8009c2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c30:	f002 f94c 	bl	800becc <__mdiff>
 8009c34:	4683      	mov	fp, r0
 8009c36:	2800      	cmp	r0, #0
 8009c38:	f43f ae75 	beq.w	8009926 <_strtod_l+0x486>
 8009c3c:	2400      	movs	r4, #0
 8009c3e:	68c3      	ldr	r3, [r0, #12]
 8009c40:	9904      	ldr	r1, [sp, #16]
 8009c42:	60c4      	str	r4, [r0, #12]
 8009c44:	930d      	str	r3, [sp, #52]	; 0x34
 8009c46:	f002 f925 	bl	800be94 <__mcmp>
 8009c4a:	42a0      	cmp	r0, r4
 8009c4c:	da70      	bge.n	8009d30 <_strtod_l+0x890>
 8009c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c50:	ea53 0308 	orrs.w	r3, r3, r8
 8009c54:	f040 8096 	bne.w	8009d84 <_strtod_l+0x8e4>
 8009c58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f040 8091 	bne.w	8009d84 <_strtod_l+0x8e4>
 8009c62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c66:	0d1b      	lsrs	r3, r3, #20
 8009c68:	051b      	lsls	r3, r3, #20
 8009c6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009c6e:	f240 8089 	bls.w	8009d84 <_strtod_l+0x8e4>
 8009c72:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009c76:	b923      	cbnz	r3, 8009c82 <_strtod_l+0x7e2>
 8009c78:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	f340 8081 	ble.w	8009d84 <_strtod_l+0x8e4>
 8009c82:	4659      	mov	r1, fp
 8009c84:	2201      	movs	r2, #1
 8009c86:	4650      	mov	r0, sl
 8009c88:	f002 f898 	bl	800bdbc <__lshift>
 8009c8c:	9904      	ldr	r1, [sp, #16]
 8009c8e:	4683      	mov	fp, r0
 8009c90:	f002 f900 	bl	800be94 <__mcmp>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	dd75      	ble.n	8009d84 <_strtod_l+0x8e4>
 8009c98:	9905      	ldr	r1, [sp, #20]
 8009c9a:	464b      	mov	r3, r9
 8009c9c:	4a22      	ldr	r2, [pc, #136]	; (8009d28 <_strtod_l+0x888>)
 8009c9e:	2900      	cmp	r1, #0
 8009ca0:	f000 8091 	beq.w	8009dc6 <_strtod_l+0x926>
 8009ca4:	ea02 0109 	and.w	r1, r2, r9
 8009ca8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009cac:	f300 808b 	bgt.w	8009dc6 <_strtod_l+0x926>
 8009cb0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009cb4:	f77f aea9 	ble.w	8009a0a <_strtod_l+0x56a>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4a1c      	ldr	r2, [pc, #112]	; (8009d2c <_strtod_l+0x88c>)
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009cc8:	f7f6 fc06 	bl	80004d8 <__aeabi_dmul>
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4303      	orrs	r3, r0
 8009cd0:	bf08      	it	eq
 8009cd2:	2322      	moveq	r3, #34	; 0x22
 8009cd4:	4680      	mov	r8, r0
 8009cd6:	4689      	mov	r9, r1
 8009cd8:	bf08      	it	eq
 8009cda:	f8ca 3000 	streq.w	r3, [sl]
 8009cde:	e62d      	b.n	800993c <_strtod_l+0x49c>
 8009ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce8:	ea03 0808 	and.w	r8, r3, r8
 8009cec:	e6db      	b.n	8009aa6 <_strtod_l+0x606>
 8009cee:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009cf2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009cf6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009cfa:	35e2      	adds	r5, #226	; 0xe2
 8009cfc:	fa07 f505 	lsl.w	r5, r7, r5
 8009d00:	970f      	str	r7, [sp, #60]	; 0x3c
 8009d02:	e742      	b.n	8009b8a <_strtod_l+0x6ea>
 8009d04:	2301      	movs	r3, #1
 8009d06:	2500      	movs	r5, #0
 8009d08:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d0a:	e73e      	b.n	8009b8a <_strtod_l+0x6ea>
 8009d0c:	463a      	mov	r2, r7
 8009d0e:	4650      	mov	r0, sl
 8009d10:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d12:	f002 f853 	bl	800bdbc <__lshift>
 8009d16:	901c      	str	r0, [sp, #112]	; 0x70
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	f47f af64 	bne.w	8009be6 <_strtod_l+0x746>
 8009d1e:	e602      	b.n	8009926 <_strtod_l+0x486>
 8009d20:	0800cfd0 	.word	0x0800cfd0
 8009d24:	fffffc02 	.word	0xfffffc02
 8009d28:	7ff00000 	.word	0x7ff00000
 8009d2c:	39500000 	.word	0x39500000
 8009d30:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009d34:	d166      	bne.n	8009e04 <_strtod_l+0x964>
 8009d36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d3c:	b35a      	cbz	r2, 8009d96 <_strtod_l+0x8f6>
 8009d3e:	4a9c      	ldr	r2, [pc, #624]	; (8009fb0 <_strtod_l+0xb10>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d12c      	bne.n	8009d9e <_strtod_l+0x8fe>
 8009d44:	9b05      	ldr	r3, [sp, #20]
 8009d46:	4640      	mov	r0, r8
 8009d48:	b303      	cbz	r3, 8009d8c <_strtod_l+0x8ec>
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	4a99      	ldr	r2, [pc, #612]	; (8009fb4 <_strtod_l+0xb14>)
 8009d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8009d52:	401a      	ands	r2, r3
 8009d54:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009d58:	d81b      	bhi.n	8009d92 <_strtod_l+0x8f2>
 8009d5a:	0d12      	lsrs	r2, r2, #20
 8009d5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009d60:	fa01 f303 	lsl.w	r3, r1, r3
 8009d64:	4298      	cmp	r0, r3
 8009d66:	d11a      	bne.n	8009d9e <_strtod_l+0x8fe>
 8009d68:	4b93      	ldr	r3, [pc, #588]	; (8009fb8 <_strtod_l+0xb18>)
 8009d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d102      	bne.n	8009d76 <_strtod_l+0x8d6>
 8009d70:	3001      	adds	r0, #1
 8009d72:	f43f add8 	beq.w	8009926 <_strtod_l+0x486>
 8009d76:	f04f 0800 	mov.w	r8, #0
 8009d7a:	4b8e      	ldr	r3, [pc, #568]	; (8009fb4 <_strtod_l+0xb14>)
 8009d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d7e:	401a      	ands	r2, r3
 8009d80:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009d84:	9b05      	ldr	r3, [sp, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d196      	bne.n	8009cb8 <_strtod_l+0x818>
 8009d8a:	e5d7      	b.n	800993c <_strtod_l+0x49c>
 8009d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d90:	e7e8      	b.n	8009d64 <_strtod_l+0x8c4>
 8009d92:	460b      	mov	r3, r1
 8009d94:	e7e6      	b.n	8009d64 <_strtod_l+0x8c4>
 8009d96:	ea53 0308 	orrs.w	r3, r3, r8
 8009d9a:	f43f af7d 	beq.w	8009c98 <_strtod_l+0x7f8>
 8009d9e:	b1e5      	cbz	r5, 8009dda <_strtod_l+0x93a>
 8009da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009da2:	421d      	tst	r5, r3
 8009da4:	d0ee      	beq.n	8009d84 <_strtod_l+0x8e4>
 8009da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009da8:	4640      	mov	r0, r8
 8009daa:	4649      	mov	r1, r9
 8009dac:	9a05      	ldr	r2, [sp, #20]
 8009dae:	b1c3      	cbz	r3, 8009de2 <_strtod_l+0x942>
 8009db0:	f7ff fb53 	bl	800945a <sulp>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009dbc:	f7f6 f9d6 	bl	800016c <__adddf3>
 8009dc0:	4680      	mov	r8, r0
 8009dc2:	4689      	mov	r9, r1
 8009dc4:	e7de      	b.n	8009d84 <_strtod_l+0x8e4>
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009dcc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009dd0:	f04f 38ff 	mov.w	r8, #4294967295
 8009dd4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009dd8:	e7d4      	b.n	8009d84 <_strtod_l+0x8e4>
 8009dda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ddc:	ea13 0f08 	tst.w	r3, r8
 8009de0:	e7e0      	b.n	8009da4 <_strtod_l+0x904>
 8009de2:	f7ff fb3a 	bl	800945a <sulp>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009dee:	f7f6 f9bb 	bl	8000168 <__aeabi_dsub>
 8009df2:	2200      	movs	r2, #0
 8009df4:	2300      	movs	r3, #0
 8009df6:	4680      	mov	r8, r0
 8009df8:	4689      	mov	r9, r1
 8009dfa:	f7f6 fdd5 	bl	80009a8 <__aeabi_dcmpeq>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d0c0      	beq.n	8009d84 <_strtod_l+0x8e4>
 8009e02:	e602      	b.n	8009a0a <_strtod_l+0x56a>
 8009e04:	4658      	mov	r0, fp
 8009e06:	9904      	ldr	r1, [sp, #16]
 8009e08:	f002 f9c6 	bl	800c198 <__ratio>
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e12:	4606      	mov	r6, r0
 8009e14:	460f      	mov	r7, r1
 8009e16:	f7f6 fddb 	bl	80009d0 <__aeabi_dcmple>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d075      	beq.n	8009f0a <_strtod_l+0xa6a>
 8009e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d047      	beq.n	8009eb4 <_strtod_l+0xa14>
 8009e24:	2600      	movs	r6, #0
 8009e26:	4f65      	ldr	r7, [pc, #404]	; (8009fbc <_strtod_l+0xb1c>)
 8009e28:	4d64      	ldr	r5, [pc, #400]	; (8009fbc <_strtod_l+0xb1c>)
 8009e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e30:	0d1b      	lsrs	r3, r3, #20
 8009e32:	051b      	lsls	r3, r3, #20
 8009e34:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e38:	4b61      	ldr	r3, [pc, #388]	; (8009fc0 <_strtod_l+0xb20>)
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	f040 80c8 	bne.w	8009fd0 <_strtod_l+0xb30>
 8009e40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e44:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e4a:	4640      	mov	r0, r8
 8009e4c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009e50:	4649      	mov	r1, r9
 8009e52:	f002 f8cb 	bl	800bfec <__ulp>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	4639      	mov	r1, r7
 8009e5e:	f7f6 fb3b 	bl	80004d8 <__aeabi_dmul>
 8009e62:	4642      	mov	r2, r8
 8009e64:	464b      	mov	r3, r9
 8009e66:	f7f6 f981 	bl	800016c <__adddf3>
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	4951      	ldr	r1, [pc, #324]	; (8009fb4 <_strtod_l+0xb14>)
 8009e6e:	4a55      	ldr	r2, [pc, #340]	; (8009fc4 <_strtod_l+0xb24>)
 8009e70:	4019      	ands	r1, r3
 8009e72:	4291      	cmp	r1, r2
 8009e74:	4680      	mov	r8, r0
 8009e76:	d95e      	bls.n	8009f36 <_strtod_l+0xa96>
 8009e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e7a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d103      	bne.n	8009e8a <_strtod_l+0x9ea>
 8009e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e84:	3301      	adds	r3, #1
 8009e86:	f43f ad4e 	beq.w	8009926 <_strtod_l+0x486>
 8009e8a:	f04f 38ff 	mov.w	r8, #4294967295
 8009e8e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009fb8 <_strtod_l+0xb18>
 8009e92:	4650      	mov	r0, sl
 8009e94:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e96:	f001 fd79 	bl	800b98c <_Bfree>
 8009e9a:	4650      	mov	r0, sl
 8009e9c:	9906      	ldr	r1, [sp, #24]
 8009e9e:	f001 fd75 	bl	800b98c <_Bfree>
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	9904      	ldr	r1, [sp, #16]
 8009ea6:	f001 fd71 	bl	800b98c <_Bfree>
 8009eaa:	4659      	mov	r1, fp
 8009eac:	4650      	mov	r0, sl
 8009eae:	f001 fd6d 	bl	800b98c <_Bfree>
 8009eb2:	e61c      	b.n	8009aee <_strtod_l+0x64e>
 8009eb4:	f1b8 0f00 	cmp.w	r8, #0
 8009eb8:	d119      	bne.n	8009eee <_strtod_l+0xa4e>
 8009eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ec0:	b9e3      	cbnz	r3, 8009efc <_strtod_l+0xa5c>
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	4639      	mov	r1, r7
 8009ec8:	4b3c      	ldr	r3, [pc, #240]	; (8009fbc <_strtod_l+0xb1c>)
 8009eca:	f7f6 fd77 	bl	80009bc <__aeabi_dcmplt>
 8009ece:	b9c8      	cbnz	r0, 8009f04 <_strtod_l+0xa64>
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	4b3c      	ldr	r3, [pc, #240]	; (8009fc8 <_strtod_l+0xb28>)
 8009ed8:	f7f6 fafe 	bl	80004d8 <__aeabi_dmul>
 8009edc:	4604      	mov	r4, r0
 8009ede:	460d      	mov	r5, r1
 8009ee0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009ee4:	9418      	str	r4, [sp, #96]	; 0x60
 8009ee6:	9319      	str	r3, [sp, #100]	; 0x64
 8009ee8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8009eec:	e79d      	b.n	8009e2a <_strtod_l+0x98a>
 8009eee:	f1b8 0f01 	cmp.w	r8, #1
 8009ef2:	d103      	bne.n	8009efc <_strtod_l+0xa5c>
 8009ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f43f ad87 	beq.w	8009a0a <_strtod_l+0x56a>
 8009efc:	2600      	movs	r6, #0
 8009efe:	2400      	movs	r4, #0
 8009f00:	4f32      	ldr	r7, [pc, #200]	; (8009fcc <_strtod_l+0xb2c>)
 8009f02:	e791      	b.n	8009e28 <_strtod_l+0x988>
 8009f04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009f06:	4d30      	ldr	r5, [pc, #192]	; (8009fc8 <_strtod_l+0xb28>)
 8009f08:	e7ea      	b.n	8009ee0 <_strtod_l+0xa40>
 8009f0a:	4b2f      	ldr	r3, [pc, #188]	; (8009fc8 <_strtod_l+0xb28>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	4630      	mov	r0, r6
 8009f10:	4639      	mov	r1, r7
 8009f12:	f7f6 fae1 	bl	80004d8 <__aeabi_dmul>
 8009f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f18:	4604      	mov	r4, r0
 8009f1a:	460d      	mov	r5, r1
 8009f1c:	b933      	cbnz	r3, 8009f2c <_strtod_l+0xa8c>
 8009f1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f22:	9010      	str	r0, [sp, #64]	; 0x40
 8009f24:	9311      	str	r3, [sp, #68]	; 0x44
 8009f26:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009f2a:	e77e      	b.n	8009e2a <_strtod_l+0x98a>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009f34:	e7f7      	b.n	8009f26 <_strtod_l+0xa86>
 8009f36:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009f3a:	9b05      	ldr	r3, [sp, #20]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1a8      	bne.n	8009e92 <_strtod_l+0x9f2>
 8009f40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f46:	0d1b      	lsrs	r3, r3, #20
 8009f48:	051b      	lsls	r3, r3, #20
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d1a1      	bne.n	8009e92 <_strtod_l+0x9f2>
 8009f4e:	4620      	mov	r0, r4
 8009f50:	4629      	mov	r1, r5
 8009f52:	f7f7 f887 	bl	8001064 <__aeabi_d2lz>
 8009f56:	f7f6 fa91 	bl	800047c <__aeabi_l2d>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4620      	mov	r0, r4
 8009f60:	4629      	mov	r1, r5
 8009f62:	f7f6 f901 	bl	8000168 <__aeabi_dsub>
 8009f66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f6c:	ea43 0308 	orr.w	r3, r3, r8
 8009f70:	4313      	orrs	r3, r2
 8009f72:	4604      	mov	r4, r0
 8009f74:	460d      	mov	r5, r1
 8009f76:	d066      	beq.n	800a046 <_strtod_l+0xba6>
 8009f78:	a309      	add	r3, pc, #36	; (adr r3, 8009fa0 <_strtod_l+0xb00>)
 8009f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7e:	f7f6 fd1d 	bl	80009bc <__aeabi_dcmplt>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	f47f acda 	bne.w	800993c <_strtod_l+0x49c>
 8009f88:	a307      	add	r3, pc, #28	; (adr r3, 8009fa8 <_strtod_l+0xb08>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	4620      	mov	r0, r4
 8009f90:	4629      	mov	r1, r5
 8009f92:	f7f6 fd31 	bl	80009f8 <__aeabi_dcmpgt>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	f43f af7b 	beq.w	8009e92 <_strtod_l+0x9f2>
 8009f9c:	e4ce      	b.n	800993c <_strtod_l+0x49c>
 8009f9e:	bf00      	nop
 8009fa0:	94a03595 	.word	0x94a03595
 8009fa4:	3fdfffff 	.word	0x3fdfffff
 8009fa8:	35afe535 	.word	0x35afe535
 8009fac:	3fe00000 	.word	0x3fe00000
 8009fb0:	000fffff 	.word	0x000fffff
 8009fb4:	7ff00000 	.word	0x7ff00000
 8009fb8:	7fefffff 	.word	0x7fefffff
 8009fbc:	3ff00000 	.word	0x3ff00000
 8009fc0:	7fe00000 	.word	0x7fe00000
 8009fc4:	7c9fffff 	.word	0x7c9fffff
 8009fc8:	3fe00000 	.word	0x3fe00000
 8009fcc:	bff00000 	.word	0xbff00000
 8009fd0:	9b05      	ldr	r3, [sp, #20]
 8009fd2:	b313      	cbz	r3, 800a01a <_strtod_l+0xb7a>
 8009fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009fda:	d81e      	bhi.n	800a01a <_strtod_l+0xb7a>
 8009fdc:	a326      	add	r3, pc, #152	; (adr r3, 800a078 <_strtod_l+0xbd8>)
 8009fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	f7f6 fcf3 	bl	80009d0 <__aeabi_dcmple>
 8009fea:	b190      	cbz	r0, 800a012 <_strtod_l+0xb72>
 8009fec:	4629      	mov	r1, r5
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f7f6 fd4a 	bl	8000a88 <__aeabi_d2uiz>
 8009ff4:	2801      	cmp	r0, #1
 8009ff6:	bf38      	it	cc
 8009ff8:	2001      	movcc	r0, #1
 8009ffa:	f7f6 f9f3 	bl	80003e4 <__aeabi_ui2d>
 8009ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a000:	4604      	mov	r4, r0
 800a002:	460d      	mov	r5, r1
 800a004:	b9d3      	cbnz	r3, 800a03c <_strtod_l+0xb9c>
 800a006:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a00a:	9012      	str	r0, [sp, #72]	; 0x48
 800a00c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a00e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a012:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a014:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a018:	1a9f      	subs	r7, r3, r2
 800a01a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a01e:	f001 ffe5 	bl	800bfec <__ulp>
 800a022:	4602      	mov	r2, r0
 800a024:	460b      	mov	r3, r1
 800a026:	4630      	mov	r0, r6
 800a028:	4639      	mov	r1, r7
 800a02a:	f7f6 fa55 	bl	80004d8 <__aeabi_dmul>
 800a02e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a032:	f7f6 f89b 	bl	800016c <__adddf3>
 800a036:	4680      	mov	r8, r0
 800a038:	4689      	mov	r9, r1
 800a03a:	e77e      	b.n	8009f3a <_strtod_l+0xa9a>
 800a03c:	4602      	mov	r2, r0
 800a03e:	460b      	mov	r3, r1
 800a040:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a044:	e7e3      	b.n	800a00e <_strtod_l+0xb6e>
 800a046:	a30e      	add	r3, pc, #56	; (adr r3, 800a080 <_strtod_l+0xbe0>)
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	f7f6 fcb6 	bl	80009bc <__aeabi_dcmplt>
 800a050:	e7a1      	b.n	8009f96 <_strtod_l+0xaf6>
 800a052:	2300      	movs	r3, #0
 800a054:	930c      	str	r3, [sp, #48]	; 0x30
 800a056:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a058:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	f7ff ba65 	b.w	800952a <_strtod_l+0x8a>
 800a060:	2b65      	cmp	r3, #101	; 0x65
 800a062:	f43f ab5c 	beq.w	800971e <_strtod_l+0x27e>
 800a066:	2b45      	cmp	r3, #69	; 0x45
 800a068:	f43f ab59 	beq.w	800971e <_strtod_l+0x27e>
 800a06c:	2201      	movs	r2, #1
 800a06e:	f7ff bb8d 	b.w	800978c <_strtod_l+0x2ec>
 800a072:	bf00      	nop
 800a074:	f3af 8000 	nop.w
 800a078:	ffc00000 	.word	0xffc00000
 800a07c:	41dfffff 	.word	0x41dfffff
 800a080:	94a03595 	.word	0x94a03595
 800a084:	3fcfffff 	.word	0x3fcfffff

0800a088 <_strtod_r>:
 800a088:	4b01      	ldr	r3, [pc, #4]	; (800a090 <_strtod_r+0x8>)
 800a08a:	f7ff ba09 	b.w	80094a0 <_strtod_l>
 800a08e:	bf00      	nop
 800a090:	2000007c 	.word	0x2000007c

0800a094 <strtod>:
 800a094:	460a      	mov	r2, r1
 800a096:	4601      	mov	r1, r0
 800a098:	4802      	ldr	r0, [pc, #8]	; (800a0a4 <strtod+0x10>)
 800a09a:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <strtod+0x14>)
 800a09c:	6800      	ldr	r0, [r0, #0]
 800a09e:	f7ff b9ff 	b.w	80094a0 <_strtod_l>
 800a0a2:	bf00      	nop
 800a0a4:	20000014 	.word	0x20000014
 800a0a8:	2000007c 	.word	0x2000007c

0800a0ac <strtok>:
 800a0ac:	4b16      	ldr	r3, [pc, #88]	; (800a108 <strtok+0x5c>)
 800a0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b2:	681f      	ldr	r7, [r3, #0]
 800a0b4:	4605      	mov	r5, r0
 800a0b6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a0b8:	460e      	mov	r6, r1
 800a0ba:	b9ec      	cbnz	r4, 800a0f8 <strtok+0x4c>
 800a0bc:	2050      	movs	r0, #80	; 0x50
 800a0be:	f001 fbf1 	bl	800b8a4 <malloc>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	65b8      	str	r0, [r7, #88]	; 0x58
 800a0c6:	b920      	cbnz	r0, 800a0d2 <strtok+0x26>
 800a0c8:	2157      	movs	r1, #87	; 0x57
 800a0ca:	4b10      	ldr	r3, [pc, #64]	; (800a10c <strtok+0x60>)
 800a0cc:	4810      	ldr	r0, [pc, #64]	; (800a110 <strtok+0x64>)
 800a0ce:	f000 f8ed 	bl	800a2ac <__assert_func>
 800a0d2:	e9c0 4400 	strd	r4, r4, [r0]
 800a0d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a0da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a0de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a0e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a0e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a0ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a0ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a0f2:	6184      	str	r4, [r0, #24]
 800a0f4:	7704      	strb	r4, [r0, #28]
 800a0f6:	6244      	str	r4, [r0, #36]	; 0x24
 800a0f8:	4631      	mov	r1, r6
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0fe:	2301      	movs	r3, #1
 800a100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a104:	f000 b806 	b.w	800a114 <__strtok_r>
 800a108:	20000014 	.word	0x20000014
 800a10c:	0800cff8 	.word	0x0800cff8
 800a110:	0800d00f 	.word	0x0800d00f

0800a114 <__strtok_r>:
 800a114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a116:	b908      	cbnz	r0, 800a11c <__strtok_r+0x8>
 800a118:	6810      	ldr	r0, [r2, #0]
 800a11a:	b188      	cbz	r0, 800a140 <__strtok_r+0x2c>
 800a11c:	4604      	mov	r4, r0
 800a11e:	460f      	mov	r7, r1
 800a120:	4620      	mov	r0, r4
 800a122:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a126:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a12a:	b91e      	cbnz	r6, 800a134 <__strtok_r+0x20>
 800a12c:	b965      	cbnz	r5, 800a148 <__strtok_r+0x34>
 800a12e:	4628      	mov	r0, r5
 800a130:	6015      	str	r5, [r2, #0]
 800a132:	e005      	b.n	800a140 <__strtok_r+0x2c>
 800a134:	42b5      	cmp	r5, r6
 800a136:	d1f6      	bne.n	800a126 <__strtok_r+0x12>
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1f0      	bne.n	800a11e <__strtok_r+0xa>
 800a13c:	6014      	str	r4, [r2, #0]
 800a13e:	7003      	strb	r3, [r0, #0]
 800a140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a142:	461c      	mov	r4, r3
 800a144:	e00c      	b.n	800a160 <__strtok_r+0x4c>
 800a146:	b915      	cbnz	r5, 800a14e <__strtok_r+0x3a>
 800a148:	460e      	mov	r6, r1
 800a14a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a14e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a152:	42ab      	cmp	r3, r5
 800a154:	d1f7      	bne.n	800a146 <__strtok_r+0x32>
 800a156:	2b00      	cmp	r3, #0
 800a158:	d0f3      	beq.n	800a142 <__strtok_r+0x2e>
 800a15a:	2300      	movs	r3, #0
 800a15c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a160:	6014      	str	r4, [r2, #0]
 800a162:	e7ed      	b.n	800a140 <__strtok_r+0x2c>

0800a164 <_strtol_l.isra.0>:
 800a164:	2b01      	cmp	r3, #1
 800a166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a16a:	4686      	mov	lr, r0
 800a16c:	d001      	beq.n	800a172 <_strtol_l.isra.0+0xe>
 800a16e:	2b24      	cmp	r3, #36	; 0x24
 800a170:	d906      	bls.n	800a180 <_strtol_l.isra.0+0x1c>
 800a172:	f7fe f867 	bl	8008244 <__errno>
 800a176:	2316      	movs	r3, #22
 800a178:	6003      	str	r3, [r0, #0]
 800a17a:	2000      	movs	r0, #0
 800a17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a180:	468c      	mov	ip, r1
 800a182:	4e3a      	ldr	r6, [pc, #232]	; (800a26c <_strtol_l.isra.0+0x108>)
 800a184:	4660      	mov	r0, ip
 800a186:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a18a:	5da5      	ldrb	r5, [r4, r6]
 800a18c:	f015 0508 	ands.w	r5, r5, #8
 800a190:	d1f8      	bne.n	800a184 <_strtol_l.isra.0+0x20>
 800a192:	2c2d      	cmp	r4, #45	; 0x2d
 800a194:	d133      	bne.n	800a1fe <_strtol_l.isra.0+0x9a>
 800a196:	f04f 0801 	mov.w	r8, #1
 800a19a:	f89c 4000 	ldrb.w	r4, [ip]
 800a19e:	f100 0c02 	add.w	ip, r0, #2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d05d      	beq.n	800a262 <_strtol_l.isra.0+0xfe>
 800a1a6:	2b10      	cmp	r3, #16
 800a1a8:	d10c      	bne.n	800a1c4 <_strtol_l.isra.0+0x60>
 800a1aa:	2c30      	cmp	r4, #48	; 0x30
 800a1ac:	d10a      	bne.n	800a1c4 <_strtol_l.isra.0+0x60>
 800a1ae:	f89c 0000 	ldrb.w	r0, [ip]
 800a1b2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a1b6:	2858      	cmp	r0, #88	; 0x58
 800a1b8:	d14e      	bne.n	800a258 <_strtol_l.isra.0+0xf4>
 800a1ba:	2310      	movs	r3, #16
 800a1bc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a1c0:	f10c 0c02 	add.w	ip, ip, #2
 800a1c4:	2500      	movs	r5, #0
 800a1c6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800a1ca:	3f01      	subs	r7, #1
 800a1cc:	fbb7 f9f3 	udiv	r9, r7, r3
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	fb03 7a19 	mls	sl, r3, r9, r7
 800a1d6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a1da:	2e09      	cmp	r6, #9
 800a1dc:	d818      	bhi.n	800a210 <_strtol_l.isra.0+0xac>
 800a1de:	4634      	mov	r4, r6
 800a1e0:	42a3      	cmp	r3, r4
 800a1e2:	dd24      	ble.n	800a22e <_strtol_l.isra.0+0xca>
 800a1e4:	2d00      	cmp	r5, #0
 800a1e6:	db1f      	blt.n	800a228 <_strtol_l.isra.0+0xc4>
 800a1e8:	4581      	cmp	r9, r0
 800a1ea:	d31d      	bcc.n	800a228 <_strtol_l.isra.0+0xc4>
 800a1ec:	d101      	bne.n	800a1f2 <_strtol_l.isra.0+0x8e>
 800a1ee:	45a2      	cmp	sl, r4
 800a1f0:	db1a      	blt.n	800a228 <_strtol_l.isra.0+0xc4>
 800a1f2:	2501      	movs	r5, #1
 800a1f4:	fb00 4003 	mla	r0, r0, r3, r4
 800a1f8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a1fc:	e7eb      	b.n	800a1d6 <_strtol_l.isra.0+0x72>
 800a1fe:	2c2b      	cmp	r4, #43	; 0x2b
 800a200:	bf08      	it	eq
 800a202:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a206:	46a8      	mov	r8, r5
 800a208:	bf08      	it	eq
 800a20a:	f100 0c02 	addeq.w	ip, r0, #2
 800a20e:	e7c8      	b.n	800a1a2 <_strtol_l.isra.0+0x3e>
 800a210:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a214:	2e19      	cmp	r6, #25
 800a216:	d801      	bhi.n	800a21c <_strtol_l.isra.0+0xb8>
 800a218:	3c37      	subs	r4, #55	; 0x37
 800a21a:	e7e1      	b.n	800a1e0 <_strtol_l.isra.0+0x7c>
 800a21c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a220:	2e19      	cmp	r6, #25
 800a222:	d804      	bhi.n	800a22e <_strtol_l.isra.0+0xca>
 800a224:	3c57      	subs	r4, #87	; 0x57
 800a226:	e7db      	b.n	800a1e0 <_strtol_l.isra.0+0x7c>
 800a228:	f04f 35ff 	mov.w	r5, #4294967295
 800a22c:	e7e4      	b.n	800a1f8 <_strtol_l.isra.0+0x94>
 800a22e:	2d00      	cmp	r5, #0
 800a230:	da08      	bge.n	800a244 <_strtol_l.isra.0+0xe0>
 800a232:	2322      	movs	r3, #34	; 0x22
 800a234:	4638      	mov	r0, r7
 800a236:	f8ce 3000 	str.w	r3, [lr]
 800a23a:	2a00      	cmp	r2, #0
 800a23c:	d09e      	beq.n	800a17c <_strtol_l.isra.0+0x18>
 800a23e:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a242:	e007      	b.n	800a254 <_strtol_l.isra.0+0xf0>
 800a244:	f1b8 0f00 	cmp.w	r8, #0
 800a248:	d000      	beq.n	800a24c <_strtol_l.isra.0+0xe8>
 800a24a:	4240      	negs	r0, r0
 800a24c:	2a00      	cmp	r2, #0
 800a24e:	d095      	beq.n	800a17c <_strtol_l.isra.0+0x18>
 800a250:	2d00      	cmp	r5, #0
 800a252:	d1f4      	bne.n	800a23e <_strtol_l.isra.0+0xda>
 800a254:	6011      	str	r1, [r2, #0]
 800a256:	e791      	b.n	800a17c <_strtol_l.isra.0+0x18>
 800a258:	2430      	movs	r4, #48	; 0x30
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1b2      	bne.n	800a1c4 <_strtol_l.isra.0+0x60>
 800a25e:	2308      	movs	r3, #8
 800a260:	e7b0      	b.n	800a1c4 <_strtol_l.isra.0+0x60>
 800a262:	2c30      	cmp	r4, #48	; 0x30
 800a264:	d0a3      	beq.n	800a1ae <_strtol_l.isra.0+0x4a>
 800a266:	230a      	movs	r3, #10
 800a268:	e7ac      	b.n	800a1c4 <_strtol_l.isra.0+0x60>
 800a26a:	bf00      	nop
 800a26c:	0800d0ad 	.word	0x0800d0ad

0800a270 <_strtol_r>:
 800a270:	f7ff bf78 	b.w	800a164 <_strtol_l.isra.0>

0800a274 <strtol>:
 800a274:	4613      	mov	r3, r2
 800a276:	460a      	mov	r2, r1
 800a278:	4601      	mov	r1, r0
 800a27a:	4802      	ldr	r0, [pc, #8]	; (800a284 <strtol+0x10>)
 800a27c:	6800      	ldr	r0, [r0, #0]
 800a27e:	f7ff bf71 	b.w	800a164 <_strtol_l.isra.0>
 800a282:	bf00      	nop
 800a284:	20000014 	.word	0x20000014

0800a288 <_write_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4604      	mov	r4, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	4611      	mov	r1, r2
 800a290:	2200      	movs	r2, #0
 800a292:	4d05      	ldr	r5, [pc, #20]	; (800a2a8 <_write_r+0x20>)
 800a294:	602a      	str	r2, [r5, #0]
 800a296:	461a      	mov	r2, r3
 800a298:	f7f7 fc48 	bl	8001b2c <_write>
 800a29c:	1c43      	adds	r3, r0, #1
 800a29e:	d102      	bne.n	800a2a6 <_write_r+0x1e>
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	b103      	cbz	r3, 800a2a6 <_write_r+0x1e>
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
 800a2a8:	20003b38 	.word	0x20003b38

0800a2ac <__assert_func>:
 800a2ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2ae:	4614      	mov	r4, r2
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	4b09      	ldr	r3, [pc, #36]	; (800a2d8 <__assert_func+0x2c>)
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68d8      	ldr	r0, [r3, #12]
 800a2ba:	b14c      	cbz	r4, 800a2d0 <__assert_func+0x24>
 800a2bc:	4b07      	ldr	r3, [pc, #28]	; (800a2dc <__assert_func+0x30>)
 800a2be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2c2:	9100      	str	r1, [sp, #0]
 800a2c4:	462b      	mov	r3, r5
 800a2c6:	4906      	ldr	r1, [pc, #24]	; (800a2e0 <__assert_func+0x34>)
 800a2c8:	f000 ff5e 	bl	800b188 <fiprintf>
 800a2cc:	f002 fbdc 	bl	800ca88 <abort>
 800a2d0:	4b04      	ldr	r3, [pc, #16]	; (800a2e4 <__assert_func+0x38>)
 800a2d2:	461c      	mov	r4, r3
 800a2d4:	e7f3      	b.n	800a2be <__assert_func+0x12>
 800a2d6:	bf00      	nop
 800a2d8:	20000014 	.word	0x20000014
 800a2dc:	0800d070 	.word	0x0800d070
 800a2e0:	0800d07d 	.word	0x0800d07d
 800a2e4:	0800d0ab 	.word	0x0800d0ab

0800a2e8 <_close_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	4d05      	ldr	r5, [pc, #20]	; (800a304 <_close_r+0x1c>)
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	4608      	mov	r0, r1
 800a2f2:	602b      	str	r3, [r5, #0]
 800a2f4:	f7f7 fc36 	bl	8001b64 <_close>
 800a2f8:	1c43      	adds	r3, r0, #1
 800a2fa:	d102      	bne.n	800a302 <_close_r+0x1a>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	b103      	cbz	r3, 800a302 <_close_r+0x1a>
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	bd38      	pop	{r3, r4, r5, pc}
 800a304:	20003b38 	.word	0x20003b38

0800a308 <quorem>:
 800a308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	6903      	ldr	r3, [r0, #16]
 800a30e:	690c      	ldr	r4, [r1, #16]
 800a310:	4607      	mov	r7, r0
 800a312:	42a3      	cmp	r3, r4
 800a314:	f2c0 8083 	blt.w	800a41e <quorem+0x116>
 800a318:	3c01      	subs	r4, #1
 800a31a:	f100 0514 	add.w	r5, r0, #20
 800a31e:	f101 0814 	add.w	r8, r1, #20
 800a322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a326:	9301      	str	r3, [sp, #4]
 800a328:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a32c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a330:	3301      	adds	r3, #1
 800a332:	429a      	cmp	r2, r3
 800a334:	fbb2 f6f3 	udiv	r6, r2, r3
 800a338:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a33c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a340:	d332      	bcc.n	800a3a8 <quorem+0xa0>
 800a342:	f04f 0e00 	mov.w	lr, #0
 800a346:	4640      	mov	r0, r8
 800a348:	46ac      	mov	ip, r5
 800a34a:	46f2      	mov	sl, lr
 800a34c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a350:	b293      	uxth	r3, r2
 800a352:	fb06 e303 	mla	r3, r6, r3, lr
 800a356:	0c12      	lsrs	r2, r2, #16
 800a358:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a35c:	fb06 e202 	mla	r2, r6, r2, lr
 800a360:	b29b      	uxth	r3, r3
 800a362:	ebaa 0303 	sub.w	r3, sl, r3
 800a366:	f8dc a000 	ldr.w	sl, [ip]
 800a36a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a36e:	fa1f fa8a 	uxth.w	sl, sl
 800a372:	4453      	add	r3, sl
 800a374:	fa1f fa82 	uxth.w	sl, r2
 800a378:	f8dc 2000 	ldr.w	r2, [ip]
 800a37c:	4581      	cmp	r9, r0
 800a37e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a382:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a386:	b29b      	uxth	r3, r3
 800a388:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a38c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a390:	f84c 3b04 	str.w	r3, [ip], #4
 800a394:	d2da      	bcs.n	800a34c <quorem+0x44>
 800a396:	f855 300b 	ldr.w	r3, [r5, fp]
 800a39a:	b92b      	cbnz	r3, 800a3a8 <quorem+0xa0>
 800a39c:	9b01      	ldr	r3, [sp, #4]
 800a39e:	3b04      	subs	r3, #4
 800a3a0:	429d      	cmp	r5, r3
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	d32f      	bcc.n	800a406 <quorem+0xfe>
 800a3a6:	613c      	str	r4, [r7, #16]
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	f001 fd73 	bl	800be94 <__mcmp>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	db25      	blt.n	800a3fe <quorem+0xf6>
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f04f 0c00 	mov.w	ip, #0
 800a3b8:	3601      	adds	r6, #1
 800a3ba:	f858 1b04 	ldr.w	r1, [r8], #4
 800a3be:	f8d0 e000 	ldr.w	lr, [r0]
 800a3c2:	b28b      	uxth	r3, r1
 800a3c4:	ebac 0303 	sub.w	r3, ip, r3
 800a3c8:	fa1f f28e 	uxth.w	r2, lr
 800a3cc:	4413      	add	r3, r2
 800a3ce:	0c0a      	lsrs	r2, r1, #16
 800a3d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3de:	45c1      	cmp	r9, r8
 800a3e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3e4:	f840 3b04 	str.w	r3, [r0], #4
 800a3e8:	d2e7      	bcs.n	800a3ba <quorem+0xb2>
 800a3ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3f2:	b922      	cbnz	r2, 800a3fe <quorem+0xf6>
 800a3f4:	3b04      	subs	r3, #4
 800a3f6:	429d      	cmp	r5, r3
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	d30a      	bcc.n	800a412 <quorem+0x10a>
 800a3fc:	613c      	str	r4, [r7, #16]
 800a3fe:	4630      	mov	r0, r6
 800a400:	b003      	add	sp, #12
 800a402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a406:	6812      	ldr	r2, [r2, #0]
 800a408:	3b04      	subs	r3, #4
 800a40a:	2a00      	cmp	r2, #0
 800a40c:	d1cb      	bne.n	800a3a6 <quorem+0x9e>
 800a40e:	3c01      	subs	r4, #1
 800a410:	e7c6      	b.n	800a3a0 <quorem+0x98>
 800a412:	6812      	ldr	r2, [r2, #0]
 800a414:	3b04      	subs	r3, #4
 800a416:	2a00      	cmp	r2, #0
 800a418:	d1f0      	bne.n	800a3fc <quorem+0xf4>
 800a41a:	3c01      	subs	r4, #1
 800a41c:	e7eb      	b.n	800a3f6 <quorem+0xee>
 800a41e:	2000      	movs	r0, #0
 800a420:	e7ee      	b.n	800a400 <quorem+0xf8>
 800a422:	0000      	movs	r0, r0
 800a424:	0000      	movs	r0, r0
	...

0800a428 <_dtoa_r>:
 800a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	4616      	mov	r6, r2
 800a42e:	461f      	mov	r7, r3
 800a430:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a432:	b099      	sub	sp, #100	; 0x64
 800a434:	4605      	mov	r5, r0
 800a436:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a43a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a43e:	b974      	cbnz	r4, 800a45e <_dtoa_r+0x36>
 800a440:	2010      	movs	r0, #16
 800a442:	f001 fa2f 	bl	800b8a4 <malloc>
 800a446:	4602      	mov	r2, r0
 800a448:	6268      	str	r0, [r5, #36]	; 0x24
 800a44a:	b920      	cbnz	r0, 800a456 <_dtoa_r+0x2e>
 800a44c:	21ea      	movs	r1, #234	; 0xea
 800a44e:	4bae      	ldr	r3, [pc, #696]	; (800a708 <_dtoa_r+0x2e0>)
 800a450:	48ae      	ldr	r0, [pc, #696]	; (800a70c <_dtoa_r+0x2e4>)
 800a452:	f7ff ff2b 	bl	800a2ac <__assert_func>
 800a456:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a45a:	6004      	str	r4, [r0, #0]
 800a45c:	60c4      	str	r4, [r0, #12]
 800a45e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a460:	6819      	ldr	r1, [r3, #0]
 800a462:	b151      	cbz	r1, 800a47a <_dtoa_r+0x52>
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	2301      	movs	r3, #1
 800a468:	4093      	lsls	r3, r2
 800a46a:	604a      	str	r2, [r1, #4]
 800a46c:	608b      	str	r3, [r1, #8]
 800a46e:	4628      	mov	r0, r5
 800a470:	f001 fa8c 	bl	800b98c <_Bfree>
 800a474:	2200      	movs	r2, #0
 800a476:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a478:	601a      	str	r2, [r3, #0]
 800a47a:	1e3b      	subs	r3, r7, #0
 800a47c:	bfaf      	iteee	ge
 800a47e:	2300      	movge	r3, #0
 800a480:	2201      	movlt	r2, #1
 800a482:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a486:	9305      	strlt	r3, [sp, #20]
 800a488:	bfa8      	it	ge
 800a48a:	f8c8 3000 	strge.w	r3, [r8]
 800a48e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a492:	4b9f      	ldr	r3, [pc, #636]	; (800a710 <_dtoa_r+0x2e8>)
 800a494:	bfb8      	it	lt
 800a496:	f8c8 2000 	strlt.w	r2, [r8]
 800a49a:	ea33 0309 	bics.w	r3, r3, r9
 800a49e:	d119      	bne.n	800a4d4 <_dtoa_r+0xac>
 800a4a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4a6:	6013      	str	r3, [r2, #0]
 800a4a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4ac:	4333      	orrs	r3, r6
 800a4ae:	f000 8580 	beq.w	800afb2 <_dtoa_r+0xb8a>
 800a4b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a4b4:	b953      	cbnz	r3, 800a4cc <_dtoa_r+0xa4>
 800a4b6:	4b97      	ldr	r3, [pc, #604]	; (800a714 <_dtoa_r+0x2ec>)
 800a4b8:	e022      	b.n	800a500 <_dtoa_r+0xd8>
 800a4ba:	4b97      	ldr	r3, [pc, #604]	; (800a718 <_dtoa_r+0x2f0>)
 800a4bc:	9308      	str	r3, [sp, #32]
 800a4be:	3308      	adds	r3, #8
 800a4c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a4c2:	6013      	str	r3, [r2, #0]
 800a4c4:	9808      	ldr	r0, [sp, #32]
 800a4c6:	b019      	add	sp, #100	; 0x64
 800a4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4cc:	4b91      	ldr	r3, [pc, #580]	; (800a714 <_dtoa_r+0x2ec>)
 800a4ce:	9308      	str	r3, [sp, #32]
 800a4d0:	3303      	adds	r3, #3
 800a4d2:	e7f5      	b.n	800a4c0 <_dtoa_r+0x98>
 800a4d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a4d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a4dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f7f6 fa60 	bl	80009a8 <__aeabi_dcmpeq>
 800a4e8:	4680      	mov	r8, r0
 800a4ea:	b158      	cbz	r0, 800a504 <_dtoa_r+0xdc>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4f0:	6013      	str	r3, [r2, #0]
 800a4f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 8559 	beq.w	800afac <_dtoa_r+0xb84>
 800a4fa:	4888      	ldr	r0, [pc, #544]	; (800a71c <_dtoa_r+0x2f4>)
 800a4fc:	6018      	str	r0, [r3, #0]
 800a4fe:	1e43      	subs	r3, r0, #1
 800a500:	9308      	str	r3, [sp, #32]
 800a502:	e7df      	b.n	800a4c4 <_dtoa_r+0x9c>
 800a504:	ab16      	add	r3, sp, #88	; 0x58
 800a506:	9301      	str	r3, [sp, #4]
 800a508:	ab17      	add	r3, sp, #92	; 0x5c
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	4628      	mov	r0, r5
 800a50e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a512:	f001 fde5 	bl	800c0e0 <__d2b>
 800a516:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a51a:	4682      	mov	sl, r0
 800a51c:	2c00      	cmp	r4, #0
 800a51e:	d07e      	beq.n	800a61e <_dtoa_r+0x1f6>
 800a520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a526:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a52a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a52e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a532:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a536:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a53a:	2200      	movs	r2, #0
 800a53c:	4b78      	ldr	r3, [pc, #480]	; (800a720 <_dtoa_r+0x2f8>)
 800a53e:	f7f5 fe13 	bl	8000168 <__aeabi_dsub>
 800a542:	a36b      	add	r3, pc, #428	; (adr r3, 800a6f0 <_dtoa_r+0x2c8>)
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	f7f5 ffc6 	bl	80004d8 <__aeabi_dmul>
 800a54c:	a36a      	add	r3, pc, #424	; (adr r3, 800a6f8 <_dtoa_r+0x2d0>)
 800a54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a552:	f7f5 fe0b 	bl	800016c <__adddf3>
 800a556:	4606      	mov	r6, r0
 800a558:	4620      	mov	r0, r4
 800a55a:	460f      	mov	r7, r1
 800a55c:	f7f5 ff52 	bl	8000404 <__aeabi_i2d>
 800a560:	a367      	add	r3, pc, #412	; (adr r3, 800a700 <_dtoa_r+0x2d8>)
 800a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a566:	f7f5 ffb7 	bl	80004d8 <__aeabi_dmul>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	4630      	mov	r0, r6
 800a570:	4639      	mov	r1, r7
 800a572:	f7f5 fdfb 	bl	800016c <__adddf3>
 800a576:	4606      	mov	r6, r0
 800a578:	460f      	mov	r7, r1
 800a57a:	f7f6 fa5d 	bl	8000a38 <__aeabi_d2iz>
 800a57e:	2200      	movs	r2, #0
 800a580:	4681      	mov	r9, r0
 800a582:	2300      	movs	r3, #0
 800a584:	4630      	mov	r0, r6
 800a586:	4639      	mov	r1, r7
 800a588:	f7f6 fa18 	bl	80009bc <__aeabi_dcmplt>
 800a58c:	b148      	cbz	r0, 800a5a2 <_dtoa_r+0x17a>
 800a58e:	4648      	mov	r0, r9
 800a590:	f7f5 ff38 	bl	8000404 <__aeabi_i2d>
 800a594:	4632      	mov	r2, r6
 800a596:	463b      	mov	r3, r7
 800a598:	f7f6 fa06 	bl	80009a8 <__aeabi_dcmpeq>
 800a59c:	b908      	cbnz	r0, 800a5a2 <_dtoa_r+0x17a>
 800a59e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a5a2:	f1b9 0f16 	cmp.w	r9, #22
 800a5a6:	d857      	bhi.n	800a658 <_dtoa_r+0x230>
 800a5a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5ac:	4b5d      	ldr	r3, [pc, #372]	; (800a724 <_dtoa_r+0x2fc>)
 800a5ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	f7f6 fa01 	bl	80009bc <__aeabi_dcmplt>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d04e      	beq.n	800a65c <_dtoa_r+0x234>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a5c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a5c8:	1b1c      	subs	r4, r3, r4
 800a5ca:	1e63      	subs	r3, r4, #1
 800a5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ce:	bf49      	itett	mi
 800a5d0:	f1c4 0301 	rsbmi	r3, r4, #1
 800a5d4:	2300      	movpl	r3, #0
 800a5d6:	9306      	strmi	r3, [sp, #24]
 800a5d8:	2300      	movmi	r3, #0
 800a5da:	bf54      	ite	pl
 800a5dc:	9306      	strpl	r3, [sp, #24]
 800a5de:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a5e0:	f1b9 0f00 	cmp.w	r9, #0
 800a5e4:	db3c      	blt.n	800a660 <_dtoa_r+0x238>
 800a5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a5ec:	444b      	add	r3, r9
 800a5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5f6:	2b09      	cmp	r3, #9
 800a5f8:	d86c      	bhi.n	800a6d4 <_dtoa_r+0x2ac>
 800a5fa:	2b05      	cmp	r3, #5
 800a5fc:	bfc4      	itt	gt
 800a5fe:	3b04      	subgt	r3, #4
 800a600:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a602:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a604:	bfc8      	it	gt
 800a606:	2400      	movgt	r4, #0
 800a608:	f1a3 0302 	sub.w	r3, r3, #2
 800a60c:	bfd8      	it	le
 800a60e:	2401      	movle	r4, #1
 800a610:	2b03      	cmp	r3, #3
 800a612:	f200 808b 	bhi.w	800a72c <_dtoa_r+0x304>
 800a616:	e8df f003 	tbb	[pc, r3]
 800a61a:	4f2d      	.short	0x4f2d
 800a61c:	5b4d      	.short	0x5b4d
 800a61e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a622:	441c      	add	r4, r3
 800a624:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a628:	2b20      	cmp	r3, #32
 800a62a:	bfc3      	ittte	gt
 800a62c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a630:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a634:	fa09 f303 	lslgt.w	r3, r9, r3
 800a638:	f1c3 0320 	rsble	r3, r3, #32
 800a63c:	bfc6      	itte	gt
 800a63e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a642:	4318      	orrgt	r0, r3
 800a644:	fa06 f003 	lslle.w	r0, r6, r3
 800a648:	f7f5 fecc 	bl	80003e4 <__aeabi_ui2d>
 800a64c:	2301      	movs	r3, #1
 800a64e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a652:	3c01      	subs	r4, #1
 800a654:	9313      	str	r3, [sp, #76]	; 0x4c
 800a656:	e770      	b.n	800a53a <_dtoa_r+0x112>
 800a658:	2301      	movs	r3, #1
 800a65a:	e7b3      	b.n	800a5c4 <_dtoa_r+0x19c>
 800a65c:	900f      	str	r0, [sp, #60]	; 0x3c
 800a65e:	e7b2      	b.n	800a5c6 <_dtoa_r+0x19e>
 800a660:	9b06      	ldr	r3, [sp, #24]
 800a662:	eba3 0309 	sub.w	r3, r3, r9
 800a666:	9306      	str	r3, [sp, #24]
 800a668:	f1c9 0300 	rsb	r3, r9, #0
 800a66c:	930a      	str	r3, [sp, #40]	; 0x28
 800a66e:	2300      	movs	r3, #0
 800a670:	930e      	str	r3, [sp, #56]	; 0x38
 800a672:	e7bf      	b.n	800a5f4 <_dtoa_r+0x1cc>
 800a674:	2300      	movs	r3, #0
 800a676:	930b      	str	r3, [sp, #44]	; 0x2c
 800a678:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	dc59      	bgt.n	800a732 <_dtoa_r+0x30a>
 800a67e:	f04f 0b01 	mov.w	fp, #1
 800a682:	465b      	mov	r3, fp
 800a684:	f8cd b008 	str.w	fp, [sp, #8]
 800a688:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a68c:	2200      	movs	r2, #0
 800a68e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a690:	6042      	str	r2, [r0, #4]
 800a692:	2204      	movs	r2, #4
 800a694:	f102 0614 	add.w	r6, r2, #20
 800a698:	429e      	cmp	r6, r3
 800a69a:	6841      	ldr	r1, [r0, #4]
 800a69c:	d94f      	bls.n	800a73e <_dtoa_r+0x316>
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f001 f934 	bl	800b90c <_Balloc>
 800a6a4:	9008      	str	r0, [sp, #32]
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	d14d      	bne.n	800a746 <_dtoa_r+0x31e>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a6b0:	4b1d      	ldr	r3, [pc, #116]	; (800a728 <_dtoa_r+0x300>)
 800a6b2:	e6cd      	b.n	800a450 <_dtoa_r+0x28>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e7de      	b.n	800a676 <_dtoa_r+0x24e>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6be:	eb09 0b03 	add.w	fp, r9, r3
 800a6c2:	f10b 0301 	add.w	r3, fp, #1
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	9302      	str	r3, [sp, #8]
 800a6ca:	bfb8      	it	lt
 800a6cc:	2301      	movlt	r3, #1
 800a6ce:	e7dd      	b.n	800a68c <_dtoa_r+0x264>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e7f2      	b.n	800a6ba <_dtoa_r+0x292>
 800a6d4:	2401      	movs	r4, #1
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a6da:	9322      	str	r3, [sp, #136]	; 0x88
 800a6dc:	f04f 3bff 	mov.w	fp, #4294967295
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	2312      	movs	r3, #18
 800a6e4:	f8cd b008 	str.w	fp, [sp, #8]
 800a6e8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a6ea:	e7cf      	b.n	800a68c <_dtoa_r+0x264>
 800a6ec:	f3af 8000 	nop.w
 800a6f0:	636f4361 	.word	0x636f4361
 800a6f4:	3fd287a7 	.word	0x3fd287a7
 800a6f8:	8b60c8b3 	.word	0x8b60c8b3
 800a6fc:	3fc68a28 	.word	0x3fc68a28
 800a700:	509f79fb 	.word	0x509f79fb
 800a704:	3fd34413 	.word	0x3fd34413
 800a708:	0800cff8 	.word	0x0800cff8
 800a70c:	0800d1ba 	.word	0x0800d1ba
 800a710:	7ff00000 	.word	0x7ff00000
 800a714:	0800d1b6 	.word	0x0800d1b6
 800a718:	0800d1ad 	.word	0x0800d1ad
 800a71c:	0800cf7d 	.word	0x0800cf7d
 800a720:	3ff80000 	.word	0x3ff80000
 800a724:	0800d330 	.word	0x0800d330
 800a728:	0800d219 	.word	0x0800d219
 800a72c:	2301      	movs	r3, #1
 800a72e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a730:	e7d4      	b.n	800a6dc <_dtoa_r+0x2b4>
 800a732:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a736:	465b      	mov	r3, fp
 800a738:	f8cd b008 	str.w	fp, [sp, #8]
 800a73c:	e7a6      	b.n	800a68c <_dtoa_r+0x264>
 800a73e:	3101      	adds	r1, #1
 800a740:	6041      	str	r1, [r0, #4]
 800a742:	0052      	lsls	r2, r2, #1
 800a744:	e7a6      	b.n	800a694 <_dtoa_r+0x26c>
 800a746:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a748:	9a08      	ldr	r2, [sp, #32]
 800a74a:	601a      	str	r2, [r3, #0]
 800a74c:	9b02      	ldr	r3, [sp, #8]
 800a74e:	2b0e      	cmp	r3, #14
 800a750:	f200 80a8 	bhi.w	800a8a4 <_dtoa_r+0x47c>
 800a754:	2c00      	cmp	r4, #0
 800a756:	f000 80a5 	beq.w	800a8a4 <_dtoa_r+0x47c>
 800a75a:	f1b9 0f00 	cmp.w	r9, #0
 800a75e:	dd34      	ble.n	800a7ca <_dtoa_r+0x3a2>
 800a760:	4a9a      	ldr	r2, [pc, #616]	; (800a9cc <_dtoa_r+0x5a4>)
 800a762:	f009 030f 	and.w	r3, r9, #15
 800a766:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a76a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a76e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a772:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a776:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a77a:	d016      	beq.n	800a7aa <_dtoa_r+0x382>
 800a77c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a780:	4b93      	ldr	r3, [pc, #588]	; (800a9d0 <_dtoa_r+0x5a8>)
 800a782:	2703      	movs	r7, #3
 800a784:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a788:	f7f5 ffd0 	bl	800072c <__aeabi_ddiv>
 800a78c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a790:	f004 040f 	and.w	r4, r4, #15
 800a794:	4e8e      	ldr	r6, [pc, #568]	; (800a9d0 <_dtoa_r+0x5a8>)
 800a796:	b954      	cbnz	r4, 800a7ae <_dtoa_r+0x386>
 800a798:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a79c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7a0:	f7f5 ffc4 	bl	800072c <__aeabi_ddiv>
 800a7a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7a8:	e029      	b.n	800a7fe <_dtoa_r+0x3d6>
 800a7aa:	2702      	movs	r7, #2
 800a7ac:	e7f2      	b.n	800a794 <_dtoa_r+0x36c>
 800a7ae:	07e1      	lsls	r1, r4, #31
 800a7b0:	d508      	bpl.n	800a7c4 <_dtoa_r+0x39c>
 800a7b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a7ba:	f7f5 fe8d 	bl	80004d8 <__aeabi_dmul>
 800a7be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a7c2:	3701      	adds	r7, #1
 800a7c4:	1064      	asrs	r4, r4, #1
 800a7c6:	3608      	adds	r6, #8
 800a7c8:	e7e5      	b.n	800a796 <_dtoa_r+0x36e>
 800a7ca:	f000 80a5 	beq.w	800a918 <_dtoa_r+0x4f0>
 800a7ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7d2:	f1c9 0400 	rsb	r4, r9, #0
 800a7d6:	4b7d      	ldr	r3, [pc, #500]	; (800a9cc <_dtoa_r+0x5a4>)
 800a7d8:	f004 020f 	and.w	r2, r4, #15
 800a7dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e4:	f7f5 fe78 	bl	80004d8 <__aeabi_dmul>
 800a7e8:	2702      	movs	r7, #2
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7f0:	4e77      	ldr	r6, [pc, #476]	; (800a9d0 <_dtoa_r+0x5a8>)
 800a7f2:	1124      	asrs	r4, r4, #4
 800a7f4:	2c00      	cmp	r4, #0
 800a7f6:	f040 8084 	bne.w	800a902 <_dtoa_r+0x4da>
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1d2      	bne.n	800a7a4 <_dtoa_r+0x37c>
 800a7fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a800:	2b00      	cmp	r3, #0
 800a802:	f000 808b 	beq.w	800a91c <_dtoa_r+0x4f4>
 800a806:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a80a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a80e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a812:	2200      	movs	r2, #0
 800a814:	4b6f      	ldr	r3, [pc, #444]	; (800a9d4 <_dtoa_r+0x5ac>)
 800a816:	f7f6 f8d1 	bl	80009bc <__aeabi_dcmplt>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d07e      	beq.n	800a91c <_dtoa_r+0x4f4>
 800a81e:	9b02      	ldr	r3, [sp, #8]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d07b      	beq.n	800a91c <_dtoa_r+0x4f4>
 800a824:	f1bb 0f00 	cmp.w	fp, #0
 800a828:	dd38      	ble.n	800a89c <_dtoa_r+0x474>
 800a82a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a82e:	2200      	movs	r2, #0
 800a830:	4b69      	ldr	r3, [pc, #420]	; (800a9d8 <_dtoa_r+0x5b0>)
 800a832:	f7f5 fe51 	bl	80004d8 <__aeabi_dmul>
 800a836:	465c      	mov	r4, fp
 800a838:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a83c:	f109 38ff 	add.w	r8, r9, #4294967295
 800a840:	3701      	adds	r7, #1
 800a842:	4638      	mov	r0, r7
 800a844:	f7f5 fdde 	bl	8000404 <__aeabi_i2d>
 800a848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a84c:	f7f5 fe44 	bl	80004d8 <__aeabi_dmul>
 800a850:	2200      	movs	r2, #0
 800a852:	4b62      	ldr	r3, [pc, #392]	; (800a9dc <_dtoa_r+0x5b4>)
 800a854:	f7f5 fc8a 	bl	800016c <__adddf3>
 800a858:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a85c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a860:	9611      	str	r6, [sp, #68]	; 0x44
 800a862:	2c00      	cmp	r4, #0
 800a864:	d15d      	bne.n	800a922 <_dtoa_r+0x4fa>
 800a866:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a86a:	2200      	movs	r2, #0
 800a86c:	4b5c      	ldr	r3, [pc, #368]	; (800a9e0 <_dtoa_r+0x5b8>)
 800a86e:	f7f5 fc7b 	bl	8000168 <__aeabi_dsub>
 800a872:	4602      	mov	r2, r0
 800a874:	460b      	mov	r3, r1
 800a876:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a87a:	4633      	mov	r3, r6
 800a87c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a87e:	f7f6 f8bb 	bl	80009f8 <__aeabi_dcmpgt>
 800a882:	2800      	cmp	r0, #0
 800a884:	f040 829e 	bne.w	800adc4 <_dtoa_r+0x99c>
 800a888:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a88c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a88e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a892:	f7f6 f893 	bl	80009bc <__aeabi_dcmplt>
 800a896:	2800      	cmp	r0, #0
 800a898:	f040 8292 	bne.w	800adc0 <_dtoa_r+0x998>
 800a89c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a8a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a8a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f2c0 8153 	blt.w	800ab52 <_dtoa_r+0x72a>
 800a8ac:	f1b9 0f0e 	cmp.w	r9, #14
 800a8b0:	f300 814f 	bgt.w	800ab52 <_dtoa_r+0x72a>
 800a8b4:	4b45      	ldr	r3, [pc, #276]	; (800a9cc <_dtoa_r+0x5a4>)
 800a8b6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a8ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a8c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f280 80db 	bge.w	800aa80 <_dtoa_r+0x658>
 800a8ca:	9b02      	ldr	r3, [sp, #8]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f300 80d7 	bgt.w	800aa80 <_dtoa_r+0x658>
 800a8d2:	f040 8274 	bne.w	800adbe <_dtoa_r+0x996>
 800a8d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	4b40      	ldr	r3, [pc, #256]	; (800a9e0 <_dtoa_r+0x5b8>)
 800a8de:	f7f5 fdfb 	bl	80004d8 <__aeabi_dmul>
 800a8e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8e6:	f7f6 f87d 	bl	80009e4 <__aeabi_dcmpge>
 800a8ea:	9c02      	ldr	r4, [sp, #8]
 800a8ec:	4626      	mov	r6, r4
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	f040 824a 	bne.w	800ad88 <_dtoa_r+0x960>
 800a8f4:	2331      	movs	r3, #49	; 0x31
 800a8f6:	9f08      	ldr	r7, [sp, #32]
 800a8f8:	f109 0901 	add.w	r9, r9, #1
 800a8fc:	f807 3b01 	strb.w	r3, [r7], #1
 800a900:	e246      	b.n	800ad90 <_dtoa_r+0x968>
 800a902:	07e2      	lsls	r2, r4, #31
 800a904:	d505      	bpl.n	800a912 <_dtoa_r+0x4ea>
 800a906:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a90a:	f7f5 fde5 	bl	80004d8 <__aeabi_dmul>
 800a90e:	2301      	movs	r3, #1
 800a910:	3701      	adds	r7, #1
 800a912:	1064      	asrs	r4, r4, #1
 800a914:	3608      	adds	r6, #8
 800a916:	e76d      	b.n	800a7f4 <_dtoa_r+0x3cc>
 800a918:	2702      	movs	r7, #2
 800a91a:	e770      	b.n	800a7fe <_dtoa_r+0x3d6>
 800a91c:	46c8      	mov	r8, r9
 800a91e:	9c02      	ldr	r4, [sp, #8]
 800a920:	e78f      	b.n	800a842 <_dtoa_r+0x41a>
 800a922:	9908      	ldr	r1, [sp, #32]
 800a924:	4b29      	ldr	r3, [pc, #164]	; (800a9cc <_dtoa_r+0x5a4>)
 800a926:	4421      	add	r1, r4
 800a928:	9112      	str	r1, [sp, #72]	; 0x48
 800a92a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a92c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a930:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a934:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a938:	2900      	cmp	r1, #0
 800a93a:	d055      	beq.n	800a9e8 <_dtoa_r+0x5c0>
 800a93c:	2000      	movs	r0, #0
 800a93e:	4929      	ldr	r1, [pc, #164]	; (800a9e4 <_dtoa_r+0x5bc>)
 800a940:	f7f5 fef4 	bl	800072c <__aeabi_ddiv>
 800a944:	463b      	mov	r3, r7
 800a946:	4632      	mov	r2, r6
 800a948:	f7f5 fc0e 	bl	8000168 <__aeabi_dsub>
 800a94c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a950:	9f08      	ldr	r7, [sp, #32]
 800a952:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a956:	f7f6 f86f 	bl	8000a38 <__aeabi_d2iz>
 800a95a:	4604      	mov	r4, r0
 800a95c:	f7f5 fd52 	bl	8000404 <__aeabi_i2d>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a968:	f7f5 fbfe 	bl	8000168 <__aeabi_dsub>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	3430      	adds	r4, #48	; 0x30
 800a972:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a976:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a97a:	f807 4b01 	strb.w	r4, [r7], #1
 800a97e:	f7f6 f81d 	bl	80009bc <__aeabi_dcmplt>
 800a982:	2800      	cmp	r0, #0
 800a984:	d174      	bne.n	800aa70 <_dtoa_r+0x648>
 800a986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a98a:	2000      	movs	r0, #0
 800a98c:	4911      	ldr	r1, [pc, #68]	; (800a9d4 <_dtoa_r+0x5ac>)
 800a98e:	f7f5 fbeb 	bl	8000168 <__aeabi_dsub>
 800a992:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a996:	f7f6 f811 	bl	80009bc <__aeabi_dcmplt>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	f040 80b6 	bne.w	800ab0c <_dtoa_r+0x6e4>
 800a9a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9a2:	429f      	cmp	r7, r3
 800a9a4:	f43f af7a 	beq.w	800a89c <_dtoa_r+0x474>
 800a9a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4b0a      	ldr	r3, [pc, #40]	; (800a9d8 <_dtoa_r+0x5b0>)
 800a9b0:	f7f5 fd92 	bl	80004d8 <__aeabi_dmul>
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9be:	4b06      	ldr	r3, [pc, #24]	; (800a9d8 <_dtoa_r+0x5b0>)
 800a9c0:	f7f5 fd8a 	bl	80004d8 <__aeabi_dmul>
 800a9c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9c8:	e7c3      	b.n	800a952 <_dtoa_r+0x52a>
 800a9ca:	bf00      	nop
 800a9cc:	0800d330 	.word	0x0800d330
 800a9d0:	0800d308 	.word	0x0800d308
 800a9d4:	3ff00000 	.word	0x3ff00000
 800a9d8:	40240000 	.word	0x40240000
 800a9dc:	401c0000 	.word	0x401c0000
 800a9e0:	40140000 	.word	0x40140000
 800a9e4:	3fe00000 	.word	0x3fe00000
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	f7f5 fd74 	bl	80004d8 <__aeabi_dmul>
 800a9f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9f6:	9c08      	ldr	r4, [sp, #32]
 800a9f8:	9314      	str	r3, [sp, #80]	; 0x50
 800a9fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9fe:	f7f6 f81b 	bl	8000a38 <__aeabi_d2iz>
 800aa02:	9015      	str	r0, [sp, #84]	; 0x54
 800aa04:	f7f5 fcfe 	bl	8000404 <__aeabi_i2d>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa10:	f7f5 fbaa 	bl	8000168 <__aeabi_dsub>
 800aa14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa16:	4606      	mov	r6, r0
 800aa18:	3330      	adds	r3, #48	; 0x30
 800aa1a:	f804 3b01 	strb.w	r3, [r4], #1
 800aa1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa20:	460f      	mov	r7, r1
 800aa22:	429c      	cmp	r4, r3
 800aa24:	f04f 0200 	mov.w	r2, #0
 800aa28:	d124      	bne.n	800aa74 <_dtoa_r+0x64c>
 800aa2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa2e:	4bb3      	ldr	r3, [pc, #716]	; (800acfc <_dtoa_r+0x8d4>)
 800aa30:	f7f5 fb9c 	bl	800016c <__adddf3>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4630      	mov	r0, r6
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	f7f5 ffdc 	bl	80009f8 <__aeabi_dcmpgt>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d162      	bne.n	800ab0a <_dtoa_r+0x6e2>
 800aa44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa48:	2000      	movs	r0, #0
 800aa4a:	49ac      	ldr	r1, [pc, #688]	; (800acfc <_dtoa_r+0x8d4>)
 800aa4c:	f7f5 fb8c 	bl	8000168 <__aeabi_dsub>
 800aa50:	4602      	mov	r2, r0
 800aa52:	460b      	mov	r3, r1
 800aa54:	4630      	mov	r0, r6
 800aa56:	4639      	mov	r1, r7
 800aa58:	f7f5 ffb0 	bl	80009bc <__aeabi_dcmplt>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	f43f af1d 	beq.w	800a89c <_dtoa_r+0x474>
 800aa62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aa64:	1e7b      	subs	r3, r7, #1
 800aa66:	9314      	str	r3, [sp, #80]	; 0x50
 800aa68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800aa6c:	2b30      	cmp	r3, #48	; 0x30
 800aa6e:	d0f8      	beq.n	800aa62 <_dtoa_r+0x63a>
 800aa70:	46c1      	mov	r9, r8
 800aa72:	e03a      	b.n	800aaea <_dtoa_r+0x6c2>
 800aa74:	4ba2      	ldr	r3, [pc, #648]	; (800ad00 <_dtoa_r+0x8d8>)
 800aa76:	f7f5 fd2f 	bl	80004d8 <__aeabi_dmul>
 800aa7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa7e:	e7bc      	b.n	800a9fa <_dtoa_r+0x5d2>
 800aa80:	9f08      	ldr	r7, [sp, #32]
 800aa82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa8a:	f7f5 fe4f 	bl	800072c <__aeabi_ddiv>
 800aa8e:	f7f5 ffd3 	bl	8000a38 <__aeabi_d2iz>
 800aa92:	4604      	mov	r4, r0
 800aa94:	f7f5 fcb6 	bl	8000404 <__aeabi_i2d>
 800aa98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa9c:	f7f5 fd1c 	bl	80004d8 <__aeabi_dmul>
 800aaa0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaac:	f7f5 fb5c 	bl	8000168 <__aeabi_dsub>
 800aab0:	f807 6b01 	strb.w	r6, [r7], #1
 800aab4:	9e08      	ldr	r6, [sp, #32]
 800aab6:	9b02      	ldr	r3, [sp, #8]
 800aab8:	1bbe      	subs	r6, r7, r6
 800aaba:	42b3      	cmp	r3, r6
 800aabc:	d13a      	bne.n	800ab34 <_dtoa_r+0x70c>
 800aabe:	4602      	mov	r2, r0
 800aac0:	460b      	mov	r3, r1
 800aac2:	f7f5 fb53 	bl	800016c <__adddf3>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aace:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aad2:	f7f5 ff91 	bl	80009f8 <__aeabi_dcmpgt>
 800aad6:	bb58      	cbnz	r0, 800ab30 <_dtoa_r+0x708>
 800aad8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aadc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aae0:	f7f5 ff62 	bl	80009a8 <__aeabi_dcmpeq>
 800aae4:	b108      	cbz	r0, 800aaea <_dtoa_r+0x6c2>
 800aae6:	07e1      	lsls	r1, r4, #31
 800aae8:	d422      	bmi.n	800ab30 <_dtoa_r+0x708>
 800aaea:	4628      	mov	r0, r5
 800aaec:	4651      	mov	r1, sl
 800aaee:	f000 ff4d 	bl	800b98c <_Bfree>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	703b      	strb	r3, [r7, #0]
 800aaf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aaf8:	f109 0001 	add.w	r0, r9, #1
 800aafc:	6018      	str	r0, [r3, #0]
 800aafe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f43f acdf 	beq.w	800a4c4 <_dtoa_r+0x9c>
 800ab06:	601f      	str	r7, [r3, #0]
 800ab08:	e4dc      	b.n	800a4c4 <_dtoa_r+0x9c>
 800ab0a:	4627      	mov	r7, r4
 800ab0c:	463b      	mov	r3, r7
 800ab0e:	461f      	mov	r7, r3
 800ab10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab14:	2a39      	cmp	r2, #57	; 0x39
 800ab16:	d107      	bne.n	800ab28 <_dtoa_r+0x700>
 800ab18:	9a08      	ldr	r2, [sp, #32]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d1f7      	bne.n	800ab0e <_dtoa_r+0x6e6>
 800ab1e:	2230      	movs	r2, #48	; 0x30
 800ab20:	9908      	ldr	r1, [sp, #32]
 800ab22:	f108 0801 	add.w	r8, r8, #1
 800ab26:	700a      	strb	r2, [r1, #0]
 800ab28:	781a      	ldrb	r2, [r3, #0]
 800ab2a:	3201      	adds	r2, #1
 800ab2c:	701a      	strb	r2, [r3, #0]
 800ab2e:	e79f      	b.n	800aa70 <_dtoa_r+0x648>
 800ab30:	46c8      	mov	r8, r9
 800ab32:	e7eb      	b.n	800ab0c <_dtoa_r+0x6e4>
 800ab34:	2200      	movs	r2, #0
 800ab36:	4b72      	ldr	r3, [pc, #456]	; (800ad00 <_dtoa_r+0x8d8>)
 800ab38:	f7f5 fcce 	bl	80004d8 <__aeabi_dmul>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab44:	2200      	movs	r2, #0
 800ab46:	2300      	movs	r3, #0
 800ab48:	f7f5 ff2e 	bl	80009a8 <__aeabi_dcmpeq>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d098      	beq.n	800aa82 <_dtoa_r+0x65a>
 800ab50:	e7cb      	b.n	800aaea <_dtoa_r+0x6c2>
 800ab52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab54:	2a00      	cmp	r2, #0
 800ab56:	f000 80cd 	beq.w	800acf4 <_dtoa_r+0x8cc>
 800ab5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ab5c:	2a01      	cmp	r2, #1
 800ab5e:	f300 80af 	bgt.w	800acc0 <_dtoa_r+0x898>
 800ab62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab64:	2a00      	cmp	r2, #0
 800ab66:	f000 80a7 	beq.w	800acb8 <_dtoa_r+0x890>
 800ab6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab70:	9f06      	ldr	r7, [sp, #24]
 800ab72:	9a06      	ldr	r2, [sp, #24]
 800ab74:	2101      	movs	r1, #1
 800ab76:	441a      	add	r2, r3
 800ab78:	9206      	str	r2, [sp, #24]
 800ab7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	441a      	add	r2, r3
 800ab80:	9209      	str	r2, [sp, #36]	; 0x24
 800ab82:	f001 f807 	bl	800bb94 <__i2b>
 800ab86:	4606      	mov	r6, r0
 800ab88:	2f00      	cmp	r7, #0
 800ab8a:	dd0c      	ble.n	800aba6 <_dtoa_r+0x77e>
 800ab8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	dd09      	ble.n	800aba6 <_dtoa_r+0x77e>
 800ab92:	42bb      	cmp	r3, r7
 800ab94:	bfa8      	it	ge
 800ab96:	463b      	movge	r3, r7
 800ab98:	9a06      	ldr	r2, [sp, #24]
 800ab9a:	1aff      	subs	r7, r7, r3
 800ab9c:	1ad2      	subs	r2, r2, r3
 800ab9e:	9206      	str	r2, [sp, #24]
 800aba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aba2:	1ad3      	subs	r3, r2, r3
 800aba4:	9309      	str	r3, [sp, #36]	; 0x24
 800aba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aba8:	b1f3      	cbz	r3, 800abe8 <_dtoa_r+0x7c0>
 800abaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abac:	2b00      	cmp	r3, #0
 800abae:	f000 80a9 	beq.w	800ad04 <_dtoa_r+0x8dc>
 800abb2:	2c00      	cmp	r4, #0
 800abb4:	dd10      	ble.n	800abd8 <_dtoa_r+0x7b0>
 800abb6:	4631      	mov	r1, r6
 800abb8:	4622      	mov	r2, r4
 800abba:	4628      	mov	r0, r5
 800abbc:	f001 f8a4 	bl	800bd08 <__pow5mult>
 800abc0:	4652      	mov	r2, sl
 800abc2:	4601      	mov	r1, r0
 800abc4:	4606      	mov	r6, r0
 800abc6:	4628      	mov	r0, r5
 800abc8:	f000 fffa 	bl	800bbc0 <__multiply>
 800abcc:	4680      	mov	r8, r0
 800abce:	4651      	mov	r1, sl
 800abd0:	4628      	mov	r0, r5
 800abd2:	f000 fedb 	bl	800b98c <_Bfree>
 800abd6:	46c2      	mov	sl, r8
 800abd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abda:	1b1a      	subs	r2, r3, r4
 800abdc:	d004      	beq.n	800abe8 <_dtoa_r+0x7c0>
 800abde:	4651      	mov	r1, sl
 800abe0:	4628      	mov	r0, r5
 800abe2:	f001 f891 	bl	800bd08 <__pow5mult>
 800abe6:	4682      	mov	sl, r0
 800abe8:	2101      	movs	r1, #1
 800abea:	4628      	mov	r0, r5
 800abec:	f000 ffd2 	bl	800bb94 <__i2b>
 800abf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abf2:	4604      	mov	r4, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f340 8087 	ble.w	800ad08 <_dtoa_r+0x8e0>
 800abfa:	461a      	mov	r2, r3
 800abfc:	4601      	mov	r1, r0
 800abfe:	4628      	mov	r0, r5
 800ac00:	f001 f882 	bl	800bd08 <__pow5mult>
 800ac04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac06:	4604      	mov	r4, r0
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	f340 8080 	ble.w	800ad0e <_dtoa_r+0x8e6>
 800ac0e:	f04f 0800 	mov.w	r8, #0
 800ac12:	6923      	ldr	r3, [r4, #16]
 800ac14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac18:	6918      	ldr	r0, [r3, #16]
 800ac1a:	f000 ff6d 	bl	800baf8 <__hi0bits>
 800ac1e:	f1c0 0020 	rsb	r0, r0, #32
 800ac22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac24:	4418      	add	r0, r3
 800ac26:	f010 001f 	ands.w	r0, r0, #31
 800ac2a:	f000 8092 	beq.w	800ad52 <_dtoa_r+0x92a>
 800ac2e:	f1c0 0320 	rsb	r3, r0, #32
 800ac32:	2b04      	cmp	r3, #4
 800ac34:	f340 808a 	ble.w	800ad4c <_dtoa_r+0x924>
 800ac38:	f1c0 001c 	rsb	r0, r0, #28
 800ac3c:	9b06      	ldr	r3, [sp, #24]
 800ac3e:	4407      	add	r7, r0
 800ac40:	4403      	add	r3, r0
 800ac42:	9306      	str	r3, [sp, #24]
 800ac44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac46:	4403      	add	r3, r0
 800ac48:	9309      	str	r3, [sp, #36]	; 0x24
 800ac4a:	9b06      	ldr	r3, [sp, #24]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	dd05      	ble.n	800ac5c <_dtoa_r+0x834>
 800ac50:	4651      	mov	r1, sl
 800ac52:	461a      	mov	r2, r3
 800ac54:	4628      	mov	r0, r5
 800ac56:	f001 f8b1 	bl	800bdbc <__lshift>
 800ac5a:	4682      	mov	sl, r0
 800ac5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	dd05      	ble.n	800ac6e <_dtoa_r+0x846>
 800ac62:	4621      	mov	r1, r4
 800ac64:	461a      	mov	r2, r3
 800ac66:	4628      	mov	r0, r5
 800ac68:	f001 f8a8 	bl	800bdbc <__lshift>
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d070      	beq.n	800ad56 <_dtoa_r+0x92e>
 800ac74:	4621      	mov	r1, r4
 800ac76:	4650      	mov	r0, sl
 800ac78:	f001 f90c 	bl	800be94 <__mcmp>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	da6a      	bge.n	800ad56 <_dtoa_r+0x92e>
 800ac80:	2300      	movs	r3, #0
 800ac82:	4651      	mov	r1, sl
 800ac84:	220a      	movs	r2, #10
 800ac86:	4628      	mov	r0, r5
 800ac88:	f000 fea2 	bl	800b9d0 <__multadd>
 800ac8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac8e:	4682      	mov	sl, r0
 800ac90:	f109 39ff 	add.w	r9, r9, #4294967295
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 8193 	beq.w	800afc0 <_dtoa_r+0xb98>
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	220a      	movs	r2, #10
 800aca0:	4628      	mov	r0, r5
 800aca2:	f000 fe95 	bl	800b9d0 <__multadd>
 800aca6:	f1bb 0f00 	cmp.w	fp, #0
 800acaa:	4606      	mov	r6, r0
 800acac:	f300 8093 	bgt.w	800add6 <_dtoa_r+0x9ae>
 800acb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	dc57      	bgt.n	800ad66 <_dtoa_r+0x93e>
 800acb6:	e08e      	b.n	800add6 <_dtoa_r+0x9ae>
 800acb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800acba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800acbe:	e756      	b.n	800ab6e <_dtoa_r+0x746>
 800acc0:	9b02      	ldr	r3, [sp, #8]
 800acc2:	1e5c      	subs	r4, r3, #1
 800acc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acc6:	42a3      	cmp	r3, r4
 800acc8:	bfb7      	itett	lt
 800acca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800accc:	1b1c      	subge	r4, r3, r4
 800acce:	1ae2      	sublt	r2, r4, r3
 800acd0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800acd2:	bfbe      	ittt	lt
 800acd4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800acd6:	189b      	addlt	r3, r3, r2
 800acd8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800acda:	9b02      	ldr	r3, [sp, #8]
 800acdc:	bfb8      	it	lt
 800acde:	2400      	movlt	r4, #0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	bfbb      	ittet	lt
 800ace4:	9b06      	ldrlt	r3, [sp, #24]
 800ace6:	9a02      	ldrlt	r2, [sp, #8]
 800ace8:	9f06      	ldrge	r7, [sp, #24]
 800acea:	1a9f      	sublt	r7, r3, r2
 800acec:	bfac      	ite	ge
 800acee:	9b02      	ldrge	r3, [sp, #8]
 800acf0:	2300      	movlt	r3, #0
 800acf2:	e73e      	b.n	800ab72 <_dtoa_r+0x74a>
 800acf4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800acf6:	9f06      	ldr	r7, [sp, #24]
 800acf8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800acfa:	e745      	b.n	800ab88 <_dtoa_r+0x760>
 800acfc:	3fe00000 	.word	0x3fe00000
 800ad00:	40240000 	.word	0x40240000
 800ad04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad06:	e76a      	b.n	800abde <_dtoa_r+0x7b6>
 800ad08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	dc19      	bgt.n	800ad42 <_dtoa_r+0x91a>
 800ad0e:	9b04      	ldr	r3, [sp, #16]
 800ad10:	b9bb      	cbnz	r3, 800ad42 <_dtoa_r+0x91a>
 800ad12:	9b05      	ldr	r3, [sp, #20]
 800ad14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad18:	b99b      	cbnz	r3, 800ad42 <_dtoa_r+0x91a>
 800ad1a:	9b05      	ldr	r3, [sp, #20]
 800ad1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad20:	0d1b      	lsrs	r3, r3, #20
 800ad22:	051b      	lsls	r3, r3, #20
 800ad24:	b183      	cbz	r3, 800ad48 <_dtoa_r+0x920>
 800ad26:	f04f 0801 	mov.w	r8, #1
 800ad2a:	9b06      	ldr	r3, [sp, #24]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	9306      	str	r3, [sp, #24]
 800ad30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad32:	3301      	adds	r3, #1
 800ad34:	9309      	str	r3, [sp, #36]	; 0x24
 800ad36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f47f af6a 	bne.w	800ac12 <_dtoa_r+0x7ea>
 800ad3e:	2001      	movs	r0, #1
 800ad40:	e76f      	b.n	800ac22 <_dtoa_r+0x7fa>
 800ad42:	f04f 0800 	mov.w	r8, #0
 800ad46:	e7f6      	b.n	800ad36 <_dtoa_r+0x90e>
 800ad48:	4698      	mov	r8, r3
 800ad4a:	e7f4      	b.n	800ad36 <_dtoa_r+0x90e>
 800ad4c:	f43f af7d 	beq.w	800ac4a <_dtoa_r+0x822>
 800ad50:	4618      	mov	r0, r3
 800ad52:	301c      	adds	r0, #28
 800ad54:	e772      	b.n	800ac3c <_dtoa_r+0x814>
 800ad56:	9b02      	ldr	r3, [sp, #8]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	dc36      	bgt.n	800adca <_dtoa_r+0x9a2>
 800ad5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	dd33      	ble.n	800adca <_dtoa_r+0x9a2>
 800ad62:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ad66:	f1bb 0f00 	cmp.w	fp, #0
 800ad6a:	d10d      	bne.n	800ad88 <_dtoa_r+0x960>
 800ad6c:	4621      	mov	r1, r4
 800ad6e:	465b      	mov	r3, fp
 800ad70:	2205      	movs	r2, #5
 800ad72:	4628      	mov	r0, r5
 800ad74:	f000 fe2c 	bl	800b9d0 <__multadd>
 800ad78:	4601      	mov	r1, r0
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	4650      	mov	r0, sl
 800ad7e:	f001 f889 	bl	800be94 <__mcmp>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	f73f adb6 	bgt.w	800a8f4 <_dtoa_r+0x4cc>
 800ad88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad8a:	9f08      	ldr	r7, [sp, #32]
 800ad8c:	ea6f 0903 	mvn.w	r9, r3
 800ad90:	f04f 0800 	mov.w	r8, #0
 800ad94:	4621      	mov	r1, r4
 800ad96:	4628      	mov	r0, r5
 800ad98:	f000 fdf8 	bl	800b98c <_Bfree>
 800ad9c:	2e00      	cmp	r6, #0
 800ad9e:	f43f aea4 	beq.w	800aaea <_dtoa_r+0x6c2>
 800ada2:	f1b8 0f00 	cmp.w	r8, #0
 800ada6:	d005      	beq.n	800adb4 <_dtoa_r+0x98c>
 800ada8:	45b0      	cmp	r8, r6
 800adaa:	d003      	beq.n	800adb4 <_dtoa_r+0x98c>
 800adac:	4641      	mov	r1, r8
 800adae:	4628      	mov	r0, r5
 800adb0:	f000 fdec 	bl	800b98c <_Bfree>
 800adb4:	4631      	mov	r1, r6
 800adb6:	4628      	mov	r0, r5
 800adb8:	f000 fde8 	bl	800b98c <_Bfree>
 800adbc:	e695      	b.n	800aaea <_dtoa_r+0x6c2>
 800adbe:	2400      	movs	r4, #0
 800adc0:	4626      	mov	r6, r4
 800adc2:	e7e1      	b.n	800ad88 <_dtoa_r+0x960>
 800adc4:	46c1      	mov	r9, r8
 800adc6:	4626      	mov	r6, r4
 800adc8:	e594      	b.n	800a8f4 <_dtoa_r+0x4cc>
 800adca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adcc:	f8dd b008 	ldr.w	fp, [sp, #8]
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 80fc 	beq.w	800afce <_dtoa_r+0xba6>
 800add6:	2f00      	cmp	r7, #0
 800add8:	dd05      	ble.n	800ade6 <_dtoa_r+0x9be>
 800adda:	4631      	mov	r1, r6
 800addc:	463a      	mov	r2, r7
 800adde:	4628      	mov	r0, r5
 800ade0:	f000 ffec 	bl	800bdbc <__lshift>
 800ade4:	4606      	mov	r6, r0
 800ade6:	f1b8 0f00 	cmp.w	r8, #0
 800adea:	d05c      	beq.n	800aea6 <_dtoa_r+0xa7e>
 800adec:	4628      	mov	r0, r5
 800adee:	6871      	ldr	r1, [r6, #4]
 800adf0:	f000 fd8c 	bl	800b90c <_Balloc>
 800adf4:	4607      	mov	r7, r0
 800adf6:	b928      	cbnz	r0, 800ae04 <_dtoa_r+0x9dc>
 800adf8:	4602      	mov	r2, r0
 800adfa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800adfe:	4b7e      	ldr	r3, [pc, #504]	; (800aff8 <_dtoa_r+0xbd0>)
 800ae00:	f7ff bb26 	b.w	800a450 <_dtoa_r+0x28>
 800ae04:	6932      	ldr	r2, [r6, #16]
 800ae06:	f106 010c 	add.w	r1, r6, #12
 800ae0a:	3202      	adds	r2, #2
 800ae0c:	0092      	lsls	r2, r2, #2
 800ae0e:	300c      	adds	r0, #12
 800ae10:	f7fd fb3b 	bl	800848a <memcpy>
 800ae14:	2201      	movs	r2, #1
 800ae16:	4639      	mov	r1, r7
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f000 ffcf 	bl	800bdbc <__lshift>
 800ae1e:	46b0      	mov	r8, r6
 800ae20:	4606      	mov	r6, r0
 800ae22:	9b08      	ldr	r3, [sp, #32]
 800ae24:	3301      	adds	r3, #1
 800ae26:	9302      	str	r3, [sp, #8]
 800ae28:	9b08      	ldr	r3, [sp, #32]
 800ae2a:	445b      	add	r3, fp
 800ae2c:	930a      	str	r3, [sp, #40]	; 0x28
 800ae2e:	9b04      	ldr	r3, [sp, #16]
 800ae30:	f003 0301 	and.w	r3, r3, #1
 800ae34:	9309      	str	r3, [sp, #36]	; 0x24
 800ae36:	9b02      	ldr	r3, [sp, #8]
 800ae38:	4621      	mov	r1, r4
 800ae3a:	4650      	mov	r0, sl
 800ae3c:	f103 3bff 	add.w	fp, r3, #4294967295
 800ae40:	f7ff fa62 	bl	800a308 <quorem>
 800ae44:	4603      	mov	r3, r0
 800ae46:	4641      	mov	r1, r8
 800ae48:	3330      	adds	r3, #48	; 0x30
 800ae4a:	9004      	str	r0, [sp, #16]
 800ae4c:	4650      	mov	r0, sl
 800ae4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae50:	f001 f820 	bl	800be94 <__mcmp>
 800ae54:	4632      	mov	r2, r6
 800ae56:	9006      	str	r0, [sp, #24]
 800ae58:	4621      	mov	r1, r4
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	f001 f836 	bl	800becc <__mdiff>
 800ae60:	68c2      	ldr	r2, [r0, #12]
 800ae62:	4607      	mov	r7, r0
 800ae64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae66:	bb02      	cbnz	r2, 800aeaa <_dtoa_r+0xa82>
 800ae68:	4601      	mov	r1, r0
 800ae6a:	4650      	mov	r0, sl
 800ae6c:	f001 f812 	bl	800be94 <__mcmp>
 800ae70:	4602      	mov	r2, r0
 800ae72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae74:	4639      	mov	r1, r7
 800ae76:	4628      	mov	r0, r5
 800ae78:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ae7c:	f000 fd86 	bl	800b98c <_Bfree>
 800ae80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae84:	9f02      	ldr	r7, [sp, #8]
 800ae86:	ea43 0102 	orr.w	r1, r3, r2
 800ae8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae8c:	430b      	orrs	r3, r1
 800ae8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae90:	d10d      	bne.n	800aeae <_dtoa_r+0xa86>
 800ae92:	2b39      	cmp	r3, #57	; 0x39
 800ae94:	d027      	beq.n	800aee6 <_dtoa_r+0xabe>
 800ae96:	9a06      	ldr	r2, [sp, #24]
 800ae98:	2a00      	cmp	r2, #0
 800ae9a:	dd01      	ble.n	800aea0 <_dtoa_r+0xa78>
 800ae9c:	9b04      	ldr	r3, [sp, #16]
 800ae9e:	3331      	adds	r3, #49	; 0x31
 800aea0:	f88b 3000 	strb.w	r3, [fp]
 800aea4:	e776      	b.n	800ad94 <_dtoa_r+0x96c>
 800aea6:	4630      	mov	r0, r6
 800aea8:	e7b9      	b.n	800ae1e <_dtoa_r+0x9f6>
 800aeaa:	2201      	movs	r2, #1
 800aeac:	e7e2      	b.n	800ae74 <_dtoa_r+0xa4c>
 800aeae:	9906      	ldr	r1, [sp, #24]
 800aeb0:	2900      	cmp	r1, #0
 800aeb2:	db04      	blt.n	800aebe <_dtoa_r+0xa96>
 800aeb4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800aeb6:	4301      	orrs	r1, r0
 800aeb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeba:	4301      	orrs	r1, r0
 800aebc:	d120      	bne.n	800af00 <_dtoa_r+0xad8>
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	ddee      	ble.n	800aea0 <_dtoa_r+0xa78>
 800aec2:	4651      	mov	r1, sl
 800aec4:	2201      	movs	r2, #1
 800aec6:	4628      	mov	r0, r5
 800aec8:	9302      	str	r3, [sp, #8]
 800aeca:	f000 ff77 	bl	800bdbc <__lshift>
 800aece:	4621      	mov	r1, r4
 800aed0:	4682      	mov	sl, r0
 800aed2:	f000 ffdf 	bl	800be94 <__mcmp>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	9b02      	ldr	r3, [sp, #8]
 800aeda:	dc02      	bgt.n	800aee2 <_dtoa_r+0xaba>
 800aedc:	d1e0      	bne.n	800aea0 <_dtoa_r+0xa78>
 800aede:	07da      	lsls	r2, r3, #31
 800aee0:	d5de      	bpl.n	800aea0 <_dtoa_r+0xa78>
 800aee2:	2b39      	cmp	r3, #57	; 0x39
 800aee4:	d1da      	bne.n	800ae9c <_dtoa_r+0xa74>
 800aee6:	2339      	movs	r3, #57	; 0x39
 800aee8:	f88b 3000 	strb.w	r3, [fp]
 800aeec:	463b      	mov	r3, r7
 800aeee:	461f      	mov	r7, r3
 800aef0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aef4:	3b01      	subs	r3, #1
 800aef6:	2a39      	cmp	r2, #57	; 0x39
 800aef8:	d050      	beq.n	800af9c <_dtoa_r+0xb74>
 800aefa:	3201      	adds	r2, #1
 800aefc:	701a      	strb	r2, [r3, #0]
 800aefe:	e749      	b.n	800ad94 <_dtoa_r+0x96c>
 800af00:	2a00      	cmp	r2, #0
 800af02:	dd03      	ble.n	800af0c <_dtoa_r+0xae4>
 800af04:	2b39      	cmp	r3, #57	; 0x39
 800af06:	d0ee      	beq.n	800aee6 <_dtoa_r+0xabe>
 800af08:	3301      	adds	r3, #1
 800af0a:	e7c9      	b.n	800aea0 <_dtoa_r+0xa78>
 800af0c:	9a02      	ldr	r2, [sp, #8]
 800af0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800af10:	f802 3c01 	strb.w	r3, [r2, #-1]
 800af14:	428a      	cmp	r2, r1
 800af16:	d02a      	beq.n	800af6e <_dtoa_r+0xb46>
 800af18:	4651      	mov	r1, sl
 800af1a:	2300      	movs	r3, #0
 800af1c:	220a      	movs	r2, #10
 800af1e:	4628      	mov	r0, r5
 800af20:	f000 fd56 	bl	800b9d0 <__multadd>
 800af24:	45b0      	cmp	r8, r6
 800af26:	4682      	mov	sl, r0
 800af28:	f04f 0300 	mov.w	r3, #0
 800af2c:	f04f 020a 	mov.w	r2, #10
 800af30:	4641      	mov	r1, r8
 800af32:	4628      	mov	r0, r5
 800af34:	d107      	bne.n	800af46 <_dtoa_r+0xb1e>
 800af36:	f000 fd4b 	bl	800b9d0 <__multadd>
 800af3a:	4680      	mov	r8, r0
 800af3c:	4606      	mov	r6, r0
 800af3e:	9b02      	ldr	r3, [sp, #8]
 800af40:	3301      	adds	r3, #1
 800af42:	9302      	str	r3, [sp, #8]
 800af44:	e777      	b.n	800ae36 <_dtoa_r+0xa0e>
 800af46:	f000 fd43 	bl	800b9d0 <__multadd>
 800af4a:	4631      	mov	r1, r6
 800af4c:	4680      	mov	r8, r0
 800af4e:	2300      	movs	r3, #0
 800af50:	220a      	movs	r2, #10
 800af52:	4628      	mov	r0, r5
 800af54:	f000 fd3c 	bl	800b9d0 <__multadd>
 800af58:	4606      	mov	r6, r0
 800af5a:	e7f0      	b.n	800af3e <_dtoa_r+0xb16>
 800af5c:	f1bb 0f00 	cmp.w	fp, #0
 800af60:	bfcc      	ite	gt
 800af62:	465f      	movgt	r7, fp
 800af64:	2701      	movle	r7, #1
 800af66:	f04f 0800 	mov.w	r8, #0
 800af6a:	9a08      	ldr	r2, [sp, #32]
 800af6c:	4417      	add	r7, r2
 800af6e:	4651      	mov	r1, sl
 800af70:	2201      	movs	r2, #1
 800af72:	4628      	mov	r0, r5
 800af74:	9302      	str	r3, [sp, #8]
 800af76:	f000 ff21 	bl	800bdbc <__lshift>
 800af7a:	4621      	mov	r1, r4
 800af7c:	4682      	mov	sl, r0
 800af7e:	f000 ff89 	bl	800be94 <__mcmp>
 800af82:	2800      	cmp	r0, #0
 800af84:	dcb2      	bgt.n	800aeec <_dtoa_r+0xac4>
 800af86:	d102      	bne.n	800af8e <_dtoa_r+0xb66>
 800af88:	9b02      	ldr	r3, [sp, #8]
 800af8a:	07db      	lsls	r3, r3, #31
 800af8c:	d4ae      	bmi.n	800aeec <_dtoa_r+0xac4>
 800af8e:	463b      	mov	r3, r7
 800af90:	461f      	mov	r7, r3
 800af92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af96:	2a30      	cmp	r2, #48	; 0x30
 800af98:	d0fa      	beq.n	800af90 <_dtoa_r+0xb68>
 800af9a:	e6fb      	b.n	800ad94 <_dtoa_r+0x96c>
 800af9c:	9a08      	ldr	r2, [sp, #32]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d1a5      	bne.n	800aeee <_dtoa_r+0xac6>
 800afa2:	2331      	movs	r3, #49	; 0x31
 800afa4:	f109 0901 	add.w	r9, r9, #1
 800afa8:	7013      	strb	r3, [r2, #0]
 800afaa:	e6f3      	b.n	800ad94 <_dtoa_r+0x96c>
 800afac:	4b13      	ldr	r3, [pc, #76]	; (800affc <_dtoa_r+0xbd4>)
 800afae:	f7ff baa7 	b.w	800a500 <_dtoa_r+0xd8>
 800afb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f47f aa80 	bne.w	800a4ba <_dtoa_r+0x92>
 800afba:	4b11      	ldr	r3, [pc, #68]	; (800b000 <_dtoa_r+0xbd8>)
 800afbc:	f7ff baa0 	b.w	800a500 <_dtoa_r+0xd8>
 800afc0:	f1bb 0f00 	cmp.w	fp, #0
 800afc4:	dc03      	bgt.n	800afce <_dtoa_r+0xba6>
 800afc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afc8:	2b02      	cmp	r3, #2
 800afca:	f73f aecc 	bgt.w	800ad66 <_dtoa_r+0x93e>
 800afce:	9f08      	ldr	r7, [sp, #32]
 800afd0:	4621      	mov	r1, r4
 800afd2:	4650      	mov	r0, sl
 800afd4:	f7ff f998 	bl	800a308 <quorem>
 800afd8:	9a08      	ldr	r2, [sp, #32]
 800afda:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800afde:	f807 3b01 	strb.w	r3, [r7], #1
 800afe2:	1aba      	subs	r2, r7, r2
 800afe4:	4593      	cmp	fp, r2
 800afe6:	ddb9      	ble.n	800af5c <_dtoa_r+0xb34>
 800afe8:	4651      	mov	r1, sl
 800afea:	2300      	movs	r3, #0
 800afec:	220a      	movs	r2, #10
 800afee:	4628      	mov	r0, r5
 800aff0:	f000 fcee 	bl	800b9d0 <__multadd>
 800aff4:	4682      	mov	sl, r0
 800aff6:	e7eb      	b.n	800afd0 <_dtoa_r+0xba8>
 800aff8:	0800d219 	.word	0x0800d219
 800affc:	0800cf7c 	.word	0x0800cf7c
 800b000:	0800d1ad 	.word	0x0800d1ad

0800b004 <__sflush_r>:
 800b004:	898a      	ldrh	r2, [r1, #12]
 800b006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b00a:	4605      	mov	r5, r0
 800b00c:	0710      	lsls	r0, r2, #28
 800b00e:	460c      	mov	r4, r1
 800b010:	d458      	bmi.n	800b0c4 <__sflush_r+0xc0>
 800b012:	684b      	ldr	r3, [r1, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	dc05      	bgt.n	800b024 <__sflush_r+0x20>
 800b018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	dc02      	bgt.n	800b024 <__sflush_r+0x20>
 800b01e:	2000      	movs	r0, #0
 800b020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b026:	2e00      	cmp	r6, #0
 800b028:	d0f9      	beq.n	800b01e <__sflush_r+0x1a>
 800b02a:	2300      	movs	r3, #0
 800b02c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b030:	682f      	ldr	r7, [r5, #0]
 800b032:	602b      	str	r3, [r5, #0]
 800b034:	d032      	beq.n	800b09c <__sflush_r+0x98>
 800b036:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b038:	89a3      	ldrh	r3, [r4, #12]
 800b03a:	075a      	lsls	r2, r3, #29
 800b03c:	d505      	bpl.n	800b04a <__sflush_r+0x46>
 800b03e:	6863      	ldr	r3, [r4, #4]
 800b040:	1ac0      	subs	r0, r0, r3
 800b042:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b044:	b10b      	cbz	r3, 800b04a <__sflush_r+0x46>
 800b046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b048:	1ac0      	subs	r0, r0, r3
 800b04a:	2300      	movs	r3, #0
 800b04c:	4602      	mov	r2, r0
 800b04e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b050:	4628      	mov	r0, r5
 800b052:	6a21      	ldr	r1, [r4, #32]
 800b054:	47b0      	blx	r6
 800b056:	1c43      	adds	r3, r0, #1
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	d106      	bne.n	800b06a <__sflush_r+0x66>
 800b05c:	6829      	ldr	r1, [r5, #0]
 800b05e:	291d      	cmp	r1, #29
 800b060:	d82c      	bhi.n	800b0bc <__sflush_r+0xb8>
 800b062:	4a2a      	ldr	r2, [pc, #168]	; (800b10c <__sflush_r+0x108>)
 800b064:	40ca      	lsrs	r2, r1
 800b066:	07d6      	lsls	r6, r2, #31
 800b068:	d528      	bpl.n	800b0bc <__sflush_r+0xb8>
 800b06a:	2200      	movs	r2, #0
 800b06c:	6062      	str	r2, [r4, #4]
 800b06e:	6922      	ldr	r2, [r4, #16]
 800b070:	04d9      	lsls	r1, r3, #19
 800b072:	6022      	str	r2, [r4, #0]
 800b074:	d504      	bpl.n	800b080 <__sflush_r+0x7c>
 800b076:	1c42      	adds	r2, r0, #1
 800b078:	d101      	bne.n	800b07e <__sflush_r+0x7a>
 800b07a:	682b      	ldr	r3, [r5, #0]
 800b07c:	b903      	cbnz	r3, 800b080 <__sflush_r+0x7c>
 800b07e:	6560      	str	r0, [r4, #84]	; 0x54
 800b080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b082:	602f      	str	r7, [r5, #0]
 800b084:	2900      	cmp	r1, #0
 800b086:	d0ca      	beq.n	800b01e <__sflush_r+0x1a>
 800b088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b08c:	4299      	cmp	r1, r3
 800b08e:	d002      	beq.n	800b096 <__sflush_r+0x92>
 800b090:	4628      	mov	r0, r5
 800b092:	f001 f901 	bl	800c298 <_free_r>
 800b096:	2000      	movs	r0, #0
 800b098:	6360      	str	r0, [r4, #52]	; 0x34
 800b09a:	e7c1      	b.n	800b020 <__sflush_r+0x1c>
 800b09c:	6a21      	ldr	r1, [r4, #32]
 800b09e:	2301      	movs	r3, #1
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	47b0      	blx	r6
 800b0a4:	1c41      	adds	r1, r0, #1
 800b0a6:	d1c7      	bne.n	800b038 <__sflush_r+0x34>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0c4      	beq.n	800b038 <__sflush_r+0x34>
 800b0ae:	2b1d      	cmp	r3, #29
 800b0b0:	d001      	beq.n	800b0b6 <__sflush_r+0xb2>
 800b0b2:	2b16      	cmp	r3, #22
 800b0b4:	d101      	bne.n	800b0ba <__sflush_r+0xb6>
 800b0b6:	602f      	str	r7, [r5, #0]
 800b0b8:	e7b1      	b.n	800b01e <__sflush_r+0x1a>
 800b0ba:	89a3      	ldrh	r3, [r4, #12]
 800b0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	e7ad      	b.n	800b020 <__sflush_r+0x1c>
 800b0c4:	690f      	ldr	r7, [r1, #16]
 800b0c6:	2f00      	cmp	r7, #0
 800b0c8:	d0a9      	beq.n	800b01e <__sflush_r+0x1a>
 800b0ca:	0793      	lsls	r3, r2, #30
 800b0cc:	bf18      	it	ne
 800b0ce:	2300      	movne	r3, #0
 800b0d0:	680e      	ldr	r6, [r1, #0]
 800b0d2:	bf08      	it	eq
 800b0d4:	694b      	ldreq	r3, [r1, #20]
 800b0d6:	eba6 0807 	sub.w	r8, r6, r7
 800b0da:	600f      	str	r7, [r1, #0]
 800b0dc:	608b      	str	r3, [r1, #8]
 800b0de:	f1b8 0f00 	cmp.w	r8, #0
 800b0e2:	dd9c      	ble.n	800b01e <__sflush_r+0x1a>
 800b0e4:	4643      	mov	r3, r8
 800b0e6:	463a      	mov	r2, r7
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	6a21      	ldr	r1, [r4, #32]
 800b0ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0ee:	47b0      	blx	r6
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	dc06      	bgt.n	800b102 <__sflush_r+0xfe>
 800b0f4:	89a3      	ldrh	r3, [r4, #12]
 800b0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0fe:	81a3      	strh	r3, [r4, #12]
 800b100:	e78e      	b.n	800b020 <__sflush_r+0x1c>
 800b102:	4407      	add	r7, r0
 800b104:	eba8 0800 	sub.w	r8, r8, r0
 800b108:	e7e9      	b.n	800b0de <__sflush_r+0xda>
 800b10a:	bf00      	nop
 800b10c:	20400001 	.word	0x20400001

0800b110 <_fflush_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	690b      	ldr	r3, [r1, #16]
 800b114:	4605      	mov	r5, r0
 800b116:	460c      	mov	r4, r1
 800b118:	b913      	cbnz	r3, 800b120 <_fflush_r+0x10>
 800b11a:	2500      	movs	r5, #0
 800b11c:	4628      	mov	r0, r5
 800b11e:	bd38      	pop	{r3, r4, r5, pc}
 800b120:	b118      	cbz	r0, 800b12a <_fflush_r+0x1a>
 800b122:	6983      	ldr	r3, [r0, #24]
 800b124:	b90b      	cbnz	r3, 800b12a <_fflush_r+0x1a>
 800b126:	f7fd f8eb 	bl	8008300 <__sinit>
 800b12a:	4b14      	ldr	r3, [pc, #80]	; (800b17c <_fflush_r+0x6c>)
 800b12c:	429c      	cmp	r4, r3
 800b12e:	d11b      	bne.n	800b168 <_fflush_r+0x58>
 800b130:	686c      	ldr	r4, [r5, #4]
 800b132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d0ef      	beq.n	800b11a <_fflush_r+0xa>
 800b13a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b13c:	07d0      	lsls	r0, r2, #31
 800b13e:	d404      	bmi.n	800b14a <_fflush_r+0x3a>
 800b140:	0599      	lsls	r1, r3, #22
 800b142:	d402      	bmi.n	800b14a <_fflush_r+0x3a>
 800b144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b146:	f7fd f99e 	bl	8008486 <__retarget_lock_acquire_recursive>
 800b14a:	4628      	mov	r0, r5
 800b14c:	4621      	mov	r1, r4
 800b14e:	f7ff ff59 	bl	800b004 <__sflush_r>
 800b152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b154:	4605      	mov	r5, r0
 800b156:	07da      	lsls	r2, r3, #31
 800b158:	d4e0      	bmi.n	800b11c <_fflush_r+0xc>
 800b15a:	89a3      	ldrh	r3, [r4, #12]
 800b15c:	059b      	lsls	r3, r3, #22
 800b15e:	d4dd      	bmi.n	800b11c <_fflush_r+0xc>
 800b160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b162:	f7fd f991 	bl	8008488 <__retarget_lock_release_recursive>
 800b166:	e7d9      	b.n	800b11c <_fflush_r+0xc>
 800b168:	4b05      	ldr	r3, [pc, #20]	; (800b180 <_fflush_r+0x70>)
 800b16a:	429c      	cmp	r4, r3
 800b16c:	d101      	bne.n	800b172 <_fflush_r+0x62>
 800b16e:	68ac      	ldr	r4, [r5, #8]
 800b170:	e7df      	b.n	800b132 <_fflush_r+0x22>
 800b172:	4b04      	ldr	r3, [pc, #16]	; (800b184 <_fflush_r+0x74>)
 800b174:	429c      	cmp	r4, r3
 800b176:	bf08      	it	eq
 800b178:	68ec      	ldreq	r4, [r5, #12]
 800b17a:	e7da      	b.n	800b132 <_fflush_r+0x22>
 800b17c:	0800cf28 	.word	0x0800cf28
 800b180:	0800cf48 	.word	0x0800cf48
 800b184:	0800cf08 	.word	0x0800cf08

0800b188 <fiprintf>:
 800b188:	b40e      	push	{r1, r2, r3}
 800b18a:	b503      	push	{r0, r1, lr}
 800b18c:	4601      	mov	r1, r0
 800b18e:	ab03      	add	r3, sp, #12
 800b190:	4805      	ldr	r0, [pc, #20]	; (800b1a8 <fiprintf+0x20>)
 800b192:	f853 2b04 	ldr.w	r2, [r3], #4
 800b196:	6800      	ldr	r0, [r0, #0]
 800b198:	9301      	str	r3, [sp, #4]
 800b19a:	f001 fa4d 	bl	800c638 <_vfiprintf_r>
 800b19e:	b002      	add	sp, #8
 800b1a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1a4:	b003      	add	sp, #12
 800b1a6:	4770      	bx	lr
 800b1a8:	20000014 	.word	0x20000014

0800b1ac <rshift>:
 800b1ac:	6903      	ldr	r3, [r0, #16]
 800b1ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1b6:	f100 0414 	add.w	r4, r0, #20
 800b1ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b1be:	dd46      	ble.n	800b24e <rshift+0xa2>
 800b1c0:	f011 011f 	ands.w	r1, r1, #31
 800b1c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1cc:	d10c      	bne.n	800b1e8 <rshift+0x3c>
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	f100 0710 	add.w	r7, r0, #16
 800b1d4:	42b1      	cmp	r1, r6
 800b1d6:	d335      	bcc.n	800b244 <rshift+0x98>
 800b1d8:	1a9b      	subs	r3, r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	1eea      	subs	r2, r5, #3
 800b1de:	4296      	cmp	r6, r2
 800b1e0:	bf38      	it	cc
 800b1e2:	2300      	movcc	r3, #0
 800b1e4:	4423      	add	r3, r4
 800b1e6:	e015      	b.n	800b214 <rshift+0x68>
 800b1e8:	46a1      	mov	r9, r4
 800b1ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b1ee:	f1c1 0820 	rsb	r8, r1, #32
 800b1f2:	40cf      	lsrs	r7, r1
 800b1f4:	f105 0e04 	add.w	lr, r5, #4
 800b1f8:	4576      	cmp	r6, lr
 800b1fa:	46f4      	mov	ip, lr
 800b1fc:	d816      	bhi.n	800b22c <rshift+0x80>
 800b1fe:	1a9b      	subs	r3, r3, r2
 800b200:	009a      	lsls	r2, r3, #2
 800b202:	3a04      	subs	r2, #4
 800b204:	3501      	adds	r5, #1
 800b206:	42ae      	cmp	r6, r5
 800b208:	bf38      	it	cc
 800b20a:	2200      	movcc	r2, #0
 800b20c:	18a3      	adds	r3, r4, r2
 800b20e:	50a7      	str	r7, [r4, r2]
 800b210:	b107      	cbz	r7, 800b214 <rshift+0x68>
 800b212:	3304      	adds	r3, #4
 800b214:	42a3      	cmp	r3, r4
 800b216:	eba3 0204 	sub.w	r2, r3, r4
 800b21a:	bf08      	it	eq
 800b21c:	2300      	moveq	r3, #0
 800b21e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b222:	6102      	str	r2, [r0, #16]
 800b224:	bf08      	it	eq
 800b226:	6143      	streq	r3, [r0, #20]
 800b228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b22c:	f8dc c000 	ldr.w	ip, [ip]
 800b230:	fa0c fc08 	lsl.w	ip, ip, r8
 800b234:	ea4c 0707 	orr.w	r7, ip, r7
 800b238:	f849 7b04 	str.w	r7, [r9], #4
 800b23c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b240:	40cf      	lsrs	r7, r1
 800b242:	e7d9      	b.n	800b1f8 <rshift+0x4c>
 800b244:	f851 cb04 	ldr.w	ip, [r1], #4
 800b248:	f847 cf04 	str.w	ip, [r7, #4]!
 800b24c:	e7c2      	b.n	800b1d4 <rshift+0x28>
 800b24e:	4623      	mov	r3, r4
 800b250:	e7e0      	b.n	800b214 <rshift+0x68>

0800b252 <__hexdig_fun>:
 800b252:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b256:	2b09      	cmp	r3, #9
 800b258:	d802      	bhi.n	800b260 <__hexdig_fun+0xe>
 800b25a:	3820      	subs	r0, #32
 800b25c:	b2c0      	uxtb	r0, r0
 800b25e:	4770      	bx	lr
 800b260:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b264:	2b05      	cmp	r3, #5
 800b266:	d801      	bhi.n	800b26c <__hexdig_fun+0x1a>
 800b268:	3847      	subs	r0, #71	; 0x47
 800b26a:	e7f7      	b.n	800b25c <__hexdig_fun+0xa>
 800b26c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b270:	2b05      	cmp	r3, #5
 800b272:	d801      	bhi.n	800b278 <__hexdig_fun+0x26>
 800b274:	3827      	subs	r0, #39	; 0x27
 800b276:	e7f1      	b.n	800b25c <__hexdig_fun+0xa>
 800b278:	2000      	movs	r0, #0
 800b27a:	4770      	bx	lr

0800b27c <__gethex>:
 800b27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b280:	b08b      	sub	sp, #44	; 0x2c
 800b282:	9306      	str	r3, [sp, #24]
 800b284:	4bb9      	ldr	r3, [pc, #740]	; (800b56c <__gethex+0x2f0>)
 800b286:	9002      	str	r0, [sp, #8]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	468b      	mov	fp, r1
 800b28c:	4618      	mov	r0, r3
 800b28e:	4690      	mov	r8, r2
 800b290:	9303      	str	r3, [sp, #12]
 800b292:	f7f4 ff5d 	bl	8000150 <strlen>
 800b296:	4682      	mov	sl, r0
 800b298:	9b03      	ldr	r3, [sp, #12]
 800b29a:	f8db 2000 	ldr.w	r2, [fp]
 800b29e:	4403      	add	r3, r0
 800b2a0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b2a4:	9307      	str	r3, [sp, #28]
 800b2a6:	1c93      	adds	r3, r2, #2
 800b2a8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b2ac:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b2b0:	32fe      	adds	r2, #254	; 0xfe
 800b2b2:	18d1      	adds	r1, r2, r3
 800b2b4:	461f      	mov	r7, r3
 800b2b6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b2ba:	9101      	str	r1, [sp, #4]
 800b2bc:	2830      	cmp	r0, #48	; 0x30
 800b2be:	d0f8      	beq.n	800b2b2 <__gethex+0x36>
 800b2c0:	f7ff ffc7 	bl	800b252 <__hexdig_fun>
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d13a      	bne.n	800b340 <__gethex+0xc4>
 800b2ca:	4652      	mov	r2, sl
 800b2cc:	4638      	mov	r0, r7
 800b2ce:	9903      	ldr	r1, [sp, #12]
 800b2d0:	f001 fafa 	bl	800c8c8 <strncmp>
 800b2d4:	4605      	mov	r5, r0
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d166      	bne.n	800b3a8 <__gethex+0x12c>
 800b2da:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b2de:	eb07 060a 	add.w	r6, r7, sl
 800b2e2:	f7ff ffb6 	bl	800b252 <__hexdig_fun>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	d060      	beq.n	800b3ac <__gethex+0x130>
 800b2ea:	4633      	mov	r3, r6
 800b2ec:	7818      	ldrb	r0, [r3, #0]
 800b2ee:	461f      	mov	r7, r3
 800b2f0:	2830      	cmp	r0, #48	; 0x30
 800b2f2:	f103 0301 	add.w	r3, r3, #1
 800b2f6:	d0f9      	beq.n	800b2ec <__gethex+0x70>
 800b2f8:	f7ff ffab 	bl	800b252 <__hexdig_fun>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	fab0 f480 	clz	r4, r0
 800b302:	4635      	mov	r5, r6
 800b304:	0964      	lsrs	r4, r4, #5
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	463a      	mov	r2, r7
 800b30a:	4616      	mov	r6, r2
 800b30c:	7830      	ldrb	r0, [r6, #0]
 800b30e:	3201      	adds	r2, #1
 800b310:	f7ff ff9f 	bl	800b252 <__hexdig_fun>
 800b314:	2800      	cmp	r0, #0
 800b316:	d1f8      	bne.n	800b30a <__gethex+0x8e>
 800b318:	4652      	mov	r2, sl
 800b31a:	4630      	mov	r0, r6
 800b31c:	9903      	ldr	r1, [sp, #12]
 800b31e:	f001 fad3 	bl	800c8c8 <strncmp>
 800b322:	b980      	cbnz	r0, 800b346 <__gethex+0xca>
 800b324:	b94d      	cbnz	r5, 800b33a <__gethex+0xbe>
 800b326:	eb06 050a 	add.w	r5, r6, sl
 800b32a:	462a      	mov	r2, r5
 800b32c:	4616      	mov	r6, r2
 800b32e:	7830      	ldrb	r0, [r6, #0]
 800b330:	3201      	adds	r2, #1
 800b332:	f7ff ff8e 	bl	800b252 <__hexdig_fun>
 800b336:	2800      	cmp	r0, #0
 800b338:	d1f8      	bne.n	800b32c <__gethex+0xb0>
 800b33a:	1bad      	subs	r5, r5, r6
 800b33c:	00ad      	lsls	r5, r5, #2
 800b33e:	e004      	b.n	800b34a <__gethex+0xce>
 800b340:	2400      	movs	r4, #0
 800b342:	4625      	mov	r5, r4
 800b344:	e7e0      	b.n	800b308 <__gethex+0x8c>
 800b346:	2d00      	cmp	r5, #0
 800b348:	d1f7      	bne.n	800b33a <__gethex+0xbe>
 800b34a:	7833      	ldrb	r3, [r6, #0]
 800b34c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b350:	2b50      	cmp	r3, #80	; 0x50
 800b352:	d139      	bne.n	800b3c8 <__gethex+0x14c>
 800b354:	7873      	ldrb	r3, [r6, #1]
 800b356:	2b2b      	cmp	r3, #43	; 0x2b
 800b358:	d02a      	beq.n	800b3b0 <__gethex+0x134>
 800b35a:	2b2d      	cmp	r3, #45	; 0x2d
 800b35c:	d02c      	beq.n	800b3b8 <__gethex+0x13c>
 800b35e:	f04f 0900 	mov.w	r9, #0
 800b362:	1c71      	adds	r1, r6, #1
 800b364:	7808      	ldrb	r0, [r1, #0]
 800b366:	f7ff ff74 	bl	800b252 <__hexdig_fun>
 800b36a:	1e43      	subs	r3, r0, #1
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b18      	cmp	r3, #24
 800b370:	d82a      	bhi.n	800b3c8 <__gethex+0x14c>
 800b372:	f1a0 0210 	sub.w	r2, r0, #16
 800b376:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b37a:	f7ff ff6a 	bl	800b252 <__hexdig_fun>
 800b37e:	1e43      	subs	r3, r0, #1
 800b380:	b2db      	uxtb	r3, r3
 800b382:	2b18      	cmp	r3, #24
 800b384:	d91b      	bls.n	800b3be <__gethex+0x142>
 800b386:	f1b9 0f00 	cmp.w	r9, #0
 800b38a:	d000      	beq.n	800b38e <__gethex+0x112>
 800b38c:	4252      	negs	r2, r2
 800b38e:	4415      	add	r5, r2
 800b390:	f8cb 1000 	str.w	r1, [fp]
 800b394:	b1d4      	cbz	r4, 800b3cc <__gethex+0x150>
 800b396:	9b01      	ldr	r3, [sp, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	bf14      	ite	ne
 800b39c:	2700      	movne	r7, #0
 800b39e:	2706      	moveq	r7, #6
 800b3a0:	4638      	mov	r0, r7
 800b3a2:	b00b      	add	sp, #44	; 0x2c
 800b3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a8:	463e      	mov	r6, r7
 800b3aa:	4625      	mov	r5, r4
 800b3ac:	2401      	movs	r4, #1
 800b3ae:	e7cc      	b.n	800b34a <__gethex+0xce>
 800b3b0:	f04f 0900 	mov.w	r9, #0
 800b3b4:	1cb1      	adds	r1, r6, #2
 800b3b6:	e7d5      	b.n	800b364 <__gethex+0xe8>
 800b3b8:	f04f 0901 	mov.w	r9, #1
 800b3bc:	e7fa      	b.n	800b3b4 <__gethex+0x138>
 800b3be:	230a      	movs	r3, #10
 800b3c0:	fb03 0202 	mla	r2, r3, r2, r0
 800b3c4:	3a10      	subs	r2, #16
 800b3c6:	e7d6      	b.n	800b376 <__gethex+0xfa>
 800b3c8:	4631      	mov	r1, r6
 800b3ca:	e7e1      	b.n	800b390 <__gethex+0x114>
 800b3cc:	4621      	mov	r1, r4
 800b3ce:	1bf3      	subs	r3, r6, r7
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	2b07      	cmp	r3, #7
 800b3d4:	dc0a      	bgt.n	800b3ec <__gethex+0x170>
 800b3d6:	9802      	ldr	r0, [sp, #8]
 800b3d8:	f000 fa98 	bl	800b90c <_Balloc>
 800b3dc:	4604      	mov	r4, r0
 800b3de:	b940      	cbnz	r0, 800b3f2 <__gethex+0x176>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	21de      	movs	r1, #222	; 0xde
 800b3e4:	4b62      	ldr	r3, [pc, #392]	; (800b570 <__gethex+0x2f4>)
 800b3e6:	4863      	ldr	r0, [pc, #396]	; (800b574 <__gethex+0x2f8>)
 800b3e8:	f7fe ff60 	bl	800a2ac <__assert_func>
 800b3ec:	3101      	adds	r1, #1
 800b3ee:	105b      	asrs	r3, r3, #1
 800b3f0:	e7ef      	b.n	800b3d2 <__gethex+0x156>
 800b3f2:	f04f 0b00 	mov.w	fp, #0
 800b3f6:	f100 0914 	add.w	r9, r0, #20
 800b3fa:	f1ca 0301 	rsb	r3, sl, #1
 800b3fe:	f8cd 9010 	str.w	r9, [sp, #16]
 800b402:	f8cd b004 	str.w	fp, [sp, #4]
 800b406:	9308      	str	r3, [sp, #32]
 800b408:	42b7      	cmp	r7, r6
 800b40a:	d33f      	bcc.n	800b48c <__gethex+0x210>
 800b40c:	9f04      	ldr	r7, [sp, #16]
 800b40e:	9b01      	ldr	r3, [sp, #4]
 800b410:	f847 3b04 	str.w	r3, [r7], #4
 800b414:	eba7 0709 	sub.w	r7, r7, r9
 800b418:	10bf      	asrs	r7, r7, #2
 800b41a:	6127      	str	r7, [r4, #16]
 800b41c:	4618      	mov	r0, r3
 800b41e:	f000 fb6b 	bl	800baf8 <__hi0bits>
 800b422:	017f      	lsls	r7, r7, #5
 800b424:	f8d8 6000 	ldr.w	r6, [r8]
 800b428:	1a3f      	subs	r7, r7, r0
 800b42a:	42b7      	cmp	r7, r6
 800b42c:	dd62      	ble.n	800b4f4 <__gethex+0x278>
 800b42e:	1bbf      	subs	r7, r7, r6
 800b430:	4639      	mov	r1, r7
 800b432:	4620      	mov	r0, r4
 800b434:	f000 ff01 	bl	800c23a <__any_on>
 800b438:	4682      	mov	sl, r0
 800b43a:	b1a8      	cbz	r0, 800b468 <__gethex+0x1ec>
 800b43c:	f04f 0a01 	mov.w	sl, #1
 800b440:	1e7b      	subs	r3, r7, #1
 800b442:	1159      	asrs	r1, r3, #5
 800b444:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b448:	f003 021f 	and.w	r2, r3, #31
 800b44c:	fa0a f202 	lsl.w	r2, sl, r2
 800b450:	420a      	tst	r2, r1
 800b452:	d009      	beq.n	800b468 <__gethex+0x1ec>
 800b454:	4553      	cmp	r3, sl
 800b456:	dd05      	ble.n	800b464 <__gethex+0x1e8>
 800b458:	4620      	mov	r0, r4
 800b45a:	1eb9      	subs	r1, r7, #2
 800b45c:	f000 feed 	bl	800c23a <__any_on>
 800b460:	2800      	cmp	r0, #0
 800b462:	d144      	bne.n	800b4ee <__gethex+0x272>
 800b464:	f04f 0a02 	mov.w	sl, #2
 800b468:	4639      	mov	r1, r7
 800b46a:	4620      	mov	r0, r4
 800b46c:	f7ff fe9e 	bl	800b1ac <rshift>
 800b470:	443d      	add	r5, r7
 800b472:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b476:	42ab      	cmp	r3, r5
 800b478:	da4a      	bge.n	800b510 <__gethex+0x294>
 800b47a:	4621      	mov	r1, r4
 800b47c:	9802      	ldr	r0, [sp, #8]
 800b47e:	f000 fa85 	bl	800b98c <_Bfree>
 800b482:	2300      	movs	r3, #0
 800b484:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b486:	27a3      	movs	r7, #163	; 0xa3
 800b488:	6013      	str	r3, [r2, #0]
 800b48a:	e789      	b.n	800b3a0 <__gethex+0x124>
 800b48c:	1e73      	subs	r3, r6, #1
 800b48e:	9a07      	ldr	r2, [sp, #28]
 800b490:	9305      	str	r3, [sp, #20]
 800b492:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b496:	4293      	cmp	r3, r2
 800b498:	d019      	beq.n	800b4ce <__gethex+0x252>
 800b49a:	f1bb 0f20 	cmp.w	fp, #32
 800b49e:	d107      	bne.n	800b4b0 <__gethex+0x234>
 800b4a0:	9b04      	ldr	r3, [sp, #16]
 800b4a2:	9a01      	ldr	r2, [sp, #4]
 800b4a4:	f843 2b04 	str.w	r2, [r3], #4
 800b4a8:	9304      	str	r3, [sp, #16]
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	469b      	mov	fp, r3
 800b4ae:	9301      	str	r3, [sp, #4]
 800b4b0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b4b4:	f7ff fecd 	bl	800b252 <__hexdig_fun>
 800b4b8:	9b01      	ldr	r3, [sp, #4]
 800b4ba:	f000 000f 	and.w	r0, r0, #15
 800b4be:	fa00 f00b 	lsl.w	r0, r0, fp
 800b4c2:	4303      	orrs	r3, r0
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	f10b 0b04 	add.w	fp, fp, #4
 800b4ca:	9b05      	ldr	r3, [sp, #20]
 800b4cc:	e00d      	b.n	800b4ea <__gethex+0x26e>
 800b4ce:	9b05      	ldr	r3, [sp, #20]
 800b4d0:	9a08      	ldr	r2, [sp, #32]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	42bb      	cmp	r3, r7
 800b4d6:	d3e0      	bcc.n	800b49a <__gethex+0x21e>
 800b4d8:	4618      	mov	r0, r3
 800b4da:	4652      	mov	r2, sl
 800b4dc:	9903      	ldr	r1, [sp, #12]
 800b4de:	9309      	str	r3, [sp, #36]	; 0x24
 800b4e0:	f001 f9f2 	bl	800c8c8 <strncmp>
 800b4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d1d7      	bne.n	800b49a <__gethex+0x21e>
 800b4ea:	461e      	mov	r6, r3
 800b4ec:	e78c      	b.n	800b408 <__gethex+0x18c>
 800b4ee:	f04f 0a03 	mov.w	sl, #3
 800b4f2:	e7b9      	b.n	800b468 <__gethex+0x1ec>
 800b4f4:	da09      	bge.n	800b50a <__gethex+0x28e>
 800b4f6:	1bf7      	subs	r7, r6, r7
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	463a      	mov	r2, r7
 800b4fc:	9802      	ldr	r0, [sp, #8]
 800b4fe:	f000 fc5d 	bl	800bdbc <__lshift>
 800b502:	4604      	mov	r4, r0
 800b504:	1bed      	subs	r5, r5, r7
 800b506:	f100 0914 	add.w	r9, r0, #20
 800b50a:	f04f 0a00 	mov.w	sl, #0
 800b50e:	e7b0      	b.n	800b472 <__gethex+0x1f6>
 800b510:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b514:	42a8      	cmp	r0, r5
 800b516:	dd71      	ble.n	800b5fc <__gethex+0x380>
 800b518:	1b45      	subs	r5, r0, r5
 800b51a:	42ae      	cmp	r6, r5
 800b51c:	dc34      	bgt.n	800b588 <__gethex+0x30c>
 800b51e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b522:	2b02      	cmp	r3, #2
 800b524:	d028      	beq.n	800b578 <__gethex+0x2fc>
 800b526:	2b03      	cmp	r3, #3
 800b528:	d02a      	beq.n	800b580 <__gethex+0x304>
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d115      	bne.n	800b55a <__gethex+0x2de>
 800b52e:	42ae      	cmp	r6, r5
 800b530:	d113      	bne.n	800b55a <__gethex+0x2de>
 800b532:	2e01      	cmp	r6, #1
 800b534:	d10b      	bne.n	800b54e <__gethex+0x2d2>
 800b536:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b53a:	9a06      	ldr	r2, [sp, #24]
 800b53c:	2762      	movs	r7, #98	; 0x62
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	2301      	movs	r3, #1
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	f8c9 3000 	str.w	r3, [r9]
 800b548:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b54a:	601c      	str	r4, [r3, #0]
 800b54c:	e728      	b.n	800b3a0 <__gethex+0x124>
 800b54e:	4620      	mov	r0, r4
 800b550:	1e71      	subs	r1, r6, #1
 800b552:	f000 fe72 	bl	800c23a <__any_on>
 800b556:	2800      	cmp	r0, #0
 800b558:	d1ed      	bne.n	800b536 <__gethex+0x2ba>
 800b55a:	4621      	mov	r1, r4
 800b55c:	9802      	ldr	r0, [sp, #8]
 800b55e:	f000 fa15 	bl	800b98c <_Bfree>
 800b562:	2300      	movs	r3, #0
 800b564:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b566:	2750      	movs	r7, #80	; 0x50
 800b568:	6013      	str	r3, [r2, #0]
 800b56a:	e719      	b.n	800b3a0 <__gethex+0x124>
 800b56c:	0800d294 	.word	0x0800d294
 800b570:	0800d219 	.word	0x0800d219
 800b574:	0800d22a 	.word	0x0800d22a
 800b578:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1ed      	bne.n	800b55a <__gethex+0x2de>
 800b57e:	e7da      	b.n	800b536 <__gethex+0x2ba>
 800b580:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1d7      	bne.n	800b536 <__gethex+0x2ba>
 800b586:	e7e8      	b.n	800b55a <__gethex+0x2de>
 800b588:	1e6f      	subs	r7, r5, #1
 800b58a:	f1ba 0f00 	cmp.w	sl, #0
 800b58e:	d132      	bne.n	800b5f6 <__gethex+0x37a>
 800b590:	b127      	cbz	r7, 800b59c <__gethex+0x320>
 800b592:	4639      	mov	r1, r7
 800b594:	4620      	mov	r0, r4
 800b596:	f000 fe50 	bl	800c23a <__any_on>
 800b59a:	4682      	mov	sl, r0
 800b59c:	2101      	movs	r1, #1
 800b59e:	117b      	asrs	r3, r7, #5
 800b5a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b5a4:	f007 071f 	and.w	r7, r7, #31
 800b5a8:	fa01 f707 	lsl.w	r7, r1, r7
 800b5ac:	421f      	tst	r7, r3
 800b5ae:	f04f 0702 	mov.w	r7, #2
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	bf18      	it	ne
 800b5b8:	f04a 0a02 	orrne.w	sl, sl, #2
 800b5bc:	1b76      	subs	r6, r6, r5
 800b5be:	f7ff fdf5 	bl	800b1ac <rshift>
 800b5c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b5c6:	f1ba 0f00 	cmp.w	sl, #0
 800b5ca:	d048      	beq.n	800b65e <__gethex+0x3e2>
 800b5cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d015      	beq.n	800b600 <__gethex+0x384>
 800b5d4:	2b03      	cmp	r3, #3
 800b5d6:	d017      	beq.n	800b608 <__gethex+0x38c>
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d109      	bne.n	800b5f0 <__gethex+0x374>
 800b5dc:	f01a 0f02 	tst.w	sl, #2
 800b5e0:	d006      	beq.n	800b5f0 <__gethex+0x374>
 800b5e2:	f8d9 0000 	ldr.w	r0, [r9]
 800b5e6:	ea4a 0a00 	orr.w	sl, sl, r0
 800b5ea:	f01a 0f01 	tst.w	sl, #1
 800b5ee:	d10e      	bne.n	800b60e <__gethex+0x392>
 800b5f0:	f047 0710 	orr.w	r7, r7, #16
 800b5f4:	e033      	b.n	800b65e <__gethex+0x3e2>
 800b5f6:	f04f 0a01 	mov.w	sl, #1
 800b5fa:	e7cf      	b.n	800b59c <__gethex+0x320>
 800b5fc:	2701      	movs	r7, #1
 800b5fe:	e7e2      	b.n	800b5c6 <__gethex+0x34a>
 800b600:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b602:	f1c3 0301 	rsb	r3, r3, #1
 800b606:	9315      	str	r3, [sp, #84]	; 0x54
 800b608:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d0f0      	beq.n	800b5f0 <__gethex+0x374>
 800b60e:	f04f 0c00 	mov.w	ip, #0
 800b612:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b616:	f104 0314 	add.w	r3, r4, #20
 800b61a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b61e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b622:	4618      	mov	r0, r3
 800b624:	f853 2b04 	ldr.w	r2, [r3], #4
 800b628:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b62c:	d01c      	beq.n	800b668 <__gethex+0x3ec>
 800b62e:	3201      	adds	r2, #1
 800b630:	6002      	str	r2, [r0, #0]
 800b632:	2f02      	cmp	r7, #2
 800b634:	f104 0314 	add.w	r3, r4, #20
 800b638:	d13d      	bne.n	800b6b6 <__gethex+0x43a>
 800b63a:	f8d8 2000 	ldr.w	r2, [r8]
 800b63e:	3a01      	subs	r2, #1
 800b640:	42b2      	cmp	r2, r6
 800b642:	d10a      	bne.n	800b65a <__gethex+0x3de>
 800b644:	2201      	movs	r2, #1
 800b646:	1171      	asrs	r1, r6, #5
 800b648:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b64c:	f006 061f 	and.w	r6, r6, #31
 800b650:	fa02 f606 	lsl.w	r6, r2, r6
 800b654:	421e      	tst	r6, r3
 800b656:	bf18      	it	ne
 800b658:	4617      	movne	r7, r2
 800b65a:	f047 0720 	orr.w	r7, r7, #32
 800b65e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b660:	601c      	str	r4, [r3, #0]
 800b662:	9b06      	ldr	r3, [sp, #24]
 800b664:	601d      	str	r5, [r3, #0]
 800b666:	e69b      	b.n	800b3a0 <__gethex+0x124>
 800b668:	4299      	cmp	r1, r3
 800b66a:	f843 cc04 	str.w	ip, [r3, #-4]
 800b66e:	d8d8      	bhi.n	800b622 <__gethex+0x3a6>
 800b670:	68a3      	ldr	r3, [r4, #8]
 800b672:	459b      	cmp	fp, r3
 800b674:	db17      	blt.n	800b6a6 <__gethex+0x42a>
 800b676:	6861      	ldr	r1, [r4, #4]
 800b678:	9802      	ldr	r0, [sp, #8]
 800b67a:	3101      	adds	r1, #1
 800b67c:	f000 f946 	bl	800b90c <_Balloc>
 800b680:	4681      	mov	r9, r0
 800b682:	b918      	cbnz	r0, 800b68c <__gethex+0x410>
 800b684:	4602      	mov	r2, r0
 800b686:	2184      	movs	r1, #132	; 0x84
 800b688:	4b19      	ldr	r3, [pc, #100]	; (800b6f0 <__gethex+0x474>)
 800b68a:	e6ac      	b.n	800b3e6 <__gethex+0x16a>
 800b68c:	6922      	ldr	r2, [r4, #16]
 800b68e:	f104 010c 	add.w	r1, r4, #12
 800b692:	3202      	adds	r2, #2
 800b694:	0092      	lsls	r2, r2, #2
 800b696:	300c      	adds	r0, #12
 800b698:	f7fc fef7 	bl	800848a <memcpy>
 800b69c:	4621      	mov	r1, r4
 800b69e:	9802      	ldr	r0, [sp, #8]
 800b6a0:	f000 f974 	bl	800b98c <_Bfree>
 800b6a4:	464c      	mov	r4, r9
 800b6a6:	6923      	ldr	r3, [r4, #16]
 800b6a8:	1c5a      	adds	r2, r3, #1
 800b6aa:	6122      	str	r2, [r4, #16]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6b2:	615a      	str	r2, [r3, #20]
 800b6b4:	e7bd      	b.n	800b632 <__gethex+0x3b6>
 800b6b6:	6922      	ldr	r2, [r4, #16]
 800b6b8:	455a      	cmp	r2, fp
 800b6ba:	dd0b      	ble.n	800b6d4 <__gethex+0x458>
 800b6bc:	2101      	movs	r1, #1
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f7ff fd74 	bl	800b1ac <rshift>
 800b6c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6c8:	3501      	adds	r5, #1
 800b6ca:	42ab      	cmp	r3, r5
 800b6cc:	f6ff aed5 	blt.w	800b47a <__gethex+0x1fe>
 800b6d0:	2701      	movs	r7, #1
 800b6d2:	e7c2      	b.n	800b65a <__gethex+0x3de>
 800b6d4:	f016 061f 	ands.w	r6, r6, #31
 800b6d8:	d0fa      	beq.n	800b6d0 <__gethex+0x454>
 800b6da:	449a      	add	sl, r3
 800b6dc:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b6e0:	f000 fa0a 	bl	800baf8 <__hi0bits>
 800b6e4:	f1c6 0620 	rsb	r6, r6, #32
 800b6e8:	42b0      	cmp	r0, r6
 800b6ea:	dbe7      	blt.n	800b6bc <__gethex+0x440>
 800b6ec:	e7f0      	b.n	800b6d0 <__gethex+0x454>
 800b6ee:	bf00      	nop
 800b6f0:	0800d219 	.word	0x0800d219

0800b6f4 <L_shift>:
 800b6f4:	f1c2 0208 	rsb	r2, r2, #8
 800b6f8:	0092      	lsls	r2, r2, #2
 800b6fa:	b570      	push	{r4, r5, r6, lr}
 800b6fc:	f1c2 0620 	rsb	r6, r2, #32
 800b700:	6843      	ldr	r3, [r0, #4]
 800b702:	6804      	ldr	r4, [r0, #0]
 800b704:	fa03 f506 	lsl.w	r5, r3, r6
 800b708:	432c      	orrs	r4, r5
 800b70a:	40d3      	lsrs	r3, r2
 800b70c:	6004      	str	r4, [r0, #0]
 800b70e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b712:	4288      	cmp	r0, r1
 800b714:	d3f4      	bcc.n	800b700 <L_shift+0xc>
 800b716:	bd70      	pop	{r4, r5, r6, pc}

0800b718 <__match>:
 800b718:	b530      	push	{r4, r5, lr}
 800b71a:	6803      	ldr	r3, [r0, #0]
 800b71c:	3301      	adds	r3, #1
 800b71e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b722:	b914      	cbnz	r4, 800b72a <__match+0x12>
 800b724:	6003      	str	r3, [r0, #0]
 800b726:	2001      	movs	r0, #1
 800b728:	bd30      	pop	{r4, r5, pc}
 800b72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b72e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b732:	2d19      	cmp	r5, #25
 800b734:	bf98      	it	ls
 800b736:	3220      	addls	r2, #32
 800b738:	42a2      	cmp	r2, r4
 800b73a:	d0f0      	beq.n	800b71e <__match+0x6>
 800b73c:	2000      	movs	r0, #0
 800b73e:	e7f3      	b.n	800b728 <__match+0x10>

0800b740 <__hexnan>:
 800b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	2500      	movs	r5, #0
 800b746:	680b      	ldr	r3, [r1, #0]
 800b748:	4682      	mov	sl, r0
 800b74a:	115e      	asrs	r6, r3, #5
 800b74c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b750:	f013 031f 	ands.w	r3, r3, #31
 800b754:	bf18      	it	ne
 800b756:	3604      	addne	r6, #4
 800b758:	1f37      	subs	r7, r6, #4
 800b75a:	4690      	mov	r8, r2
 800b75c:	46b9      	mov	r9, r7
 800b75e:	463c      	mov	r4, r7
 800b760:	46ab      	mov	fp, r5
 800b762:	b087      	sub	sp, #28
 800b764:	6801      	ldr	r1, [r0, #0]
 800b766:	9301      	str	r3, [sp, #4]
 800b768:	f846 5c04 	str.w	r5, [r6, #-4]
 800b76c:	9502      	str	r5, [sp, #8]
 800b76e:	784a      	ldrb	r2, [r1, #1]
 800b770:	1c4b      	adds	r3, r1, #1
 800b772:	9303      	str	r3, [sp, #12]
 800b774:	b342      	cbz	r2, 800b7c8 <__hexnan+0x88>
 800b776:	4610      	mov	r0, r2
 800b778:	9105      	str	r1, [sp, #20]
 800b77a:	9204      	str	r2, [sp, #16]
 800b77c:	f7ff fd69 	bl	800b252 <__hexdig_fun>
 800b780:	2800      	cmp	r0, #0
 800b782:	d14f      	bne.n	800b824 <__hexnan+0xe4>
 800b784:	9a04      	ldr	r2, [sp, #16]
 800b786:	9905      	ldr	r1, [sp, #20]
 800b788:	2a20      	cmp	r2, #32
 800b78a:	d818      	bhi.n	800b7be <__hexnan+0x7e>
 800b78c:	9b02      	ldr	r3, [sp, #8]
 800b78e:	459b      	cmp	fp, r3
 800b790:	dd13      	ble.n	800b7ba <__hexnan+0x7a>
 800b792:	454c      	cmp	r4, r9
 800b794:	d206      	bcs.n	800b7a4 <__hexnan+0x64>
 800b796:	2d07      	cmp	r5, #7
 800b798:	dc04      	bgt.n	800b7a4 <__hexnan+0x64>
 800b79a:	462a      	mov	r2, r5
 800b79c:	4649      	mov	r1, r9
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f7ff ffa8 	bl	800b6f4 <L_shift>
 800b7a4:	4544      	cmp	r4, r8
 800b7a6:	d950      	bls.n	800b84a <__hexnan+0x10a>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	f1a4 0904 	sub.w	r9, r4, #4
 800b7ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7b2:	461d      	mov	r5, r3
 800b7b4:	464c      	mov	r4, r9
 800b7b6:	f8cd b008 	str.w	fp, [sp, #8]
 800b7ba:	9903      	ldr	r1, [sp, #12]
 800b7bc:	e7d7      	b.n	800b76e <__hexnan+0x2e>
 800b7be:	2a29      	cmp	r2, #41	; 0x29
 800b7c0:	d156      	bne.n	800b870 <__hexnan+0x130>
 800b7c2:	3102      	adds	r1, #2
 800b7c4:	f8ca 1000 	str.w	r1, [sl]
 800b7c8:	f1bb 0f00 	cmp.w	fp, #0
 800b7cc:	d050      	beq.n	800b870 <__hexnan+0x130>
 800b7ce:	454c      	cmp	r4, r9
 800b7d0:	d206      	bcs.n	800b7e0 <__hexnan+0xa0>
 800b7d2:	2d07      	cmp	r5, #7
 800b7d4:	dc04      	bgt.n	800b7e0 <__hexnan+0xa0>
 800b7d6:	462a      	mov	r2, r5
 800b7d8:	4649      	mov	r1, r9
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f7ff ff8a 	bl	800b6f4 <L_shift>
 800b7e0:	4544      	cmp	r4, r8
 800b7e2:	d934      	bls.n	800b84e <__hexnan+0x10e>
 800b7e4:	4623      	mov	r3, r4
 800b7e6:	f1a8 0204 	sub.w	r2, r8, #4
 800b7ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7ee:	429f      	cmp	r7, r3
 800b7f0:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7f4:	d2f9      	bcs.n	800b7ea <__hexnan+0xaa>
 800b7f6:	1b3b      	subs	r3, r7, r4
 800b7f8:	f023 0303 	bic.w	r3, r3, #3
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	3401      	adds	r4, #1
 800b800:	3e03      	subs	r6, #3
 800b802:	42b4      	cmp	r4, r6
 800b804:	bf88      	it	hi
 800b806:	2304      	movhi	r3, #4
 800b808:	2200      	movs	r2, #0
 800b80a:	4443      	add	r3, r8
 800b80c:	f843 2b04 	str.w	r2, [r3], #4
 800b810:	429f      	cmp	r7, r3
 800b812:	d2fb      	bcs.n	800b80c <__hexnan+0xcc>
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	b91b      	cbnz	r3, 800b820 <__hexnan+0xe0>
 800b818:	4547      	cmp	r7, r8
 800b81a:	d127      	bne.n	800b86c <__hexnan+0x12c>
 800b81c:	2301      	movs	r3, #1
 800b81e:	603b      	str	r3, [r7, #0]
 800b820:	2005      	movs	r0, #5
 800b822:	e026      	b.n	800b872 <__hexnan+0x132>
 800b824:	3501      	adds	r5, #1
 800b826:	2d08      	cmp	r5, #8
 800b828:	f10b 0b01 	add.w	fp, fp, #1
 800b82c:	dd06      	ble.n	800b83c <__hexnan+0xfc>
 800b82e:	4544      	cmp	r4, r8
 800b830:	d9c3      	bls.n	800b7ba <__hexnan+0x7a>
 800b832:	2300      	movs	r3, #0
 800b834:	2501      	movs	r5, #1
 800b836:	f844 3c04 	str.w	r3, [r4, #-4]
 800b83a:	3c04      	subs	r4, #4
 800b83c:	6822      	ldr	r2, [r4, #0]
 800b83e:	f000 000f 	and.w	r0, r0, #15
 800b842:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b846:	6022      	str	r2, [r4, #0]
 800b848:	e7b7      	b.n	800b7ba <__hexnan+0x7a>
 800b84a:	2508      	movs	r5, #8
 800b84c:	e7b5      	b.n	800b7ba <__hexnan+0x7a>
 800b84e:	9b01      	ldr	r3, [sp, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d0df      	beq.n	800b814 <__hexnan+0xd4>
 800b854:	f04f 32ff 	mov.w	r2, #4294967295
 800b858:	f1c3 0320 	rsb	r3, r3, #32
 800b85c:	fa22 f303 	lsr.w	r3, r2, r3
 800b860:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b864:	401a      	ands	r2, r3
 800b866:	f846 2c04 	str.w	r2, [r6, #-4]
 800b86a:	e7d3      	b.n	800b814 <__hexnan+0xd4>
 800b86c:	3f04      	subs	r7, #4
 800b86e:	e7d1      	b.n	800b814 <__hexnan+0xd4>
 800b870:	2004      	movs	r0, #4
 800b872:	b007      	add	sp, #28
 800b874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b878 <_localeconv_r>:
 800b878:	4800      	ldr	r0, [pc, #0]	; (800b87c <_localeconv_r+0x4>)
 800b87a:	4770      	bx	lr
 800b87c:	2000016c 	.word	0x2000016c

0800b880 <_lseek_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4604      	mov	r4, r0
 800b884:	4608      	mov	r0, r1
 800b886:	4611      	mov	r1, r2
 800b888:	2200      	movs	r2, #0
 800b88a:	4d05      	ldr	r5, [pc, #20]	; (800b8a0 <_lseek_r+0x20>)
 800b88c:	602a      	str	r2, [r5, #0]
 800b88e:	461a      	mov	r2, r3
 800b890:	f7f6 f98c 	bl	8001bac <_lseek>
 800b894:	1c43      	adds	r3, r0, #1
 800b896:	d102      	bne.n	800b89e <_lseek_r+0x1e>
 800b898:	682b      	ldr	r3, [r5, #0]
 800b89a:	b103      	cbz	r3, 800b89e <_lseek_r+0x1e>
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	bd38      	pop	{r3, r4, r5, pc}
 800b8a0:	20003b38 	.word	0x20003b38

0800b8a4 <malloc>:
 800b8a4:	4b02      	ldr	r3, [pc, #8]	; (800b8b0 <malloc+0xc>)
 800b8a6:	4601      	mov	r1, r0
 800b8a8:	6818      	ldr	r0, [r3, #0]
 800b8aa:	f7fc be05 	b.w	80084b8 <_malloc_r>
 800b8ae:	bf00      	nop
 800b8b0:	20000014 	.word	0x20000014

0800b8b4 <__ascii_mbtowc>:
 800b8b4:	b082      	sub	sp, #8
 800b8b6:	b901      	cbnz	r1, 800b8ba <__ascii_mbtowc+0x6>
 800b8b8:	a901      	add	r1, sp, #4
 800b8ba:	b142      	cbz	r2, 800b8ce <__ascii_mbtowc+0x1a>
 800b8bc:	b14b      	cbz	r3, 800b8d2 <__ascii_mbtowc+0x1e>
 800b8be:	7813      	ldrb	r3, [r2, #0]
 800b8c0:	600b      	str	r3, [r1, #0]
 800b8c2:	7812      	ldrb	r2, [r2, #0]
 800b8c4:	1e10      	subs	r0, r2, #0
 800b8c6:	bf18      	it	ne
 800b8c8:	2001      	movne	r0, #1
 800b8ca:	b002      	add	sp, #8
 800b8cc:	4770      	bx	lr
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	e7fb      	b.n	800b8ca <__ascii_mbtowc+0x16>
 800b8d2:	f06f 0001 	mvn.w	r0, #1
 800b8d6:	e7f8      	b.n	800b8ca <__ascii_mbtowc+0x16>

0800b8d8 <memchr>:
 800b8d8:	4603      	mov	r3, r0
 800b8da:	b510      	push	{r4, lr}
 800b8dc:	b2c9      	uxtb	r1, r1
 800b8de:	4402      	add	r2, r0
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	d101      	bne.n	800b8ea <memchr+0x12>
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	e003      	b.n	800b8f2 <memchr+0x1a>
 800b8ea:	7804      	ldrb	r4, [r0, #0]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	428c      	cmp	r4, r1
 800b8f0:	d1f6      	bne.n	800b8e0 <memchr+0x8>
 800b8f2:	bd10      	pop	{r4, pc}

0800b8f4 <__malloc_lock>:
 800b8f4:	4801      	ldr	r0, [pc, #4]	; (800b8fc <__malloc_lock+0x8>)
 800b8f6:	f7fc bdc6 	b.w	8008486 <__retarget_lock_acquire_recursive>
 800b8fa:	bf00      	nop
 800b8fc:	20003b30 	.word	0x20003b30

0800b900 <__malloc_unlock>:
 800b900:	4801      	ldr	r0, [pc, #4]	; (800b908 <__malloc_unlock+0x8>)
 800b902:	f7fc bdc1 	b.w	8008488 <__retarget_lock_release_recursive>
 800b906:	bf00      	nop
 800b908:	20003b30 	.word	0x20003b30

0800b90c <_Balloc>:
 800b90c:	b570      	push	{r4, r5, r6, lr}
 800b90e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b910:	4604      	mov	r4, r0
 800b912:	460d      	mov	r5, r1
 800b914:	b976      	cbnz	r6, 800b934 <_Balloc+0x28>
 800b916:	2010      	movs	r0, #16
 800b918:	f7ff ffc4 	bl	800b8a4 <malloc>
 800b91c:	4602      	mov	r2, r0
 800b91e:	6260      	str	r0, [r4, #36]	; 0x24
 800b920:	b920      	cbnz	r0, 800b92c <_Balloc+0x20>
 800b922:	2166      	movs	r1, #102	; 0x66
 800b924:	4b17      	ldr	r3, [pc, #92]	; (800b984 <_Balloc+0x78>)
 800b926:	4818      	ldr	r0, [pc, #96]	; (800b988 <_Balloc+0x7c>)
 800b928:	f7fe fcc0 	bl	800a2ac <__assert_func>
 800b92c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b930:	6006      	str	r6, [r0, #0]
 800b932:	60c6      	str	r6, [r0, #12]
 800b934:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b936:	68f3      	ldr	r3, [r6, #12]
 800b938:	b183      	cbz	r3, 800b95c <_Balloc+0x50>
 800b93a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b942:	b9b8      	cbnz	r0, 800b974 <_Balloc+0x68>
 800b944:	2101      	movs	r1, #1
 800b946:	fa01 f605 	lsl.w	r6, r1, r5
 800b94a:	1d72      	adds	r2, r6, #5
 800b94c:	4620      	mov	r0, r4
 800b94e:	0092      	lsls	r2, r2, #2
 800b950:	f000 fc94 	bl	800c27c <_calloc_r>
 800b954:	b160      	cbz	r0, 800b970 <_Balloc+0x64>
 800b956:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b95a:	e00e      	b.n	800b97a <_Balloc+0x6e>
 800b95c:	2221      	movs	r2, #33	; 0x21
 800b95e:	2104      	movs	r1, #4
 800b960:	4620      	mov	r0, r4
 800b962:	f000 fc8b 	bl	800c27c <_calloc_r>
 800b966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b968:	60f0      	str	r0, [r6, #12]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1e4      	bne.n	800b93a <_Balloc+0x2e>
 800b970:	2000      	movs	r0, #0
 800b972:	bd70      	pop	{r4, r5, r6, pc}
 800b974:	6802      	ldr	r2, [r0, #0]
 800b976:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b97a:	2300      	movs	r3, #0
 800b97c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b980:	e7f7      	b.n	800b972 <_Balloc+0x66>
 800b982:	bf00      	nop
 800b984:	0800cff8 	.word	0x0800cff8
 800b988:	0800d2a8 	.word	0x0800d2a8

0800b98c <_Bfree>:
 800b98c:	b570      	push	{r4, r5, r6, lr}
 800b98e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b990:	4605      	mov	r5, r0
 800b992:	460c      	mov	r4, r1
 800b994:	b976      	cbnz	r6, 800b9b4 <_Bfree+0x28>
 800b996:	2010      	movs	r0, #16
 800b998:	f7ff ff84 	bl	800b8a4 <malloc>
 800b99c:	4602      	mov	r2, r0
 800b99e:	6268      	str	r0, [r5, #36]	; 0x24
 800b9a0:	b920      	cbnz	r0, 800b9ac <_Bfree+0x20>
 800b9a2:	218a      	movs	r1, #138	; 0x8a
 800b9a4:	4b08      	ldr	r3, [pc, #32]	; (800b9c8 <_Bfree+0x3c>)
 800b9a6:	4809      	ldr	r0, [pc, #36]	; (800b9cc <_Bfree+0x40>)
 800b9a8:	f7fe fc80 	bl	800a2ac <__assert_func>
 800b9ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9b0:	6006      	str	r6, [r0, #0]
 800b9b2:	60c6      	str	r6, [r0, #12]
 800b9b4:	b13c      	cbz	r4, 800b9c6 <_Bfree+0x3a>
 800b9b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b9b8:	6862      	ldr	r2, [r4, #4]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9c0:	6021      	str	r1, [r4, #0]
 800b9c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9c6:	bd70      	pop	{r4, r5, r6, pc}
 800b9c8:	0800cff8 	.word	0x0800cff8
 800b9cc:	0800d2a8 	.word	0x0800d2a8

0800b9d0 <__multadd>:
 800b9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d4:	4698      	mov	r8, r3
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	2300      	movs	r3, #0
 800b9da:	690e      	ldr	r6, [r1, #16]
 800b9dc:	4607      	mov	r7, r0
 800b9de:	f101 0014 	add.w	r0, r1, #20
 800b9e2:	6805      	ldr	r5, [r0, #0]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	b2a9      	uxth	r1, r5
 800b9e8:	fb02 8101 	mla	r1, r2, r1, r8
 800b9ec:	0c2d      	lsrs	r5, r5, #16
 800b9ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b9f2:	fb02 c505 	mla	r5, r2, r5, ip
 800b9f6:	b289      	uxth	r1, r1
 800b9f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b9fc:	429e      	cmp	r6, r3
 800b9fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ba02:	f840 1b04 	str.w	r1, [r0], #4
 800ba06:	dcec      	bgt.n	800b9e2 <__multadd+0x12>
 800ba08:	f1b8 0f00 	cmp.w	r8, #0
 800ba0c:	d022      	beq.n	800ba54 <__multadd+0x84>
 800ba0e:	68a3      	ldr	r3, [r4, #8]
 800ba10:	42b3      	cmp	r3, r6
 800ba12:	dc19      	bgt.n	800ba48 <__multadd+0x78>
 800ba14:	6861      	ldr	r1, [r4, #4]
 800ba16:	4638      	mov	r0, r7
 800ba18:	3101      	adds	r1, #1
 800ba1a:	f7ff ff77 	bl	800b90c <_Balloc>
 800ba1e:	4605      	mov	r5, r0
 800ba20:	b928      	cbnz	r0, 800ba2e <__multadd+0x5e>
 800ba22:	4602      	mov	r2, r0
 800ba24:	21b5      	movs	r1, #181	; 0xb5
 800ba26:	4b0d      	ldr	r3, [pc, #52]	; (800ba5c <__multadd+0x8c>)
 800ba28:	480d      	ldr	r0, [pc, #52]	; (800ba60 <__multadd+0x90>)
 800ba2a:	f7fe fc3f 	bl	800a2ac <__assert_func>
 800ba2e:	6922      	ldr	r2, [r4, #16]
 800ba30:	f104 010c 	add.w	r1, r4, #12
 800ba34:	3202      	adds	r2, #2
 800ba36:	0092      	lsls	r2, r2, #2
 800ba38:	300c      	adds	r0, #12
 800ba3a:	f7fc fd26 	bl	800848a <memcpy>
 800ba3e:	4621      	mov	r1, r4
 800ba40:	4638      	mov	r0, r7
 800ba42:	f7ff ffa3 	bl	800b98c <_Bfree>
 800ba46:	462c      	mov	r4, r5
 800ba48:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ba4c:	3601      	adds	r6, #1
 800ba4e:	f8c3 8014 	str.w	r8, [r3, #20]
 800ba52:	6126      	str	r6, [r4, #16]
 800ba54:	4620      	mov	r0, r4
 800ba56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba5a:	bf00      	nop
 800ba5c:	0800d219 	.word	0x0800d219
 800ba60:	0800d2a8 	.word	0x0800d2a8

0800ba64 <__s2b>:
 800ba64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba68:	4615      	mov	r5, r2
 800ba6a:	2209      	movs	r2, #9
 800ba6c:	461f      	mov	r7, r3
 800ba6e:	3308      	adds	r3, #8
 800ba70:	460c      	mov	r4, r1
 800ba72:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba76:	4606      	mov	r6, r0
 800ba78:	2201      	movs	r2, #1
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	db09      	blt.n	800ba94 <__s2b+0x30>
 800ba80:	4630      	mov	r0, r6
 800ba82:	f7ff ff43 	bl	800b90c <_Balloc>
 800ba86:	b940      	cbnz	r0, 800ba9a <__s2b+0x36>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	21ce      	movs	r1, #206	; 0xce
 800ba8c:	4b18      	ldr	r3, [pc, #96]	; (800baf0 <__s2b+0x8c>)
 800ba8e:	4819      	ldr	r0, [pc, #100]	; (800baf4 <__s2b+0x90>)
 800ba90:	f7fe fc0c 	bl	800a2ac <__assert_func>
 800ba94:	0052      	lsls	r2, r2, #1
 800ba96:	3101      	adds	r1, #1
 800ba98:	e7f0      	b.n	800ba7c <__s2b+0x18>
 800ba9a:	9b08      	ldr	r3, [sp, #32]
 800ba9c:	2d09      	cmp	r5, #9
 800ba9e:	6143      	str	r3, [r0, #20]
 800baa0:	f04f 0301 	mov.w	r3, #1
 800baa4:	6103      	str	r3, [r0, #16]
 800baa6:	dd16      	ble.n	800bad6 <__s2b+0x72>
 800baa8:	f104 0909 	add.w	r9, r4, #9
 800baac:	46c8      	mov	r8, r9
 800baae:	442c      	add	r4, r5
 800bab0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bab4:	4601      	mov	r1, r0
 800bab6:	220a      	movs	r2, #10
 800bab8:	4630      	mov	r0, r6
 800baba:	3b30      	subs	r3, #48	; 0x30
 800babc:	f7ff ff88 	bl	800b9d0 <__multadd>
 800bac0:	45a0      	cmp	r8, r4
 800bac2:	d1f5      	bne.n	800bab0 <__s2b+0x4c>
 800bac4:	f1a5 0408 	sub.w	r4, r5, #8
 800bac8:	444c      	add	r4, r9
 800baca:	1b2d      	subs	r5, r5, r4
 800bacc:	1963      	adds	r3, r4, r5
 800bace:	42bb      	cmp	r3, r7
 800bad0:	db04      	blt.n	800badc <__s2b+0x78>
 800bad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bad6:	2509      	movs	r5, #9
 800bad8:	340a      	adds	r4, #10
 800bada:	e7f6      	b.n	800baca <__s2b+0x66>
 800badc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bae0:	4601      	mov	r1, r0
 800bae2:	220a      	movs	r2, #10
 800bae4:	4630      	mov	r0, r6
 800bae6:	3b30      	subs	r3, #48	; 0x30
 800bae8:	f7ff ff72 	bl	800b9d0 <__multadd>
 800baec:	e7ee      	b.n	800bacc <__s2b+0x68>
 800baee:	bf00      	nop
 800baf0:	0800d219 	.word	0x0800d219
 800baf4:	0800d2a8 	.word	0x0800d2a8

0800baf8 <__hi0bits>:
 800baf8:	0c02      	lsrs	r2, r0, #16
 800bafa:	0412      	lsls	r2, r2, #16
 800bafc:	4603      	mov	r3, r0
 800bafe:	b9ca      	cbnz	r2, 800bb34 <__hi0bits+0x3c>
 800bb00:	0403      	lsls	r3, r0, #16
 800bb02:	2010      	movs	r0, #16
 800bb04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bb08:	bf04      	itt	eq
 800bb0a:	021b      	lsleq	r3, r3, #8
 800bb0c:	3008      	addeq	r0, #8
 800bb0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bb12:	bf04      	itt	eq
 800bb14:	011b      	lsleq	r3, r3, #4
 800bb16:	3004      	addeq	r0, #4
 800bb18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bb1c:	bf04      	itt	eq
 800bb1e:	009b      	lsleq	r3, r3, #2
 800bb20:	3002      	addeq	r0, #2
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	db05      	blt.n	800bb32 <__hi0bits+0x3a>
 800bb26:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bb2a:	f100 0001 	add.w	r0, r0, #1
 800bb2e:	bf08      	it	eq
 800bb30:	2020      	moveq	r0, #32
 800bb32:	4770      	bx	lr
 800bb34:	2000      	movs	r0, #0
 800bb36:	e7e5      	b.n	800bb04 <__hi0bits+0xc>

0800bb38 <__lo0bits>:
 800bb38:	6803      	ldr	r3, [r0, #0]
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	f013 0007 	ands.w	r0, r3, #7
 800bb40:	d00b      	beq.n	800bb5a <__lo0bits+0x22>
 800bb42:	07d9      	lsls	r1, r3, #31
 800bb44:	d422      	bmi.n	800bb8c <__lo0bits+0x54>
 800bb46:	0798      	lsls	r0, r3, #30
 800bb48:	bf49      	itett	mi
 800bb4a:	085b      	lsrmi	r3, r3, #1
 800bb4c:	089b      	lsrpl	r3, r3, #2
 800bb4e:	2001      	movmi	r0, #1
 800bb50:	6013      	strmi	r3, [r2, #0]
 800bb52:	bf5c      	itt	pl
 800bb54:	2002      	movpl	r0, #2
 800bb56:	6013      	strpl	r3, [r2, #0]
 800bb58:	4770      	bx	lr
 800bb5a:	b299      	uxth	r1, r3
 800bb5c:	b909      	cbnz	r1, 800bb62 <__lo0bits+0x2a>
 800bb5e:	2010      	movs	r0, #16
 800bb60:	0c1b      	lsrs	r3, r3, #16
 800bb62:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bb66:	bf04      	itt	eq
 800bb68:	0a1b      	lsreq	r3, r3, #8
 800bb6a:	3008      	addeq	r0, #8
 800bb6c:	0719      	lsls	r1, r3, #28
 800bb6e:	bf04      	itt	eq
 800bb70:	091b      	lsreq	r3, r3, #4
 800bb72:	3004      	addeq	r0, #4
 800bb74:	0799      	lsls	r1, r3, #30
 800bb76:	bf04      	itt	eq
 800bb78:	089b      	lsreq	r3, r3, #2
 800bb7a:	3002      	addeq	r0, #2
 800bb7c:	07d9      	lsls	r1, r3, #31
 800bb7e:	d403      	bmi.n	800bb88 <__lo0bits+0x50>
 800bb80:	085b      	lsrs	r3, r3, #1
 800bb82:	f100 0001 	add.w	r0, r0, #1
 800bb86:	d003      	beq.n	800bb90 <__lo0bits+0x58>
 800bb88:	6013      	str	r3, [r2, #0]
 800bb8a:	4770      	bx	lr
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	4770      	bx	lr
 800bb90:	2020      	movs	r0, #32
 800bb92:	4770      	bx	lr

0800bb94 <__i2b>:
 800bb94:	b510      	push	{r4, lr}
 800bb96:	460c      	mov	r4, r1
 800bb98:	2101      	movs	r1, #1
 800bb9a:	f7ff feb7 	bl	800b90c <_Balloc>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	b928      	cbnz	r0, 800bbae <__i2b+0x1a>
 800bba2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bba6:	4b04      	ldr	r3, [pc, #16]	; (800bbb8 <__i2b+0x24>)
 800bba8:	4804      	ldr	r0, [pc, #16]	; (800bbbc <__i2b+0x28>)
 800bbaa:	f7fe fb7f 	bl	800a2ac <__assert_func>
 800bbae:	2301      	movs	r3, #1
 800bbb0:	6144      	str	r4, [r0, #20]
 800bbb2:	6103      	str	r3, [r0, #16]
 800bbb4:	bd10      	pop	{r4, pc}
 800bbb6:	bf00      	nop
 800bbb8:	0800d219 	.word	0x0800d219
 800bbbc:	0800d2a8 	.word	0x0800d2a8

0800bbc0 <__multiply>:
 800bbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc4:	4614      	mov	r4, r2
 800bbc6:	690a      	ldr	r2, [r1, #16]
 800bbc8:	6923      	ldr	r3, [r4, #16]
 800bbca:	460d      	mov	r5, r1
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	bfbe      	ittt	lt
 800bbd0:	460b      	movlt	r3, r1
 800bbd2:	4625      	movlt	r5, r4
 800bbd4:	461c      	movlt	r4, r3
 800bbd6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bbda:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bbde:	68ab      	ldr	r3, [r5, #8]
 800bbe0:	6869      	ldr	r1, [r5, #4]
 800bbe2:	eb0a 0709 	add.w	r7, sl, r9
 800bbe6:	42bb      	cmp	r3, r7
 800bbe8:	b085      	sub	sp, #20
 800bbea:	bfb8      	it	lt
 800bbec:	3101      	addlt	r1, #1
 800bbee:	f7ff fe8d 	bl	800b90c <_Balloc>
 800bbf2:	b930      	cbnz	r0, 800bc02 <__multiply+0x42>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	f240 115d 	movw	r1, #349	; 0x15d
 800bbfa:	4b41      	ldr	r3, [pc, #260]	; (800bd00 <__multiply+0x140>)
 800bbfc:	4841      	ldr	r0, [pc, #260]	; (800bd04 <__multiply+0x144>)
 800bbfe:	f7fe fb55 	bl	800a2ac <__assert_func>
 800bc02:	f100 0614 	add.w	r6, r0, #20
 800bc06:	4633      	mov	r3, r6
 800bc08:	2200      	movs	r2, #0
 800bc0a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bc0e:	4543      	cmp	r3, r8
 800bc10:	d31e      	bcc.n	800bc50 <__multiply+0x90>
 800bc12:	f105 0c14 	add.w	ip, r5, #20
 800bc16:	f104 0314 	add.w	r3, r4, #20
 800bc1a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bc1e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bc22:	9202      	str	r2, [sp, #8]
 800bc24:	ebac 0205 	sub.w	r2, ip, r5
 800bc28:	3a15      	subs	r2, #21
 800bc2a:	f022 0203 	bic.w	r2, r2, #3
 800bc2e:	3204      	adds	r2, #4
 800bc30:	f105 0115 	add.w	r1, r5, #21
 800bc34:	458c      	cmp	ip, r1
 800bc36:	bf38      	it	cc
 800bc38:	2204      	movcc	r2, #4
 800bc3a:	9201      	str	r2, [sp, #4]
 800bc3c:	9a02      	ldr	r2, [sp, #8]
 800bc3e:	9303      	str	r3, [sp, #12]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d808      	bhi.n	800bc56 <__multiply+0x96>
 800bc44:	2f00      	cmp	r7, #0
 800bc46:	dc55      	bgt.n	800bcf4 <__multiply+0x134>
 800bc48:	6107      	str	r7, [r0, #16]
 800bc4a:	b005      	add	sp, #20
 800bc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc50:	f843 2b04 	str.w	r2, [r3], #4
 800bc54:	e7db      	b.n	800bc0e <__multiply+0x4e>
 800bc56:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc5a:	f1ba 0f00 	cmp.w	sl, #0
 800bc5e:	d020      	beq.n	800bca2 <__multiply+0xe2>
 800bc60:	46b1      	mov	r9, r6
 800bc62:	2200      	movs	r2, #0
 800bc64:	f105 0e14 	add.w	lr, r5, #20
 800bc68:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bc6c:	f8d9 b000 	ldr.w	fp, [r9]
 800bc70:	b2a1      	uxth	r1, r4
 800bc72:	fa1f fb8b 	uxth.w	fp, fp
 800bc76:	fb0a b101 	mla	r1, sl, r1, fp
 800bc7a:	4411      	add	r1, r2
 800bc7c:	f8d9 2000 	ldr.w	r2, [r9]
 800bc80:	0c24      	lsrs	r4, r4, #16
 800bc82:	0c12      	lsrs	r2, r2, #16
 800bc84:	fb0a 2404 	mla	r4, sl, r4, r2
 800bc88:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bc8c:	b289      	uxth	r1, r1
 800bc8e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bc92:	45f4      	cmp	ip, lr
 800bc94:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bc98:	f849 1b04 	str.w	r1, [r9], #4
 800bc9c:	d8e4      	bhi.n	800bc68 <__multiply+0xa8>
 800bc9e:	9901      	ldr	r1, [sp, #4]
 800bca0:	5072      	str	r2, [r6, r1]
 800bca2:	9a03      	ldr	r2, [sp, #12]
 800bca4:	3304      	adds	r3, #4
 800bca6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bcaa:	f1b9 0f00 	cmp.w	r9, #0
 800bcae:	d01f      	beq.n	800bcf0 <__multiply+0x130>
 800bcb0:	46b6      	mov	lr, r6
 800bcb2:	f04f 0a00 	mov.w	sl, #0
 800bcb6:	6834      	ldr	r4, [r6, #0]
 800bcb8:	f105 0114 	add.w	r1, r5, #20
 800bcbc:	880a      	ldrh	r2, [r1, #0]
 800bcbe:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bcc2:	b2a4      	uxth	r4, r4
 800bcc4:	fb09 b202 	mla	r2, r9, r2, fp
 800bcc8:	4492      	add	sl, r2
 800bcca:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bcce:	f84e 4b04 	str.w	r4, [lr], #4
 800bcd2:	f851 4b04 	ldr.w	r4, [r1], #4
 800bcd6:	f8be 2000 	ldrh.w	r2, [lr]
 800bcda:	0c24      	lsrs	r4, r4, #16
 800bcdc:	fb09 2404 	mla	r4, r9, r4, r2
 800bce0:	458c      	cmp	ip, r1
 800bce2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bce6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bcea:	d8e7      	bhi.n	800bcbc <__multiply+0xfc>
 800bcec:	9a01      	ldr	r2, [sp, #4]
 800bcee:	50b4      	str	r4, [r6, r2]
 800bcf0:	3604      	adds	r6, #4
 800bcf2:	e7a3      	b.n	800bc3c <__multiply+0x7c>
 800bcf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1a5      	bne.n	800bc48 <__multiply+0x88>
 800bcfc:	3f01      	subs	r7, #1
 800bcfe:	e7a1      	b.n	800bc44 <__multiply+0x84>
 800bd00:	0800d219 	.word	0x0800d219
 800bd04:	0800d2a8 	.word	0x0800d2a8

0800bd08 <__pow5mult>:
 800bd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd0c:	4615      	mov	r5, r2
 800bd0e:	f012 0203 	ands.w	r2, r2, #3
 800bd12:	4606      	mov	r6, r0
 800bd14:	460f      	mov	r7, r1
 800bd16:	d007      	beq.n	800bd28 <__pow5mult+0x20>
 800bd18:	4c25      	ldr	r4, [pc, #148]	; (800bdb0 <__pow5mult+0xa8>)
 800bd1a:	3a01      	subs	r2, #1
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd22:	f7ff fe55 	bl	800b9d0 <__multadd>
 800bd26:	4607      	mov	r7, r0
 800bd28:	10ad      	asrs	r5, r5, #2
 800bd2a:	d03d      	beq.n	800bda8 <__pow5mult+0xa0>
 800bd2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd2e:	b97c      	cbnz	r4, 800bd50 <__pow5mult+0x48>
 800bd30:	2010      	movs	r0, #16
 800bd32:	f7ff fdb7 	bl	800b8a4 <malloc>
 800bd36:	4602      	mov	r2, r0
 800bd38:	6270      	str	r0, [r6, #36]	; 0x24
 800bd3a:	b928      	cbnz	r0, 800bd48 <__pow5mult+0x40>
 800bd3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd40:	4b1c      	ldr	r3, [pc, #112]	; (800bdb4 <__pow5mult+0xac>)
 800bd42:	481d      	ldr	r0, [pc, #116]	; (800bdb8 <__pow5mult+0xb0>)
 800bd44:	f7fe fab2 	bl	800a2ac <__assert_func>
 800bd48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd4c:	6004      	str	r4, [r0, #0]
 800bd4e:	60c4      	str	r4, [r0, #12]
 800bd50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd58:	b94c      	cbnz	r4, 800bd6e <__pow5mult+0x66>
 800bd5a:	f240 2171 	movw	r1, #625	; 0x271
 800bd5e:	4630      	mov	r0, r6
 800bd60:	f7ff ff18 	bl	800bb94 <__i2b>
 800bd64:	2300      	movs	r3, #0
 800bd66:	4604      	mov	r4, r0
 800bd68:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd6c:	6003      	str	r3, [r0, #0]
 800bd6e:	f04f 0900 	mov.w	r9, #0
 800bd72:	07eb      	lsls	r3, r5, #31
 800bd74:	d50a      	bpl.n	800bd8c <__pow5mult+0x84>
 800bd76:	4639      	mov	r1, r7
 800bd78:	4622      	mov	r2, r4
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f7ff ff20 	bl	800bbc0 <__multiply>
 800bd80:	4680      	mov	r8, r0
 800bd82:	4639      	mov	r1, r7
 800bd84:	4630      	mov	r0, r6
 800bd86:	f7ff fe01 	bl	800b98c <_Bfree>
 800bd8a:	4647      	mov	r7, r8
 800bd8c:	106d      	asrs	r5, r5, #1
 800bd8e:	d00b      	beq.n	800bda8 <__pow5mult+0xa0>
 800bd90:	6820      	ldr	r0, [r4, #0]
 800bd92:	b938      	cbnz	r0, 800bda4 <__pow5mult+0x9c>
 800bd94:	4622      	mov	r2, r4
 800bd96:	4621      	mov	r1, r4
 800bd98:	4630      	mov	r0, r6
 800bd9a:	f7ff ff11 	bl	800bbc0 <__multiply>
 800bd9e:	6020      	str	r0, [r4, #0]
 800bda0:	f8c0 9000 	str.w	r9, [r0]
 800bda4:	4604      	mov	r4, r0
 800bda6:	e7e4      	b.n	800bd72 <__pow5mult+0x6a>
 800bda8:	4638      	mov	r0, r7
 800bdaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdae:	bf00      	nop
 800bdb0:	0800d3f8 	.word	0x0800d3f8
 800bdb4:	0800cff8 	.word	0x0800cff8
 800bdb8:	0800d2a8 	.word	0x0800d2a8

0800bdbc <__lshift>:
 800bdbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc0:	460c      	mov	r4, r1
 800bdc2:	4607      	mov	r7, r0
 800bdc4:	4691      	mov	r9, r2
 800bdc6:	6923      	ldr	r3, [r4, #16]
 800bdc8:	6849      	ldr	r1, [r1, #4]
 800bdca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bdce:	68a3      	ldr	r3, [r4, #8]
 800bdd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bdd4:	f108 0601 	add.w	r6, r8, #1
 800bdd8:	42b3      	cmp	r3, r6
 800bdda:	db0b      	blt.n	800bdf4 <__lshift+0x38>
 800bddc:	4638      	mov	r0, r7
 800bdde:	f7ff fd95 	bl	800b90c <_Balloc>
 800bde2:	4605      	mov	r5, r0
 800bde4:	b948      	cbnz	r0, 800bdfa <__lshift+0x3e>
 800bde6:	4602      	mov	r2, r0
 800bde8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bdec:	4b27      	ldr	r3, [pc, #156]	; (800be8c <__lshift+0xd0>)
 800bdee:	4828      	ldr	r0, [pc, #160]	; (800be90 <__lshift+0xd4>)
 800bdf0:	f7fe fa5c 	bl	800a2ac <__assert_func>
 800bdf4:	3101      	adds	r1, #1
 800bdf6:	005b      	lsls	r3, r3, #1
 800bdf8:	e7ee      	b.n	800bdd8 <__lshift+0x1c>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f100 0114 	add.w	r1, r0, #20
 800be00:	f100 0210 	add.w	r2, r0, #16
 800be04:	4618      	mov	r0, r3
 800be06:	4553      	cmp	r3, sl
 800be08:	db33      	blt.n	800be72 <__lshift+0xb6>
 800be0a:	6920      	ldr	r0, [r4, #16]
 800be0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be10:	f104 0314 	add.w	r3, r4, #20
 800be14:	f019 091f 	ands.w	r9, r9, #31
 800be18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be20:	d02b      	beq.n	800be7a <__lshift+0xbe>
 800be22:	468a      	mov	sl, r1
 800be24:	2200      	movs	r2, #0
 800be26:	f1c9 0e20 	rsb	lr, r9, #32
 800be2a:	6818      	ldr	r0, [r3, #0]
 800be2c:	fa00 f009 	lsl.w	r0, r0, r9
 800be30:	4302      	orrs	r2, r0
 800be32:	f84a 2b04 	str.w	r2, [sl], #4
 800be36:	f853 2b04 	ldr.w	r2, [r3], #4
 800be3a:	459c      	cmp	ip, r3
 800be3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800be40:	d8f3      	bhi.n	800be2a <__lshift+0x6e>
 800be42:	ebac 0304 	sub.w	r3, ip, r4
 800be46:	3b15      	subs	r3, #21
 800be48:	f023 0303 	bic.w	r3, r3, #3
 800be4c:	3304      	adds	r3, #4
 800be4e:	f104 0015 	add.w	r0, r4, #21
 800be52:	4584      	cmp	ip, r0
 800be54:	bf38      	it	cc
 800be56:	2304      	movcc	r3, #4
 800be58:	50ca      	str	r2, [r1, r3]
 800be5a:	b10a      	cbz	r2, 800be60 <__lshift+0xa4>
 800be5c:	f108 0602 	add.w	r6, r8, #2
 800be60:	3e01      	subs	r6, #1
 800be62:	4638      	mov	r0, r7
 800be64:	4621      	mov	r1, r4
 800be66:	612e      	str	r6, [r5, #16]
 800be68:	f7ff fd90 	bl	800b98c <_Bfree>
 800be6c:	4628      	mov	r0, r5
 800be6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be72:	f842 0f04 	str.w	r0, [r2, #4]!
 800be76:	3301      	adds	r3, #1
 800be78:	e7c5      	b.n	800be06 <__lshift+0x4a>
 800be7a:	3904      	subs	r1, #4
 800be7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800be80:	459c      	cmp	ip, r3
 800be82:	f841 2f04 	str.w	r2, [r1, #4]!
 800be86:	d8f9      	bhi.n	800be7c <__lshift+0xc0>
 800be88:	e7ea      	b.n	800be60 <__lshift+0xa4>
 800be8a:	bf00      	nop
 800be8c:	0800d219 	.word	0x0800d219
 800be90:	0800d2a8 	.word	0x0800d2a8

0800be94 <__mcmp>:
 800be94:	4603      	mov	r3, r0
 800be96:	690a      	ldr	r2, [r1, #16]
 800be98:	6900      	ldr	r0, [r0, #16]
 800be9a:	b530      	push	{r4, r5, lr}
 800be9c:	1a80      	subs	r0, r0, r2
 800be9e:	d10d      	bne.n	800bebc <__mcmp+0x28>
 800bea0:	3314      	adds	r3, #20
 800bea2:	3114      	adds	r1, #20
 800bea4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bea8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800beac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800beb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800beb4:	4295      	cmp	r5, r2
 800beb6:	d002      	beq.n	800bebe <__mcmp+0x2a>
 800beb8:	d304      	bcc.n	800bec4 <__mcmp+0x30>
 800beba:	2001      	movs	r0, #1
 800bebc:	bd30      	pop	{r4, r5, pc}
 800bebe:	42a3      	cmp	r3, r4
 800bec0:	d3f4      	bcc.n	800beac <__mcmp+0x18>
 800bec2:	e7fb      	b.n	800bebc <__mcmp+0x28>
 800bec4:	f04f 30ff 	mov.w	r0, #4294967295
 800bec8:	e7f8      	b.n	800bebc <__mcmp+0x28>
	...

0800becc <__mdiff>:
 800becc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed0:	460c      	mov	r4, r1
 800bed2:	4606      	mov	r6, r0
 800bed4:	4611      	mov	r1, r2
 800bed6:	4620      	mov	r0, r4
 800bed8:	4692      	mov	sl, r2
 800beda:	f7ff ffdb 	bl	800be94 <__mcmp>
 800bede:	1e05      	subs	r5, r0, #0
 800bee0:	d111      	bne.n	800bf06 <__mdiff+0x3a>
 800bee2:	4629      	mov	r1, r5
 800bee4:	4630      	mov	r0, r6
 800bee6:	f7ff fd11 	bl	800b90c <_Balloc>
 800beea:	4602      	mov	r2, r0
 800beec:	b928      	cbnz	r0, 800befa <__mdiff+0x2e>
 800beee:	f240 2132 	movw	r1, #562	; 0x232
 800bef2:	4b3c      	ldr	r3, [pc, #240]	; (800bfe4 <__mdiff+0x118>)
 800bef4:	483c      	ldr	r0, [pc, #240]	; (800bfe8 <__mdiff+0x11c>)
 800bef6:	f7fe f9d9 	bl	800a2ac <__assert_func>
 800befa:	2301      	movs	r3, #1
 800befc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf00:	4610      	mov	r0, r2
 800bf02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf06:	bfa4      	itt	ge
 800bf08:	4653      	movge	r3, sl
 800bf0a:	46a2      	movge	sl, r4
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bf12:	bfa6      	itte	ge
 800bf14:	461c      	movge	r4, r3
 800bf16:	2500      	movge	r5, #0
 800bf18:	2501      	movlt	r5, #1
 800bf1a:	f7ff fcf7 	bl	800b90c <_Balloc>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	b918      	cbnz	r0, 800bf2a <__mdiff+0x5e>
 800bf22:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf26:	4b2f      	ldr	r3, [pc, #188]	; (800bfe4 <__mdiff+0x118>)
 800bf28:	e7e4      	b.n	800bef4 <__mdiff+0x28>
 800bf2a:	f100 0814 	add.w	r8, r0, #20
 800bf2e:	f8da 7010 	ldr.w	r7, [sl, #16]
 800bf32:	60c5      	str	r5, [r0, #12]
 800bf34:	f04f 0c00 	mov.w	ip, #0
 800bf38:	f10a 0514 	add.w	r5, sl, #20
 800bf3c:	f10a 0010 	add.w	r0, sl, #16
 800bf40:	46c2      	mov	sl, r8
 800bf42:	6926      	ldr	r6, [r4, #16]
 800bf44:	f104 0914 	add.w	r9, r4, #20
 800bf48:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bf4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf50:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bf54:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf58:	fa1f f18b 	uxth.w	r1, fp
 800bf5c:	4461      	add	r1, ip
 800bf5e:	fa1f fc83 	uxth.w	ip, r3
 800bf62:	0c1b      	lsrs	r3, r3, #16
 800bf64:	eba1 010c 	sub.w	r1, r1, ip
 800bf68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf6c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bf70:	b289      	uxth	r1, r1
 800bf72:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bf76:	454e      	cmp	r6, r9
 800bf78:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bf7c:	f84a 3b04 	str.w	r3, [sl], #4
 800bf80:	d8e6      	bhi.n	800bf50 <__mdiff+0x84>
 800bf82:	1b33      	subs	r3, r6, r4
 800bf84:	3b15      	subs	r3, #21
 800bf86:	f023 0303 	bic.w	r3, r3, #3
 800bf8a:	3415      	adds	r4, #21
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	42a6      	cmp	r6, r4
 800bf90:	bf38      	it	cc
 800bf92:	2304      	movcc	r3, #4
 800bf94:	441d      	add	r5, r3
 800bf96:	4443      	add	r3, r8
 800bf98:	461e      	mov	r6, r3
 800bf9a:	462c      	mov	r4, r5
 800bf9c:	4574      	cmp	r4, lr
 800bf9e:	d30e      	bcc.n	800bfbe <__mdiff+0xf2>
 800bfa0:	f10e 0103 	add.w	r1, lr, #3
 800bfa4:	1b49      	subs	r1, r1, r5
 800bfa6:	f021 0103 	bic.w	r1, r1, #3
 800bfaa:	3d03      	subs	r5, #3
 800bfac:	45ae      	cmp	lr, r5
 800bfae:	bf38      	it	cc
 800bfb0:	2100      	movcc	r1, #0
 800bfb2:	4419      	add	r1, r3
 800bfb4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bfb8:	b18b      	cbz	r3, 800bfde <__mdiff+0x112>
 800bfba:	6117      	str	r7, [r2, #16]
 800bfbc:	e7a0      	b.n	800bf00 <__mdiff+0x34>
 800bfbe:	f854 8b04 	ldr.w	r8, [r4], #4
 800bfc2:	fa1f f188 	uxth.w	r1, r8
 800bfc6:	4461      	add	r1, ip
 800bfc8:	1408      	asrs	r0, r1, #16
 800bfca:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800bfce:	b289      	uxth	r1, r1
 800bfd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bfd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bfd8:	f846 1b04 	str.w	r1, [r6], #4
 800bfdc:	e7de      	b.n	800bf9c <__mdiff+0xd0>
 800bfde:	3f01      	subs	r7, #1
 800bfe0:	e7e8      	b.n	800bfb4 <__mdiff+0xe8>
 800bfe2:	bf00      	nop
 800bfe4:	0800d219 	.word	0x0800d219
 800bfe8:	0800d2a8 	.word	0x0800d2a8

0800bfec <__ulp>:
 800bfec:	4b11      	ldr	r3, [pc, #68]	; (800c034 <__ulp+0x48>)
 800bfee:	400b      	ands	r3, r1
 800bff0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	dd02      	ble.n	800bffe <__ulp+0x12>
 800bff8:	2000      	movs	r0, #0
 800bffa:	4619      	mov	r1, r3
 800bffc:	4770      	bx	lr
 800bffe:	425b      	negs	r3, r3
 800c000:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c004:	f04f 0000 	mov.w	r0, #0
 800c008:	f04f 0100 	mov.w	r1, #0
 800c00c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c010:	da04      	bge.n	800c01c <__ulp+0x30>
 800c012:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c016:	fa43 f102 	asr.w	r1, r3, r2
 800c01a:	4770      	bx	lr
 800c01c:	f1a2 0314 	sub.w	r3, r2, #20
 800c020:	2b1e      	cmp	r3, #30
 800c022:	bfd6      	itet	le
 800c024:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c028:	2301      	movgt	r3, #1
 800c02a:	fa22 f303 	lsrle.w	r3, r2, r3
 800c02e:	4618      	mov	r0, r3
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	7ff00000 	.word	0x7ff00000

0800c038 <__b2d>:
 800c038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c03c:	6907      	ldr	r7, [r0, #16]
 800c03e:	f100 0914 	add.w	r9, r0, #20
 800c042:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c046:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c04a:	f1a7 0804 	sub.w	r8, r7, #4
 800c04e:	4630      	mov	r0, r6
 800c050:	f7ff fd52 	bl	800baf8 <__hi0bits>
 800c054:	f1c0 0320 	rsb	r3, r0, #32
 800c058:	280a      	cmp	r0, #10
 800c05a:	600b      	str	r3, [r1, #0]
 800c05c:	491f      	ldr	r1, [pc, #124]	; (800c0dc <__b2d+0xa4>)
 800c05e:	dc17      	bgt.n	800c090 <__b2d+0x58>
 800c060:	45c1      	cmp	r9, r8
 800c062:	bf28      	it	cs
 800c064:	2200      	movcs	r2, #0
 800c066:	f1c0 0c0b 	rsb	ip, r0, #11
 800c06a:	fa26 f30c 	lsr.w	r3, r6, ip
 800c06e:	bf38      	it	cc
 800c070:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c074:	ea43 0501 	orr.w	r5, r3, r1
 800c078:	f100 0315 	add.w	r3, r0, #21
 800c07c:	fa06 f303 	lsl.w	r3, r6, r3
 800c080:	fa22 f20c 	lsr.w	r2, r2, ip
 800c084:	ea43 0402 	orr.w	r4, r3, r2
 800c088:	4620      	mov	r0, r4
 800c08a:	4629      	mov	r1, r5
 800c08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c090:	45c1      	cmp	r9, r8
 800c092:	bf2e      	itee	cs
 800c094:	2200      	movcs	r2, #0
 800c096:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c09a:	f1a7 0808 	subcc.w	r8, r7, #8
 800c09e:	f1b0 030b 	subs.w	r3, r0, #11
 800c0a2:	d016      	beq.n	800c0d2 <__b2d+0x9a>
 800c0a4:	f1c3 0720 	rsb	r7, r3, #32
 800c0a8:	fa22 f107 	lsr.w	r1, r2, r7
 800c0ac:	45c8      	cmp	r8, r9
 800c0ae:	fa06 f603 	lsl.w	r6, r6, r3
 800c0b2:	ea46 0601 	orr.w	r6, r6, r1
 800c0b6:	bf94      	ite	ls
 800c0b8:	2100      	movls	r1, #0
 800c0ba:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c0be:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c0c2:	fa02 f003 	lsl.w	r0, r2, r3
 800c0c6:	40f9      	lsrs	r1, r7
 800c0c8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c0cc:	ea40 0401 	orr.w	r4, r0, r1
 800c0d0:	e7da      	b.n	800c088 <__b2d+0x50>
 800c0d2:	4614      	mov	r4, r2
 800c0d4:	ea46 0501 	orr.w	r5, r6, r1
 800c0d8:	e7d6      	b.n	800c088 <__b2d+0x50>
 800c0da:	bf00      	nop
 800c0dc:	3ff00000 	.word	0x3ff00000

0800c0e0 <__d2b>:
 800c0e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c0e4:	2101      	movs	r1, #1
 800c0e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c0ea:	4690      	mov	r8, r2
 800c0ec:	461d      	mov	r5, r3
 800c0ee:	f7ff fc0d 	bl	800b90c <_Balloc>
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	b930      	cbnz	r0, 800c104 <__d2b+0x24>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	f240 310a 	movw	r1, #778	; 0x30a
 800c0fc:	4b24      	ldr	r3, [pc, #144]	; (800c190 <__d2b+0xb0>)
 800c0fe:	4825      	ldr	r0, [pc, #148]	; (800c194 <__d2b+0xb4>)
 800c100:	f7fe f8d4 	bl	800a2ac <__assert_func>
 800c104:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c108:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c10c:	bb2d      	cbnz	r5, 800c15a <__d2b+0x7a>
 800c10e:	9301      	str	r3, [sp, #4]
 800c110:	f1b8 0300 	subs.w	r3, r8, #0
 800c114:	d026      	beq.n	800c164 <__d2b+0x84>
 800c116:	4668      	mov	r0, sp
 800c118:	9300      	str	r3, [sp, #0]
 800c11a:	f7ff fd0d 	bl	800bb38 <__lo0bits>
 800c11e:	9900      	ldr	r1, [sp, #0]
 800c120:	b1f0      	cbz	r0, 800c160 <__d2b+0x80>
 800c122:	9a01      	ldr	r2, [sp, #4]
 800c124:	f1c0 0320 	rsb	r3, r0, #32
 800c128:	fa02 f303 	lsl.w	r3, r2, r3
 800c12c:	430b      	orrs	r3, r1
 800c12e:	40c2      	lsrs	r2, r0
 800c130:	6163      	str	r3, [r4, #20]
 800c132:	9201      	str	r2, [sp, #4]
 800c134:	9b01      	ldr	r3, [sp, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	bf14      	ite	ne
 800c13a:	2102      	movne	r1, #2
 800c13c:	2101      	moveq	r1, #1
 800c13e:	61a3      	str	r3, [r4, #24]
 800c140:	6121      	str	r1, [r4, #16]
 800c142:	b1c5      	cbz	r5, 800c176 <__d2b+0x96>
 800c144:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c148:	4405      	add	r5, r0
 800c14a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c14e:	603d      	str	r5, [r7, #0]
 800c150:	6030      	str	r0, [r6, #0]
 800c152:	4620      	mov	r0, r4
 800c154:	b002      	add	sp, #8
 800c156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c15a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c15e:	e7d6      	b.n	800c10e <__d2b+0x2e>
 800c160:	6161      	str	r1, [r4, #20]
 800c162:	e7e7      	b.n	800c134 <__d2b+0x54>
 800c164:	a801      	add	r0, sp, #4
 800c166:	f7ff fce7 	bl	800bb38 <__lo0bits>
 800c16a:	2101      	movs	r1, #1
 800c16c:	9b01      	ldr	r3, [sp, #4]
 800c16e:	6121      	str	r1, [r4, #16]
 800c170:	6163      	str	r3, [r4, #20]
 800c172:	3020      	adds	r0, #32
 800c174:	e7e5      	b.n	800c142 <__d2b+0x62>
 800c176:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c17a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c17e:	6038      	str	r0, [r7, #0]
 800c180:	6918      	ldr	r0, [r3, #16]
 800c182:	f7ff fcb9 	bl	800baf8 <__hi0bits>
 800c186:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c18a:	6031      	str	r1, [r6, #0]
 800c18c:	e7e1      	b.n	800c152 <__d2b+0x72>
 800c18e:	bf00      	nop
 800c190:	0800d219 	.word	0x0800d219
 800c194:	0800d2a8 	.word	0x0800d2a8

0800c198 <__ratio>:
 800c198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19c:	4688      	mov	r8, r1
 800c19e:	4669      	mov	r1, sp
 800c1a0:	4681      	mov	r9, r0
 800c1a2:	f7ff ff49 	bl	800c038 <__b2d>
 800c1a6:	460f      	mov	r7, r1
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	460d      	mov	r5, r1
 800c1ac:	4640      	mov	r0, r8
 800c1ae:	a901      	add	r1, sp, #4
 800c1b0:	f7ff ff42 	bl	800c038 <__b2d>
 800c1b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c1bc:	468b      	mov	fp, r1
 800c1be:	eba3 0c02 	sub.w	ip, r3, r2
 800c1c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c1c6:	1a9b      	subs	r3, r3, r2
 800c1c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	bfd5      	itete	le
 800c1d0:	460a      	movle	r2, r1
 800c1d2:	462a      	movgt	r2, r5
 800c1d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c1d8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c1dc:	bfd8      	it	le
 800c1de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c1e2:	465b      	mov	r3, fp
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	4639      	mov	r1, r7
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f7f4 fa9f 	bl	800072c <__aeabi_ddiv>
 800c1ee:	b003      	add	sp, #12
 800c1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1f4 <__copybits>:
 800c1f4:	3901      	subs	r1, #1
 800c1f6:	b570      	push	{r4, r5, r6, lr}
 800c1f8:	1149      	asrs	r1, r1, #5
 800c1fa:	6914      	ldr	r4, [r2, #16]
 800c1fc:	3101      	adds	r1, #1
 800c1fe:	f102 0314 	add.w	r3, r2, #20
 800c202:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c206:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c20a:	1f05      	subs	r5, r0, #4
 800c20c:	42a3      	cmp	r3, r4
 800c20e:	d30c      	bcc.n	800c22a <__copybits+0x36>
 800c210:	1aa3      	subs	r3, r4, r2
 800c212:	3b11      	subs	r3, #17
 800c214:	f023 0303 	bic.w	r3, r3, #3
 800c218:	3211      	adds	r2, #17
 800c21a:	42a2      	cmp	r2, r4
 800c21c:	bf88      	it	hi
 800c21e:	2300      	movhi	r3, #0
 800c220:	4418      	add	r0, r3
 800c222:	2300      	movs	r3, #0
 800c224:	4288      	cmp	r0, r1
 800c226:	d305      	bcc.n	800c234 <__copybits+0x40>
 800c228:	bd70      	pop	{r4, r5, r6, pc}
 800c22a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c22e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c232:	e7eb      	b.n	800c20c <__copybits+0x18>
 800c234:	f840 3b04 	str.w	r3, [r0], #4
 800c238:	e7f4      	b.n	800c224 <__copybits+0x30>

0800c23a <__any_on>:
 800c23a:	f100 0214 	add.w	r2, r0, #20
 800c23e:	6900      	ldr	r0, [r0, #16]
 800c240:	114b      	asrs	r3, r1, #5
 800c242:	4298      	cmp	r0, r3
 800c244:	b510      	push	{r4, lr}
 800c246:	db11      	blt.n	800c26c <__any_on+0x32>
 800c248:	dd0a      	ble.n	800c260 <__any_on+0x26>
 800c24a:	f011 011f 	ands.w	r1, r1, #31
 800c24e:	d007      	beq.n	800c260 <__any_on+0x26>
 800c250:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c254:	fa24 f001 	lsr.w	r0, r4, r1
 800c258:	fa00 f101 	lsl.w	r1, r0, r1
 800c25c:	428c      	cmp	r4, r1
 800c25e:	d10b      	bne.n	800c278 <__any_on+0x3e>
 800c260:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c264:	4293      	cmp	r3, r2
 800c266:	d803      	bhi.n	800c270 <__any_on+0x36>
 800c268:	2000      	movs	r0, #0
 800c26a:	bd10      	pop	{r4, pc}
 800c26c:	4603      	mov	r3, r0
 800c26e:	e7f7      	b.n	800c260 <__any_on+0x26>
 800c270:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c274:	2900      	cmp	r1, #0
 800c276:	d0f5      	beq.n	800c264 <__any_on+0x2a>
 800c278:	2001      	movs	r0, #1
 800c27a:	e7f6      	b.n	800c26a <__any_on+0x30>

0800c27c <_calloc_r>:
 800c27c:	b538      	push	{r3, r4, r5, lr}
 800c27e:	fb02 f501 	mul.w	r5, r2, r1
 800c282:	4629      	mov	r1, r5
 800c284:	f7fc f918 	bl	80084b8 <_malloc_r>
 800c288:	4604      	mov	r4, r0
 800c28a:	b118      	cbz	r0, 800c294 <_calloc_r+0x18>
 800c28c:	462a      	mov	r2, r5
 800c28e:	2100      	movs	r1, #0
 800c290:	f7fc f909 	bl	80084a6 <memset>
 800c294:	4620      	mov	r0, r4
 800c296:	bd38      	pop	{r3, r4, r5, pc}

0800c298 <_free_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4605      	mov	r5, r0
 800c29c:	2900      	cmp	r1, #0
 800c29e:	d043      	beq.n	800c328 <_free_r+0x90>
 800c2a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2a4:	1f0c      	subs	r4, r1, #4
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	bfb8      	it	lt
 800c2aa:	18e4      	addlt	r4, r4, r3
 800c2ac:	f7ff fb22 	bl	800b8f4 <__malloc_lock>
 800c2b0:	4a1e      	ldr	r2, [pc, #120]	; (800c32c <_free_r+0x94>)
 800c2b2:	6813      	ldr	r3, [r2, #0]
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	b933      	cbnz	r3, 800c2c6 <_free_r+0x2e>
 800c2b8:	6063      	str	r3, [r4, #4]
 800c2ba:	6014      	str	r4, [r2, #0]
 800c2bc:	4628      	mov	r0, r5
 800c2be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2c2:	f7ff bb1d 	b.w	800b900 <__malloc_unlock>
 800c2c6:	42a3      	cmp	r3, r4
 800c2c8:	d90a      	bls.n	800c2e0 <_free_r+0x48>
 800c2ca:	6821      	ldr	r1, [r4, #0]
 800c2cc:	1862      	adds	r2, r4, r1
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	bf01      	itttt	eq
 800c2d2:	681a      	ldreq	r2, [r3, #0]
 800c2d4:	685b      	ldreq	r3, [r3, #4]
 800c2d6:	1852      	addeq	r2, r2, r1
 800c2d8:	6022      	streq	r2, [r4, #0]
 800c2da:	6063      	str	r3, [r4, #4]
 800c2dc:	6004      	str	r4, [r0, #0]
 800c2de:	e7ed      	b.n	800c2bc <_free_r+0x24>
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	b10b      	cbz	r3, 800c2ea <_free_r+0x52>
 800c2e6:	42a3      	cmp	r3, r4
 800c2e8:	d9fa      	bls.n	800c2e0 <_free_r+0x48>
 800c2ea:	6811      	ldr	r1, [r2, #0]
 800c2ec:	1850      	adds	r0, r2, r1
 800c2ee:	42a0      	cmp	r0, r4
 800c2f0:	d10b      	bne.n	800c30a <_free_r+0x72>
 800c2f2:	6820      	ldr	r0, [r4, #0]
 800c2f4:	4401      	add	r1, r0
 800c2f6:	1850      	adds	r0, r2, r1
 800c2f8:	4283      	cmp	r3, r0
 800c2fa:	6011      	str	r1, [r2, #0]
 800c2fc:	d1de      	bne.n	800c2bc <_free_r+0x24>
 800c2fe:	6818      	ldr	r0, [r3, #0]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	4401      	add	r1, r0
 800c304:	6011      	str	r1, [r2, #0]
 800c306:	6053      	str	r3, [r2, #4]
 800c308:	e7d8      	b.n	800c2bc <_free_r+0x24>
 800c30a:	d902      	bls.n	800c312 <_free_r+0x7a>
 800c30c:	230c      	movs	r3, #12
 800c30e:	602b      	str	r3, [r5, #0]
 800c310:	e7d4      	b.n	800c2bc <_free_r+0x24>
 800c312:	6820      	ldr	r0, [r4, #0]
 800c314:	1821      	adds	r1, r4, r0
 800c316:	428b      	cmp	r3, r1
 800c318:	bf01      	itttt	eq
 800c31a:	6819      	ldreq	r1, [r3, #0]
 800c31c:	685b      	ldreq	r3, [r3, #4]
 800c31e:	1809      	addeq	r1, r1, r0
 800c320:	6021      	streq	r1, [r4, #0]
 800c322:	6063      	str	r3, [r4, #4]
 800c324:	6054      	str	r4, [r2, #4]
 800c326:	e7c9      	b.n	800c2bc <_free_r+0x24>
 800c328:	bd38      	pop	{r3, r4, r5, pc}
 800c32a:	bf00      	nop
 800c32c:	200036ec 	.word	0x200036ec

0800c330 <__ssputs_r>:
 800c330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c334:	688e      	ldr	r6, [r1, #8]
 800c336:	4682      	mov	sl, r0
 800c338:	429e      	cmp	r6, r3
 800c33a:	460c      	mov	r4, r1
 800c33c:	4690      	mov	r8, r2
 800c33e:	461f      	mov	r7, r3
 800c340:	d838      	bhi.n	800c3b4 <__ssputs_r+0x84>
 800c342:	898a      	ldrh	r2, [r1, #12]
 800c344:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c348:	d032      	beq.n	800c3b0 <__ssputs_r+0x80>
 800c34a:	6825      	ldr	r5, [r4, #0]
 800c34c:	6909      	ldr	r1, [r1, #16]
 800c34e:	3301      	adds	r3, #1
 800c350:	eba5 0901 	sub.w	r9, r5, r1
 800c354:	6965      	ldr	r5, [r4, #20]
 800c356:	444b      	add	r3, r9
 800c358:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c35c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c360:	106d      	asrs	r5, r5, #1
 800c362:	429d      	cmp	r5, r3
 800c364:	bf38      	it	cc
 800c366:	461d      	movcc	r5, r3
 800c368:	0553      	lsls	r3, r2, #21
 800c36a:	d531      	bpl.n	800c3d0 <__ssputs_r+0xa0>
 800c36c:	4629      	mov	r1, r5
 800c36e:	f7fc f8a3 	bl	80084b8 <_malloc_r>
 800c372:	4606      	mov	r6, r0
 800c374:	b950      	cbnz	r0, 800c38c <__ssputs_r+0x5c>
 800c376:	230c      	movs	r3, #12
 800c378:	f04f 30ff 	mov.w	r0, #4294967295
 800c37c:	f8ca 3000 	str.w	r3, [sl]
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c386:	81a3      	strh	r3, [r4, #12]
 800c388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c38c:	464a      	mov	r2, r9
 800c38e:	6921      	ldr	r1, [r4, #16]
 800c390:	f7fc f87b 	bl	800848a <memcpy>
 800c394:	89a3      	ldrh	r3, [r4, #12]
 800c396:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c39a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c39e:	81a3      	strh	r3, [r4, #12]
 800c3a0:	6126      	str	r6, [r4, #16]
 800c3a2:	444e      	add	r6, r9
 800c3a4:	6026      	str	r6, [r4, #0]
 800c3a6:	463e      	mov	r6, r7
 800c3a8:	6165      	str	r5, [r4, #20]
 800c3aa:	eba5 0509 	sub.w	r5, r5, r9
 800c3ae:	60a5      	str	r5, [r4, #8]
 800c3b0:	42be      	cmp	r6, r7
 800c3b2:	d900      	bls.n	800c3b6 <__ssputs_r+0x86>
 800c3b4:	463e      	mov	r6, r7
 800c3b6:	4632      	mov	r2, r6
 800c3b8:	4641      	mov	r1, r8
 800c3ba:	6820      	ldr	r0, [r4, #0]
 800c3bc:	f000 fbd0 	bl	800cb60 <memmove>
 800c3c0:	68a3      	ldr	r3, [r4, #8]
 800c3c2:	6822      	ldr	r2, [r4, #0]
 800c3c4:	1b9b      	subs	r3, r3, r6
 800c3c6:	4432      	add	r2, r6
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	60a3      	str	r3, [r4, #8]
 800c3cc:	6022      	str	r2, [r4, #0]
 800c3ce:	e7db      	b.n	800c388 <__ssputs_r+0x58>
 800c3d0:	462a      	mov	r2, r5
 800c3d2:	f000 fbdf 	bl	800cb94 <_realloc_r>
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d1e1      	bne.n	800c3a0 <__ssputs_r+0x70>
 800c3dc:	4650      	mov	r0, sl
 800c3de:	6921      	ldr	r1, [r4, #16]
 800c3e0:	f7ff ff5a 	bl	800c298 <_free_r>
 800c3e4:	e7c7      	b.n	800c376 <__ssputs_r+0x46>
	...

0800c3e8 <_svfiprintf_r>:
 800c3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	4698      	mov	r8, r3
 800c3ee:	898b      	ldrh	r3, [r1, #12]
 800c3f0:	4607      	mov	r7, r0
 800c3f2:	061b      	lsls	r3, r3, #24
 800c3f4:	460d      	mov	r5, r1
 800c3f6:	4614      	mov	r4, r2
 800c3f8:	b09d      	sub	sp, #116	; 0x74
 800c3fa:	d50e      	bpl.n	800c41a <_svfiprintf_r+0x32>
 800c3fc:	690b      	ldr	r3, [r1, #16]
 800c3fe:	b963      	cbnz	r3, 800c41a <_svfiprintf_r+0x32>
 800c400:	2140      	movs	r1, #64	; 0x40
 800c402:	f7fc f859 	bl	80084b8 <_malloc_r>
 800c406:	6028      	str	r0, [r5, #0]
 800c408:	6128      	str	r0, [r5, #16]
 800c40a:	b920      	cbnz	r0, 800c416 <_svfiprintf_r+0x2e>
 800c40c:	230c      	movs	r3, #12
 800c40e:	603b      	str	r3, [r7, #0]
 800c410:	f04f 30ff 	mov.w	r0, #4294967295
 800c414:	e0d1      	b.n	800c5ba <_svfiprintf_r+0x1d2>
 800c416:	2340      	movs	r3, #64	; 0x40
 800c418:	616b      	str	r3, [r5, #20]
 800c41a:	2300      	movs	r3, #0
 800c41c:	9309      	str	r3, [sp, #36]	; 0x24
 800c41e:	2320      	movs	r3, #32
 800c420:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c424:	2330      	movs	r3, #48	; 0x30
 800c426:	f04f 0901 	mov.w	r9, #1
 800c42a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c42e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c5d4 <_svfiprintf_r+0x1ec>
 800c432:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c436:	4623      	mov	r3, r4
 800c438:	469a      	mov	sl, r3
 800c43a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c43e:	b10a      	cbz	r2, 800c444 <_svfiprintf_r+0x5c>
 800c440:	2a25      	cmp	r2, #37	; 0x25
 800c442:	d1f9      	bne.n	800c438 <_svfiprintf_r+0x50>
 800c444:	ebba 0b04 	subs.w	fp, sl, r4
 800c448:	d00b      	beq.n	800c462 <_svfiprintf_r+0x7a>
 800c44a:	465b      	mov	r3, fp
 800c44c:	4622      	mov	r2, r4
 800c44e:	4629      	mov	r1, r5
 800c450:	4638      	mov	r0, r7
 800c452:	f7ff ff6d 	bl	800c330 <__ssputs_r>
 800c456:	3001      	adds	r0, #1
 800c458:	f000 80aa 	beq.w	800c5b0 <_svfiprintf_r+0x1c8>
 800c45c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c45e:	445a      	add	r2, fp
 800c460:	9209      	str	r2, [sp, #36]	; 0x24
 800c462:	f89a 3000 	ldrb.w	r3, [sl]
 800c466:	2b00      	cmp	r3, #0
 800c468:	f000 80a2 	beq.w	800c5b0 <_svfiprintf_r+0x1c8>
 800c46c:	2300      	movs	r3, #0
 800c46e:	f04f 32ff 	mov.w	r2, #4294967295
 800c472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c476:	f10a 0a01 	add.w	sl, sl, #1
 800c47a:	9304      	str	r3, [sp, #16]
 800c47c:	9307      	str	r3, [sp, #28]
 800c47e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c482:	931a      	str	r3, [sp, #104]	; 0x68
 800c484:	4654      	mov	r4, sl
 800c486:	2205      	movs	r2, #5
 800c488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c48c:	4851      	ldr	r0, [pc, #324]	; (800c5d4 <_svfiprintf_r+0x1ec>)
 800c48e:	f7ff fa23 	bl	800b8d8 <memchr>
 800c492:	9a04      	ldr	r2, [sp, #16]
 800c494:	b9d8      	cbnz	r0, 800c4ce <_svfiprintf_r+0xe6>
 800c496:	06d0      	lsls	r0, r2, #27
 800c498:	bf44      	itt	mi
 800c49a:	2320      	movmi	r3, #32
 800c49c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4a0:	0711      	lsls	r1, r2, #28
 800c4a2:	bf44      	itt	mi
 800c4a4:	232b      	movmi	r3, #43	; 0x2b
 800c4a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c4b0:	d015      	beq.n	800c4de <_svfiprintf_r+0xf6>
 800c4b2:	4654      	mov	r4, sl
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	f04f 0c0a 	mov.w	ip, #10
 800c4ba:	9a07      	ldr	r2, [sp, #28]
 800c4bc:	4621      	mov	r1, r4
 800c4be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4c2:	3b30      	subs	r3, #48	; 0x30
 800c4c4:	2b09      	cmp	r3, #9
 800c4c6:	d94e      	bls.n	800c566 <_svfiprintf_r+0x17e>
 800c4c8:	b1b0      	cbz	r0, 800c4f8 <_svfiprintf_r+0x110>
 800c4ca:	9207      	str	r2, [sp, #28]
 800c4cc:	e014      	b.n	800c4f8 <_svfiprintf_r+0x110>
 800c4ce:	eba0 0308 	sub.w	r3, r0, r8
 800c4d2:	fa09 f303 	lsl.w	r3, r9, r3
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	46a2      	mov	sl, r4
 800c4da:	9304      	str	r3, [sp, #16]
 800c4dc:	e7d2      	b.n	800c484 <_svfiprintf_r+0x9c>
 800c4de:	9b03      	ldr	r3, [sp, #12]
 800c4e0:	1d19      	adds	r1, r3, #4
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	9103      	str	r1, [sp, #12]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	bfbb      	ittet	lt
 800c4ea:	425b      	neglt	r3, r3
 800c4ec:	f042 0202 	orrlt.w	r2, r2, #2
 800c4f0:	9307      	strge	r3, [sp, #28]
 800c4f2:	9307      	strlt	r3, [sp, #28]
 800c4f4:	bfb8      	it	lt
 800c4f6:	9204      	strlt	r2, [sp, #16]
 800c4f8:	7823      	ldrb	r3, [r4, #0]
 800c4fa:	2b2e      	cmp	r3, #46	; 0x2e
 800c4fc:	d10c      	bne.n	800c518 <_svfiprintf_r+0x130>
 800c4fe:	7863      	ldrb	r3, [r4, #1]
 800c500:	2b2a      	cmp	r3, #42	; 0x2a
 800c502:	d135      	bne.n	800c570 <_svfiprintf_r+0x188>
 800c504:	9b03      	ldr	r3, [sp, #12]
 800c506:	3402      	adds	r4, #2
 800c508:	1d1a      	adds	r2, r3, #4
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	9203      	str	r2, [sp, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	bfb8      	it	lt
 800c512:	f04f 33ff 	movlt.w	r3, #4294967295
 800c516:	9305      	str	r3, [sp, #20]
 800c518:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c5e4 <_svfiprintf_r+0x1fc>
 800c51c:	2203      	movs	r2, #3
 800c51e:	4650      	mov	r0, sl
 800c520:	7821      	ldrb	r1, [r4, #0]
 800c522:	f7ff f9d9 	bl	800b8d8 <memchr>
 800c526:	b140      	cbz	r0, 800c53a <_svfiprintf_r+0x152>
 800c528:	2340      	movs	r3, #64	; 0x40
 800c52a:	eba0 000a 	sub.w	r0, r0, sl
 800c52e:	fa03 f000 	lsl.w	r0, r3, r0
 800c532:	9b04      	ldr	r3, [sp, #16]
 800c534:	3401      	adds	r4, #1
 800c536:	4303      	orrs	r3, r0
 800c538:	9304      	str	r3, [sp, #16]
 800c53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c53e:	2206      	movs	r2, #6
 800c540:	4825      	ldr	r0, [pc, #148]	; (800c5d8 <_svfiprintf_r+0x1f0>)
 800c542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c546:	f7ff f9c7 	bl	800b8d8 <memchr>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	d038      	beq.n	800c5c0 <_svfiprintf_r+0x1d8>
 800c54e:	4b23      	ldr	r3, [pc, #140]	; (800c5dc <_svfiprintf_r+0x1f4>)
 800c550:	bb1b      	cbnz	r3, 800c59a <_svfiprintf_r+0x1b2>
 800c552:	9b03      	ldr	r3, [sp, #12]
 800c554:	3307      	adds	r3, #7
 800c556:	f023 0307 	bic.w	r3, r3, #7
 800c55a:	3308      	adds	r3, #8
 800c55c:	9303      	str	r3, [sp, #12]
 800c55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c560:	4433      	add	r3, r6
 800c562:	9309      	str	r3, [sp, #36]	; 0x24
 800c564:	e767      	b.n	800c436 <_svfiprintf_r+0x4e>
 800c566:	460c      	mov	r4, r1
 800c568:	2001      	movs	r0, #1
 800c56a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c56e:	e7a5      	b.n	800c4bc <_svfiprintf_r+0xd4>
 800c570:	2300      	movs	r3, #0
 800c572:	f04f 0c0a 	mov.w	ip, #10
 800c576:	4619      	mov	r1, r3
 800c578:	3401      	adds	r4, #1
 800c57a:	9305      	str	r3, [sp, #20]
 800c57c:	4620      	mov	r0, r4
 800c57e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c582:	3a30      	subs	r2, #48	; 0x30
 800c584:	2a09      	cmp	r2, #9
 800c586:	d903      	bls.n	800c590 <_svfiprintf_r+0x1a8>
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d0c5      	beq.n	800c518 <_svfiprintf_r+0x130>
 800c58c:	9105      	str	r1, [sp, #20]
 800c58e:	e7c3      	b.n	800c518 <_svfiprintf_r+0x130>
 800c590:	4604      	mov	r4, r0
 800c592:	2301      	movs	r3, #1
 800c594:	fb0c 2101 	mla	r1, ip, r1, r2
 800c598:	e7f0      	b.n	800c57c <_svfiprintf_r+0x194>
 800c59a:	ab03      	add	r3, sp, #12
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	462a      	mov	r2, r5
 800c5a0:	4638      	mov	r0, r7
 800c5a2:	4b0f      	ldr	r3, [pc, #60]	; (800c5e0 <_svfiprintf_r+0x1f8>)
 800c5a4:	a904      	add	r1, sp, #16
 800c5a6:	f7fc f87f 	bl	80086a8 <_printf_float>
 800c5aa:	1c42      	adds	r2, r0, #1
 800c5ac:	4606      	mov	r6, r0
 800c5ae:	d1d6      	bne.n	800c55e <_svfiprintf_r+0x176>
 800c5b0:	89ab      	ldrh	r3, [r5, #12]
 800c5b2:	065b      	lsls	r3, r3, #25
 800c5b4:	f53f af2c 	bmi.w	800c410 <_svfiprintf_r+0x28>
 800c5b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5ba:	b01d      	add	sp, #116	; 0x74
 800c5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c0:	ab03      	add	r3, sp, #12
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	462a      	mov	r2, r5
 800c5c6:	4638      	mov	r0, r7
 800c5c8:	4b05      	ldr	r3, [pc, #20]	; (800c5e0 <_svfiprintf_r+0x1f8>)
 800c5ca:	a904      	add	r1, sp, #16
 800c5cc:	f7fc fb08 	bl	8008be0 <_printf_i>
 800c5d0:	e7eb      	b.n	800c5aa <_svfiprintf_r+0x1c2>
 800c5d2:	bf00      	nop
 800c5d4:	0800d404 	.word	0x0800d404
 800c5d8:	0800d40e 	.word	0x0800d40e
 800c5dc:	080086a9 	.word	0x080086a9
 800c5e0:	0800c331 	.word	0x0800c331
 800c5e4:	0800d40a 	.word	0x0800d40a

0800c5e8 <__sfputc_r>:
 800c5e8:	6893      	ldr	r3, [r2, #8]
 800c5ea:	b410      	push	{r4}
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	6093      	str	r3, [r2, #8]
 800c5f2:	da07      	bge.n	800c604 <__sfputc_r+0x1c>
 800c5f4:	6994      	ldr	r4, [r2, #24]
 800c5f6:	42a3      	cmp	r3, r4
 800c5f8:	db01      	blt.n	800c5fe <__sfputc_r+0x16>
 800c5fa:	290a      	cmp	r1, #10
 800c5fc:	d102      	bne.n	800c604 <__sfputc_r+0x1c>
 800c5fe:	bc10      	pop	{r4}
 800c600:	f000 b974 	b.w	800c8ec <__swbuf_r>
 800c604:	6813      	ldr	r3, [r2, #0]
 800c606:	1c58      	adds	r0, r3, #1
 800c608:	6010      	str	r0, [r2, #0]
 800c60a:	7019      	strb	r1, [r3, #0]
 800c60c:	4608      	mov	r0, r1
 800c60e:	bc10      	pop	{r4}
 800c610:	4770      	bx	lr

0800c612 <__sfputs_r>:
 800c612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c614:	4606      	mov	r6, r0
 800c616:	460f      	mov	r7, r1
 800c618:	4614      	mov	r4, r2
 800c61a:	18d5      	adds	r5, r2, r3
 800c61c:	42ac      	cmp	r4, r5
 800c61e:	d101      	bne.n	800c624 <__sfputs_r+0x12>
 800c620:	2000      	movs	r0, #0
 800c622:	e007      	b.n	800c634 <__sfputs_r+0x22>
 800c624:	463a      	mov	r2, r7
 800c626:	4630      	mov	r0, r6
 800c628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c62c:	f7ff ffdc 	bl	800c5e8 <__sfputc_r>
 800c630:	1c43      	adds	r3, r0, #1
 800c632:	d1f3      	bne.n	800c61c <__sfputs_r+0xa>
 800c634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c638 <_vfiprintf_r>:
 800c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63c:	460d      	mov	r5, r1
 800c63e:	4614      	mov	r4, r2
 800c640:	4698      	mov	r8, r3
 800c642:	4606      	mov	r6, r0
 800c644:	b09d      	sub	sp, #116	; 0x74
 800c646:	b118      	cbz	r0, 800c650 <_vfiprintf_r+0x18>
 800c648:	6983      	ldr	r3, [r0, #24]
 800c64a:	b90b      	cbnz	r3, 800c650 <_vfiprintf_r+0x18>
 800c64c:	f7fb fe58 	bl	8008300 <__sinit>
 800c650:	4b89      	ldr	r3, [pc, #548]	; (800c878 <_vfiprintf_r+0x240>)
 800c652:	429d      	cmp	r5, r3
 800c654:	d11b      	bne.n	800c68e <_vfiprintf_r+0x56>
 800c656:	6875      	ldr	r5, [r6, #4]
 800c658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c65a:	07d9      	lsls	r1, r3, #31
 800c65c:	d405      	bmi.n	800c66a <_vfiprintf_r+0x32>
 800c65e:	89ab      	ldrh	r3, [r5, #12]
 800c660:	059a      	lsls	r2, r3, #22
 800c662:	d402      	bmi.n	800c66a <_vfiprintf_r+0x32>
 800c664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c666:	f7fb ff0e 	bl	8008486 <__retarget_lock_acquire_recursive>
 800c66a:	89ab      	ldrh	r3, [r5, #12]
 800c66c:	071b      	lsls	r3, r3, #28
 800c66e:	d501      	bpl.n	800c674 <_vfiprintf_r+0x3c>
 800c670:	692b      	ldr	r3, [r5, #16]
 800c672:	b9eb      	cbnz	r3, 800c6b0 <_vfiprintf_r+0x78>
 800c674:	4629      	mov	r1, r5
 800c676:	4630      	mov	r0, r6
 800c678:	f000 f998 	bl	800c9ac <__swsetup_r>
 800c67c:	b1c0      	cbz	r0, 800c6b0 <_vfiprintf_r+0x78>
 800c67e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c680:	07dc      	lsls	r4, r3, #31
 800c682:	d50e      	bpl.n	800c6a2 <_vfiprintf_r+0x6a>
 800c684:	f04f 30ff 	mov.w	r0, #4294967295
 800c688:	b01d      	add	sp, #116	; 0x74
 800c68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68e:	4b7b      	ldr	r3, [pc, #492]	; (800c87c <_vfiprintf_r+0x244>)
 800c690:	429d      	cmp	r5, r3
 800c692:	d101      	bne.n	800c698 <_vfiprintf_r+0x60>
 800c694:	68b5      	ldr	r5, [r6, #8]
 800c696:	e7df      	b.n	800c658 <_vfiprintf_r+0x20>
 800c698:	4b79      	ldr	r3, [pc, #484]	; (800c880 <_vfiprintf_r+0x248>)
 800c69a:	429d      	cmp	r5, r3
 800c69c:	bf08      	it	eq
 800c69e:	68f5      	ldreq	r5, [r6, #12]
 800c6a0:	e7da      	b.n	800c658 <_vfiprintf_r+0x20>
 800c6a2:	89ab      	ldrh	r3, [r5, #12]
 800c6a4:	0598      	lsls	r0, r3, #22
 800c6a6:	d4ed      	bmi.n	800c684 <_vfiprintf_r+0x4c>
 800c6a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6aa:	f7fb feed 	bl	8008488 <__retarget_lock_release_recursive>
 800c6ae:	e7e9      	b.n	800c684 <_vfiprintf_r+0x4c>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b4:	2320      	movs	r3, #32
 800c6b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6ba:	2330      	movs	r3, #48	; 0x30
 800c6bc:	f04f 0901 	mov.w	r9, #1
 800c6c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c884 <_vfiprintf_r+0x24c>
 800c6c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6cc:	4623      	mov	r3, r4
 800c6ce:	469a      	mov	sl, r3
 800c6d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6d4:	b10a      	cbz	r2, 800c6da <_vfiprintf_r+0xa2>
 800c6d6:	2a25      	cmp	r2, #37	; 0x25
 800c6d8:	d1f9      	bne.n	800c6ce <_vfiprintf_r+0x96>
 800c6da:	ebba 0b04 	subs.w	fp, sl, r4
 800c6de:	d00b      	beq.n	800c6f8 <_vfiprintf_r+0xc0>
 800c6e0:	465b      	mov	r3, fp
 800c6e2:	4622      	mov	r2, r4
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f7ff ff93 	bl	800c612 <__sfputs_r>
 800c6ec:	3001      	adds	r0, #1
 800c6ee:	f000 80aa 	beq.w	800c846 <_vfiprintf_r+0x20e>
 800c6f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6f4:	445a      	add	r2, fp
 800c6f6:	9209      	str	r2, [sp, #36]	; 0x24
 800c6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	f000 80a2 	beq.w	800c846 <_vfiprintf_r+0x20e>
 800c702:	2300      	movs	r3, #0
 800c704:	f04f 32ff 	mov.w	r2, #4294967295
 800c708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c70c:	f10a 0a01 	add.w	sl, sl, #1
 800c710:	9304      	str	r3, [sp, #16]
 800c712:	9307      	str	r3, [sp, #28]
 800c714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c718:	931a      	str	r3, [sp, #104]	; 0x68
 800c71a:	4654      	mov	r4, sl
 800c71c:	2205      	movs	r2, #5
 800c71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c722:	4858      	ldr	r0, [pc, #352]	; (800c884 <_vfiprintf_r+0x24c>)
 800c724:	f7ff f8d8 	bl	800b8d8 <memchr>
 800c728:	9a04      	ldr	r2, [sp, #16]
 800c72a:	b9d8      	cbnz	r0, 800c764 <_vfiprintf_r+0x12c>
 800c72c:	06d1      	lsls	r1, r2, #27
 800c72e:	bf44      	itt	mi
 800c730:	2320      	movmi	r3, #32
 800c732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c736:	0713      	lsls	r3, r2, #28
 800c738:	bf44      	itt	mi
 800c73a:	232b      	movmi	r3, #43	; 0x2b
 800c73c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c740:	f89a 3000 	ldrb.w	r3, [sl]
 800c744:	2b2a      	cmp	r3, #42	; 0x2a
 800c746:	d015      	beq.n	800c774 <_vfiprintf_r+0x13c>
 800c748:	4654      	mov	r4, sl
 800c74a:	2000      	movs	r0, #0
 800c74c:	f04f 0c0a 	mov.w	ip, #10
 800c750:	9a07      	ldr	r2, [sp, #28]
 800c752:	4621      	mov	r1, r4
 800c754:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c758:	3b30      	subs	r3, #48	; 0x30
 800c75a:	2b09      	cmp	r3, #9
 800c75c:	d94e      	bls.n	800c7fc <_vfiprintf_r+0x1c4>
 800c75e:	b1b0      	cbz	r0, 800c78e <_vfiprintf_r+0x156>
 800c760:	9207      	str	r2, [sp, #28]
 800c762:	e014      	b.n	800c78e <_vfiprintf_r+0x156>
 800c764:	eba0 0308 	sub.w	r3, r0, r8
 800c768:	fa09 f303 	lsl.w	r3, r9, r3
 800c76c:	4313      	orrs	r3, r2
 800c76e:	46a2      	mov	sl, r4
 800c770:	9304      	str	r3, [sp, #16]
 800c772:	e7d2      	b.n	800c71a <_vfiprintf_r+0xe2>
 800c774:	9b03      	ldr	r3, [sp, #12]
 800c776:	1d19      	adds	r1, r3, #4
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	9103      	str	r1, [sp, #12]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	bfbb      	ittet	lt
 800c780:	425b      	neglt	r3, r3
 800c782:	f042 0202 	orrlt.w	r2, r2, #2
 800c786:	9307      	strge	r3, [sp, #28]
 800c788:	9307      	strlt	r3, [sp, #28]
 800c78a:	bfb8      	it	lt
 800c78c:	9204      	strlt	r2, [sp, #16]
 800c78e:	7823      	ldrb	r3, [r4, #0]
 800c790:	2b2e      	cmp	r3, #46	; 0x2e
 800c792:	d10c      	bne.n	800c7ae <_vfiprintf_r+0x176>
 800c794:	7863      	ldrb	r3, [r4, #1]
 800c796:	2b2a      	cmp	r3, #42	; 0x2a
 800c798:	d135      	bne.n	800c806 <_vfiprintf_r+0x1ce>
 800c79a:	9b03      	ldr	r3, [sp, #12]
 800c79c:	3402      	adds	r4, #2
 800c79e:	1d1a      	adds	r2, r3, #4
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	9203      	str	r2, [sp, #12]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	bfb8      	it	lt
 800c7a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7ac:	9305      	str	r3, [sp, #20]
 800c7ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c894 <_vfiprintf_r+0x25c>
 800c7b2:	2203      	movs	r2, #3
 800c7b4:	4650      	mov	r0, sl
 800c7b6:	7821      	ldrb	r1, [r4, #0]
 800c7b8:	f7ff f88e 	bl	800b8d8 <memchr>
 800c7bc:	b140      	cbz	r0, 800c7d0 <_vfiprintf_r+0x198>
 800c7be:	2340      	movs	r3, #64	; 0x40
 800c7c0:	eba0 000a 	sub.w	r0, r0, sl
 800c7c4:	fa03 f000 	lsl.w	r0, r3, r0
 800c7c8:	9b04      	ldr	r3, [sp, #16]
 800c7ca:	3401      	adds	r4, #1
 800c7cc:	4303      	orrs	r3, r0
 800c7ce:	9304      	str	r3, [sp, #16]
 800c7d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d4:	2206      	movs	r2, #6
 800c7d6:	482c      	ldr	r0, [pc, #176]	; (800c888 <_vfiprintf_r+0x250>)
 800c7d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7dc:	f7ff f87c 	bl	800b8d8 <memchr>
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d03f      	beq.n	800c864 <_vfiprintf_r+0x22c>
 800c7e4:	4b29      	ldr	r3, [pc, #164]	; (800c88c <_vfiprintf_r+0x254>)
 800c7e6:	bb1b      	cbnz	r3, 800c830 <_vfiprintf_r+0x1f8>
 800c7e8:	9b03      	ldr	r3, [sp, #12]
 800c7ea:	3307      	adds	r3, #7
 800c7ec:	f023 0307 	bic.w	r3, r3, #7
 800c7f0:	3308      	adds	r3, #8
 800c7f2:	9303      	str	r3, [sp, #12]
 800c7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f6:	443b      	add	r3, r7
 800c7f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c7fa:	e767      	b.n	800c6cc <_vfiprintf_r+0x94>
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	2001      	movs	r0, #1
 800c800:	fb0c 3202 	mla	r2, ip, r2, r3
 800c804:	e7a5      	b.n	800c752 <_vfiprintf_r+0x11a>
 800c806:	2300      	movs	r3, #0
 800c808:	f04f 0c0a 	mov.w	ip, #10
 800c80c:	4619      	mov	r1, r3
 800c80e:	3401      	adds	r4, #1
 800c810:	9305      	str	r3, [sp, #20]
 800c812:	4620      	mov	r0, r4
 800c814:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c818:	3a30      	subs	r2, #48	; 0x30
 800c81a:	2a09      	cmp	r2, #9
 800c81c:	d903      	bls.n	800c826 <_vfiprintf_r+0x1ee>
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d0c5      	beq.n	800c7ae <_vfiprintf_r+0x176>
 800c822:	9105      	str	r1, [sp, #20]
 800c824:	e7c3      	b.n	800c7ae <_vfiprintf_r+0x176>
 800c826:	4604      	mov	r4, r0
 800c828:	2301      	movs	r3, #1
 800c82a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c82e:	e7f0      	b.n	800c812 <_vfiprintf_r+0x1da>
 800c830:	ab03      	add	r3, sp, #12
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	462a      	mov	r2, r5
 800c836:	4630      	mov	r0, r6
 800c838:	4b15      	ldr	r3, [pc, #84]	; (800c890 <_vfiprintf_r+0x258>)
 800c83a:	a904      	add	r1, sp, #16
 800c83c:	f7fb ff34 	bl	80086a8 <_printf_float>
 800c840:	4607      	mov	r7, r0
 800c842:	1c78      	adds	r0, r7, #1
 800c844:	d1d6      	bne.n	800c7f4 <_vfiprintf_r+0x1bc>
 800c846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c848:	07d9      	lsls	r1, r3, #31
 800c84a:	d405      	bmi.n	800c858 <_vfiprintf_r+0x220>
 800c84c:	89ab      	ldrh	r3, [r5, #12]
 800c84e:	059a      	lsls	r2, r3, #22
 800c850:	d402      	bmi.n	800c858 <_vfiprintf_r+0x220>
 800c852:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c854:	f7fb fe18 	bl	8008488 <__retarget_lock_release_recursive>
 800c858:	89ab      	ldrh	r3, [r5, #12]
 800c85a:	065b      	lsls	r3, r3, #25
 800c85c:	f53f af12 	bmi.w	800c684 <_vfiprintf_r+0x4c>
 800c860:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c862:	e711      	b.n	800c688 <_vfiprintf_r+0x50>
 800c864:	ab03      	add	r3, sp, #12
 800c866:	9300      	str	r3, [sp, #0]
 800c868:	462a      	mov	r2, r5
 800c86a:	4630      	mov	r0, r6
 800c86c:	4b08      	ldr	r3, [pc, #32]	; (800c890 <_vfiprintf_r+0x258>)
 800c86e:	a904      	add	r1, sp, #16
 800c870:	f7fc f9b6 	bl	8008be0 <_printf_i>
 800c874:	e7e4      	b.n	800c840 <_vfiprintf_r+0x208>
 800c876:	bf00      	nop
 800c878:	0800cf28 	.word	0x0800cf28
 800c87c:	0800cf48 	.word	0x0800cf48
 800c880:	0800cf08 	.word	0x0800cf08
 800c884:	0800d404 	.word	0x0800d404
 800c888:	0800d40e 	.word	0x0800d40e
 800c88c:	080086a9 	.word	0x080086a9
 800c890:	0800c613 	.word	0x0800c613
 800c894:	0800d40a 	.word	0x0800d40a

0800c898 <_read_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4604      	mov	r4, r0
 800c89c:	4608      	mov	r0, r1
 800c89e:	4611      	mov	r1, r2
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	4d05      	ldr	r5, [pc, #20]	; (800c8b8 <_read_r+0x20>)
 800c8a4:	602a      	str	r2, [r5, #0]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	f7f5 f923 	bl	8001af2 <_read>
 800c8ac:	1c43      	adds	r3, r0, #1
 800c8ae:	d102      	bne.n	800c8b6 <_read_r+0x1e>
 800c8b0:	682b      	ldr	r3, [r5, #0]
 800c8b2:	b103      	cbz	r3, 800c8b6 <_read_r+0x1e>
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	bd38      	pop	{r3, r4, r5, pc}
 800c8b8:	20003b38 	.word	0x20003b38

0800c8bc <nan>:
 800c8bc:	2000      	movs	r0, #0
 800c8be:	4901      	ldr	r1, [pc, #4]	; (800c8c4 <nan+0x8>)
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	7ff80000 	.word	0x7ff80000

0800c8c8 <strncmp>:
 800c8c8:	b510      	push	{r4, lr}
 800c8ca:	b16a      	cbz	r2, 800c8e8 <strncmp+0x20>
 800c8cc:	3901      	subs	r1, #1
 800c8ce:	1884      	adds	r4, r0, r2
 800c8d0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c8d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d103      	bne.n	800c8e4 <strncmp+0x1c>
 800c8dc:	42a0      	cmp	r0, r4
 800c8de:	d001      	beq.n	800c8e4 <strncmp+0x1c>
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d1f5      	bne.n	800c8d0 <strncmp+0x8>
 800c8e4:	1a98      	subs	r0, r3, r2
 800c8e6:	bd10      	pop	{r4, pc}
 800c8e8:	4610      	mov	r0, r2
 800c8ea:	e7fc      	b.n	800c8e6 <strncmp+0x1e>

0800c8ec <__swbuf_r>:
 800c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ee:	460e      	mov	r6, r1
 800c8f0:	4614      	mov	r4, r2
 800c8f2:	4605      	mov	r5, r0
 800c8f4:	b118      	cbz	r0, 800c8fe <__swbuf_r+0x12>
 800c8f6:	6983      	ldr	r3, [r0, #24]
 800c8f8:	b90b      	cbnz	r3, 800c8fe <__swbuf_r+0x12>
 800c8fa:	f7fb fd01 	bl	8008300 <__sinit>
 800c8fe:	4b21      	ldr	r3, [pc, #132]	; (800c984 <__swbuf_r+0x98>)
 800c900:	429c      	cmp	r4, r3
 800c902:	d12b      	bne.n	800c95c <__swbuf_r+0x70>
 800c904:	686c      	ldr	r4, [r5, #4]
 800c906:	69a3      	ldr	r3, [r4, #24]
 800c908:	60a3      	str	r3, [r4, #8]
 800c90a:	89a3      	ldrh	r3, [r4, #12]
 800c90c:	071a      	lsls	r2, r3, #28
 800c90e:	d52f      	bpl.n	800c970 <__swbuf_r+0x84>
 800c910:	6923      	ldr	r3, [r4, #16]
 800c912:	b36b      	cbz	r3, 800c970 <__swbuf_r+0x84>
 800c914:	6923      	ldr	r3, [r4, #16]
 800c916:	6820      	ldr	r0, [r4, #0]
 800c918:	b2f6      	uxtb	r6, r6
 800c91a:	1ac0      	subs	r0, r0, r3
 800c91c:	6963      	ldr	r3, [r4, #20]
 800c91e:	4637      	mov	r7, r6
 800c920:	4283      	cmp	r3, r0
 800c922:	dc04      	bgt.n	800c92e <__swbuf_r+0x42>
 800c924:	4621      	mov	r1, r4
 800c926:	4628      	mov	r0, r5
 800c928:	f7fe fbf2 	bl	800b110 <_fflush_r>
 800c92c:	bb30      	cbnz	r0, 800c97c <__swbuf_r+0x90>
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	3001      	adds	r0, #1
 800c932:	3b01      	subs	r3, #1
 800c934:	60a3      	str	r3, [r4, #8]
 800c936:	6823      	ldr	r3, [r4, #0]
 800c938:	1c5a      	adds	r2, r3, #1
 800c93a:	6022      	str	r2, [r4, #0]
 800c93c:	701e      	strb	r6, [r3, #0]
 800c93e:	6963      	ldr	r3, [r4, #20]
 800c940:	4283      	cmp	r3, r0
 800c942:	d004      	beq.n	800c94e <__swbuf_r+0x62>
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	07db      	lsls	r3, r3, #31
 800c948:	d506      	bpl.n	800c958 <__swbuf_r+0x6c>
 800c94a:	2e0a      	cmp	r6, #10
 800c94c:	d104      	bne.n	800c958 <__swbuf_r+0x6c>
 800c94e:	4621      	mov	r1, r4
 800c950:	4628      	mov	r0, r5
 800c952:	f7fe fbdd 	bl	800b110 <_fflush_r>
 800c956:	b988      	cbnz	r0, 800c97c <__swbuf_r+0x90>
 800c958:	4638      	mov	r0, r7
 800c95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c95c:	4b0a      	ldr	r3, [pc, #40]	; (800c988 <__swbuf_r+0x9c>)
 800c95e:	429c      	cmp	r4, r3
 800c960:	d101      	bne.n	800c966 <__swbuf_r+0x7a>
 800c962:	68ac      	ldr	r4, [r5, #8]
 800c964:	e7cf      	b.n	800c906 <__swbuf_r+0x1a>
 800c966:	4b09      	ldr	r3, [pc, #36]	; (800c98c <__swbuf_r+0xa0>)
 800c968:	429c      	cmp	r4, r3
 800c96a:	bf08      	it	eq
 800c96c:	68ec      	ldreq	r4, [r5, #12]
 800c96e:	e7ca      	b.n	800c906 <__swbuf_r+0x1a>
 800c970:	4621      	mov	r1, r4
 800c972:	4628      	mov	r0, r5
 800c974:	f000 f81a 	bl	800c9ac <__swsetup_r>
 800c978:	2800      	cmp	r0, #0
 800c97a:	d0cb      	beq.n	800c914 <__swbuf_r+0x28>
 800c97c:	f04f 37ff 	mov.w	r7, #4294967295
 800c980:	e7ea      	b.n	800c958 <__swbuf_r+0x6c>
 800c982:	bf00      	nop
 800c984:	0800cf28 	.word	0x0800cf28
 800c988:	0800cf48 	.word	0x0800cf48
 800c98c:	0800cf08 	.word	0x0800cf08

0800c990 <__ascii_wctomb>:
 800c990:	4603      	mov	r3, r0
 800c992:	4608      	mov	r0, r1
 800c994:	b141      	cbz	r1, 800c9a8 <__ascii_wctomb+0x18>
 800c996:	2aff      	cmp	r2, #255	; 0xff
 800c998:	d904      	bls.n	800c9a4 <__ascii_wctomb+0x14>
 800c99a:	228a      	movs	r2, #138	; 0x8a
 800c99c:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a0:	601a      	str	r2, [r3, #0]
 800c9a2:	4770      	bx	lr
 800c9a4:	2001      	movs	r0, #1
 800c9a6:	700a      	strb	r2, [r1, #0]
 800c9a8:	4770      	bx	lr
	...

0800c9ac <__swsetup_r>:
 800c9ac:	4b32      	ldr	r3, [pc, #200]	; (800ca78 <__swsetup_r+0xcc>)
 800c9ae:	b570      	push	{r4, r5, r6, lr}
 800c9b0:	681d      	ldr	r5, [r3, #0]
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	b125      	cbz	r5, 800c9c2 <__swsetup_r+0x16>
 800c9b8:	69ab      	ldr	r3, [r5, #24]
 800c9ba:	b913      	cbnz	r3, 800c9c2 <__swsetup_r+0x16>
 800c9bc:	4628      	mov	r0, r5
 800c9be:	f7fb fc9f 	bl	8008300 <__sinit>
 800c9c2:	4b2e      	ldr	r3, [pc, #184]	; (800ca7c <__swsetup_r+0xd0>)
 800c9c4:	429c      	cmp	r4, r3
 800c9c6:	d10f      	bne.n	800c9e8 <__swsetup_r+0x3c>
 800c9c8:	686c      	ldr	r4, [r5, #4]
 800c9ca:	89a3      	ldrh	r3, [r4, #12]
 800c9cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9d0:	0719      	lsls	r1, r3, #28
 800c9d2:	d42c      	bmi.n	800ca2e <__swsetup_r+0x82>
 800c9d4:	06dd      	lsls	r5, r3, #27
 800c9d6:	d411      	bmi.n	800c9fc <__swsetup_r+0x50>
 800c9d8:	2309      	movs	r3, #9
 800c9da:	6033      	str	r3, [r6, #0]
 800c9dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e4:	81a3      	strh	r3, [r4, #12]
 800c9e6:	e03e      	b.n	800ca66 <__swsetup_r+0xba>
 800c9e8:	4b25      	ldr	r3, [pc, #148]	; (800ca80 <__swsetup_r+0xd4>)
 800c9ea:	429c      	cmp	r4, r3
 800c9ec:	d101      	bne.n	800c9f2 <__swsetup_r+0x46>
 800c9ee:	68ac      	ldr	r4, [r5, #8]
 800c9f0:	e7eb      	b.n	800c9ca <__swsetup_r+0x1e>
 800c9f2:	4b24      	ldr	r3, [pc, #144]	; (800ca84 <__swsetup_r+0xd8>)
 800c9f4:	429c      	cmp	r4, r3
 800c9f6:	bf08      	it	eq
 800c9f8:	68ec      	ldreq	r4, [r5, #12]
 800c9fa:	e7e6      	b.n	800c9ca <__swsetup_r+0x1e>
 800c9fc:	0758      	lsls	r0, r3, #29
 800c9fe:	d512      	bpl.n	800ca26 <__swsetup_r+0x7a>
 800ca00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca02:	b141      	cbz	r1, 800ca16 <__swsetup_r+0x6a>
 800ca04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca08:	4299      	cmp	r1, r3
 800ca0a:	d002      	beq.n	800ca12 <__swsetup_r+0x66>
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f7ff fc43 	bl	800c298 <_free_r>
 800ca12:	2300      	movs	r3, #0
 800ca14:	6363      	str	r3, [r4, #52]	; 0x34
 800ca16:	89a3      	ldrh	r3, [r4, #12]
 800ca18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca1c:	81a3      	strh	r3, [r4, #12]
 800ca1e:	2300      	movs	r3, #0
 800ca20:	6063      	str	r3, [r4, #4]
 800ca22:	6923      	ldr	r3, [r4, #16]
 800ca24:	6023      	str	r3, [r4, #0]
 800ca26:	89a3      	ldrh	r3, [r4, #12]
 800ca28:	f043 0308 	orr.w	r3, r3, #8
 800ca2c:	81a3      	strh	r3, [r4, #12]
 800ca2e:	6923      	ldr	r3, [r4, #16]
 800ca30:	b94b      	cbnz	r3, 800ca46 <__swsetup_r+0x9a>
 800ca32:	89a3      	ldrh	r3, [r4, #12]
 800ca34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca3c:	d003      	beq.n	800ca46 <__swsetup_r+0x9a>
 800ca3e:	4621      	mov	r1, r4
 800ca40:	4630      	mov	r0, r6
 800ca42:	f000 f84d 	bl	800cae0 <__smakebuf_r>
 800ca46:	89a0      	ldrh	r0, [r4, #12]
 800ca48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca4c:	f010 0301 	ands.w	r3, r0, #1
 800ca50:	d00a      	beq.n	800ca68 <__swsetup_r+0xbc>
 800ca52:	2300      	movs	r3, #0
 800ca54:	60a3      	str	r3, [r4, #8]
 800ca56:	6963      	ldr	r3, [r4, #20]
 800ca58:	425b      	negs	r3, r3
 800ca5a:	61a3      	str	r3, [r4, #24]
 800ca5c:	6923      	ldr	r3, [r4, #16]
 800ca5e:	b943      	cbnz	r3, 800ca72 <__swsetup_r+0xc6>
 800ca60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca64:	d1ba      	bne.n	800c9dc <__swsetup_r+0x30>
 800ca66:	bd70      	pop	{r4, r5, r6, pc}
 800ca68:	0781      	lsls	r1, r0, #30
 800ca6a:	bf58      	it	pl
 800ca6c:	6963      	ldrpl	r3, [r4, #20]
 800ca6e:	60a3      	str	r3, [r4, #8]
 800ca70:	e7f4      	b.n	800ca5c <__swsetup_r+0xb0>
 800ca72:	2000      	movs	r0, #0
 800ca74:	e7f7      	b.n	800ca66 <__swsetup_r+0xba>
 800ca76:	bf00      	nop
 800ca78:	20000014 	.word	0x20000014
 800ca7c:	0800cf28 	.word	0x0800cf28
 800ca80:	0800cf48 	.word	0x0800cf48
 800ca84:	0800cf08 	.word	0x0800cf08

0800ca88 <abort>:
 800ca88:	2006      	movs	r0, #6
 800ca8a:	b508      	push	{r3, lr}
 800ca8c:	f000 f8d0 	bl	800cc30 <raise>
 800ca90:	2001      	movs	r0, #1
 800ca92:	f7f5 f824 	bl	8001ade <_exit>

0800ca96 <__swhatbuf_r>:
 800ca96:	b570      	push	{r4, r5, r6, lr}
 800ca98:	460e      	mov	r6, r1
 800ca9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca9e:	4614      	mov	r4, r2
 800caa0:	2900      	cmp	r1, #0
 800caa2:	461d      	mov	r5, r3
 800caa4:	b096      	sub	sp, #88	; 0x58
 800caa6:	da07      	bge.n	800cab8 <__swhatbuf_r+0x22>
 800caa8:	2300      	movs	r3, #0
 800caaa:	602b      	str	r3, [r5, #0]
 800caac:	89b3      	ldrh	r3, [r6, #12]
 800caae:	061a      	lsls	r2, r3, #24
 800cab0:	d410      	bmi.n	800cad4 <__swhatbuf_r+0x3e>
 800cab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cab6:	e00e      	b.n	800cad6 <__swhatbuf_r+0x40>
 800cab8:	466a      	mov	r2, sp
 800caba:	f000 f8d5 	bl	800cc68 <_fstat_r>
 800cabe:	2800      	cmp	r0, #0
 800cac0:	dbf2      	blt.n	800caa8 <__swhatbuf_r+0x12>
 800cac2:	9a01      	ldr	r2, [sp, #4]
 800cac4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cac8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cacc:	425a      	negs	r2, r3
 800cace:	415a      	adcs	r2, r3
 800cad0:	602a      	str	r2, [r5, #0]
 800cad2:	e7ee      	b.n	800cab2 <__swhatbuf_r+0x1c>
 800cad4:	2340      	movs	r3, #64	; 0x40
 800cad6:	2000      	movs	r0, #0
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	b016      	add	sp, #88	; 0x58
 800cadc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cae0 <__smakebuf_r>:
 800cae0:	898b      	ldrh	r3, [r1, #12]
 800cae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cae4:	079d      	lsls	r5, r3, #30
 800cae6:	4606      	mov	r6, r0
 800cae8:	460c      	mov	r4, r1
 800caea:	d507      	bpl.n	800cafc <__smakebuf_r+0x1c>
 800caec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800caf0:	6023      	str	r3, [r4, #0]
 800caf2:	6123      	str	r3, [r4, #16]
 800caf4:	2301      	movs	r3, #1
 800caf6:	6163      	str	r3, [r4, #20]
 800caf8:	b002      	add	sp, #8
 800cafa:	bd70      	pop	{r4, r5, r6, pc}
 800cafc:	466a      	mov	r2, sp
 800cafe:	ab01      	add	r3, sp, #4
 800cb00:	f7ff ffc9 	bl	800ca96 <__swhatbuf_r>
 800cb04:	9900      	ldr	r1, [sp, #0]
 800cb06:	4605      	mov	r5, r0
 800cb08:	4630      	mov	r0, r6
 800cb0a:	f7fb fcd5 	bl	80084b8 <_malloc_r>
 800cb0e:	b948      	cbnz	r0, 800cb24 <__smakebuf_r+0x44>
 800cb10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb14:	059a      	lsls	r2, r3, #22
 800cb16:	d4ef      	bmi.n	800caf8 <__smakebuf_r+0x18>
 800cb18:	f023 0303 	bic.w	r3, r3, #3
 800cb1c:	f043 0302 	orr.w	r3, r3, #2
 800cb20:	81a3      	strh	r3, [r4, #12]
 800cb22:	e7e3      	b.n	800caec <__smakebuf_r+0xc>
 800cb24:	4b0d      	ldr	r3, [pc, #52]	; (800cb5c <__smakebuf_r+0x7c>)
 800cb26:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb28:	89a3      	ldrh	r3, [r4, #12]
 800cb2a:	6020      	str	r0, [r4, #0]
 800cb2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb30:	81a3      	strh	r3, [r4, #12]
 800cb32:	9b00      	ldr	r3, [sp, #0]
 800cb34:	6120      	str	r0, [r4, #16]
 800cb36:	6163      	str	r3, [r4, #20]
 800cb38:	9b01      	ldr	r3, [sp, #4]
 800cb3a:	b15b      	cbz	r3, 800cb54 <__smakebuf_r+0x74>
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb42:	f000 f8a3 	bl	800cc8c <_isatty_r>
 800cb46:	b128      	cbz	r0, 800cb54 <__smakebuf_r+0x74>
 800cb48:	89a3      	ldrh	r3, [r4, #12]
 800cb4a:	f023 0303 	bic.w	r3, r3, #3
 800cb4e:	f043 0301 	orr.w	r3, r3, #1
 800cb52:	81a3      	strh	r3, [r4, #12]
 800cb54:	89a0      	ldrh	r0, [r4, #12]
 800cb56:	4305      	orrs	r5, r0
 800cb58:	81a5      	strh	r5, [r4, #12]
 800cb5a:	e7cd      	b.n	800caf8 <__smakebuf_r+0x18>
 800cb5c:	08008299 	.word	0x08008299

0800cb60 <memmove>:
 800cb60:	4288      	cmp	r0, r1
 800cb62:	b510      	push	{r4, lr}
 800cb64:	eb01 0402 	add.w	r4, r1, r2
 800cb68:	d902      	bls.n	800cb70 <memmove+0x10>
 800cb6a:	4284      	cmp	r4, r0
 800cb6c:	4623      	mov	r3, r4
 800cb6e:	d807      	bhi.n	800cb80 <memmove+0x20>
 800cb70:	1e43      	subs	r3, r0, #1
 800cb72:	42a1      	cmp	r1, r4
 800cb74:	d008      	beq.n	800cb88 <memmove+0x28>
 800cb76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb7e:	e7f8      	b.n	800cb72 <memmove+0x12>
 800cb80:	4601      	mov	r1, r0
 800cb82:	4402      	add	r2, r0
 800cb84:	428a      	cmp	r2, r1
 800cb86:	d100      	bne.n	800cb8a <memmove+0x2a>
 800cb88:	bd10      	pop	{r4, pc}
 800cb8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb92:	e7f7      	b.n	800cb84 <memmove+0x24>

0800cb94 <_realloc_r>:
 800cb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb96:	4607      	mov	r7, r0
 800cb98:	4614      	mov	r4, r2
 800cb9a:	460e      	mov	r6, r1
 800cb9c:	b921      	cbnz	r1, 800cba8 <_realloc_r+0x14>
 800cb9e:	4611      	mov	r1, r2
 800cba0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cba4:	f7fb bc88 	b.w	80084b8 <_malloc_r>
 800cba8:	b922      	cbnz	r2, 800cbb4 <_realloc_r+0x20>
 800cbaa:	f7ff fb75 	bl	800c298 <_free_r>
 800cbae:	4625      	mov	r5, r4
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbb4:	f000 f87a 	bl	800ccac <_malloc_usable_size_r>
 800cbb8:	42a0      	cmp	r0, r4
 800cbba:	d20f      	bcs.n	800cbdc <_realloc_r+0x48>
 800cbbc:	4621      	mov	r1, r4
 800cbbe:	4638      	mov	r0, r7
 800cbc0:	f7fb fc7a 	bl	80084b8 <_malloc_r>
 800cbc4:	4605      	mov	r5, r0
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d0f2      	beq.n	800cbb0 <_realloc_r+0x1c>
 800cbca:	4631      	mov	r1, r6
 800cbcc:	4622      	mov	r2, r4
 800cbce:	f7fb fc5c 	bl	800848a <memcpy>
 800cbd2:	4631      	mov	r1, r6
 800cbd4:	4638      	mov	r0, r7
 800cbd6:	f7ff fb5f 	bl	800c298 <_free_r>
 800cbda:	e7e9      	b.n	800cbb0 <_realloc_r+0x1c>
 800cbdc:	4635      	mov	r5, r6
 800cbde:	e7e7      	b.n	800cbb0 <_realloc_r+0x1c>

0800cbe0 <_raise_r>:
 800cbe0:	291f      	cmp	r1, #31
 800cbe2:	b538      	push	{r3, r4, r5, lr}
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	460d      	mov	r5, r1
 800cbe8:	d904      	bls.n	800cbf4 <_raise_r+0x14>
 800cbea:	2316      	movs	r3, #22
 800cbec:	6003      	str	r3, [r0, #0]
 800cbee:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf2:	bd38      	pop	{r3, r4, r5, pc}
 800cbf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cbf6:	b112      	cbz	r2, 800cbfe <_raise_r+0x1e>
 800cbf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbfc:	b94b      	cbnz	r3, 800cc12 <_raise_r+0x32>
 800cbfe:	4620      	mov	r0, r4
 800cc00:	f000 f830 	bl	800cc64 <_getpid_r>
 800cc04:	462a      	mov	r2, r5
 800cc06:	4601      	mov	r1, r0
 800cc08:	4620      	mov	r0, r4
 800cc0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc0e:	f000 b817 	b.w	800cc40 <_kill_r>
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d00a      	beq.n	800cc2c <_raise_r+0x4c>
 800cc16:	1c59      	adds	r1, r3, #1
 800cc18:	d103      	bne.n	800cc22 <_raise_r+0x42>
 800cc1a:	2316      	movs	r3, #22
 800cc1c:	6003      	str	r3, [r0, #0]
 800cc1e:	2001      	movs	r0, #1
 800cc20:	e7e7      	b.n	800cbf2 <_raise_r+0x12>
 800cc22:	2400      	movs	r4, #0
 800cc24:	4628      	mov	r0, r5
 800cc26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc2a:	4798      	blx	r3
 800cc2c:	2000      	movs	r0, #0
 800cc2e:	e7e0      	b.n	800cbf2 <_raise_r+0x12>

0800cc30 <raise>:
 800cc30:	4b02      	ldr	r3, [pc, #8]	; (800cc3c <raise+0xc>)
 800cc32:	4601      	mov	r1, r0
 800cc34:	6818      	ldr	r0, [r3, #0]
 800cc36:	f7ff bfd3 	b.w	800cbe0 <_raise_r>
 800cc3a:	bf00      	nop
 800cc3c:	20000014 	.word	0x20000014

0800cc40 <_kill_r>:
 800cc40:	b538      	push	{r3, r4, r5, lr}
 800cc42:	2300      	movs	r3, #0
 800cc44:	4d06      	ldr	r5, [pc, #24]	; (800cc60 <_kill_r+0x20>)
 800cc46:	4604      	mov	r4, r0
 800cc48:	4608      	mov	r0, r1
 800cc4a:	4611      	mov	r1, r2
 800cc4c:	602b      	str	r3, [r5, #0]
 800cc4e:	f7f4 ff36 	bl	8001abe <_kill>
 800cc52:	1c43      	adds	r3, r0, #1
 800cc54:	d102      	bne.n	800cc5c <_kill_r+0x1c>
 800cc56:	682b      	ldr	r3, [r5, #0]
 800cc58:	b103      	cbz	r3, 800cc5c <_kill_r+0x1c>
 800cc5a:	6023      	str	r3, [r4, #0]
 800cc5c:	bd38      	pop	{r3, r4, r5, pc}
 800cc5e:	bf00      	nop
 800cc60:	20003b38 	.word	0x20003b38

0800cc64 <_getpid_r>:
 800cc64:	f7f4 bf24 	b.w	8001ab0 <_getpid>

0800cc68 <_fstat_r>:
 800cc68:	b538      	push	{r3, r4, r5, lr}
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	4d06      	ldr	r5, [pc, #24]	; (800cc88 <_fstat_r+0x20>)
 800cc6e:	4604      	mov	r4, r0
 800cc70:	4608      	mov	r0, r1
 800cc72:	4611      	mov	r1, r2
 800cc74:	602b      	str	r3, [r5, #0]
 800cc76:	f7f4 ff80 	bl	8001b7a <_fstat>
 800cc7a:	1c43      	adds	r3, r0, #1
 800cc7c:	d102      	bne.n	800cc84 <_fstat_r+0x1c>
 800cc7e:	682b      	ldr	r3, [r5, #0]
 800cc80:	b103      	cbz	r3, 800cc84 <_fstat_r+0x1c>
 800cc82:	6023      	str	r3, [r4, #0]
 800cc84:	bd38      	pop	{r3, r4, r5, pc}
 800cc86:	bf00      	nop
 800cc88:	20003b38 	.word	0x20003b38

0800cc8c <_isatty_r>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	2300      	movs	r3, #0
 800cc90:	4d05      	ldr	r5, [pc, #20]	; (800cca8 <_isatty_r+0x1c>)
 800cc92:	4604      	mov	r4, r0
 800cc94:	4608      	mov	r0, r1
 800cc96:	602b      	str	r3, [r5, #0]
 800cc98:	f7f4 ff7e 	bl	8001b98 <_isatty>
 800cc9c:	1c43      	adds	r3, r0, #1
 800cc9e:	d102      	bne.n	800cca6 <_isatty_r+0x1a>
 800cca0:	682b      	ldr	r3, [r5, #0]
 800cca2:	b103      	cbz	r3, 800cca6 <_isatty_r+0x1a>
 800cca4:	6023      	str	r3, [r4, #0]
 800cca6:	bd38      	pop	{r3, r4, r5, pc}
 800cca8:	20003b38 	.word	0x20003b38

0800ccac <_malloc_usable_size_r>:
 800ccac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccb0:	1f18      	subs	r0, r3, #4
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	bfbc      	itt	lt
 800ccb6:	580b      	ldrlt	r3, [r1, r0]
 800ccb8:	18c0      	addlt	r0, r0, r3
 800ccba:	4770      	bx	lr

0800ccbc <_init>:
 800ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccbe:	bf00      	nop
 800ccc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccc2:	bc08      	pop	{r3}
 800ccc4:	469e      	mov	lr, r3
 800ccc6:	4770      	bx	lr

0800ccc8 <_fini>:
 800ccc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccca:	bf00      	nop
 800cccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccce:	bc08      	pop	{r3}
 800ccd0:	469e      	mov	lr, r3
 800ccd2:	4770      	bx	lr
