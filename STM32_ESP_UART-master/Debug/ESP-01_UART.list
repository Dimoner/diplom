
ESP-01_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0a0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  0800c1b0  0800c1b0  0001c1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c96c  0800c96c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c96c  0800c96c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c96c  0800c96c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c96c  0800c96c  0001c96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c970  0800c970  0001c970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038fc  200001e4  0800cb58  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ae0  0800cb58  00023ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fad5  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004496  00000000  00000000  0003fce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00044178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  000457e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001397b  00000000  00000000  00046c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000747b  00000000  00000000  0005a60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00061a86  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000070d0  00000000  00000000  00061adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c198 	.word	0x0800c198

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800c198 	.word	0x0800c198

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	460c      	mov	r4, r1
 8000b80:	4605      	mov	r5, r0
 8000b82:	4621      	mov	r1, r4
 8000b84:	4628      	mov	r0, r5
 8000b86:	2200      	movs	r2, #0
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f7ff ff21 	bl	80009d0 <__aeabi_dcmplt>
 8000b8e:	b928      	cbnz	r0, 8000b9c <__aeabi_d2lz+0x20>
 8000b90:	4628      	mov	r0, r5
 8000b92:	4621      	mov	r1, r4
 8000b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b98:	f000 b80a 	b.w	8000bb0 <__aeabi_d2ulz>
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ba2:	f000 f805 	bl	8000bb0 <__aeabi_d2ulz>
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bac:	bd38      	pop	{r3, r4, r5, pc}
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2ulz>:
 8000bb0:	b5d0      	push	{r4, r6, r7, lr}
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <__aeabi_d2ulz+0x34>)
 8000bb6:	4606      	mov	r6, r0
 8000bb8:	460f      	mov	r7, r1
 8000bba:	f7ff fc97 	bl	80004ec <__aeabi_dmul>
 8000bbe:	f7ff ff6d 	bl	8000a9c <__aeabi_d2uiz>
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	f7ff fc18 	bl	80003f8 <__aeabi_ui2d>
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <__aeabi_d2ulz+0x38>)
 8000bcc:	f7ff fc8e 	bl	80004ec <__aeabi_dmul>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	4639      	mov	r1, r7
 8000bd8:	f7ff fad0 	bl	800017c <__aeabi_dsub>
 8000bdc:	f7ff ff5e 	bl	8000a9c <__aeabi_d2uiz>
 8000be0:	4621      	mov	r1, r4
 8000be2:	bdd0      	pop	{r4, r6, r7, pc}
 8000be4:	3df00000 	.word	0x3df00000
 8000be8:	41f00000 	.word	0x41f00000

08000bec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_ADC1_Init+0x74>)
 8000bfe:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <MX_ADC1_Init+0x78>)
 8000c00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_ADC1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <MX_ADC1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_ADC1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_ADC1_Init+0x74>)
 8000c16:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <MX_ADC1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_ADC1_Init+0x74>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <MX_ADC1_Init+0x74>)
 8000c2a:	f001 f901 	bl	8001e30 <HAL_ADC_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c34:	f000 fba6 	bl	8001384 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_ADC1_Init+0x74>)
 8000c4a:	f001 fb85 	bl	8002358 <HAL_ADC_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c54:	f000 fb96 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200036e4 	.word	0x200036e4
 8000c64:	40012400 	.word	0x40012400

08000c68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <HAL_ADC_MspInit+0x7c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d129      	bne.n	8000cdc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <HAL_ADC_MspInit+0x80>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a16      	ldr	r2, [pc, #88]	; (8000ce8 <HAL_ADC_MspInit+0x80>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <HAL_ADC_MspInit+0x80>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_ADC_MspInit+0x80>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_ADC_MspInit+0x80>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_ADC_MspInit+0x80>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cb8:	2310      	movs	r3, #16
 8000cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4809      	ldr	r0, [pc, #36]	; (8000cec <HAL_ADC_MspInit+0x84>)
 8000cc8:	f001 fe8a 	bl	80029e0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2105      	movs	r1, #5
 8000cd0:	2012      	movs	r0, #18
 8000cd2:	f001 fe56 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000cd6:	2012      	movs	r0, #18
 8000cd8:	f001 fe6f 	bl	80029ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40012400 	.word	0x40012400
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010800 	.word	0x40010800

08000cf0 <Error_Message>:
/*
 * Эта функция нужна для отладки кода. При вызове
 * отправляет по UART сообщение об ошибке с путем к файлу
 * и номером строки, где данная функция была вызвана
 */
void Error_Message(uint8_t *file, uint32_t line) {
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b0b7      	sub	sp, #220	; 0xdc
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
	char buf[200] = { 0 };
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	22c4      	movs	r2, #196	; 0xc4
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f006 fed1 	bl	8007aae <memset>
	sprintf(buf, "\r Exception: Wrong parameters value: file %s on line %d\r\n",
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	f107 000c 	add.w	r0, r7, #12
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	491d      	ldr	r1, [pc, #116]	; (8000d8c <Error_Message+0x9c>)
 8000d16:	f007 fe1d 	bl	8008954 <siprintf>
			file, (int) line);
	while (HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf),
 8000d1a:	bf00      	nop
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fa1f 	bl	8000164 <strlen>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b29c      	uxth	r4, r3
			10 * strlen(buf)) != HAL_OK)
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fa18 	bl	8000164 <strlen>
 8000d34:	4602      	mov	r2, r0
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
	while (HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf),
 8000d3e:	f107 010c 	add.w	r1, r7, #12
 8000d42:	4622      	mov	r2, r4
 8000d44:	4812      	ldr	r0, [pc, #72]	; (8000d90 <Error_Message+0xa0>)
 8000d46:	f003 fb80 	bl	800444a <HAL_UART_Transmit>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1e5      	bne.n	8000d1c <Error_Message+0x2c>
		;
	int tick = HAL_GetTick();
 8000d50:	f001 f840 	bl	8001dd4 <HAL_GetTick>
 8000d54:	4603      	mov	r3, r0
 8000d56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	while ((HAL_GetTick() - tick) < 5000) {
 8000d5a:	e007      	b.n	8000d6c <Error_Message+0x7c>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <Error_Message+0xa4>)
 8000d62:	f001 ffd9 	bl	8002d18 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000d66:	2064      	movs	r0, #100	; 0x64
 8000d68:	f001 f83e 	bl	8001de8 <HAL_Delay>
	while ((HAL_GetTick() - tick) < 5000) {
 8000d6c:	f001 f832 	bl	8001dd4 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d9ed      	bls.n	8000d5c <Error_Message+0x6c>
	}
	HAL_NVIC_SystemReset();
 8000d80:	f001 fe29 	bl	80029d6 <HAL_NVIC_SystemReset>
}
 8000d84:	bf00      	nop
 8000d86:	37dc      	adds	r7, #220	; 0xdc
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd90      	pop	{r4, r7, pc}
 8000d8c:	0800c208 	.word	0x0800c208
 8000d90:	20003a48 	.word	0x20003a48
 8000d94:	40011000 	.word	0x40011000

08000d98 <vApplicationStackOverflowHook>:

/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of myBinarySem01 */
	myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000db0:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <MX_FREERTOS_Init+0x78>)
 8000db2:	2101      	movs	r1, #1
 8000db4:	2001      	movs	r0, #1
 8000db6:	f003 fec7 	bl	8004b48 <osSemaphoreNew>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <MX_FREERTOS_Init+0x7c>)
 8000dbe:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of myQueue01 */
	myQueue01Handle = osMessageQueueNew(16, sizeof(uint8_t),
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <MX_FREERTOS_Init+0x80>)
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	2010      	movs	r0, #16
 8000dc6:	f003 ff5b 	bl	8004c80 <osMessageQueueNew>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <MX_FREERTOS_Init+0x84>)
 8000dce:	6013      	str	r3, [r2, #0]
			&myQueue01_attributes);

	/* creation of myQueue02 */
	myQueue02Handle = osMessageQueueNew(16, sizeof(uint8_t),
 8000dd0:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <MX_FREERTOS_Init+0x88>)
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	2010      	movs	r0, #16
 8000dd6:	f003 ff53 	bl	8004c80 <osMessageQueueNew>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <MX_FREERTOS_Init+0x8c>)
 8000dde:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000de0:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <MX_FREERTOS_Init+0x90>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4816      	ldr	r0, [pc, #88]	; (8000e40 <MX_FREERTOS_Init+0x94>)
 8000de6:	f003 fda3 	bl	8004930 <osThreadNew>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <MX_FREERTOS_Init+0x98>)
 8000dee:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of myTaskUART */
	myTaskUARTHandle = osThreadNew(StartTaskUART, NULL, &myTaskUART_attributes);
 8000df0:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <MX_FREERTOS_Init+0x9c>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4815      	ldr	r0, [pc, #84]	; (8000e4c <MX_FREERTOS_Init+0xa0>)
 8000df6:	f003 fd9b 	bl	8004930 <osThreadNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <MX_FREERTOS_Init+0xa4>)
 8000dfe:	6013      	str	r3, [r2, #0]

	/* creation of myTaskMotor */
	myTaskMotorHandle = osThreadNew(StartTaskMOTOR, NULL,
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <MX_FREERTOS_Init+0xa8>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4814      	ldr	r0, [pc, #80]	; (8000e58 <MX_FREERTOS_Init+0xac>)
 8000e06:	f003 fd93 	bl	8004930 <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <MX_FREERTOS_Init+0xb0>)
 8000e0e:	6013      	str	r3, [r2, #0]
			&myTaskMotor_attributes);

	/* creation of myTaskPMT */
	myTaskPMTHandle = osThreadNew(StartTaskPMT, NULL, &myTaskPMT_attributes);
 8000e10:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <MX_FREERTOS_Init+0xb4>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4813      	ldr	r0, [pc, #76]	; (8000e64 <MX_FREERTOS_Init+0xb8>)
 8000e16:	f003 fd8b 	bl	8004930 <osThreadNew>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <MX_FREERTOS_Init+0xbc>)
 8000e1e:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	0800c48c 	.word	0x0800c48c
 8000e28:	20003840 	.word	0x20003840
 8000e2c:	0800c45c 	.word	0x0800c45c
 8000e30:	20003844 	.word	0x20003844
 8000e34:	0800c474 	.word	0x0800c474
 8000e38:	20003848 	.word	0x20003848
 8000e3c:	0800c3cc 	.word	0x0800c3cc
 8000e40:	08000e6d 	.word	0x08000e6d
 8000e44:	20003724 	.word	0x20003724
 8000e48:	0800c3f0 	.word	0x0800c3f0
 8000e4c:	08000e7d 	.word	0x08000e7d
 8000e50:	20003740 	.word	0x20003740
 8000e54:	0800c414 	.word	0x0800c414
 8000e58:	08000ee5 	.word	0x08000ee5
 8000e5c:	2000372c 	.word	0x2000372c
 8000e60:	0800c438 	.word	0x0800c438
 8000e64:	08001025 	.word	0x08001025
 8000e68:	20003744 	.word	0x20003744

08000e6c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f003 fe05 	bl	8004a84 <osDelay>
 8000e7a:	e7fb      	b.n	8000e74 <StartDefaultTask+0x8>

08000e7c <StartTaskUART>:
 * @brief Function implementing the myTaskUART thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskUART */
void StartTaskUART(void *argument) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskUART */

	/* Infinite loop */
	for (;;) {
		if (receiveSymbol() == OK) {
 8000e84:	f000 fe18 	bl	8001ab8 <receiveSymbol>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d120      	bne.n	8000ed0 <StartTaskUART+0x54>
			if (checkStartOfMessage() == OK) {
 8000e8e:	f000 fe29 	bl	8001ae4 <checkStartOfMessage>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d116      	bne.n	8000ec6 <StartTaskUART+0x4a>
				if (receiveMessage() == OK) {
 8000e98:	f000 fe34 	bl	8001b04 <receiveMessage>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10c      	bne.n	8000ebc <StartTaskUART+0x40>
					if (parseMessage() == OK) {
 8000ea2:	f000 fe5b 	bl	8001b5c <parseMessage>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <StartTaskUART+0x36>
						if (controlFunction() == OK) {
 8000eac:	f000 feb0 	bl	8001c10 <controlFunction>
 8000eb0:	e012      	b.n	8000ed8 <StartTaskUART+0x5c>

						}
					} else
						Error_Message((uint8_t*) __FILE__, __LINE__);
 8000eb2:	21dc      	movs	r1, #220	; 0xdc
 8000eb4:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <StartTaskUART+0x64>)
 8000eb6:	f7ff ff1b 	bl	8000cf0 <Error_Message>
 8000eba:	e00d      	b.n	8000ed8 <StartTaskUART+0x5c>
				} else
					Error_Message((uint8_t*) __FILE__, __LINE__);
 8000ebc:	21de      	movs	r1, #222	; 0xde
 8000ebe:	4808      	ldr	r0, [pc, #32]	; (8000ee0 <StartTaskUART+0x64>)
 8000ec0:	f7ff ff16 	bl	8000cf0 <Error_Message>
 8000ec4:	e008      	b.n	8000ed8 <StartTaskUART+0x5c>
			} else
				Error_Message((uint8_t*) __FILE__, __LINE__);
 8000ec6:	21e0      	movs	r1, #224	; 0xe0
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <StartTaskUART+0x64>)
 8000eca:	f7ff ff11 	bl	8000cf0 <Error_Message>
 8000ece:	e003      	b.n	8000ed8 <StartTaskUART+0x5c>
		} else
			Error_Message((uint8_t*) __FILE__, __LINE__);
 8000ed0:	21e2      	movs	r1, #226	; 0xe2
 8000ed2:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <StartTaskUART+0x64>)
 8000ed4:	f7ff ff0c 	bl	8000cf0 <Error_Message>
		osDelay(1);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f003 fdd3 	bl	8004a84 <osDelay>
		if (receiveSymbol() == OK) {
 8000ede:	e7d1      	b.n	8000e84 <StartTaskUART+0x8>
 8000ee0:	0800c244 	.word	0x0800c244

08000ee4 <StartTaskMOTOR>:
 * @brief Function implementing the myTaskMotor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskMOTOR */
void StartTaskMOTOR(void *argument) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskMOTOR */
	MOTOR_StartFlag_ = 0;
 8000eec:	4b49      	ldr	r3, [pc, #292]	; (8001014 <StartTaskMOTOR+0x130>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
	int16_t diff = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	81fb      	strh	r3, [r7, #14]
		/*
		 * В зависимости от значения принятого угла относительно
		 * текущего выставляем пин DIRECTION, подаем питание на пин ENABLE
		 * и подаем импульсы на пин STEP для вращения
		 */
		if (MOTOR_StartFlag_) {
 8000ef6:	4b47      	ldr	r3, [pc, #284]	; (8001014 <StartTaskMOTOR+0x130>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 8085 	beq.w	800100a <StartTaskMOTOR+0x126>
			diff = newMotorRotationAngle_ - oldMotorRotationAngle_;
 8000f00:	4b45      	ldr	r3, [pc, #276]	; (8001018 <StartTaskMOTOR+0x134>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b45      	ldr	r3, [pc, #276]	; (800101c <StartTaskMOTOR+0x138>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	81fb      	strh	r3, [r7, #14]
			if (diff != 0 && abs(diff) != 200) {
 8000f12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d077      	beq.n	800100a <StartTaskMOTOR+0x126>
 8000f1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bfb8      	it	lt
 8000f22:	425b      	neglt	r3, r3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	2bc8      	cmp	r3, #200	; 0xc8
 8000f28:	d06f      	beq.n	800100a <StartTaskMOTOR+0x126>
				if (diff < -100) {
 8000f2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f2e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000f32:	da0c      	bge.n	8000f4e <StartTaskMOTOR+0x6a>
					diff += 200;
 8000f34:	89fb      	ldrh	r3, [r7, #14]
 8000f36:	33c8      	adds	r3, #200	; 0xc8
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	81fb      	strh	r3, [r7, #14]
					HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4837      	ldr	r0, [pc, #220]	; (8001020 <StartTaskMOTOR+0x13c>)
 8000f42:	f001 fed1 	bl	8002ce8 <HAL_GPIO_WritePin>
					osDelayUntil(2);
 8000f46:	2002      	movs	r0, #2
 8000f48:	f003 fdca 	bl	8004ae0 <osDelayUntil>
 8000f4c:	e033      	b.n	8000fb6 <StartTaskMOTOR+0xd2>
				} else if (diff > 100) {
 8000f4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f52:	2b64      	cmp	r3, #100	; 0x64
 8000f54:	dd0d      	ble.n	8000f72 <StartTaskMOTOR+0x8e>
					diff = 200 - diff;
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	81fb      	strh	r3, [r7, #14]
					HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2101      	movs	r1, #1
 8000f64:	482e      	ldr	r0, [pc, #184]	; (8001020 <StartTaskMOTOR+0x13c>)
 8000f66:	f001 febf 	bl	8002ce8 <HAL_GPIO_WritePin>
					osDelayUntil(2);
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f003 fdb8 	bl	8004ae0 <osDelayUntil>
 8000f70:	e021      	b.n	8000fb6 <StartTaskMOTOR+0xd2>
				} else if (diff > 0 && diff <= 100) {
 8000f72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	dd0c      	ble.n	8000f94 <StartTaskMOTOR+0xb0>
 8000f7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f7e:	2b64      	cmp	r3, #100	; 0x64
 8000f80:	dc08      	bgt.n	8000f94 <StartTaskMOTOR+0xb0>
					HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2101      	movs	r1, #1
 8000f86:	4826      	ldr	r0, [pc, #152]	; (8001020 <StartTaskMOTOR+0x13c>)
 8000f88:	f001 feae 	bl	8002ce8 <HAL_GPIO_WritePin>
					osDelayUntil(2);
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f003 fda7 	bl	8004ae0 <osDelayUntil>
 8000f92:	e010      	b.n	8000fb6 <StartTaskMOTOR+0xd2>
				} else if (diff < 0 && diff >= -100) {
 8000f94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	da0c      	bge.n	8000fb6 <StartTaskMOTOR+0xd2>
 8000f9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fa0:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000fa4:	db07      	blt.n	8000fb6 <StartTaskMOTOR+0xd2>
					HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2101      	movs	r1, #1
 8000faa:	481d      	ldr	r0, [pc, #116]	; (8001020 <StartTaskMOTOR+0x13c>)
 8000fac:	f001 fe9c 	bl	8002ce8 <HAL_GPIO_WritePin>
					osDelayUntil(2);
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f003 fd95 	bl	8004ae0 <osDelayUntil>
				}
				for (uint8_t i = 0; i < diff; ++i) {
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	737b      	strb	r3, [r7, #13]
 8000fba:	e012      	b.n	8000fe2 <StartTaskMOTOR+0xfe>
					HAL_GPIO_WritePin(MOTOR_Port, STEP_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	4817      	ldr	r0, [pc, #92]	; (8001020 <StartTaskMOTOR+0x13c>)
 8000fc2:	f001 fe91 	bl	8002ce8 <HAL_GPIO_WritePin>
					osDelayUntil(2);
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f003 fd8a 	bl	8004ae0 <osDelayUntil>
					HAL_GPIO_WritePin(MOTOR_Port, STEP_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4813      	ldr	r0, [pc, #76]	; (8001020 <StartTaskMOTOR+0x13c>)
 8000fd2:	f001 fe89 	bl	8002ce8 <HAL_GPIO_WritePin>
					osDelayUntil(2);
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f003 fd82 	bl	8004ae0 <osDelayUntil>
				for (uint8_t i = 0; i < diff; ++i) {
 8000fdc:	7b7b      	ldrb	r3, [r7, #13]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	737b      	strb	r3, [r7, #13]
 8000fe2:	7b7a      	ldrb	r2, [r7, #13]
 8000fe4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbe7      	blt.n	8000fbc <StartTaskMOTOR+0xd8>
				}
				HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2101      	movs	r1, #1
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <StartTaskMOTOR+0x13c>)
 8000ff2:	f001 fe79 	bl	8002ce8 <HAL_GPIO_WritePin>
				osDelayUntil(2);
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	f003 fd72 	bl	8004ae0 <osDelayUntil>
				/*
				 * Сохраняем значение нового угла поворота
				 */
				oldMotorRotationAngle_ = newMotorRotationAngle_;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <StartTaskMOTOR+0x134>)
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <StartTaskMOTOR+0x138>)
 8001002:	701a      	strb	r2, [r3, #0]
				MOTOR_StartFlag_ = 0;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <StartTaskMOTOR+0x130>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
			}
		}
		osDelay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f003 fd3a 	bl	8004a84 <osDelay>
		if (MOTOR_StartFlag_) {
 8001010:	e771      	b.n	8000ef6 <StartTaskMOTOR+0x12>
 8001012:	bf00      	nop
 8001014:	20003723 	.word	0x20003723
 8001018:	20003812 	.word	0x20003812
 800101c:	20003728 	.word	0x20003728
 8001020:	40010c00 	.word	0x40010c00

08001024 <StartTaskPMT>:
 * @brief Function implementing the myTaskPMT thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskPMT */
void StartTaskPMT(void *argument) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskPMT */
	uint16_t ADC_value = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	82fb      	strh	r3, [r7, #22]
	uint8_t averageFactor = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	757b      	strb	r3, [r7, #21]
	uint16_t ADC_oldValue = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	827b      	strh	r3, [r7, #18]
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001038:	4833      	ldr	r0, [pc, #204]	; (8001108 <StartTaskPMT+0xe4>)
 800103a:	f001 fb21 	bl	8002680 <HAL_ADCEx_Calibration_Start>

	/* Infinite loop */

	for (;;) {
		if (ADC_StartFlag_) {
 800103e:	4b33      	ldr	r3, [pc, #204]	; (800110c <StartTaskPMT+0xe8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d03c      	beq.n	80010c0 <StartTaskPMT+0x9c>

			HAL_GPIO_WritePin(Relay_OUT_GPIO_Port, Relay_OUT_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	2120      	movs	r1, #32
 800104a:	4831      	ldr	r0, [pc, #196]	; (8001110 <StartTaskPMT+0xec>)
 800104c:	f001 fe4c 	bl	8002ce8 <HAL_GPIO_WritePin>
			uint32_t currentTime = HAL_GetTick();
 8001050:	f000 fec0 	bl	8001dd4 <HAL_GetTick>
 8001054:	60f8      	str	r0, [r7, #12]
			do {
				HAL_ADC_Start(&hadc1);
 8001056:	482c      	ldr	r0, [pc, #176]	; (8001108 <StartTaskPMT+0xe4>)
 8001058:	f000 ffc2 	bl	8001fe0 <HAL_ADC_Start>
				ADC_value = (uint16_t) HAL_ADC_GetValue(&hadc1);
 800105c:	482a      	ldr	r0, [pc, #168]	; (8001108 <StartTaskPMT+0xe4>)
 800105e:	f001 f899 	bl	8002194 <HAL_ADC_GetValue>
 8001062:	4603      	mov	r3, r0
 8001064:	82fb      	strh	r3, [r7, #22]
				HAL_ADC_Stop(&hadc1);
 8001066:	4828      	ldr	r0, [pc, #160]	; (8001108 <StartTaskPMT+0xe4>)
 8001068:	f001 f868 	bl	800213c <HAL_ADC_Stop>
				if (averageFactor > 0) {
 800106c:	7d7b      	ldrb	r3, [r7, #21]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00c      	beq.n	800108c <StartTaskPMT+0x68>
					ADC_oldValue = ADC_value;
 8001072:	8afb      	ldrh	r3, [r7, #22]
 8001074:	827b      	strh	r3, [r7, #18]
					ADC_value = (uint16_t) ((ADC_oldValue * (averageFactor - 1)
 8001076:	8a7b      	ldrh	r3, [r7, #18]
 8001078:	7d7a      	ldrb	r2, [r7, #21]
 800107a:	3a01      	subs	r2, #1
 800107c:	fb02 f203 	mul.w	r2, r2, r3
							+ ADC_value) / averageFactor);
 8001080:	8afb      	ldrh	r3, [r7, #22]
 8001082:	441a      	add	r2, r3
 8001084:	7d7b      	ldrb	r3, [r7, #21]
 8001086:	fb92 f3f3 	sdiv	r3, r2, r3
					ADC_value = (uint16_t) ((ADC_oldValue * (averageFactor - 1)
 800108a:	82fb      	strh	r3, [r7, #22]
				}
			} while (HAL_GetTick() - currentTime < 1000);
 800108c:	f000 fea2 	bl	8001dd4 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800109a:	d3dc      	bcc.n	8001056 <StartTaskPMT+0x32>
			sprintf(PMT_State_, "PMT_ADC=%d%c", ADC_value, '\0');
 800109c:	8afa      	ldrh	r2, [r7, #22]
 800109e:	2300      	movs	r3, #0
 80010a0:	491c      	ldr	r1, [pc, #112]	; (8001114 <StartTaskPMT+0xf0>)
 80010a2:	481d      	ldr	r0, [pc, #116]	; (8001118 <StartTaskPMT+0xf4>)
 80010a4:	f007 fc56 	bl	8008954 <siprintf>
			if (HAL_UART_Transmit(&huart1, (uint8_t*) &PMT_State_,
					strlen(PMT_State_), 1000) == HAL_OK) {
 80010a8:	481b      	ldr	r0, [pc, #108]	; (8001118 <StartTaskPMT+0xf4>)
 80010aa:	f7ff f85b 	bl	8000164 <strlen>
 80010ae:	4603      	mov	r3, r0
			if (HAL_UART_Transmit(&huart1, (uint8_t*) &PMT_State_,
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	4918      	ldr	r1, [pc, #96]	; (8001118 <StartTaskPMT+0xf4>)
 80010b8:	4818      	ldr	r0, [pc, #96]	; (800111c <StartTaskPMT+0xf8>)
 80010ba:	f003 f9c6 	bl	800444a <HAL_UART_Transmit>
 80010be:	e01e      	b.n	80010fe <StartTaskPMT+0xda>
			}
		} else if (TIM_StartFlag_) {
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <StartTaskPMT+0xfc>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d01a      	beq.n	80010fe <StartTaskPMT+0xda>
			HAL_TIM_Base_Start(&htim2);
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <StartTaskPMT+0x100>)
 80010ca:	f002 fc53 	bl	8003974 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start(&htim3);
 80010ce:	4816      	ldr	r0, [pc, #88]	; (8001128 <StartTaskPMT+0x104>)
 80010d0:	f002 fc50 	bl	8003974 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim1);
 80010d4:	4815      	ldr	r0, [pc, #84]	; (800112c <StartTaskPMT+0x108>)
 80010d6:	f002 fc97 	bl	8003a08 <HAL_TIM_Base_Start_IT>
			sprintf(PMT_State_, "PMT_TIM=%d%c", freq_, '\0');
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <StartTaskPMT+0x10c>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	2300      	movs	r3, #0
 80010e0:	4914      	ldr	r1, [pc, #80]	; (8001134 <StartTaskPMT+0x110>)
 80010e2:	480d      	ldr	r0, [pc, #52]	; (8001118 <StartTaskPMT+0xf4>)
 80010e4:	f007 fc36 	bl	8008954 <siprintf>
			if (HAL_UART_Transmit(&huart1, (uint8_t*) &PMT_State_,
					strlen(PMT_State_), 1000) == HAL_OK) {
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <StartTaskPMT+0xf4>)
 80010ea:	f7ff f83b 	bl	8000164 <strlen>
 80010ee:	4603      	mov	r3, r0
			if (HAL_UART_Transmit(&huart1, (uint8_t*) &PMT_State_,
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <StartTaskPMT+0xf4>)
 80010f8:	4808      	ldr	r0, [pc, #32]	; (800111c <StartTaskPMT+0xf8>)
 80010fa:	f003 f9a6 	bl	800444a <HAL_UART_Transmit>
			}
		}
		osDelay(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f003 fcc0 	bl	8004a84 <osDelay>
		if (ADC_StartFlag_) {
 8001104:	e79b      	b.n	800103e <StartTaskPMT+0x1a>
 8001106:	bf00      	nop
 8001108:	200036e4 	.word	0x200036e4
 800110c:	20003811 	.word	0x20003811
 8001110:	40010800 	.word	0x40010800
 8001114:	0800c25c 	.word	0x0800c25c
 8001118:	2000382c 	.word	0x2000382c
 800111c:	20003a48 	.word	0x20003a48
 8001120:	20003924 	.word	0x20003924
 8001124:	20003a00 	.word	0x20003a00
 8001128:	20003970 	.word	0x20003970
 800112c:	200039b8 	.word	0x200039b8
 8001130:	20003828 	.word	0x20003828
 8001134:	0800c26c 	.word	0x0800c26c

08001138 <HAL_TIM_PeriodElapsedCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
//Функция-обработчик прерываний таймеров
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a11      	ldr	r2, [pc, #68]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d119      	bne.n	800117c <HAL_TIM_PeriodElapsedCallback+0x44>
		uint16_t TIM2_count = __HAL_TIM_GET_COUNTER(&htim2);
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	81fb      	strh	r3, [r7, #14]
		//Значение счетчика таймера TIM2
		//(Количество последних подсчитанных
		//импульсов к моменту прерывания)
		uint16_t TIM2_overflows = __HAL_TIM_GET_COUNTER(&htim3);
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	81bb      	strh	r3, [r7, #12]
		//Значение счетчика таймера TIM3
		freq_ = TIM2_count + (TIM2_overflows * 65535) + TIM2_overflows;
 8001158:	89f9      	ldrh	r1, [r7, #14]
 800115a:	89ba      	ldrh	r2, [r7, #12]
 800115c:	4613      	mov	r3, r2
 800115e:	041b      	lsls	r3, r3, #16
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	18ca      	adds	r2, r1, r3
 8001164:	89bb      	ldrh	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800116a:	6013      	str	r3, [r2, #0]
//Вычисление частоты
//Установка флага окончания измерения частоты
		__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
//Обнуление счетчиков таймеров 2 и 3
		__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200039b8 	.word	0x200039b8
 800118c:	20003a00 	.word	0x20003a00
 8001190:	20003970 	.word	0x20003970
 8001194:	20003828 	.word	0x20003828

08001198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ac:	4b37      	ldr	r3, [pc, #220]	; (800128c <MX_GPIO_Init+0xf4>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a36      	ldr	r2, [pc, #216]	; (800128c <MX_GPIO_Init+0xf4>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b34      	ldr	r3, [pc, #208]	; (800128c <MX_GPIO_Init+0xf4>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c4:	4b31      	ldr	r3, [pc, #196]	; (800128c <MX_GPIO_Init+0xf4>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a30      	ldr	r2, [pc, #192]	; (800128c <MX_GPIO_Init+0xf4>)
 80011ca:	f043 0320 	orr.w	r3, r3, #32
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b2e      	ldr	r3, [pc, #184]	; (800128c <MX_GPIO_Init+0xf4>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0320 	and.w	r3, r3, #32
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b2b      	ldr	r3, [pc, #172]	; (800128c <MX_GPIO_Init+0xf4>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a2a      	ldr	r2, [pc, #168]	; (800128c <MX_GPIO_Init+0xf4>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <MX_GPIO_Init+0xf4>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <MX_GPIO_Init+0xf4>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a24      	ldr	r2, [pc, #144]	; (800128c <MX_GPIO_Init+0xf4>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <MX_GPIO_Init+0xf4>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001212:	481f      	ldr	r0, [pc, #124]	; (8001290 <MX_GPIO_Init+0xf8>)
 8001214:	f001 fd68 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|Relay_OUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2164      	movs	r1, #100	; 0x64
 800121c:	481d      	ldr	r0, [pc, #116]	; (8001294 <MX_GPIO_Init+0xfc>)
 800121e:	f001 fd63 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2103      	movs	r1, #3
 8001226:	481c      	ldr	r0, [pc, #112]	; (8001298 <MX_GPIO_Init+0x100>)
 8001228:	f001 fd5e 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800122c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2302      	movs	r3, #2
 800123c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	4619      	mov	r1, r3
 8001244:	4812      	ldr	r0, [pc, #72]	; (8001290 <MX_GPIO_Init+0xf8>)
 8001246:	f001 fbcb 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|Relay_OUT_Pin|LED2_Pin;
 800124a:	2364      	movs	r3, #100	; 0x64
 800124c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2302      	movs	r3, #2
 8001258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	; (8001294 <MX_GPIO_Init+0xfc>)
 8001262:	f001 fbbd 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin;
 8001266:	2303      	movs	r3, #3
 8001268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2302      	movs	r3, #2
 8001274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4619      	mov	r1, r3
 800127c:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_GPIO_Init+0x100>)
 800127e:	f001 fbaf 	bl	80029e0 <HAL_GPIO_Init>

}
 8001282:	bf00      	nop
 8001284:	3720      	adds	r7, #32
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	40011000 	.word	0x40011000
 8001294:	40010800 	.word	0x40010800
 8001298:	40010c00 	.word	0x40010c00

0800129c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a0:	f000 fd82 	bl	8001da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a4:	f000 f813 	bl	80012ce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a8:	f7ff ff76 	bl	8001198 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012ac:	f000 fb68 	bl	8001980 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80012b0:	f7ff fc9c 	bl	8000bec <MX_ADC1_Init>
  MX_TIM1_Init();
 80012b4:	f000 f9ec 	bl	8001690 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012b8:	f000 fa44 	bl	8001744 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012bc:	f000 faac 	bl	8001818 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80012c0:	f003 fad0 	bl	8004864 <osKernelInitialize>
  MX_FREERTOS_Init();
 80012c4:	f7ff fd72 	bl	8000dac <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80012c8:	f003 fafe 	bl	80048c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
 80012cc:	e7fe      	b.n	80012cc <main+0x30>

080012ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b094      	sub	sp, #80	; 0x50
 80012d2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d8:	2228      	movs	r2, #40	; 0x28
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f006 fbe6 	bl	8007aae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012fe:	2301      	movs	r3, #1
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130c:	2301      	movs	r3, #1
 800130e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001310:	2302      	movs	r3, #2
 8001312:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001318:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800131a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800131e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001324:	4618      	mov	r0, r3
 8001326:	f001 fd11 	bl	8002d4c <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001330:	f000 f828 	bl	8001384 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	230f      	movs	r3, #15
 8001336:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001338:	2302      	movs	r3, #2
 800133a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001344:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2102      	movs	r1, #2
 8001350:	4618      	mov	r0, r3
 8001352:	f001 ff7b 	bl	800324c <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800135c:	f000 f812 	bl	8001384 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001360:	2302      	movs	r3, #2
 8001362:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001368:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4618      	mov	r0, r3
 800136e:	f002 f937 	bl	80035e0 <HAL_RCCEx_PeriphCLKConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001378:	f000 f804 	bl	8001384 <Error_Handler>
  }
}
 800137c:	bf00      	nop
 800137e:	3750      	adds	r7, #80	; 0x50
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001388:	b672      	cpsid	i
}
 800138a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1)
 800138c:	e7fe      	b.n	800138c <Error_Handler+0x8>
	...

08001390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_MspInit+0x68>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <HAL_MspInit+0x68>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6193      	str	r3, [r2, #24]
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_MspInit+0x68>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_MspInit+0x68>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <HAL_MspInit+0x68>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	61d3      	str	r3, [r2, #28]
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <HAL_MspInit+0x68>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	210f      	movs	r1, #15
 80013ca:	f06f 0001 	mvn.w	r0, #1
 80013ce:	f001 fad8 	bl	8002982 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_MspInit+0x6c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_MspInit+0x6c>)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000

08001400 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	201e      	movs	r0, #30
 8001416:	f001 fab4 	bl	8002982 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800141a:	201e      	movs	r0, #30
 800141c:	f001 facd 	bl	80029ba <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <HAL_InitTick+0xa0>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	4a1e      	ldr	r2, [pc, #120]	; (80014a0 <HAL_InitTick+0xa0>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	61d3      	str	r3, [r2, #28]
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_InitTick+0xa0>)
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001438:	f107 0210 	add.w	r2, r7, #16
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f002 f87e 	bl	8003544 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001448:	f002 f854 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 800144c:	4603      	mov	r3, r0
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_InitTick+0xa4>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0c9b      	lsrs	r3, r3, #18
 800145c:	3b01      	subs	r3, #1
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_InitTick+0xa8>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <HAL_InitTick+0xac>)
 8001464:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_InitTick+0xa8>)
 8001468:	f240 32e7 	movw	r2, #999	; 0x3e7
 800146c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_InitTick+0xa8>)
 8001470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001472:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_InitTick+0xa8>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_InitTick+0xa8>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <HAL_InitTick+0xa8>)
 8001482:	f002 fa27 	bl	80038d4 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d104      	bne.n	8001496 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800148c:	4806      	ldr	r0, [pc, #24]	; (80014a8 <HAL_InitTick+0xa8>)
 800148e:	f002 fabb 	bl	8003a08 <HAL_TIM_Base_Start_IT>
 8001492:	4603      	mov	r3, r0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3730      	adds	r7, #48	; 0x30
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	431bde83 	.word	0x431bde83
 80014a8:	20003928 	.word	0x20003928
 80014ac:	40000800 	.word	0x40000800

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
	...

080014dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <ADC1_2_IRQHandler+0x10>)
 80014e2:	f000 fe63 	bl	80021ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200036e4 	.word	0x200036e4

080014f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <TIM4_IRQHandler+0x10>)
 80014f6:	f002 fb32 	bl	8003b5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20003928 	.word	0x20003928

08001504 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
	return 1;
 8001508:	2301      	movs	r3, #1
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <_kill>:

int _kill(int pid, int sig)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800151c:	f006 f996 	bl	800784c <__errno>
 8001520:	4603      	mov	r3, r0
 8001522:	2216      	movs	r2, #22
 8001524:	601a      	str	r2, [r3, #0]
	return -1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_exit>:

void _exit (int status)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800153a:	f04f 31ff 	mov.w	r1, #4294967295
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffe7 	bl	8001512 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001544:	e7fe      	b.n	8001544 <_exit+0x12>

08001546 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	e00a      	b.n	800156e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001558:	f3af 8000 	nop.w
 800155c:	4601      	mov	r1, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	60ba      	str	r2, [r7, #8]
 8001564:	b2ca      	uxtb	r2, r1
 8001566:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3301      	adds	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	429a      	cmp	r2, r3
 8001574:	dbf0      	blt.n	8001558 <_read+0x12>
	}

return len;
 8001576:	687b      	ldr	r3, [r7, #4]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e009      	b.n	80015a6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	60ba      	str	r2, [r7, #8]
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	3301      	adds	r3, #1
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dbf1      	blt.n	8001592 <_write+0x12>
	}
	return len;
 80015ae:	687b      	ldr	r3, [r7, #4]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_close>:

int _close(int file)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	return -1;
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015de:	605a      	str	r2, [r3, #4]
	return 0;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <_isatty>:

int _isatty(int file)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	return 1;
 80015f4:	2301      	movs	r3, #1
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
	return 0;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f006 f900 	bl	800784c <__errno>
 800164c:	4603      	mov	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20005000 	.word	0x20005000
 8001678:	00000400 	.word	0x00000400
 800167c:	20000200 	.word	0x20000200
 8001680:	20003ae0 	.word	0x20003ae0

08001684 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a4:	463b      	mov	r3, r7
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016ac:	4b23      	ldr	r3, [pc, #140]	; (800173c <MX_TIM1_Init+0xac>)
 80016ae:	4a24      	ldr	r2, [pc, #144]	; (8001740 <MX_TIM1_Init+0xb0>)
 80016b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12000-1;
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <MX_TIM1_Init+0xac>)
 80016b4:	f642 62df 	movw	r2, #11999	; 0x2edf
 80016b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <MX_TIM1_Init+0xac>)
 80016bc:	2210      	movs	r2, #16
 80016be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <MX_TIM1_Init+0xac>)
 80016c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80016c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <MX_TIM1_Init+0xac>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_TIM1_Init+0xac>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <MX_TIM1_Init+0xac>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016da:	4818      	ldr	r0, [pc, #96]	; (800173c <MX_TIM1_Init+0xac>)
 80016dc:	f002 f8fa 	bl	80038d4 <HAL_TIM_Base_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80016e6:	f7ff fe4d 	bl	8001384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	4619      	mov	r1, r3
 80016f6:	4811      	ldr	r0, [pc, #68]	; (800173c <MX_TIM1_Init+0xac>)
 80016f8:	f002 fb39 	bl	8003d6e <HAL_TIM_ConfigClockSource>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001702:	f7ff fe3f 	bl	8001384 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8001706:	2108      	movs	r1, #8
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_TIM1_Init+0xac>)
 800170a:	f002 f9cf 	bl	8003aac <HAL_TIM_OnePulse_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001714:	f7ff fe36 	bl	8001384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001718:	2310      	movs	r3, #16
 800171a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_TIM1_Init+0xac>)
 8001726:	f002 fdd3 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001730:	f7ff fe28 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200039b8 	.word	0x200039b8
 8001740:	40012c00 	.word	0x40012c00

08001744 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	; 0x30
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174a:	f107 0320 	add.w	r3, r7, #32
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001770:	4b28      	ldr	r3, [pc, #160]	; (8001814 <MX_TIM2_Init+0xd0>)
 8001772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001778:	4b26      	ldr	r3, [pc, #152]	; (8001814 <MX_TIM2_Init+0xd0>)
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <MX_TIM2_Init+0xd0>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <MX_TIM2_Init+0xd0>)
 8001786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800178a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <MX_TIM2_Init+0xd0>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <MX_TIM2_Init+0xd0>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001798:	481e      	ldr	r0, [pc, #120]	; (8001814 <MX_TIM2_Init+0xd0>)
 800179a:	f002 f89b 	bl	80038d4 <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80017a4:	f7ff fdee 	bl	8001384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80017a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ac:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ba:	f107 0320 	add.w	r3, r7, #32
 80017be:	4619      	mov	r1, r3
 80017c0:	4814      	ldr	r0, [pc, #80]	; (8001814 <MX_TIM2_Init+0xd0>)
 80017c2:	f002 fad4 	bl	8003d6e <HAL_TIM_ConfigClockSource>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017cc:	f7ff fdda 	bl	8001384 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80017d0:	2305      	movs	r3, #5
 80017d2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4619      	mov	r1, r3
 80017de:	480d      	ldr	r0, [pc, #52]	; (8001814 <MX_TIM2_Init+0xd0>)
 80017e0:	f002 fb89 	bl	8003ef6 <HAL_TIM_SlaveConfigSynchro>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80017ea:	f7ff fdcb 	bl	8001384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017ee:	2320      	movs	r3, #32
 80017f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4806      	ldr	r0, [pc, #24]	; (8001814 <MX_TIM2_Init+0xd0>)
 80017fc:	f002 fd68 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001806:	f7ff fdbd 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	3730      	adds	r7, #48	; 0x30
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20003a00 	.word	0x20003a00

08001818 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_TIM3_Init+0x98>)
 8001838:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <MX_TIM3_Init+0x9c>)
 800183a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <MX_TIM3_Init+0x98>)
 800183e:	2200      	movs	r2, #0
 8001840:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <MX_TIM3_Init+0x98>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <MX_TIM3_Init+0x98>)
 800184a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800184e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_TIM3_Init+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_TIM3_Init+0x98>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800185c:	4814      	ldr	r0, [pc, #80]	; (80018b0 <MX_TIM3_Init+0x98>)
 800185e:	f002 f839 	bl	80038d4 <HAL_TIM_Base_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001868:	f7ff fd8c 	bl	8001384 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800186c:	2307      	movs	r3, #7
 800186e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001870:	2310      	movs	r3, #16
 8001872:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	4619      	mov	r1, r3
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <MX_TIM3_Init+0x98>)
 800187c:	f002 fb3b 	bl	8003ef6 <HAL_TIM_SlaveConfigSynchro>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001886:	f7ff fd7d 	bl	8001384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	4619      	mov	r1, r3
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <MX_TIM3_Init+0x98>)
 8001898:	f002 fd1a 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80018a2:	f7ff fd6f 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	3720      	adds	r7, #32
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20003970 	.word	0x20003970
 80018b4:	40000400 	.word	0x40000400

080018b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0318 	add.w	r3, r7, #24
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a27      	ldr	r2, [pc, #156]	; (8001970 <HAL_TIM_Base_MspInit+0xb8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d10c      	bne.n	80018f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018d8:	4b26      	ldr	r3, [pc, #152]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a25      	ldr	r2, [pc, #148]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 80018de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80018f0:	e03a      	b.n	8001968 <HAL_TIM_Base_MspInit+0xb0>
  else if(tim_baseHandle->Instance==TIM2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fa:	d124      	bne.n	8001946 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	61d3      	str	r3, [r2, #28]
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a16      	ldr	r2, [pc, #88]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800192c:	2301      	movs	r3, #1
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0318 	add.w	r3, r7, #24
 800193c:	4619      	mov	r1, r3
 800193e:	480e      	ldr	r0, [pc, #56]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 8001940:	f001 f84e 	bl	80029e0 <HAL_GPIO_Init>
}
 8001944:	e010      	b.n	8001968 <HAL_TIM_Base_MspInit+0xb0>
  else if(tim_baseHandle->Instance==TIM3)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a0c      	ldr	r2, [pc, #48]	; (800197c <HAL_TIM_Base_MspInit+0xc4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d10b      	bne.n	8001968 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 8001956:	f043 0302 	orr.w	r3, r3, #2
 800195a:	61d3      	str	r3, [r2, #28]
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
}
 8001968:	bf00      	nop
 800196a:	3728      	adds	r7, #40	; 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40012c00 	.word	0x40012c00
 8001974:	40021000 	.word	0x40021000
 8001978:	40010800 	.word	0x40010800
 800197c:	40000400 	.word	0x40000400

08001980 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <MX_USART1_UART_Init+0x50>)
 8001988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 800198c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 80019b8:	f002 fcfa 	bl	80043b0 <HAL_UART_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019c2:	f7ff fcdf 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20003a48 	.word	0x20003a48
 80019d0:	40013800 	.word	0x40013800

080019d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <HAL_UART_MspInit+0x8c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d131      	bne.n	8001a58 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_UART_MspInit+0x90>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a1a      	ldr	r2, [pc, #104]	; (8001a64 <HAL_UART_MspInit+0x90>)
 80019fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_UART_MspInit+0x90>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_UART_MspInit+0x90>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <HAL_UART_MspInit+0x90>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_UART_MspInit+0x90>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0310 	add.w	r3, r7, #16
 8001a36:	4619      	mov	r1, r3
 8001a38:	480b      	ldr	r0, [pc, #44]	; (8001a68 <HAL_UART_MspInit+0x94>)
 8001a3a:	f000 ffd1 	bl	80029e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	4619      	mov	r1, r3
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <HAL_UART_MspInit+0x94>)
 8001a54:	f000 ffc4 	bl	80029e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a58:	bf00      	nop
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40013800 	.word	0x40013800
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010800 	.word	0x40010800

08001a6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a6c:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a6e:	490d      	ldr	r1, [pc, #52]	; (8001aa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a70:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a84:	4c0a      	ldr	r4, [pc, #40]	; (8001ab0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a92:	f7ff fdf7 	bl	8001684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a96:	f005 ffd5 	bl	8007a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a9a:	f7ff fbff 	bl	800129c <main>
  bx lr
 8001a9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001aa8:	0800c974 	.word	0x0800c974
  ldr r2, =_sbss
 8001aac:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001ab0:	20003ae0 	.word	0x20003ae0

08001ab4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <CAN1_RX1_IRQHandler>
	...

08001ab8 <receiveSymbol>:
 *  Created on: 22 окт. 2021 г.
 *      Author: Иван
 */
#include "CParser.h"

Status receiveSymbol() {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive(&huart1, (uint8_t*) &receivedSymbol_, 1,
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4906      	ldr	r1, [pc, #24]	; (8001adc <receiveSymbol+0x24>)
 8001ac4:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <receiveSymbol+0x28>)
 8001ac6:	f002 fd52 	bl	800456e <HAL_UART_Receive>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <receiveSymbol+0x1c>
	HAL_MAX_DELAY) == HAL_OK)
		return OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e000      	b.n	8001ad6 <receiveSymbol+0x1e>
	else
		return ERR;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000373f 	.word	0x2000373f
 8001ae0:	20003a48 	.word	0x20003a48

08001ae4 <checkStartOfMessage>:

/*
 * Если принятый символ '$' (начало пакета), то возвращаем OK, иначе ERR
 */
Status checkStartOfMessage() {
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
	if (receivedSymbol_ == '$') {
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <checkStartOfMessage+0x1c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b24      	cmp	r3, #36	; 0x24
 8001aee:	d101      	bne.n	8001af4 <checkStartOfMessage+0x10>
		return OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e000      	b.n	8001af6 <checkStartOfMessage+0x12>
	} else
		return ERR;
 8001af4:	2301      	movs	r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	2000373f 	.word	0x2000373f

08001b04 <receiveMessage>:
/*
 * Читаем символы из UART, пока не встретим ';' (конец пакета),
 * в конце ставим символ конца строки и возвращаем OK
 * Если произошла ошибка при чтении, возвращаем ERR
 */
Status receiveMessage() {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	do {
		if (receiveSymbol() == OK) {
 8001b0e:	f7ff ffd3 	bl	8001ab8 <receiveSymbol>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d108      	bne.n	8001b2a <receiveMessage+0x26>
			receiveBuf_[i] = receivedSymbol_;
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <receiveMessage+0x4c>)
 8001b1c:	7811      	ldrb	r1, [r2, #0]
 8001b1e:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <receiveMessage+0x50>)
 8001b20:	54d1      	strb	r1, [r2, r3]
			i++;
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	3301      	adds	r3, #1
 8001b26:	71fb      	strb	r3, [r7, #7]
 8001b28:	e001      	b.n	8001b2e <receiveMessage+0x2a>
		} else
			return ERR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00b      	b.n	8001b46 <receiveMessage+0x42>
	} while (receivedSymbol_ != ';');
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <receiveMessage+0x4c>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b3b      	cmp	r3, #59	; 0x3b
 8001b34:	d1eb      	bne.n	8001b0e <receiveMessage+0xa>
	receiveBuf_[i] = '\0';
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <receiveMessage+0x50>)
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	54d1      	strb	r1, [r2, r3]
	messageLength_ = i;
 8001b3e:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <receiveMessage+0x54>)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	7013      	strb	r3, [r2, #0]
	return OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000373f 	.word	0x2000373f
 8001b54:	20003748 	.word	0x20003748
 8001b58:	20003810 	.word	0x20003810

08001b5c <parseMessage>:
/*
 * Из полученного сообщения выхватываем дату, время
 * и управляющую команду, раскидываем данные по
 * соответствующим полям
 */
Status parseMessage() {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
	uint8_t j = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	71fb      	strb	r3, [r7, #7]
	for (uint8_t k = 0; k < 10; k++) {
 8001b66:	2300      	movs	r3, #0
 8001b68:	71bb      	strb	r3, [r7, #6]
 8001b6a:	e00b      	b.n	8001b84 <parseMessage+0x28>
		date_[j] = receiveBuf_[k];
 8001b6c:	79ba      	ldrb	r2, [r7, #6]
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	4923      	ldr	r1, [pc, #140]	; (8001c00 <parseMessage+0xa4>)
 8001b72:	5c89      	ldrb	r1, [r1, r2]
 8001b74:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <parseMessage+0xa8>)
 8001b76:	54d1      	strb	r1, [r2, r3]
		j++;
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t k = 0; k < 10; k++) {
 8001b7e:	79bb      	ldrb	r3, [r7, #6]
 8001b80:	3301      	adds	r3, #1
 8001b82:	71bb      	strb	r3, [r7, #6]
 8001b84:	79bb      	ldrb	r3, [r7, #6]
 8001b86:	2b09      	cmp	r3, #9
 8001b88:	d9f0      	bls.n	8001b6c <parseMessage+0x10>
	}
	date_[10] = '\0';
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <parseMessage+0xa8>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	729a      	strb	r2, [r3, #10]
	j = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	71fb      	strb	r3, [r7, #7]
	for (uint8_t k = 11; k < 19; k++) {
 8001b94:	230b      	movs	r3, #11
 8001b96:	717b      	strb	r3, [r7, #5]
 8001b98:	e00b      	b.n	8001bb2 <parseMessage+0x56>
		time_[j] = receiveBuf_[k];
 8001b9a:	797a      	ldrb	r2, [r7, #5]
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	4918      	ldr	r1, [pc, #96]	; (8001c00 <parseMessage+0xa4>)
 8001ba0:	5c89      	ldrb	r1, [r1, r2]
 8001ba2:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <parseMessage+0xac>)
 8001ba4:	54d1      	strb	r1, [r2, r3]
		j++;
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	71fb      	strb	r3, [r7, #7]
	for (uint8_t k = 11; k < 19; k++) {
 8001bac:	797b      	ldrb	r3, [r7, #5]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	717b      	strb	r3, [r7, #5]
 8001bb2:	797b      	ldrb	r3, [r7, #5]
 8001bb4:	2b12      	cmp	r3, #18
 8001bb6:	d9f0      	bls.n	8001b9a <parseMessage+0x3e>
	}
	time_[8] = '\0';
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <parseMessage+0xac>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	721a      	strb	r2, [r3, #8]
	j = 33;
 8001bbe:	2321      	movs	r3, #33	; 0x21
 8001bc0:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	713b      	strb	r3, [r7, #4]
	while (receiveBuf_[j] != ';') {
 8001bc6:	e00b      	b.n	8001be0 <parseMessage+0x84>
		payload_[i] = receiveBuf_[j];
 8001bc8:	79fa      	ldrb	r2, [r7, #7]
 8001bca:	793b      	ldrb	r3, [r7, #4]
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <parseMessage+0xa4>)
 8001bce:	5c89      	ldrb	r1, [r1, r2]
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <parseMessage+0xb0>)
 8001bd2:	54d1      	strb	r1, [r2, r3]
		i++;
 8001bd4:	793b      	ldrb	r3, [r7, #4]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	713b      	strb	r3, [r7, #4]
		j++;
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	71fb      	strb	r3, [r7, #7]
	while (receiveBuf_[j] != ';') {
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <parseMessage+0xa4>)
 8001be4:	5cd3      	ldrb	r3, [r2, r3]
 8001be6:	2b3b      	cmp	r3, #59	; 0x3b
 8001be8:	d1ee      	bne.n	8001bc8 <parseMessage+0x6c>
	}
	payload_[i] = '\0';
 8001bea:	793b      	ldrb	r3, [r7, #4]
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <parseMessage+0xb0>)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	54d1      	strb	r1, [r2, r3]
	return OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20003748 	.word	0x20003748
 8001c04:	20003714 	.word	0x20003714
 8001c08:	2000384c 	.word	0x2000384c
 8001c0c:	20003730 	.word	0x20003730

08001c10 <controlFunction>:
			return ERR;
	}
	return OK;
}

Status controlFunction() {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0

	if (!strcmp(payload_, "MOTOR?\0")) {
 8001c14:	4957      	ldr	r1, [pc, #348]	; (8001d74 <controlFunction+0x164>)
 8001c16:	4858      	ldr	r0, [pc, #352]	; (8001d78 <controlFunction+0x168>)
 8001c18:	f7fe fa9a 	bl	8000150 <strcmp>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d110      	bne.n	8001c44 <controlFunction+0x34>
		if (HAL_UART_Transmit(&huart1, (uint8_t*) &newMotorRotationAngle_,
				strlen(LED_State_), 1000) == HAL_OK) {
 8001c22:	4856      	ldr	r0, [pc, #344]	; (8001d7c <controlFunction+0x16c>)
 8001c24:	f7fe fa9e 	bl	8000164 <strlen>
 8001c28:	4603      	mov	r3, r0
		if (HAL_UART_Transmit(&huart1, (uint8_t*) &newMotorRotationAngle_,
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c30:	4953      	ldr	r1, [pc, #332]	; (8001d80 <controlFunction+0x170>)
 8001c32:	4854      	ldr	r0, [pc, #336]	; (8001d84 <controlFunction+0x174>)
 8001c34:	f002 fc09 	bl	800444a <HAL_UART_Transmit>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8097 	beq.w	8001d6e <controlFunction+0x15e>
		} else
			return ERR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e095      	b.n	8001d70 <controlFunction+0x160>
	} else if (payload_[0] == 'M' && payload_[1] == '_') {
 8001c44:	4b4c      	ldr	r3, [pc, #304]	; (8001d78 <controlFunction+0x168>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b4d      	cmp	r3, #77	; 0x4d
 8001c4a:	d167      	bne.n	8001d1c <controlFunction+0x10c>
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <controlFunction+0x168>)
 8001c4e:	785b      	ldrb	r3, [r3, #1]
 8001c50:	2b5f      	cmp	r3, #95	; 0x5f
 8001c52:	d163      	bne.n	8001d1c <controlFunction+0x10c>
		if (strlen(payload_) == 3) {
 8001c54:	4848      	ldr	r0, [pc, #288]	; (8001d78 <controlFunction+0x168>)
 8001c56:	f7fe fa85 	bl	8000164 <strlen>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d106      	bne.n	8001c6e <controlFunction+0x5e>
			newMotorRotationAngle_ = (payload_[2] - '0');
 8001c60:	4b45      	ldr	r3, [pc, #276]	; (8001d78 <controlFunction+0x168>)
 8001c62:	789b      	ldrb	r3, [r3, #2]
 8001c64:	3b30      	subs	r3, #48	; 0x30
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b45      	ldr	r3, [pc, #276]	; (8001d80 <controlFunction+0x170>)
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	e03e      	b.n	8001cec <controlFunction+0xdc>
		} else if (strlen(payload_) == 4) {
 8001c6e:	4842      	ldr	r0, [pc, #264]	; (8001d78 <controlFunction+0x168>)
 8001c70:	f7fe fa78 	bl	8000164 <strlen>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d111      	bne.n	8001c9e <controlFunction+0x8e>
			newMotorRotationAngle_ = 10 * (payload_[2] - '0')
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <controlFunction+0x168>)
 8001c7c:	789b      	ldrb	r3, [r3, #2]
 8001c7e:	3b30      	subs	r3, #48	; 0x30
					+ (payload_[3] - '0');
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	0092      	lsls	r2, r2, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b3a      	ldr	r3, [pc, #232]	; (8001d78 <controlFunction+0x168>)
 8001c8e:	78db      	ldrb	r3, [r3, #3]
 8001c90:	4413      	add	r3, r2
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	3b30      	subs	r3, #48	; 0x30
 8001c96:	b2da      	uxtb	r2, r3
			newMotorRotationAngle_ = 10 * (payload_[2] - '0')
 8001c98:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <controlFunction+0x170>)
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	e026      	b.n	8001cec <controlFunction+0xdc>
		} else if (strlen(payload_) == 5) {
 8001c9e:	4836      	ldr	r0, [pc, #216]	; (8001d78 <controlFunction+0x168>)
 8001ca0:	f7fe fa60 	bl	8000164 <strlen>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d120      	bne.n	8001cec <controlFunction+0xdc>
			newMotorRotationAngle_ = 100 * (payload_[2] - '0')
 8001caa:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <controlFunction+0x168>)
 8001cac:	789b      	ldrb	r3, [r3, #2]
 8001cae:	3b30      	subs	r3, #48	; 0x30
					+ 10 * (payload_[3] - '0') + (payload_[4] - '0');
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	0091      	lsls	r1, r2, #2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <controlFunction+0x168>)
 8001cc8:	78db      	ldrb	r3, [r3, #3]
 8001cca:	3b30      	subs	r3, #48	; 0x30
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	0089      	lsls	r1, r1, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <controlFunction+0x168>)
 8001cde:	791b      	ldrb	r3, [r3, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	3b30      	subs	r3, #48	; 0x30
 8001ce6:	b2da      	uxtb	r2, r3
			newMotorRotationAngle_ = 100 * (payload_[2] - '0')
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <controlFunction+0x170>)
 8001cea:	701a      	strb	r2, [r3, #0]
		}

		if (newMotorRotationAngle_ == oldMotorRotationAngle_) {
 8001cec:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <controlFunction+0x170>)
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <controlFunction+0x178>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d10d      	bne.n	8001d14 <controlFunction+0x104>
			if (HAL_UART_Transmit(&huart1,
 8001cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfc:	222a      	movs	r2, #42	; 0x2a
 8001cfe:	4923      	ldr	r1, [pc, #140]	; (8001d8c <controlFunction+0x17c>)
 8001d00:	4820      	ldr	r0, [pc, #128]	; (8001d84 <controlFunction+0x174>)
 8001d02:	f002 fba2 	bl	800444a <HAL_UART_Transmit>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <controlFunction+0x100>
					(uint8_t*) "You've transmitted the same rotation angle",
					strlen("You've transmitted the same rotation angle"), 1000)
					== HAL_OK) {
			} else
				return ERR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e02f      	b.n	8001d70 <controlFunction+0x160>
			return ERR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e02d      	b.n	8001d70 <controlFunction+0x160>
					strlen("You've transmitted the wrong rotation angle"), 1000)
					== HAL_OK) {
			} else
				return ERR;
			return ERR;
		} else MOTOR_StartFlag_ = 1;
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <controlFunction+0x180>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
		if (newMotorRotationAngle_ == oldMotorRotationAngle_) {
 8001d1a:	e028      	b.n	8001d6e <controlFunction+0x15e>
	} else if (!strcmp(payload_, "PMT_ADC\0")) {
 8001d1c:	491d      	ldr	r1, [pc, #116]	; (8001d94 <controlFunction+0x184>)
 8001d1e:	4816      	ldr	r0, [pc, #88]	; (8001d78 <controlFunction+0x168>)
 8001d20:	f7fe fa16 	bl	8000150 <strcmp>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <controlFunction+0x128>
		ADC_StartFlag_ = 1;
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <controlFunction+0x188>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
		TIM_StartFlag_ = 0;
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <controlFunction+0x18c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
 8001d36:	e01a      	b.n	8001d6e <controlFunction+0x15e>
	} else if (!strcmp(payload_, "PMT_TIM\0")) {
 8001d38:	4919      	ldr	r1, [pc, #100]	; (8001da0 <controlFunction+0x190>)
 8001d3a:	480f      	ldr	r0, [pc, #60]	; (8001d78 <controlFunction+0x168>)
 8001d3c:	f7fe fa08 	bl	8000150 <strcmp>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <controlFunction+0x144>
		TIM_StartFlag_ = 1;
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <controlFunction+0x18c>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
		ADC_StartFlag_ = 0;
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <controlFunction+0x188>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	e00c      	b.n	8001d6e <controlFunction+0x15e>
	} else if (!strcmp(payload_, "STOP\0")) {
 8001d54:	4913      	ldr	r1, [pc, #76]	; (8001da4 <controlFunction+0x194>)
 8001d56:	4808      	ldr	r0, [pc, #32]	; (8001d78 <controlFunction+0x168>)
 8001d58:	f7fe f9fa 	bl	8000150 <strcmp>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d105      	bne.n	8001d6e <controlFunction+0x15e>
		ADC_StartFlag_ = 0;
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <controlFunction+0x188>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
		TIM_StartFlag_ = 0;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <controlFunction+0x18c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
	}
	return OK;
 8001d6e:	2300      	movs	r3, #0

}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	0800c308 	.word	0x0800c308
 8001d78:	20003730 	.word	0x20003730
 8001d7c:	20003814 	.word	0x20003814
 8001d80:	20003812 	.word	0x20003812
 8001d84:	20003a48 	.word	0x20003a48
 8001d88:	20003728 	.word	0x20003728
 8001d8c:	0800c310 	.word	0x0800c310
 8001d90:	20003723 	.word	0x20003723
 8001d94:	0800c33c 	.word	0x0800c33c
 8001d98:	20003811 	.word	0x20003811
 8001d9c:	20003924 	.word	0x20003924
 8001da0:	0800c348 	.word	0x0800c348
 8001da4:	0800c354 	.word	0x0800c354

08001da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_Init+0x28>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_Init+0x28>)
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db8:	2003      	movs	r0, #3
 8001dba:	f000 fdd7 	bl	800296c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dbe:	200f      	movs	r0, #15
 8001dc0:	f7ff fb1e 	bl	8001400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc4:	f7ff fae4 	bl	8001390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40022000 	.word	0x40022000

08001dd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd8:	4b02      	ldr	r3, [pc, #8]	; (8001de4 <HAL_GetTick+0x10>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	20003a8c 	.word	0x20003a8c

08001de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff fff0 	bl	8001dd4 <HAL_GetTick>
 8001df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e00:	d005      	beq.n	8001e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_Delay+0x44>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e0e:	bf00      	nop
 8001e10:	f7ff ffe0 	bl	8001dd4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d8f7      	bhi.n	8001e10 <HAL_Delay+0x28>
  {
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000008 	.word	0x20000008

08001e30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0be      	b.n	8001fd0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe fefa 	bl	8000c68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fbc1 	bl	80025fc <ADC_ConversionStop_Disable>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f040 8099 	bne.w	8001fbe <HAL_ADC_Init+0x18e>
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 8095 	bne.w	8001fbe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e9c:	f023 0302 	bic.w	r3, r3, #2
 8001ea0:	f043 0202 	orr.w	r2, r3, #2
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eb0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7b1b      	ldrb	r3, [r3, #12]
 8001eb6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001eb8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec8:	d003      	beq.n	8001ed2 <HAL_ADC_Init+0xa2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <HAL_ADC_Init+0xa8>
 8001ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed6:	e000      	b.n	8001eda <HAL_ADC_Init+0xaa>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7d1b      	ldrb	r3, [r3, #20]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d119      	bne.n	8001f1c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7b1b      	ldrb	r3, [r3, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d109      	bne.n	8001f04 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	035a      	lsls	r2, r3, #13
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	e00b      	b.n	8001f1c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	f043 0220 	orr.w	r2, r3, #32
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	f043 0201 	orr.w	r2, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <HAL_ADC_Init+0x1a8>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f4c:	d003      	beq.n	8001f56 <HAL_ADC_Init+0x126>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d104      	bne.n	8001f60 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	051b      	lsls	r3, r3, #20
 8001f5e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_ADC_Init+0x1ac>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d10b      	bne.n	8001f9c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	f023 0303 	bic.w	r3, r3, #3
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f9a:	e018      	b.n	8001fce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	f023 0312 	bic.w	r3, r3, #18
 8001fa4:	f043 0210 	orr.w	r2, r3, #16
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	f043 0201 	orr.w	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fbc:	e007      	b.n	8001fce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	f043 0210 	orr.w	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	ffe1f7fd 	.word	0xffe1f7fd
 8001fdc:	ff1f0efe 	.word	0xff1f0efe

08001fe0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_Start+0x1a>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e098      	b.n	800212c <HAL_ADC_Start+0x14c>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 faa0 	bl	8002548 <ADC_Enable>
 8002008:	4603      	mov	r3, r0
 800200a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 8087 	bne.w	8002122 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a41      	ldr	r2, [pc, #260]	; (8002134 <HAL_ADC_Start+0x154>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d105      	bne.n	800203e <HAL_ADC_Start+0x5e>
 8002032:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_ADC_Start+0x158>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d115      	bne.n	800206a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002054:	2b00      	cmp	r3, #0
 8002056:	d026      	beq.n	80020a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002060:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002068:	e01d      	b.n	80020a6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a2f      	ldr	r2, [pc, #188]	; (8002138 <HAL_ADC_Start+0x158>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d004      	beq.n	800208a <HAL_ADC_Start+0xaa>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2b      	ldr	r2, [pc, #172]	; (8002134 <HAL_ADC_Start+0x154>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d10d      	bne.n	80020a6 <HAL_ADC_Start+0xc6>
 800208a:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <HAL_ADC_Start+0x158>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800209e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d006      	beq.n	80020c0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	f023 0206 	bic.w	r2, r3, #6
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80020be:	e002      	b.n	80020c6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f06f 0202 	mvn.w	r2, #2
 80020d6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80020e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020e6:	d113      	bne.n	8002110 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020ec:	4a11      	ldr	r2, [pc, #68]	; (8002134 <HAL_ADC_Start+0x154>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d105      	bne.n	80020fe <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_ADC_Start+0x158>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d108      	bne.n	8002110 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	e00c      	b.n	800212a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	e003      	b.n	800212a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40012800 	.word	0x40012800
 8002138:	40012400 	.word	0x40012400

0800213c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_ADC_Stop+0x1a>
 8002152:	2302      	movs	r3, #2
 8002154:	e01a      	b.n	800218c <HAL_ADC_Stop+0x50>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fa4c 	bl	80025fc <ADC_ConversionStop_Disable>
 8002164:	4603      	mov	r3, r0
 8002166:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d140      	bne.n	8002244 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d139      	bne.n	8002244 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021f6:	d11d      	bne.n	8002234 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d119      	bne.n	8002234 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0220 	bic.w	r2, r2, #32
 800220e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f87c 	bl	8002332 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f06f 0212 	mvn.w	r2, #18
 8002242:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224e:	2b80      	cmp	r3, #128	; 0x80
 8002250:	d14f      	bne.n	80022f2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b04      	cmp	r3, #4
 800225e:	d148      	bne.n	80022f2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002282:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002286:	d012      	beq.n	80022ae <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002292:	2b00      	cmp	r3, #0
 8002294:	d125      	bne.n	80022e2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80022a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022a4:	d11d      	bne.n	80022e2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d119      	bne.n	80022e2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022bc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d105      	bne.n	80022e2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 fa78 	bl	80027d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 020c 	mvn.w	r2, #12
 80022f0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fc:	2b40      	cmp	r3, #64	; 0x40
 80022fe:	d114      	bne.n	800232a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b01      	cmp	r3, #1
 800230c:	d10d      	bne.n	800232a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f812 	bl	8002344 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0201 	mvn.w	r2, #1
 8002328:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
	...

08002358 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x20>
 8002374:	2302      	movs	r3, #2
 8002376:	e0dc      	b.n	8002532 <HAL_ADC_ConfigChannel+0x1da>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b06      	cmp	r3, #6
 8002386:	d81c      	bhi.n	80023c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	3b05      	subs	r3, #5
 800239a:	221f      	movs	r2, #31
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	4019      	ands	r1, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	3b05      	subs	r3, #5
 80023b4:	fa00 f203 	lsl.w	r2, r0, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	635a      	str	r2, [r3, #52]	; 0x34
 80023c0:	e03c      	b.n	800243c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d81c      	bhi.n	8002404 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	3b23      	subs	r3, #35	; 0x23
 80023dc:	221f      	movs	r2, #31
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4019      	ands	r1, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	3b23      	subs	r3, #35	; 0x23
 80023f6:	fa00 f203 	lsl.w	r2, r0, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
 8002402:	e01b      	b.n	800243c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	3b41      	subs	r3, #65	; 0x41
 8002416:	221f      	movs	r2, #31
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	4019      	ands	r1, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	3b41      	subs	r3, #65	; 0x41
 8002430:	fa00 f203 	lsl.w	r2, r0, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b09      	cmp	r3, #9
 8002442:	d91c      	bls.n	800247e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68d9      	ldr	r1, [r3, #12]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	3b1e      	subs	r3, #30
 8002456:	2207      	movs	r2, #7
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	4019      	ands	r1, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	6898      	ldr	r0, [r3, #8]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	3b1e      	subs	r3, #30
 8002470:	fa00 f203 	lsl.w	r2, r0, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	e019      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6919      	ldr	r1, [r3, #16]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	2207      	movs	r2, #7
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	4019      	ands	r1, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6898      	ldr	r0, [r3, #8]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	fa00 f203 	lsl.w	r2, r0, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d003      	beq.n	80024c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024be:	2b11      	cmp	r3, #17
 80024c0:	d132      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1d      	ldr	r2, [pc, #116]	; (800253c <HAL_ADC_ConfigChannel+0x1e4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d125      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d126      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d11a      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <HAL_ADC_ConfigChannel+0x1e8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a13      	ldr	r2, [pc, #76]	; (8002544 <HAL_ADC_ConfigChannel+0x1ec>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	0c9a      	lsrs	r2, r3, #18
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002508:	e002      	b.n	8002510 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	3b01      	subs	r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f9      	bne.n	800250a <HAL_ADC_ConfigChannel+0x1b2>
 8002516:	e007      	b.n	8002528 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	40012400 	.word	0x40012400
 8002540:	20000000 	.word	0x20000000
 8002544:	431bde83 	.word	0x431bde83

08002548 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d040      	beq.n	80025e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0201 	orr.w	r2, r2, #1
 8002574:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002576:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <ADC_Enable+0xac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1f      	ldr	r2, [pc, #124]	; (80025f8 <ADC_Enable+0xb0>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	0c9b      	lsrs	r3, r3, #18
 8002582:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002584:	e002      	b.n	800258c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3b01      	subs	r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f9      	bne.n	8002586 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002592:	f7ff fc1f 	bl	8001dd4 <HAL_GetTick>
 8002596:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002598:	e01f      	b.n	80025da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800259a:	f7ff fc1b 	bl	8001dd4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d918      	bls.n	80025da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d011      	beq.n	80025da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	f043 0210 	orr.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e007      	b.n	80025ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d1d8      	bne.n	800259a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000000 	.word	0x20000000
 80025f8:	431bde83 	.word	0x431bde83

080025fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d12e      	bne.n	8002674 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002626:	f7ff fbd5 	bl	8001dd4 <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800262c:	e01b      	b.n	8002666 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800262e:	f7ff fbd1 	bl	8001dd4 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d914      	bls.n	8002666 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d10d      	bne.n	8002666 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	f043 0210 	orr.w	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e007      	b.n	8002676 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d0dc      	beq.n	800262e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_ADCEx_Calibration_Start+0x1e>
 800269a:	2302      	movs	r3, #2
 800269c:	e095      	b.n	80027ca <HAL_ADCEx_Calibration_Start+0x14a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ffa8 	bl	80025fc <ADC_ConversionStop_Disable>
 80026ac:	4603      	mov	r3, r0
 80026ae:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 8084 	bne.w	80027c0 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026c0:	f023 0302 	bic.w	r3, r3, #2
 80026c4:	f043 0202 	orr.w	r2, r3, #2
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026cc:	4b41      	ldr	r3, [pc, #260]	; (80027d4 <HAL_ADCEx_Calibration_Start+0x154>)
 80026ce:	681c      	ldr	r4, [r3, #0]
 80026d0:	2002      	movs	r0, #2
 80026d2:	f001 f83b 	bl	800374c <HAL_RCCEx_GetPeriphCLKFreq>
 80026d6:	4603      	mov	r3, r0
 80026d8:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80026dc:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80026de:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80026e0:	e002      	b.n	80026e8 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f9      	bne.n	80026e2 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ff2a 	bl	8002548 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0208 	orr.w	r2, r2, #8
 8002702:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002704:	f7ff fb66 	bl	8001dd4 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800270a:	e01b      	b.n	8002744 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800270c:	f7ff fb62 	bl	8001dd4 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b0a      	cmp	r3, #10
 8002718:	d914      	bls.n	8002744 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	f023 0312 	bic.w	r3, r3, #18
 8002730:	f043 0210 	orr.w	r2, r3, #16
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e042      	b.n	80027ca <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1dc      	bne.n	800270c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0204 	orr.w	r2, r2, #4
 8002760:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002762:	f7ff fb37 	bl	8001dd4 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002768:	e01b      	b.n	80027a2 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800276a:	f7ff fb33 	bl	8001dd4 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b0a      	cmp	r3, #10
 8002776:	d914      	bls.n	80027a2 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00d      	beq.n	80027a2 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	f023 0312 	bic.w	r3, r3, #18
 800278e:	f043 0210 	orr.w	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e013      	b.n	80027ca <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1dc      	bne.n	800276a <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	f023 0303 	bic.w	r3, r3, #3
 80027b8:	f043 0201 	orr.w	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000000 	.word	0x20000000

080027d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
	...

080027ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281e:	4a04      	ldr	r2, [pc, #16]	; (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	60d3      	str	r3, [r2, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <__NVIC_GetPriorityGrouping+0x18>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	f003 0307 	and.w	r3, r3, #7
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	2b00      	cmp	r3, #0
 8002860:	db0b      	blt.n	800287a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	4906      	ldr	r1, [pc, #24]	; (8002884 <__NVIC_EnableIRQ+0x34>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2001      	movs	r0, #1
 8002872:	fa00 f202 	lsl.w	r2, r0, r2
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	e000e100 	.word	0xe000e100

08002888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db0a      	blt.n	80028b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	490c      	ldr	r1, [pc, #48]	; (80028d4 <__NVIC_SetPriority+0x4c>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b0:	e00a      	b.n	80028c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4908      	ldr	r1, [pc, #32]	; (80028d8 <__NVIC_SetPriority+0x50>)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3b04      	subs	r3, #4
 80028c0:	0112      	lsls	r2, r2, #4
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	440b      	add	r3, r1
 80028c6:	761a      	strb	r2, [r3, #24]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000e100 	.word	0xe000e100
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f1c3 0307 	rsb	r3, r3, #7
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	bf28      	it	cs
 80028fa:	2304      	movcs	r3, #4
 80028fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3304      	adds	r3, #4
 8002902:	2b06      	cmp	r3, #6
 8002904:	d902      	bls.n	800290c <NVIC_EncodePriority+0x30>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3b03      	subs	r3, #3
 800290a:	e000      	b.n	800290e <NVIC_EncodePriority+0x32>
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002924:	f04f 31ff 	mov.w	r1, #4294967295
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43d9      	mvns	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	4313      	orrs	r3, r2
         );
}
 8002936:	4618      	mov	r0, r3
 8002938:	3724      	adds	r7, #36	; 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002944:	f3bf 8f4f 	dsb	sy
}
 8002948:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <__NVIC_SystemReset+0x24>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002952:	4904      	ldr	r1, [pc, #16]	; (8002964 <__NVIC_SystemReset+0x24>)
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <__NVIC_SystemReset+0x28>)
 8002956:	4313      	orrs	r3, r2
 8002958:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800295a:	f3bf 8f4f 	dsb	sy
}
 800295e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <__NVIC_SystemReset+0x20>
 8002964:	e000ed00 	.word	0xe000ed00
 8002968:	05fa0004 	.word	0x05fa0004

0800296c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff39 	bl	80027ec <__NVIC_SetPriorityGrouping>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002994:	f7ff ff4e 	bl	8002834 <__NVIC_GetPriorityGrouping>
 8002998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	6978      	ldr	r0, [r7, #20]
 80029a0:	f7ff ff9c 	bl	80028dc <NVIC_EncodePriority>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff6b 	bl	8002888 <__NVIC_SetPriority>
}
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff41 	bl	8002850 <__NVIC_EnableIRQ>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80029da:	f7ff ffb1 	bl	8002940 <__NVIC_SystemReset>
	...

080029e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b08b      	sub	sp, #44	; 0x2c
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029ee:	2300      	movs	r3, #0
 80029f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f2:	e169      	b.n	8002cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029f4:	2201      	movs	r2, #1
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	f040 8158 	bne.w	8002cc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4a9a      	ldr	r2, [pc, #616]	; (8002c80 <HAL_GPIO_Init+0x2a0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d05e      	beq.n	8002ada <HAL_GPIO_Init+0xfa>
 8002a1c:	4a98      	ldr	r2, [pc, #608]	; (8002c80 <HAL_GPIO_Init+0x2a0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d875      	bhi.n	8002b0e <HAL_GPIO_Init+0x12e>
 8002a22:	4a98      	ldr	r2, [pc, #608]	; (8002c84 <HAL_GPIO_Init+0x2a4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d058      	beq.n	8002ada <HAL_GPIO_Init+0xfa>
 8002a28:	4a96      	ldr	r2, [pc, #600]	; (8002c84 <HAL_GPIO_Init+0x2a4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d86f      	bhi.n	8002b0e <HAL_GPIO_Init+0x12e>
 8002a2e:	4a96      	ldr	r2, [pc, #600]	; (8002c88 <HAL_GPIO_Init+0x2a8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d052      	beq.n	8002ada <HAL_GPIO_Init+0xfa>
 8002a34:	4a94      	ldr	r2, [pc, #592]	; (8002c88 <HAL_GPIO_Init+0x2a8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d869      	bhi.n	8002b0e <HAL_GPIO_Init+0x12e>
 8002a3a:	4a94      	ldr	r2, [pc, #592]	; (8002c8c <HAL_GPIO_Init+0x2ac>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d04c      	beq.n	8002ada <HAL_GPIO_Init+0xfa>
 8002a40:	4a92      	ldr	r2, [pc, #584]	; (8002c8c <HAL_GPIO_Init+0x2ac>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d863      	bhi.n	8002b0e <HAL_GPIO_Init+0x12e>
 8002a46:	4a92      	ldr	r2, [pc, #584]	; (8002c90 <HAL_GPIO_Init+0x2b0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d046      	beq.n	8002ada <HAL_GPIO_Init+0xfa>
 8002a4c:	4a90      	ldr	r2, [pc, #576]	; (8002c90 <HAL_GPIO_Init+0x2b0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d85d      	bhi.n	8002b0e <HAL_GPIO_Init+0x12e>
 8002a52:	2b12      	cmp	r3, #18
 8002a54:	d82a      	bhi.n	8002aac <HAL_GPIO_Init+0xcc>
 8002a56:	2b12      	cmp	r3, #18
 8002a58:	d859      	bhi.n	8002b0e <HAL_GPIO_Init+0x12e>
 8002a5a:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <HAL_GPIO_Init+0x80>)
 8002a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a60:	08002adb 	.word	0x08002adb
 8002a64:	08002ab5 	.word	0x08002ab5
 8002a68:	08002ac7 	.word	0x08002ac7
 8002a6c:	08002b09 	.word	0x08002b09
 8002a70:	08002b0f 	.word	0x08002b0f
 8002a74:	08002b0f 	.word	0x08002b0f
 8002a78:	08002b0f 	.word	0x08002b0f
 8002a7c:	08002b0f 	.word	0x08002b0f
 8002a80:	08002b0f 	.word	0x08002b0f
 8002a84:	08002b0f 	.word	0x08002b0f
 8002a88:	08002b0f 	.word	0x08002b0f
 8002a8c:	08002b0f 	.word	0x08002b0f
 8002a90:	08002b0f 	.word	0x08002b0f
 8002a94:	08002b0f 	.word	0x08002b0f
 8002a98:	08002b0f 	.word	0x08002b0f
 8002a9c:	08002b0f 	.word	0x08002b0f
 8002aa0:	08002b0f 	.word	0x08002b0f
 8002aa4:	08002abd 	.word	0x08002abd
 8002aa8:	08002ad1 	.word	0x08002ad1
 8002aac:	4a79      	ldr	r2, [pc, #484]	; (8002c94 <HAL_GPIO_Init+0x2b4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ab2:	e02c      	b.n	8002b0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	623b      	str	r3, [r7, #32]
          break;
 8002aba:	e029      	b.n	8002b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	623b      	str	r3, [r7, #32]
          break;
 8002ac4:	e024      	b.n	8002b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	3308      	adds	r3, #8
 8002acc:	623b      	str	r3, [r7, #32]
          break;
 8002ace:	e01f      	b.n	8002b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	623b      	str	r3, [r7, #32]
          break;
 8002ad8:	e01a      	b.n	8002b10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d102      	bne.n	8002ae8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	623b      	str	r3, [r7, #32]
          break;
 8002ae6:	e013      	b.n	8002b10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002af0:	2308      	movs	r3, #8
 8002af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	611a      	str	r2, [r3, #16]
          break;
 8002afa:	e009      	b.n	8002b10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002afc:	2308      	movs	r3, #8
 8002afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	615a      	str	r2, [r3, #20]
          break;
 8002b06:	e003      	b.n	8002b10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
          break;
 8002b0c:	e000      	b.n	8002b10 <HAL_GPIO_Init+0x130>
          break;
 8002b0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2bff      	cmp	r3, #255	; 0xff
 8002b14:	d801      	bhi.n	8002b1a <HAL_GPIO_Init+0x13a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	e001      	b.n	8002b1e <HAL_GPIO_Init+0x13e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2bff      	cmp	r3, #255	; 0xff
 8002b24:	d802      	bhi.n	8002b2c <HAL_GPIO_Init+0x14c>
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	e002      	b.n	8002b32 <HAL_GPIO_Init+0x152>
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	3b08      	subs	r3, #8
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	210f      	movs	r1, #15
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	401a      	ands	r2, r3
 8002b44:	6a39      	ldr	r1, [r7, #32]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80b1 	beq.w	8002cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b60:	4b4d      	ldr	r3, [pc, #308]	; (8002c98 <HAL_GPIO_Init+0x2b8>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	4a4c      	ldr	r2, [pc, #304]	; (8002c98 <HAL_GPIO_Init+0x2b8>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6193      	str	r3, [r2, #24]
 8002b6c:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <HAL_GPIO_Init+0x2b8>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b78:	4a48      	ldr	r2, [pc, #288]	; (8002c9c <HAL_GPIO_Init+0x2bc>)
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	3302      	adds	r3, #2
 8002b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	220f      	movs	r2, #15
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a40      	ldr	r2, [pc, #256]	; (8002ca0 <HAL_GPIO_Init+0x2c0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d013      	beq.n	8002bcc <HAL_GPIO_Init+0x1ec>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a3f      	ldr	r2, [pc, #252]	; (8002ca4 <HAL_GPIO_Init+0x2c4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00d      	beq.n	8002bc8 <HAL_GPIO_Init+0x1e8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a3e      	ldr	r2, [pc, #248]	; (8002ca8 <HAL_GPIO_Init+0x2c8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d007      	beq.n	8002bc4 <HAL_GPIO_Init+0x1e4>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a3d      	ldr	r2, [pc, #244]	; (8002cac <HAL_GPIO_Init+0x2cc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d101      	bne.n	8002bc0 <HAL_GPIO_Init+0x1e0>
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e006      	b.n	8002bce <HAL_GPIO_Init+0x1ee>
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	e004      	b.n	8002bce <HAL_GPIO_Init+0x1ee>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e002      	b.n	8002bce <HAL_GPIO_Init+0x1ee>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <HAL_GPIO_Init+0x1ee>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	f002 0203 	and.w	r2, r2, #3
 8002bd4:	0092      	lsls	r2, r2, #2
 8002bd6:	4093      	lsls	r3, r2
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bde:	492f      	ldr	r1, [pc, #188]	; (8002c9c <HAL_GPIO_Init+0x2bc>)
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	3302      	adds	r3, #2
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d006      	beq.n	8002c06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	492c      	ldr	r1, [pc, #176]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]
 8002c04:	e006      	b.n	8002c14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c06:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	4928      	ldr	r1, [pc, #160]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d006      	beq.n	8002c2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c20:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	4922      	ldr	r1, [pc, #136]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
 8002c2c:	e006      	b.n	8002c3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	491e      	ldr	r1, [pc, #120]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d006      	beq.n	8002c56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	4918      	ldr	r1, [pc, #96]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c56:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	4914      	ldr	r1, [pc, #80]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d021      	beq.n	8002cb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60cb      	str	r3, [r1, #12]
 8002c7c:	e021      	b.n	8002cc2 <HAL_GPIO_Init+0x2e2>
 8002c7e:	bf00      	nop
 8002c80:	10320000 	.word	0x10320000
 8002c84:	10310000 	.word	0x10310000
 8002c88:	10220000 	.word	0x10220000
 8002c8c:	10210000 	.word	0x10210000
 8002c90:	10120000 	.word	0x10120000
 8002c94:	10110000 	.word	0x10110000
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	40010800 	.word	0x40010800
 8002ca4:	40010c00 	.word	0x40010c00
 8002ca8:	40011000 	.word	0x40011000
 8002cac:	40011400 	.word	0x40011400
 8002cb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_GPIO_Init+0x304>)
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	4909      	ldr	r1, [pc, #36]	; (8002ce4 <HAL_GPIO_Init+0x304>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f47f ae8e 	bne.w	80029f4 <HAL_GPIO_Init+0x14>
  }
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	372c      	adds	r7, #44	; 0x2c
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	40010400 	.word	0x40010400

08002ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cf8:	787b      	ldrb	r3, [r7, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d04:	e003      	b.n	8002d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	611a      	str	r2, [r3, #16]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d2a:	887a      	ldrh	r2, [r7, #2]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	041a      	lsls	r2, r3, #16
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	43d9      	mvns	r1, r3
 8002d36:	887b      	ldrh	r3, [r7, #2]
 8002d38:	400b      	ands	r3, r1
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	611a      	str	r2, [r3, #16]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e26c      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8087 	beq.w	8002e7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d6c:	4b92      	ldr	r3, [pc, #584]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 030c 	and.w	r3, r3, #12
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d00c      	beq.n	8002d92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d78:	4b8f      	ldr	r3, [pc, #572]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d112      	bne.n	8002daa <HAL_RCC_OscConfig+0x5e>
 8002d84:	4b8c      	ldr	r3, [pc, #560]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d90:	d10b      	bne.n	8002daa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d92:	4b89      	ldr	r3, [pc, #548]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d06c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x12c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d168      	bne.n	8002e78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e246      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x76>
 8002db4:	4b80      	ldr	r3, [pc, #512]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a7f      	ldr	r2, [pc, #508]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	e02e      	b.n	8002e20 <HAL_RCC_OscConfig+0xd4>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x98>
 8002dca:	4b7b      	ldr	r3, [pc, #492]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7a      	ldr	r2, [pc, #488]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b78      	ldr	r3, [pc, #480]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a77      	ldr	r2, [pc, #476]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e01d      	b.n	8002e20 <HAL_RCC_OscConfig+0xd4>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0xbc>
 8002dee:	4b72      	ldr	r3, [pc, #456]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a71      	ldr	r2, [pc, #452]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b6f      	ldr	r3, [pc, #444]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6e      	ldr	r2, [pc, #440]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0xd4>
 8002e08:	4b6b      	ldr	r3, [pc, #428]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a6a      	ldr	r2, [pc, #424]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a67      	ldr	r2, [pc, #412]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fe ffd4 	bl	8001dd4 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e30:	f7fe ffd0 	bl	8001dd4 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	; 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e1fa      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	4b5d      	ldr	r3, [pc, #372]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0xe4>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe ffc0 	bl	8001dd4 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e58:	f7fe ffbc 	bl	8001dd4 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e1e6      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	4b53      	ldr	r3, [pc, #332]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x10c>
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d063      	beq.n	8002f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e86:	4b4c      	ldr	r3, [pc, #304]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e92:	4b49      	ldr	r3, [pc, #292]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d11c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x18c>
 8002e9e:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d116      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x176>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e1ba      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec2:	4b3d      	ldr	r3, [pc, #244]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4939      	ldr	r1, [pc, #228]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed6:	e03a      	b.n	8002f4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee0:	4b36      	ldr	r3, [pc, #216]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe ff75 	bl	8001dd4 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eee:	f7fe ff71 	bl	8001dd4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e19b      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f00:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4927      	ldr	r1, [pc, #156]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe ff54 	bl	8001dd4 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f30:	f7fe ff50 	bl	8001dd4 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e17a      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d03a      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d019      	beq.n	8002f96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f68:	f7fe ff34 	bl	8001dd4 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f70:	f7fe ff30 	bl	8001dd4 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e15a      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f000 fb08 	bl	80035a4 <RCC_Delay>
 8002f94:	e01c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9c:	f7fe ff1a 	bl	8001dd4 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa2:	e00f      	b.n	8002fc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa4:	f7fe ff16 	bl	8001dd4 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d908      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e140      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	42420000 	.word	0x42420000
 8002fc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc4:	4b9e      	ldr	r3, [pc, #632]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e9      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80a6 	beq.w	800312a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe2:	4b97      	ldr	r3, [pc, #604]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10d      	bne.n	800300a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	4b94      	ldr	r3, [pc, #592]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	4a93      	ldr	r2, [pc, #588]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	61d3      	str	r3, [r2, #28]
 8002ffa:	4b91      	ldr	r3, [pc, #580]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300a:	4b8e      	ldr	r3, [pc, #568]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d118      	bne.n	8003048 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003016:	4b8b      	ldr	r3, [pc, #556]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a8a      	ldr	r2, [pc, #552]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003022:	f7fe fed7 	bl	8001dd4 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302a:	f7fe fed3 	bl	8001dd4 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b64      	cmp	r3, #100	; 0x64
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e0fd      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303c:	4b81      	ldr	r3, [pc, #516]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d106      	bne.n	800305e <HAL_RCC_OscConfig+0x312>
 8003050:	4b7b      	ldr	r3, [pc, #492]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4a7a      	ldr	r2, [pc, #488]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6213      	str	r3, [r2, #32]
 800305c:	e02d      	b.n	80030ba <HAL_RCC_OscConfig+0x36e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0x334>
 8003066:	4b76      	ldr	r3, [pc, #472]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	4a75      	ldr	r2, [pc, #468]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 800306c:	f023 0301 	bic.w	r3, r3, #1
 8003070:	6213      	str	r3, [r2, #32]
 8003072:	4b73      	ldr	r3, [pc, #460]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	4a72      	ldr	r2, [pc, #456]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003078:	f023 0304 	bic.w	r3, r3, #4
 800307c:	6213      	str	r3, [r2, #32]
 800307e:	e01c      	b.n	80030ba <HAL_RCC_OscConfig+0x36e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d10c      	bne.n	80030a2 <HAL_RCC_OscConfig+0x356>
 8003088:	4b6d      	ldr	r3, [pc, #436]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4a6c      	ldr	r2, [pc, #432]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 800308e:	f043 0304 	orr.w	r3, r3, #4
 8003092:	6213      	str	r3, [r2, #32]
 8003094:	4b6a      	ldr	r3, [pc, #424]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4a69      	ldr	r2, [pc, #420]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6213      	str	r3, [r2, #32]
 80030a0:	e00b      	b.n	80030ba <HAL_RCC_OscConfig+0x36e>
 80030a2:	4b67      	ldr	r3, [pc, #412]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4a66      	ldr	r2, [pc, #408]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	6213      	str	r3, [r2, #32]
 80030ae:	4b64      	ldr	r3, [pc, #400]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	4a63      	ldr	r2, [pc, #396]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d015      	beq.n	80030ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7fe fe87 	bl	8001dd4 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fe fe83 	bl	8001dd4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e0ab      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e0:	4b57      	ldr	r3, [pc, #348]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ee      	beq.n	80030ca <HAL_RCC_OscConfig+0x37e>
 80030ec:	e014      	b.n	8003118 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fe71 	bl	8001dd4 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f6:	f7fe fe6d 	bl	8001dd4 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	; 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e095      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310c:	4b4c      	ldr	r3, [pc, #304]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ee      	bne.n	80030f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003118:	7dfb      	ldrb	r3, [r7, #23]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4b48      	ldr	r3, [pc, #288]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4a47      	ldr	r2, [pc, #284]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003128:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8081 	beq.w	8003236 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003134:	4b42      	ldr	r3, [pc, #264]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d061      	beq.n	8003204 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d146      	bne.n	80031d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003148:	4b3f      	ldr	r3, [pc, #252]	; (8003248 <HAL_RCC_OscConfig+0x4fc>)
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fe fe41 	bl	8001dd4 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003156:	f7fe fe3d 	bl	8001dd4 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e067      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003168:	4b35      	ldr	r3, [pc, #212]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f0      	bne.n	8003156 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317c:	d108      	bne.n	8003190 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800317e:	4b30      	ldr	r3, [pc, #192]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	492d      	ldr	r1, [pc, #180]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003190:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a19      	ldr	r1, [r3, #32]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	430b      	orrs	r3, r1
 80031a2:	4927      	ldr	r1, [pc, #156]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a8:	4b27      	ldr	r3, [pc, #156]	; (8003248 <HAL_RCC_OscConfig+0x4fc>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7fe fe11 	bl	8001dd4 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fe fe0d 	bl	8001dd4 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e037      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x46a>
 80031d4:	e02f      	b.n	8003236 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <HAL_RCC_OscConfig+0x4fc>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fdfa 	bl	8001dd4 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe fdf6 	bl	8001dd4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e020      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x498>
 8003202:	e018      	b.n	8003236 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e013      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	429a      	cmp	r2, r3
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d001      	beq.n	8003236 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	40007000 	.word	0x40007000
 8003248:	42420060 	.word	0x42420060

0800324c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0d0      	b.n	8003402 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003260:	4b6a      	ldr	r3, [pc, #424]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d910      	bls.n	8003290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b67      	ldr	r3, [pc, #412]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 0207 	bic.w	r2, r3, #7
 8003276:	4965      	ldr	r1, [pc, #404]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0b8      	b.n	8003402 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a8:	4b59      	ldr	r3, [pc, #356]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c0:	4b53      	ldr	r3, [pc, #332]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4a52      	ldr	r2, [pc, #328]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b50      	ldr	r3, [pc, #320]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	494d      	ldr	r1, [pc, #308]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d040      	beq.n	800336c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	4b47      	ldr	r3, [pc, #284]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d115      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e07f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330a:	4b41      	ldr	r3, [pc, #260]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e073      	b.n	8003402 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331a:	4b3d      	ldr	r3, [pc, #244]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06b      	b.n	8003402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b39      	ldr	r3, [pc, #228]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4936      	ldr	r1, [pc, #216]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800333c:	f7fe fd4a 	bl	8001dd4 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fe fd46 	bl	8001dd4 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e053      	b.n	8003402 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4b27      	ldr	r3, [pc, #156]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d210      	bcs.n	800339c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 0207 	bic.w	r2, r3, #7
 8003382:	4922      	ldr	r1, [pc, #136]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b20      	ldr	r3, [pc, #128]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e032      	b.n	8003402 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4916      	ldr	r1, [pc, #88]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	490e      	ldr	r1, [pc, #56]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033da:	f000 f821 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	490a      	ldr	r1, [pc, #40]	; (8003414 <HAL_RCC_ClockConfig+0x1c8>)
 80033ec:	5ccb      	ldrb	r3, [r1, r3]
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <HAL_RCC_ClockConfig+0x1cc>)
 80033f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_ClockConfig+0x1d0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe f800 	bl	8001400 <HAL_InitTick>

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40022000 	.word	0x40022000
 8003410:	40021000 	.word	0x40021000
 8003414:	0800c49c 	.word	0x0800c49c
 8003418:	20000000 	.word	0x20000000
 800341c:	20000004 	.word	0x20000004

08003420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003420:	b490      	push	{r4, r7}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003426:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003428:	1d3c      	adds	r4, r7, #4
 800342a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800342c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003430:	f240 2301 	movw	r3, #513	; 0x201
 8003434:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	2300      	movs	r3, #0
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800344a:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b04      	cmp	r3, #4
 8003458:	d002      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x40>
 800345a:	2b08      	cmp	r3, #8
 800345c:	d003      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x46>
 800345e:	e02d      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003462:	623b      	str	r3, [r7, #32]
      break;
 8003464:	e02d      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	0c9b      	lsrs	r3, r3, #18
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003472:	4413      	add	r3, r2
 8003474:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003478:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d013      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	0c5b      	lsrs	r3, r3, #17
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003492:	4413      	add	r3, r2
 8003494:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003498:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	4a0e      	ldr	r2, [pc, #56]	; (80034d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800349e:	fb02 f203 	mul.w	r2, r2, r3
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
 80034aa:	e004      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	4a0b      	ldr	r2, [pc, #44]	; (80034dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80034b0:	fb02 f303 	mul.w	r3, r2, r3
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	623b      	str	r3, [r7, #32]
      break;
 80034ba:	e002      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034be:	623b      	str	r3, [r7, #32]
      break;
 80034c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034c2:	6a3b      	ldr	r3, [r7, #32]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3728      	adds	r7, #40	; 0x28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc90      	pop	{r4, r7}
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	0800c394 	.word	0x0800c394
 80034d4:	40021000 	.word	0x40021000
 80034d8:	007a1200 	.word	0x007a1200
 80034dc:	003d0900 	.word	0x003d0900

080034e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e4:	4b02      	ldr	r3, [pc, #8]	; (80034f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr
 80034f0:	20000000 	.word	0x20000000

080034f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034f8:	f7ff fff2 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	0a1b      	lsrs	r3, r3, #8
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4903      	ldr	r1, [pc, #12]	; (8003518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40021000 	.word	0x40021000
 8003518:	0800c4ac 	.word	0x0800c4ac

0800351c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003520:	f7ff ffde 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	0adb      	lsrs	r3, r3, #11
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	; (8003540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	0800c4ac 	.word	0x0800c4ac

08003544 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	220f      	movs	r2, #15
 8003552:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_RCC_GetClockConfig+0x58>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0203 	and.w	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003560:	4b0e      	ldr	r3, [pc, #56]	; (800359c <HAL_RCC_GetClockConfig+0x58>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_GetClockConfig+0x58>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003578:	4b08      	ldr	r3, [pc, #32]	; (800359c <HAL_RCC_GetClockConfig+0x58>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	08db      	lsrs	r3, r3, #3
 800357e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0207 	and.w	r2, r3, #7
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	40021000 	.word	0x40021000
 80035a0:	40022000 	.word	0x40022000

080035a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035ac:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <RCC_Delay+0x34>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <RCC_Delay+0x38>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0a5b      	lsrs	r3, r3, #9
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	fb02 f303 	mul.w	r3, r2, r3
 80035be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035c0:	bf00      	nop
  }
  while (Delay --);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1e5a      	subs	r2, r3, #1
 80035c6:	60fa      	str	r2, [r7, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f9      	bne.n	80035c0 <RCC_Delay+0x1c>
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	20000000 	.word	0x20000000
 80035dc:	10624dd3 	.word	0x10624dd3

080035e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d07d      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80035fc:	2300      	movs	r3, #0
 80035fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003600:	4b4f      	ldr	r3, [pc, #316]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10d      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360c:	4b4c      	ldr	r3, [pc, #304]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	4a4b      	ldr	r2, [pc, #300]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003616:	61d3      	str	r3, [r2, #28]
 8003618:	4b49      	ldr	r3, [pc, #292]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003624:	2301      	movs	r3, #1
 8003626:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	4b46      	ldr	r3, [pc, #280]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d118      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003634:	4b43      	ldr	r3, [pc, #268]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a42      	ldr	r2, [pc, #264]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800363a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003640:	f7fe fbc8 	bl	8001dd4 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003646:	e008      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003648:	f7fe fbc4 	bl	8001dd4 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	; 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e06d      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4b3a      	ldr	r3, [pc, #232]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003666:	4b36      	ldr	r3, [pc, #216]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d02e      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	429a      	cmp	r2, r3
 8003682:	d027      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003684:	4b2e      	ldr	r3, [pc, #184]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800368e:	4b2e      	ldr	r3, [pc, #184]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003694:	4b2c      	ldr	r3, [pc, #176]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800369a:	4a29      	ldr	r2, [pc, #164]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d014      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe fb93 	bl	8001dd4 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fe fb8f 	bl	8001dd4 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e036      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ee      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036d4:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4917      	ldr	r1, [pc, #92]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ec:	4b14      	ldr	r3, [pc, #80]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	4a13      	ldr	r2, [pc, #76]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	490b      	ldr	r1, [pc, #44]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003722:	4b07      	ldr	r3, [pc, #28]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	4904      	ldr	r1, [pc, #16]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	40007000 	.word	0x40007000
 8003748:	42420440 	.word	0x42420440

0800374c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b08d      	sub	sp, #52	; 0x34
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003754:	4b5a      	ldr	r3, [pc, #360]	; (80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003756:	f107 040c 	add.w	r4, r7, #12
 800375a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800375c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003760:	f240 2301 	movw	r3, #513	; 0x201
 8003764:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
 800376a:	2300      	movs	r3, #0
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800376e:	2300      	movs	r3, #0
 8003770:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	2300      	movs	r3, #0
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b10      	cmp	r3, #16
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b10      	cmp	r3, #16
 8003784:	f200 8091 	bhi.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d04c      	beq.n	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d07c      	beq.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003794:	e089      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003796:	4b4b      	ldr	r3, [pc, #300]	; (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800379c:	4b49      	ldr	r3, [pc, #292]	; (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8082 	beq.w	80038ae <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	0c9b      	lsrs	r3, r3, #18
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80037b6:	4413      	add	r3, r2
 80037b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037bc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d018      	beq.n	80037fa <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037c8:	4b3e      	ldr	r3, [pc, #248]	; (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	0c5b      	lsrs	r3, r3, #17
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80037d6:	4413      	add	r3, r2
 80037d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00d      	beq.n	8003804 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80037e8:	4a37      	ldr	r2, [pc, #220]	; (80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f8:	e004      	b.n	8003804 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	4a33      	ldr	r2, [pc, #204]	; (80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003804:	4b2f      	ldr	r3, [pc, #188]	; (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003810:	d102      	bne.n	8003818 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003816:	e04a      	b.n	80038ae <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4a2c      	ldr	r2, [pc, #176]	; (80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003826:	e042      	b.n	80038ae <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003828:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003838:	d108      	bne.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003848:	62bb      	str	r3, [r7, #40]	; 0x28
 800384a:	e01f      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003856:	d109      	bne.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003858:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003864:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
 800386a:	e00f      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003876:	d11c      	bne.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003878:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d016      	beq.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003884:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800388a:	e012      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800388c:	e011      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800388e:	f7ff fe45 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 8003892:	4602      	mov	r2, r0
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	0b9b      	lsrs	r3, r3, #14
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	3301      	adds	r3, #1
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80038a8:	e004      	b.n	80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80038aa:	bf00      	nop
 80038ac:	e002      	b.n	80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80038ae:	bf00      	nop
 80038b0:	e000      	b.n	80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80038b2:	bf00      	nop
    }
  }
  return (frequency);
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3734      	adds	r7, #52	; 0x34
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd90      	pop	{r4, r7, pc}
 80038be:	bf00      	nop
 80038c0:	0800c3a4 	.word	0x0800c3a4
 80038c4:	40021000 	.word	0x40021000
 80038c8:	007a1200 	.word	0x007a1200
 80038cc:	003d0900 	.word	0x003d0900
 80038d0:	aaaaaaab 	.word	0xaaaaaaab

080038d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e041      	b.n	800396a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fd ffdc 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	4619      	mov	r1, r3
 8003912:	4610      	mov	r0, r2
 8003914:	f000 fb56 	bl	8003fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d001      	beq.n	800398c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e032      	b.n	80039f2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a18      	ldr	r2, [pc, #96]	; (80039fc <HAL_TIM_Base_Start+0x88>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00e      	beq.n	80039bc <HAL_TIM_Base_Start+0x48>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a6:	d009      	beq.n	80039bc <HAL_TIM_Base_Start+0x48>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <HAL_TIM_Base_Start+0x8c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_TIM_Base_Start+0x48>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <HAL_TIM_Base_Start+0x90>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d111      	bne.n	80039e0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d010      	beq.n	80039f0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0201 	orr.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039de:	e007      	b.n	80039f0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	40012c00 	.word	0x40012c00
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800

08003a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d001      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e03a      	b.n	8003a96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <HAL_TIM_Base_Start_IT+0x98>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00e      	beq.n	8003a60 <HAL_TIM_Base_Start_IT+0x58>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4a:	d009      	beq.n	8003a60 <HAL_TIM_Base_Start_IT+0x58>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a14      	ldr	r2, [pc, #80]	; (8003aa4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <HAL_TIM_Base_Start_IT+0x58>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d111      	bne.n	8003a84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b06      	cmp	r3, #6
 8003a70:	d010      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0201 	orr.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a82:	e007      	b.n	8003a94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	40012c00 	.word	0x40012c00
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800

08003aac <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e041      	b.n	8003b44 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f839 	bl	8003b4c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f000 fa69 	bl	8003fc4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0208 	bic.w	r2, r2, #8
 8003b00:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6819      	ldr	r1, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d122      	bne.n	8003bba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d11b      	bne.n	8003bba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f06f 0202 	mvn.w	r2, #2
 8003b8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f9f3 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003ba6:	e005      	b.n	8003bb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f9e6 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f9f5 	bl	8003f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d122      	bne.n	8003c0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d11b      	bne.n	8003c0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f06f 0204 	mvn.w	r2, #4
 8003bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f9c9 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003bfa:	e005      	b.n	8003c08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f9bc 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9cb 	bl	8003f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d122      	bne.n	8003c62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d11b      	bne.n	8003c62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f06f 0208 	mvn.w	r2, #8
 8003c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2204      	movs	r2, #4
 8003c38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f99f 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003c4e:	e005      	b.n	8003c5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f992 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f9a1 	bl	8003f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d122      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d11b      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f06f 0210 	mvn.w	r2, #16
 8003c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2208      	movs	r2, #8
 8003c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f975 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003ca2:	e005      	b.n	8003cb0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f968 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f977 	bl	8003f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d10e      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d107      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f06f 0201 	mvn.w	r2, #1
 8003cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7fd fa2b 	bl	8001138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	2b80      	cmp	r3, #128	; 0x80
 8003cee:	d10e      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b80      	cmp	r3, #128	; 0x80
 8003cfc:	d107      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fb48 	bl	800439e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d10e      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b40      	cmp	r3, #64	; 0x40
 8003d28:	d107      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f93b 	bl	8003fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d10e      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d107      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f06f 0220 	mvn.w	r2, #32
 8003d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fb13 	bl	800438c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_ConfigClockSource+0x18>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e0b3      	b.n	8003eee <HAL_TIM_ConfigClockSource+0x180>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2202      	movs	r2, #2
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003da4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dac:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dbe:	d03e      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0xd0>
 8003dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc4:	f200 8087 	bhi.w	8003ed6 <HAL_TIM_ConfigClockSource+0x168>
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dcc:	f000 8085 	beq.w	8003eda <HAL_TIM_ConfigClockSource+0x16c>
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd4:	d87f      	bhi.n	8003ed6 <HAL_TIM_ConfigClockSource+0x168>
 8003dd6:	2b70      	cmp	r3, #112	; 0x70
 8003dd8:	d01a      	beq.n	8003e10 <HAL_TIM_ConfigClockSource+0xa2>
 8003dda:	2b70      	cmp	r3, #112	; 0x70
 8003ddc:	d87b      	bhi.n	8003ed6 <HAL_TIM_ConfigClockSource+0x168>
 8003dde:	2b60      	cmp	r3, #96	; 0x60
 8003de0:	d050      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x116>
 8003de2:	2b60      	cmp	r3, #96	; 0x60
 8003de4:	d877      	bhi.n	8003ed6 <HAL_TIM_ConfigClockSource+0x168>
 8003de6:	2b50      	cmp	r3, #80	; 0x50
 8003de8:	d03c      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0xf6>
 8003dea:	2b50      	cmp	r3, #80	; 0x50
 8003dec:	d873      	bhi.n	8003ed6 <HAL_TIM_ConfigClockSource+0x168>
 8003dee:	2b40      	cmp	r3, #64	; 0x40
 8003df0:	d058      	beq.n	8003ea4 <HAL_TIM_ConfigClockSource+0x136>
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	d86f      	bhi.n	8003ed6 <HAL_TIM_ConfigClockSource+0x168>
 8003df6:	2b30      	cmp	r3, #48	; 0x30
 8003df8:	d064      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0x156>
 8003dfa:	2b30      	cmp	r3, #48	; 0x30
 8003dfc:	d86b      	bhi.n	8003ed6 <HAL_TIM_ConfigClockSource+0x168>
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d060      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0x156>
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d867      	bhi.n	8003ed6 <HAL_TIM_ConfigClockSource+0x168>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d05c      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0x156>
 8003e0a:	2b10      	cmp	r3, #16
 8003e0c:	d05a      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e0e:	e062      	b.n	8003ed6 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6899      	ldr	r1, [r3, #8]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f000 fa37 	bl	8004292 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	609a      	str	r2, [r3, #8]
      break;
 8003e3c:	e04e      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6899      	ldr	r1, [r3, #8]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f000 fa20 	bl	8004292 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e60:	609a      	str	r2, [r3, #8]
      break;
 8003e62:	e03b      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	461a      	mov	r2, r3
 8003e72:	f000 f997 	bl	80041a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2150      	movs	r1, #80	; 0x50
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 f9ee 	bl	800425e <TIM_ITRx_SetConfig>
      break;
 8003e82:	e02b      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6818      	ldr	r0, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	461a      	mov	r2, r3
 8003e92:	f000 f9b5 	bl	8004200 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2160      	movs	r1, #96	; 0x60
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 f9de 	bl	800425e <TIM_ITRx_SetConfig>
      break;
 8003ea2:	e01b      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f000 f977 	bl	80041a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2140      	movs	r1, #64	; 0x40
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f9ce 	bl	800425e <TIM_ITRx_SetConfig>
      break;
 8003ec2:	e00b      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f000 f9c5 	bl	800425e <TIM_ITRx_SetConfig>
        break;
 8003ed4:	e002      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_TIM_SlaveConfigSynchro+0x18>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e031      	b.n	8003f72 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003f1e:	6839      	ldr	r1, [r7, #0]
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f8b1 	bl	8004088 <TIM_SlaveTimer_SetConfig>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d009      	beq.n	8003f40 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e018      	b.n	8003f72 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f4e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f5e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr
	...

08003fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a29      	ldr	r2, [pc, #164]	; (800407c <TIM_Base_SetConfig+0xb8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00b      	beq.n	8003ff4 <TIM_Base_SetConfig+0x30>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe2:	d007      	beq.n	8003ff4 <TIM_Base_SetConfig+0x30>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a26      	ldr	r2, [pc, #152]	; (8004080 <TIM_Base_SetConfig+0xbc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_Base_SetConfig+0x30>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a25      	ldr	r2, [pc, #148]	; (8004084 <TIM_Base_SetConfig+0xc0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d108      	bne.n	8004006 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1c      	ldr	r2, [pc, #112]	; (800407c <TIM_Base_SetConfig+0xb8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00b      	beq.n	8004026 <TIM_Base_SetConfig+0x62>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d007      	beq.n	8004026 <TIM_Base_SetConfig+0x62>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a19      	ldr	r2, [pc, #100]	; (8004080 <TIM_Base_SetConfig+0xbc>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d003      	beq.n	8004026 <TIM_Base_SetConfig+0x62>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a18      	ldr	r2, [pc, #96]	; (8004084 <TIM_Base_SetConfig+0xc0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d108      	bne.n	8004038 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a07      	ldr	r2, [pc, #28]	; (800407c <TIM_Base_SetConfig+0xb8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d103      	bne.n	800406c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	615a      	str	r2, [r3, #20]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800

08004088 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0307 	bic.w	r3, r3, #7
 80040b2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b70      	cmp	r3, #112	; 0x70
 80040cc:	d01a      	beq.n	8004104 <TIM_SlaveTimer_SetConfig+0x7c>
 80040ce:	2b70      	cmp	r3, #112	; 0x70
 80040d0:	d860      	bhi.n	8004194 <TIM_SlaveTimer_SetConfig+0x10c>
 80040d2:	2b60      	cmp	r3, #96	; 0x60
 80040d4:	d054      	beq.n	8004180 <TIM_SlaveTimer_SetConfig+0xf8>
 80040d6:	2b60      	cmp	r3, #96	; 0x60
 80040d8:	d85c      	bhi.n	8004194 <TIM_SlaveTimer_SetConfig+0x10c>
 80040da:	2b50      	cmp	r3, #80	; 0x50
 80040dc:	d046      	beq.n	800416c <TIM_SlaveTimer_SetConfig+0xe4>
 80040de:	2b50      	cmp	r3, #80	; 0x50
 80040e0:	d858      	bhi.n	8004194 <TIM_SlaveTimer_SetConfig+0x10c>
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d019      	beq.n	800411a <TIM_SlaveTimer_SetConfig+0x92>
 80040e6:	2b40      	cmp	r3, #64	; 0x40
 80040e8:	d854      	bhi.n	8004194 <TIM_SlaveTimer_SetConfig+0x10c>
 80040ea:	2b30      	cmp	r3, #48	; 0x30
 80040ec:	d054      	beq.n	8004198 <TIM_SlaveTimer_SetConfig+0x110>
 80040ee:	2b30      	cmp	r3, #48	; 0x30
 80040f0:	d850      	bhi.n	8004194 <TIM_SlaveTimer_SetConfig+0x10c>
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d050      	beq.n	8004198 <TIM_SlaveTimer_SetConfig+0x110>
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d84c      	bhi.n	8004194 <TIM_SlaveTimer_SetConfig+0x10c>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d04c      	beq.n	8004198 <TIM_SlaveTimer_SetConfig+0x110>
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d04a      	beq.n	8004198 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8004102:	e047      	b.n	8004194 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68d9      	ldr	r1, [r3, #12]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	f000 f8bd 	bl	8004292 <TIM_ETR_SetConfig>
      break;
 8004118:	e03f      	b.n	800419a <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b05      	cmp	r3, #5
 8004120:	d101      	bne.n	8004126 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e03a      	b.n	800419c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6a1a      	ldr	r2, [r3, #32]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800414c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	621a      	str	r2, [r3, #32]
      break;
 800416a:	e016      	b.n	800419a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6899      	ldr	r1, [r3, #8]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	461a      	mov	r2, r3
 800417a:	f000 f813 	bl	80041a4 <TIM_TI1_ConfigInputStage>
      break;
 800417e:	e00c      	b.n	800419a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	461a      	mov	r2, r3
 800418e:	f000 f837 	bl	8004200 <TIM_TI2_ConfigInputStage>
      break;
 8004192:	e002      	b.n	800419a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004194:	bf00      	nop
 8004196:	e000      	b.n	800419a <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004198:	bf00      	nop
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f023 0201 	bic.w	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f023 030a 	bic.w	r3, r3, #10
 80041e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	621a      	str	r2, [r3, #32]
}
 80041f6:	bf00      	nop
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	f023 0210 	bic.w	r2, r3, #16
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800422a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	031b      	lsls	r3, r3, #12
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800423c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	621a      	str	r2, [r3, #32]
}
 8004254:	bf00      	nop
 8004256:	371c      	adds	r7, #28
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr

0800425e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800425e:	b480      	push	{r7}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004274:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	f043 0307 	orr.w	r3, r3, #7
 8004280:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	609a      	str	r2, [r3, #8]
}
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr

08004292 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004292:	b480      	push	{r7}
 8004294:	b087      	sub	sp, #28
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
 800429e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	021a      	lsls	r2, r3, #8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	609a      	str	r2, [r3, #8]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr

080042d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e046      	b.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a16      	ldr	r2, [pc, #88]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00e      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004334:	d009      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a12      	ldr	r2, [pc, #72]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a10      	ldr	r2, [pc, #64]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10c      	bne.n	8004364 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	4313      	orrs	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr
 8004380:	40012c00 	.word	0x40012c00
 8004384:	40000400 	.word	0x40000400
 8004388:	40000800 	.word	0x40000800

0800438c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr

0800439e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr

080043b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e03f      	b.n	8004442 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fd fafc 	bl	80019d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2224      	movs	r2, #36	; 0x24
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f9a7 	bl	8004748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b08a      	sub	sp, #40	; 0x28
 800444e:	af02      	add	r7, sp, #8
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	603b      	str	r3, [r7, #0]
 8004456:	4613      	mov	r3, r2
 8004458:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b20      	cmp	r3, #32
 8004468:	d17c      	bne.n	8004564 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_UART_Transmit+0x2c>
 8004470:	88fb      	ldrh	r3, [r7, #6]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e075      	b.n	8004566 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_UART_Transmit+0x3e>
 8004484:	2302      	movs	r3, #2
 8004486:	e06e      	b.n	8004566 <HAL_UART_Transmit+0x11c>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2221      	movs	r2, #33	; 0x21
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800449e:	f7fd fc99 	bl	8001dd4 <HAL_GetTick>
 80044a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	88fa      	ldrh	r2, [r7, #6]
 80044a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	88fa      	ldrh	r2, [r7, #6]
 80044ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b8:	d108      	bne.n	80044cc <HAL_UART_Transmit+0x82>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d104      	bne.n	80044cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	e003      	b.n	80044d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044dc:	e02a      	b.n	8004534 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2200      	movs	r2, #0
 80044e6:	2180      	movs	r1, #128	; 0x80
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f8e2 	bl	80046b2 <UART_WaitOnFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e036      	b.n	8004566 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800450c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	3302      	adds	r3, #2
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	e007      	b.n	8004526 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	3301      	adds	r3, #1
 8004524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1cf      	bne.n	80044de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2200      	movs	r2, #0
 8004546:	2140      	movs	r1, #64	; 0x40
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f8b2 	bl	80046b2 <UART_WaitOnFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e006      	b.n	8004566 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e000      	b.n	8004566 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b08a      	sub	sp, #40	; 0x28
 8004572:	af02      	add	r7, sp, #8
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	603b      	str	r3, [r7, #0]
 800457a:	4613      	mov	r3, r2
 800457c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b20      	cmp	r3, #32
 800458c:	f040 808c 	bne.w	80046a8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_UART_Receive+0x2e>
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e084      	b.n	80046aa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Receive+0x40>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e07d      	b.n	80046aa <HAL_UART_Receive+0x13c>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2222      	movs	r2, #34	; 0x22
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ca:	f7fd fc03 	bl	8001dd4 <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e4:	d108      	bne.n	80045f8 <HAL_UART_Receive+0x8a>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e003      	b.n	8004600 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004608:	e043      	b.n	8004692 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	2120      	movs	r1, #32
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f84c 	bl	80046b2 <UART_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e042      	b.n	80046aa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10c      	bne.n	8004644 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	b29b      	uxth	r3, r3
 8004632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004636:	b29a      	uxth	r2, r3
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	3302      	adds	r3, #2
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	e01f      	b.n	8004684 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464c:	d007      	beq.n	800465e <HAL_UART_Receive+0xf0>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <HAL_UART_Receive+0xfe>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	b2da      	uxtb	r2, r3
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	e008      	b.n	800467e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004678:	b2da      	uxtb	r2, r3
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	3301      	adds	r3, #1
 8004682:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1b6      	bne.n	800460a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e000      	b.n	80046aa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	4613      	mov	r3, r2
 80046c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c2:	e02c      	b.n	800471e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ca:	d028      	beq.n	800471e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80046d2:	f7fd fb7f 	bl	8001dd4 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d21d      	bcs.n	800471e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046f0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695a      	ldr	r2, [r3, #20]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0201 	bic.w	r2, r2, #1
 8004700:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e00f      	b.n	800473e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4013      	ands	r3, r2
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	429a      	cmp	r2, r3
 800472c:	bf0c      	ite	eq
 800472e:	2301      	moveq	r3, #1
 8004730:	2300      	movne	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	429a      	cmp	r2, r3
 800473a:	d0c3      	beq.n	80046c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004782:	f023 030c 	bic.w	r3, r3, #12
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	430b      	orrs	r3, r1
 800478e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2c      	ldr	r2, [pc, #176]	; (800485c <UART_SetConfig+0x114>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d103      	bne.n	80047b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047b0:	f7fe feb4 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	e002      	b.n	80047be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047b8:	f7fe fe9c 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 80047bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009a      	lsls	r2, r3, #2
 80047c8:	441a      	add	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	4a22      	ldr	r2, [pc, #136]	; (8004860 <UART_SetConfig+0x118>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	0119      	lsls	r1, r3, #4
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	009a      	lsls	r2, r3, #2
 80047e8:	441a      	add	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f4:	4b1a      	ldr	r3, [pc, #104]	; (8004860 <UART_SetConfig+0x118>)
 80047f6:	fba3 0302 	umull	r0, r3, r3, r2
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2064      	movs	r0, #100	; 0x64
 80047fe:	fb00 f303 	mul.w	r3, r0, r3
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	3332      	adds	r3, #50	; 0x32
 8004808:	4a15      	ldr	r2, [pc, #84]	; (8004860 <UART_SetConfig+0x118>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004814:	4419      	add	r1, r3
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009a      	lsls	r2, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	fbb2 f2f3 	udiv	r2, r2, r3
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <UART_SetConfig+0x118>)
 800482e:	fba3 0302 	umull	r0, r3, r3, r2
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	2064      	movs	r0, #100	; 0x64
 8004836:	fb00 f303 	mul.w	r3, r0, r3
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	3332      	adds	r3, #50	; 0x32
 8004840:	4a07      	ldr	r2, [pc, #28]	; (8004860 <UART_SetConfig+0x118>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	f003 020f 	and.w	r2, r3, #15
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	440a      	add	r2, r1
 8004852:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004854:	bf00      	nop
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40013800 	.word	0x40013800
 8004860:	51eb851f 	.word	0x51eb851f

08004864 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800486a:	f3ef 8305 	mrs	r3, IPSR
 800486e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004870:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10f      	bne.n	8004896 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004876:	f3ef 8310 	mrs	r3, PRIMASK
 800487a:	607b      	str	r3, [r7, #4]
  return(result);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <osKernelInitialize+0x32>
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <osKernelInitialize+0x60>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d109      	bne.n	800489e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800488a:	f3ef 8311 	mrs	r3, BASEPRI
 800488e:	603b      	str	r3, [r7, #0]
  return(result);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004896:	f06f 0305 	mvn.w	r3, #5
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e00c      	b.n	80048b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <osKernelInitialize+0x60>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d105      	bne.n	80048b2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80048a6:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <osKernelInitialize+0x60>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e002      	b.n	80048b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80048b2:	f04f 33ff 	mov.w	r3, #4294967295
 80048b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80048b8:	68fb      	ldr	r3, [r7, #12]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr
 80048c4:	20000204 	.word	0x20000204

080048c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ce:	f3ef 8305 	mrs	r3, IPSR
 80048d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80048d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10f      	bne.n	80048fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048da:	f3ef 8310 	mrs	r3, PRIMASK
 80048de:	607b      	str	r3, [r7, #4]
  return(result);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <osKernelStart+0x32>
 80048e6:	4b11      	ldr	r3, [pc, #68]	; (800492c <osKernelStart+0x64>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d109      	bne.n	8004902 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048ee:	f3ef 8311 	mrs	r3, BASEPRI
 80048f2:	603b      	str	r3, [r7, #0]
  return(result);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <osKernelStart+0x3a>
    stat = osErrorISR;
 80048fa:	f06f 0305 	mvn.w	r3, #5
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	e00e      	b.n	8004920 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004902:	4b0a      	ldr	r3, [pc, #40]	; (800492c <osKernelStart+0x64>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d107      	bne.n	800491a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800490a:	4b08      	ldr	r3, [pc, #32]	; (800492c <osKernelStart+0x64>)
 800490c:	2202      	movs	r2, #2
 800490e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004910:	f001 fb5a 	bl	8005fc8 <vTaskStartScheduler>
      stat = osOK;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	e002      	b.n	8004920 <osKernelStart+0x58>
    } else {
      stat = osError;
 800491a:	f04f 33ff 	mov.w	r3, #4294967295
 800491e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004920:	68fb      	ldr	r3, [r7, #12]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000204 	.word	0x20000204

08004930 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b092      	sub	sp, #72	; 0x48
 8004934:	af04      	add	r7, sp, #16
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004940:	f3ef 8305 	mrs	r3, IPSR
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004948:	2b00      	cmp	r3, #0
 800494a:	f040 8094 	bne.w	8004a76 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800494e:	f3ef 8310 	mrs	r3, PRIMASK
 8004952:	623b      	str	r3, [r7, #32]
  return(result);
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f040 808d 	bne.w	8004a76 <osThreadNew+0x146>
 800495c:	4b48      	ldr	r3, [pc, #288]	; (8004a80 <osThreadNew+0x150>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d106      	bne.n	8004972 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004964:	f3ef 8311 	mrs	r3, BASEPRI
 8004968:	61fb      	str	r3, [r7, #28]
  return(result);
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f040 8082 	bne.w	8004a76 <osThreadNew+0x146>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d07e      	beq.n	8004a76 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004978:	2380      	movs	r3, #128	; 0x80
 800497a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800497c:	2318      	movs	r3, #24
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004980:	2300      	movs	r3, #0
 8004982:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004984:	f107 031b 	add.w	r3, r7, #27
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800498a:	f04f 33ff 	mov.w	r3, #4294967295
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d045      	beq.n	8004a22 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <osThreadNew+0x74>
        name = attr->name;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <osThreadNew+0x9a>
 80049b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ba:	2b38      	cmp	r3, #56	; 0x38
 80049bc:	d805      	bhi.n	80049ca <osThreadNew+0x9a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <osThreadNew+0x9e>
        return (NULL);
 80049ca:	2300      	movs	r3, #0
 80049cc:	e054      	b.n	8004a78 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	089b      	lsrs	r3, r3, #2
 80049dc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00e      	beq.n	8004a04 <osThreadNew+0xd4>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2bbb      	cmp	r3, #187	; 0xbb
 80049ec:	d90a      	bls.n	8004a04 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d006      	beq.n	8004a04 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <osThreadNew+0xd4>
        mem = 1;
 80049fe:	2301      	movs	r3, #1
 8004a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a02:	e010      	b.n	8004a26 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10c      	bne.n	8004a26 <osThreadNew+0xf6>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d108      	bne.n	8004a26 <osThreadNew+0xf6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d104      	bne.n	8004a26 <osThreadNew+0xf6>
          mem = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a20:	e001      	b.n	8004a26 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d110      	bne.n	8004a4e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a34:	9202      	str	r2, [sp, #8]
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f001 f85e 	bl	8005b04 <xTaskCreateStatic>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	e013      	b.n	8004a76 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d110      	bne.n	8004a76 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	f107 0314 	add.w	r3, r7, #20
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f001 f8a8 	bl	8005bbc <xTaskCreate>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d001      	beq.n	8004a76 <osThreadNew+0x146>
          hTask = NULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a76:	697b      	ldr	r3, [r7, #20]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3738      	adds	r7, #56	; 0x38
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000204 	.word	0x20000204

08004a84 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a8c:	f3ef 8305 	mrs	r3, IPSR
 8004a90:	613b      	str	r3, [r7, #16]
  return(result);
 8004a92:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10f      	bne.n	8004ab8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a98:	f3ef 8310 	mrs	r3, PRIMASK
 8004a9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <osDelay+0x34>
 8004aa4:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <osDelay+0x58>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d109      	bne.n	8004ac0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aac:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <osDelay+0x3c>
    stat = osErrorISR;
 8004ab8:	f06f 0305 	mvn.w	r3, #5
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e007      	b.n	8004ad0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f001 fa48 	bl	8005f60 <vTaskDelay>
    }
  }

  return (stat);
 8004ad0:	697b      	ldr	r3, [r7, #20]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000204 	.word	0x20000204

08004ae0 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ae8:	f3ef 8305 	mrs	r3, IPSR
 8004aec:	61bb      	str	r3, [r7, #24]
  return(result);
 8004aee:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10f      	bne.n	8004b14 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af4:	f3ef 8310 	mrs	r3, PRIMASK
 8004af8:	617b      	str	r3, [r7, #20]
  return(result);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d109      	bne.n	8004b14 <osDelayUntil+0x34>
 8004b00:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <osDelayUntil+0x64>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d109      	bne.n	8004b1c <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b08:	f3ef 8311 	mrs	r3, BASEPRI
 8004b0c:	613b      	str	r3, [r7, #16]
  return(result);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <osDelayUntil+0x3c>
    stat = osErrorISR;
 8004b14:	f06f 0305 	mvn.w	r3, #5
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	e00e      	b.n	8004b3a <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8004b20:	f001 fb6e 	bl	8006200 <xTaskGetTickCount>
 8004b24:	4603      	mov	r3, r0
 8004b26:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	1ad2      	subs	r2, r2, r3
 8004b2e:	f107 030c 	add.w	r3, r7, #12
 8004b32:	4611      	mov	r1, r2
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 f995 	bl	8005e64 <vTaskDelayUntil>
  }

  return (stat);
 8004b3a:	69fb      	ldr	r3, [r7, #28]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000204 	.word	0x20000204

08004b48 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08c      	sub	sp, #48	; 0x30
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b58:	f3ef 8305 	mrs	r3, IPSR
 8004b5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b5e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f040 8086 	bne.w	8004c72 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b66:	f3ef 8310 	mrs	r3, PRIMASK
 8004b6a:	617b      	str	r3, [r7, #20]
  return(result);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d17f      	bne.n	8004c72 <osSemaphoreNew+0x12a>
 8004b72:	4b42      	ldr	r3, [pc, #264]	; (8004c7c <osSemaphoreNew+0x134>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d105      	bne.n	8004b86 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b7a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b7e:	613b      	str	r3, [r7, #16]
  return(result);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d175      	bne.n	8004c72 <osSemaphoreNew+0x12a>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d072      	beq.n	8004c72 <osSemaphoreNew+0x12a>
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d86e      	bhi.n	8004c72 <osSemaphoreNew+0x12a>
    mem = -1;
 8004b94:	f04f 33ff 	mov.w	r3, #4294967295
 8004b98:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d015      	beq.n	8004bcc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d006      	beq.n	8004bb6 <osSemaphoreNew+0x6e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b4f      	cmp	r3, #79	; 0x4f
 8004bae:	d902      	bls.n	8004bb6 <osSemaphoreNew+0x6e>
        mem = 1;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	623b      	str	r3, [r7, #32]
 8004bb4:	e00c      	b.n	8004bd0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d108      	bne.n	8004bd0 <osSemaphoreNew+0x88>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d104      	bne.n	8004bd0 <osSemaphoreNew+0x88>
          mem = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	623b      	str	r3, [r7, #32]
 8004bca:	e001      	b.n	8004bd0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d04c      	beq.n	8004c72 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d128      	bne.n	8004c30 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d10a      	bne.n	8004bfa <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2203      	movs	r2, #3
 8004bea:	9200      	str	r2, [sp, #0]
 8004bec:	2200      	movs	r2, #0
 8004bee:	2100      	movs	r1, #0
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	f000 fa15 	bl	8005020 <xQueueGenericCreateStatic>
 8004bf6:	6278      	str	r0, [r7, #36]	; 0x24
 8004bf8:	e005      	b.n	8004c06 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	2001      	movs	r0, #1
 8004c00:	f000 fa85 	bl	800510e <xQueueGenericCreate>
 8004c04:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d022      	beq.n	8004c52 <osSemaphoreNew+0x10a>
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01f      	beq.n	8004c52 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004c12:	2300      	movs	r3, #0
 8004c14:	2200      	movs	r2, #0
 8004c16:	2100      	movs	r1, #0
 8004c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c1a:	f000 fb43 	bl	80052a4 <xQueueGenericSend>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d016      	beq.n	8004c52 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c26:	f000 fdb3 	bl	8005790 <vQueueDelete>
            hSemaphore = NULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2e:	e010      	b.n	8004c52 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d108      	bne.n	8004c48 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 fac6 	bl	80051d0 <xQueueCreateCountingSemaphoreStatic>
 8004c44:	6278      	str	r0, [r7, #36]	; 0x24
 8004c46:	e004      	b.n	8004c52 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 faf7 	bl	800523e <xQueueCreateCountingSemaphore>
 8004c50:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00c      	beq.n	8004c72 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <osSemaphoreNew+0x11e>
          name = attr->name;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	e001      	b.n	8004c6a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004c6a:	69f9      	ldr	r1, [r7, #28]
 8004c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c6e:	f000 fec3 	bl	80059f8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3728      	adds	r7, #40	; 0x28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20000204 	.word	0x20000204

08004c80 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08c      	sub	sp, #48	; 0x30
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c90:	f3ef 8305 	mrs	r3, IPSR
 8004c94:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c96:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d16f      	bne.n	8004d7c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d169      	bne.n	8004d7c <osMessageQueueNew+0xfc>
 8004ca8:	4b37      	ldr	r3, [pc, #220]	; (8004d88 <osMessageQueueNew+0x108>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d105      	bne.n	8004cbc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8004cb4:	613b      	str	r3, [r7, #16]
  return(result);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d15f      	bne.n	8004d7c <osMessageQueueNew+0xfc>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d05c      	beq.n	8004d7c <osMessageQueueNew+0xfc>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d059      	beq.n	8004d7c <osMessageQueueNew+0xfc>
    mem = -1;
 8004cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ccc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d029      	beq.n	8004d28 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d012      	beq.n	8004d02 <osMessageQueueNew+0x82>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	2b4f      	cmp	r3, #79	; 0x4f
 8004ce2:	d90e      	bls.n	8004d02 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d302      	bcc.n	8004d02 <osMessageQueueNew+0x82>
        mem = 1;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	e014      	b.n	8004d2c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d110      	bne.n	8004d2c <osMessageQueueNew+0xac>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10c      	bne.n	8004d2c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d108      	bne.n	8004d2c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d104      	bne.n	8004d2c <osMessageQueueNew+0xac>
          mem = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	623b      	str	r3, [r7, #32]
 8004d26:	e001      	b.n	8004d2c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d10b      	bne.n	8004d4a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	9100      	str	r1, [sp, #0]
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f96d 	bl	8005020 <xQueueGenericCreateStatic>
 8004d46:	6278      	str	r0, [r7, #36]	; 0x24
 8004d48:	e008      	b.n	8004d5c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d105      	bne.n	8004d5c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004d50:	2200      	movs	r2, #0
 8004d52:	68b9      	ldr	r1, [r7, #8]
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f9da 	bl	800510e <xQueueGenericCreate>
 8004d5a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00c      	beq.n	8004d7c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <osMessageQueueNew+0xf0>
        name = attr->name;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	e001      	b.n	8004d74 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004d74:	69f9      	ldr	r1, [r7, #28]
 8004d76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d78:	f000 fe3e 	bl	80059f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3728      	adds	r7, #40	; 0x28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000204 	.word	0x20000204

08004d8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4a06      	ldr	r2, [pc, #24]	; (8004db4 <vApplicationGetIdleTaskMemory+0x28>)
 8004d9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4a05      	ldr	r2, [pc, #20]	; (8004db8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004da2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2280      	movs	r2, #128	; 0x80
 8004da8:	601a      	str	r2, [r3, #0]
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr
 8004db4:	20000208 	.word	0x20000208
 8004db8:	200002c4 	.word	0x200002c4

08004dbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4a07      	ldr	r2, [pc, #28]	; (8004de8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004dcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4a06      	ldr	r2, [pc, #24]	; (8004dec <vApplicationGetTimerTaskMemory+0x30>)
 8004dd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dda:	601a      	str	r2, [r3, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	200004c4 	.word	0x200004c4
 8004dec:	20000580 	.word	0x20000580

08004df0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f103 0208 	add.w	r2, r3, #8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f04f 32ff 	mov.w	r2, #4294967295
 8004e08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f103 0208 	add.w	r2, r3, #8
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f103 0208 	add.w	r2, r3, #8
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr

08004e2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr

08004e46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	601a      	str	r2, [r3, #0]
}
 8004e82:	bf00      	nop
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea2:	d103      	bne.n	8004eac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	e00c      	b.n	8004ec6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3308      	adds	r3, #8
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	e002      	b.n	8004eba <vListInsert+0x2e>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d2f6      	bcs.n	8004eb4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	601a      	str	r2, [r3, #0]
}
 8004ef2:	bf00      	nop
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr

08004efc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6892      	ldr	r2, [r2, #8]
 8004f12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6852      	ldr	r2, [r2, #4]
 8004f1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d103      	bne.n	8004f30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	1e5a      	subs	r2, r3, #1
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr
	...

08004f50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10a      	bne.n	8004f7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004f7a:	f002 f98f 	bl	800729c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f8a:	fb01 f303 	mul.w	r3, r1, r3
 8004f8e:	441a      	add	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004faa:	3b01      	subs	r3, #1
 8004fac:	68f9      	ldr	r1, [r7, #12]
 8004fae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fb0:	fb01 f303 	mul.w	r3, r1, r3
 8004fb4:	441a      	add	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	22ff      	movs	r2, #255	; 0xff
 8004fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	22ff      	movs	r2, #255	; 0xff
 8004fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d114      	bne.n	8004ffa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01a      	beq.n	800500e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3310      	adds	r3, #16
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f001 fab5 	bl	800654c <xTaskRemoveFromEventList>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d012      	beq.n	800500e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	; (800501c <xQueueGenericReset+0xcc>)
 8004fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	e009      	b.n	800500e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	3310      	adds	r3, #16
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fef6 	bl	8004df0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	3324      	adds	r3, #36	; 0x24
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fef1 	bl	8004df0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800500e:	f002 f975 	bl	80072fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005012:	2301      	movs	r3, #1
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	e000ed04 	.word	0xe000ed04

08005020 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08e      	sub	sp, #56	; 0x38
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <xQueueGenericCreateStatic+0x52>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <xQueueGenericCreateStatic+0x56>
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <xQueueGenericCreateStatic+0x58>
 8005076:	2300      	movs	r3, #0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	623b      	str	r3, [r7, #32]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d102      	bne.n	800509e <xQueueGenericCreateStatic+0x7e>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <xQueueGenericCreateStatic+0x82>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <xQueueGenericCreateStatic+0x84>
 80050a2:	2300      	movs	r3, #0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	61fb      	str	r3, [r7, #28]
}
 80050ba:	bf00      	nop
 80050bc:	e7fe      	b.n	80050bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050be:	2350      	movs	r3, #80	; 0x50
 80050c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b50      	cmp	r3, #80	; 0x50
 80050c6:	d00a      	beq.n	80050de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	61bb      	str	r3, [r7, #24]
}
 80050da:	bf00      	nop
 80050dc:	e7fe      	b.n	80050dc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00d      	beq.n	8005104 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f843 	bl	800518a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005106:	4618      	mov	r0, r3
 8005108:	3730      	adds	r7, #48	; 0x30
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800510e:	b580      	push	{r7, lr}
 8005110:	b08a      	sub	sp, #40	; 0x28
 8005112:	af02      	add	r7, sp, #8
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	4613      	mov	r3, r2
 800511a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	613b      	str	r3, [r7, #16]
}
 8005134:	bf00      	nop
 8005136:	e7fe      	b.n	8005136 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	e004      	b.n	800514e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	fb02 f303 	mul.w	r3, r2, r3
 800514c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	3350      	adds	r3, #80	; 0x50
 8005152:	4618      	mov	r0, r3
 8005154:	f002 f9a2 	bl	800749c <pvPortMalloc>
 8005158:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00f      	beq.n	8005180 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	3350      	adds	r3, #80	; 0x50
 8005164:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800516e:	79fa      	ldrb	r2, [r7, #7]
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 f805 	bl	800518a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005180:	69bb      	ldr	r3, [r7, #24]
	}
 8005182:	4618      	mov	r0, r3
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
 8005196:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e002      	b.n	80051ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80051b8:	2101      	movs	r1, #1
 80051ba:	69b8      	ldr	r0, [r7, #24]
 80051bc:	f7ff fec8 	bl	8004f50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	; 0x28
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10a      	bne.n	80051f8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	61bb      	str	r3, [r7, #24]
}
 80051f4:	bf00      	nop
 80051f6:	e7fe      	b.n	80051f6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d90a      	bls.n	8005216 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	617b      	str	r3, [r7, #20]
}
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005216:	2302      	movs	r3, #2
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	2100      	movs	r1, #0
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f7ff fefd 	bl	8005020 <xQueueGenericCreateStatic>
 8005226:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005234:	69fb      	ldr	r3, [r7, #28]
	}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800523e:	b580      	push	{r7, lr}
 8005240:	b086      	sub	sp, #24
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10a      	bne.n	8005264 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	613b      	str	r3, [r7, #16]
}
 8005260:	bf00      	nop
 8005262:	e7fe      	b.n	8005262 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	429a      	cmp	r2, r3
 800526a:	d90a      	bls.n	8005282 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	60fb      	str	r3, [r7, #12]
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005282:	2202      	movs	r2, #2
 8005284:	2100      	movs	r1, #0
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff ff41 	bl	800510e <xQueueGenericCreate>
 800528c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800529a:	697b      	ldr	r3, [r7, #20]
	}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08e      	sub	sp, #56	; 0x38
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052b2:	2300      	movs	r3, #0
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <xQueueGenericSend+0x32>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d103      	bne.n	80052e4 <xQueueGenericSend+0x40>
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <xQueueGenericSend+0x44>
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <xQueueGenericSend+0x46>
 80052e8:	2300      	movs	r3, #0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <xQueueGenericSend+0x60>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005300:	bf00      	nop
 8005302:	e7fe      	b.n	8005302 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d103      	bne.n	8005312 <xQueueGenericSend+0x6e>
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <xQueueGenericSend+0x72>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <xQueueGenericSend+0x74>
 8005316:	2300      	movs	r3, #0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <xQueueGenericSend+0x8e>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	623b      	str	r3, [r7, #32]
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005332:	f001 fad1 	bl	80068d8 <xTaskGetSchedulerState>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <xQueueGenericSend+0x9e>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <xQueueGenericSend+0xa2>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <xQueueGenericSend+0xa4>
 8005346:	2300      	movs	r3, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <xQueueGenericSend+0xbe>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	61fb      	str	r3, [r7, #28]
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005362:	f001 ff9b 	bl	800729c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536e:	429a      	cmp	r2, r3
 8005370:	d302      	bcc.n	8005378 <xQueueGenericSend+0xd4>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d129      	bne.n	80053cc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800537e:	f000 fa2a 	bl	80057d6 <prvCopyDataToQueue>
 8005382:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	2b00      	cmp	r3, #0
 800538a:	d010      	beq.n	80053ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	3324      	adds	r3, #36	; 0x24
 8005390:	4618      	mov	r0, r3
 8005392:	f001 f8db 	bl	800654c <xTaskRemoveFromEventList>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d013      	beq.n	80053c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800539c:	4b3f      	ldr	r3, [pc, #252]	; (800549c <xQueueGenericSend+0x1f8>)
 800539e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	e00a      	b.n	80053c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053b4:	4b39      	ldr	r3, [pc, #228]	; (800549c <xQueueGenericSend+0x1f8>)
 80053b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053c4:	f001 ff9a 	bl	80072fc <vPortExitCritical>
				return pdPASS;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e063      	b.n	8005494 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d103      	bne.n	80053da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053d2:	f001 ff93 	bl	80072fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	e05c      	b.n	8005494 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053e0:	f107 0314 	add.w	r3, r7, #20
 80053e4:	4618      	mov	r0, r3
 80053e6:	f001 f915 	bl	8006614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053ea:	2301      	movs	r3, #1
 80053ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053ee:	f001 ff85 	bl	80072fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053f2:	f000 fe59 	bl	80060a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053f6:	f001 ff51 	bl	800729c <vPortEnterCritical>
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005400:	b25b      	sxtb	r3, r3
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d103      	bne.n	8005410 <xQueueGenericSend+0x16c>
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005416:	b25b      	sxtb	r3, r3
 8005418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541c:	d103      	bne.n	8005426 <xQueueGenericSend+0x182>
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005426:	f001 ff69 	bl	80072fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800542a:	1d3a      	adds	r2, r7, #4
 800542c:	f107 0314 	add.w	r3, r7, #20
 8005430:	4611      	mov	r1, r2
 8005432:	4618      	mov	r0, r3
 8005434:	f001 f904 	bl	8006640 <xTaskCheckForTimeOut>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d124      	bne.n	8005488 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800543e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005440:	f000 fac1 	bl	80059c6 <prvIsQueueFull>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d018      	beq.n	800547c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	3310      	adds	r3, #16
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	4611      	mov	r1, r2
 8005452:	4618      	mov	r0, r3
 8005454:	f001 f82a 	bl	80064ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800545a:	f000 fa4c 	bl	80058f6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800545e:	f000 fe31 	bl	80060c4 <xTaskResumeAll>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	f47f af7c 	bne.w	8005362 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800546a:	4b0c      	ldr	r3, [pc, #48]	; (800549c <xQueueGenericSend+0x1f8>)
 800546c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	e772      	b.n	8005362 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800547c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800547e:	f000 fa3a 	bl	80058f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005482:	f000 fe1f 	bl	80060c4 <xTaskResumeAll>
 8005486:	e76c      	b.n	8005362 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800548a:	f000 fa34 	bl	80058f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800548e:	f000 fe19 	bl	80060c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005492:	2300      	movs	r3, #0
		}
	}
}
 8005494:	4618      	mov	r0, r3
 8005496:	3738      	adds	r7, #56	; 0x38
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	e000ed04 	.word	0xe000ed04

080054a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08e      	sub	sp, #56	; 0x38
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054ca:	bf00      	nop
 80054cc:	e7fe      	b.n	80054cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d103      	bne.n	80054dc <xQueueGenericSendFromISR+0x3c>
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <xQueueGenericSendFromISR+0x40>
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <xQueueGenericSendFromISR+0x42>
 80054e0:	2300      	movs	r3, #0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	623b      	str	r3, [r7, #32]
}
 80054f8:	bf00      	nop
 80054fa:	e7fe      	b.n	80054fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d103      	bne.n	800550a <xQueueGenericSendFromISR+0x6a>
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <xQueueGenericSendFromISR+0x6e>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <xQueueGenericSendFromISR+0x70>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	61fb      	str	r3, [r7, #28]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800552a:	f001 ff79 	bl	8007420 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800552e:	f3ef 8211 	mrs	r2, BASEPRI
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	61ba      	str	r2, [r7, #24]
 8005544:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005546:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005552:	429a      	cmp	r2, r3
 8005554:	d302      	bcc.n	800555c <xQueueGenericSendFromISR+0xbc>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d12c      	bne.n	80055b6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800556c:	f000 f933 	bl	80057d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005570:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d112      	bne.n	80055a0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	2b00      	cmp	r3, #0
 8005580:	d016      	beq.n	80055b0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	3324      	adds	r3, #36	; 0x24
 8005586:	4618      	mov	r0, r3
 8005588:	f000 ffe0 	bl	800654c <xTaskRemoveFromEventList>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00e      	beq.n	80055b0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	e007      	b.n	80055b0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055a4:	3301      	adds	r3, #1
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	b25a      	sxtb	r2, r3
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055b0:	2301      	movs	r3, #1
 80055b2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80055b4:	e001      	b.n	80055ba <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	637b      	str	r3, [r7, #52]	; 0x34
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3738      	adds	r7, #56	; 0x38
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08c      	sub	sp, #48	; 0x30
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055dc:	2300      	movs	r3, #0
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <xQueueReceive+0x30>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	623b      	str	r3, [r7, #32]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d103      	bne.n	800560e <xQueueReceive+0x3e>
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <xQueueReceive+0x42>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <xQueueReceive+0x44>
 8005612:	2300      	movs	r3, #0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <xQueueReceive+0x5e>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	61fb      	str	r3, [r7, #28]
}
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800562e:	f001 f953 	bl	80068d8 <xTaskGetSchedulerState>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d102      	bne.n	800563e <xQueueReceive+0x6e>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <xQueueReceive+0x72>
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <xQueueReceive+0x74>
 8005642:	2300      	movs	r3, #0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <xQueueReceive+0x8e>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	61bb      	str	r3, [r7, #24]
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800565e:	f001 fe1d 	bl	800729c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01f      	beq.n	80056ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005672:	f000 f91a 	bl	80058aa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	1e5a      	subs	r2, r3, #1
 800567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00f      	beq.n	80056a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	3310      	adds	r3, #16
 800568a:	4618      	mov	r0, r3
 800568c:	f000 ff5e 	bl	800654c <xTaskRemoveFromEventList>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005696:	4b3d      	ldr	r3, [pc, #244]	; (800578c <xQueueReceive+0x1bc>)
 8005698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056a6:	f001 fe29 	bl	80072fc <vPortExitCritical>
				return pdPASS;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e069      	b.n	8005782 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d103      	bne.n	80056bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056b4:	f001 fe22 	bl	80072fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056b8:	2300      	movs	r3, #0
 80056ba:	e062      	b.n	8005782 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056c2:	f107 0310 	add.w	r3, r7, #16
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 ffa4 	bl	8006614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056cc:	2301      	movs	r3, #1
 80056ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056d0:	f001 fe14 	bl	80072fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056d4:	f000 fce8 	bl	80060a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056d8:	f001 fde0 	bl	800729c <vPortEnterCritical>
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056e2:	b25b      	sxtb	r3, r3
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d103      	bne.n	80056f2 <xQueueReceive+0x122>
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056f8:	b25b      	sxtb	r3, r3
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fe:	d103      	bne.n	8005708 <xQueueReceive+0x138>
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005708:	f001 fdf8 	bl	80072fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800570c:	1d3a      	adds	r2, r7, #4
 800570e:	f107 0310 	add.w	r3, r7, #16
 8005712:	4611      	mov	r1, r2
 8005714:	4618      	mov	r0, r3
 8005716:	f000 ff93 	bl	8006640 <xTaskCheckForTimeOut>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d123      	bne.n	8005768 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005722:	f000 f93a 	bl	800599a <prvIsQueueEmpty>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d017      	beq.n	800575c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	3324      	adds	r3, #36	; 0x24
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	4611      	mov	r1, r2
 8005734:	4618      	mov	r0, r3
 8005736:	f000 feb9 	bl	80064ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800573a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800573c:	f000 f8db 	bl	80058f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005740:	f000 fcc0 	bl	80060c4 <xTaskResumeAll>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d189      	bne.n	800565e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800574a:	4b10      	ldr	r3, [pc, #64]	; (800578c <xQueueReceive+0x1bc>)
 800574c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	e780      	b.n	800565e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800575c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800575e:	f000 f8ca 	bl	80058f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005762:	f000 fcaf 	bl	80060c4 <xTaskResumeAll>
 8005766:	e77a      	b.n	800565e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800576a:	f000 f8c4 	bl	80058f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800576e:	f000 fca9 	bl	80060c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005774:	f000 f911 	bl	800599a <prvIsQueueEmpty>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	f43f af6f 	beq.w	800565e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005780:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005782:	4618      	mov	r0, r3
 8005784:	3730      	adds	r7, #48	; 0x30
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	e000ed04 	.word	0xe000ed04

08005790 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <vQueueDelete+0x28>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	60bb      	str	r3, [r7, #8]
}
 80057b4:	bf00      	nop
 80057b6:	e7fe      	b.n	80057b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f945 	bl	8005a48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d102      	bne.n	80057ce <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f001 ff2b 	bl	8007624 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80057ce:	bf00      	nop
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b086      	sub	sp, #24
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057e2:	2300      	movs	r3, #0
 80057e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10d      	bne.n	8005810 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d14d      	bne.n	8005898 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	4618      	mov	r0, r3
 8005802:	f001 f887 	bl	8006914 <xTaskPriorityDisinherit>
 8005806:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	e043      	b.n	8005898 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d119      	bne.n	800584a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6898      	ldr	r0, [r3, #8]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	461a      	mov	r2, r3
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	f002 f936 	bl	8007a92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	441a      	add	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	429a      	cmp	r2, r3
 800583e:	d32b      	bcc.n	8005898 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	609a      	str	r2, [r3, #8]
 8005848:	e026      	b.n	8005898 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68d8      	ldr	r0, [r3, #12]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	461a      	mov	r2, r3
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	f002 f91c 	bl	8007a92 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	425b      	negs	r3, r3
 8005864:	441a      	add	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d207      	bcs.n	8005886 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	425b      	negs	r3, r3
 8005880:	441a      	add	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d105      	bne.n	8005898 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3b01      	subs	r3, #1
 8005896:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058a0:	697b      	ldr	r3, [r7, #20]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d018      	beq.n	80058ee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	441a      	add	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d303      	bcc.n	80058de <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68d9      	ldr	r1, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	461a      	mov	r2, r3
 80058e8:	6838      	ldr	r0, [r7, #0]
 80058ea:	f002 f8d2 	bl	8007a92 <memcpy>
	}
}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058fe:	f001 fccd 	bl	800729c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005908:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800590a:	e011      	b.n	8005930 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	d012      	beq.n	800593a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3324      	adds	r3, #36	; 0x24
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fe17 	bl	800654c <xTaskRemoveFromEventList>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005924:	f000 feee 	bl	8006704 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	3b01      	subs	r3, #1
 800592c:	b2db      	uxtb	r3, r3
 800592e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005934:	2b00      	cmp	r3, #0
 8005936:	dce9      	bgt.n	800590c <prvUnlockQueue+0x16>
 8005938:	e000      	b.n	800593c <prvUnlockQueue+0x46>
					break;
 800593a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	22ff      	movs	r2, #255	; 0xff
 8005940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005944:	f001 fcda 	bl	80072fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005948:	f001 fca8 	bl	800729c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005952:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005954:	e011      	b.n	800597a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d012      	beq.n	8005984 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3310      	adds	r3, #16
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fdf2 	bl	800654c <xTaskRemoveFromEventList>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800596e:	f000 fec9 	bl	8006704 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005972:	7bbb      	ldrb	r3, [r7, #14]
 8005974:	3b01      	subs	r3, #1
 8005976:	b2db      	uxtb	r3, r3
 8005978:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800597a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800597e:	2b00      	cmp	r3, #0
 8005980:	dce9      	bgt.n	8005956 <prvUnlockQueue+0x60>
 8005982:	e000      	b.n	8005986 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005984:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	22ff      	movs	r2, #255	; 0xff
 800598a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800598e:	f001 fcb5 	bl	80072fc <vPortExitCritical>
}
 8005992:	bf00      	nop
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059a2:	f001 fc7b 	bl	800729c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d102      	bne.n	80059b4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059ae:	2301      	movs	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	e001      	b.n	80059b8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059b8:	f001 fca0 	bl	80072fc <vPortExitCritical>

	return xReturn;
 80059bc:	68fb      	ldr	r3, [r7, #12]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059ce:	f001 fc65 	bl	800729c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	429a      	cmp	r2, r3
 80059dc:	d102      	bne.n	80059e4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059de:	2301      	movs	r3, #1
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	e001      	b.n	80059e8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059e8:	f001 fc88 	bl	80072fc <vPortExitCritical>

	return xReturn;
 80059ec:	68fb      	ldr	r3, [r7, #12]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	e014      	b.n	8005a32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a08:	4a0e      	ldr	r2, [pc, #56]	; (8005a44 <vQueueAddToRegistry+0x4c>)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10b      	bne.n	8005a2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a14:	490b      	ldr	r1, [pc, #44]	; (8005a44 <vQueueAddToRegistry+0x4c>)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a1e:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <vQueueAddToRegistry+0x4c>)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4413      	add	r3, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a2a:	e006      	b.n	8005a3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b07      	cmp	r3, #7
 8005a36:	d9e7      	bls.n	8005a08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a38:	bf00      	nop
 8005a3a:	bf00      	nop
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bc80      	pop	{r7}
 8005a42:	4770      	bx	lr
 8005a44:	20003a90 	.word	0x20003a90

08005a48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a50:	2300      	movs	r3, #0
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	e016      	b.n	8005a84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005a56:	4a10      	ldr	r2, [pc, #64]	; (8005a98 <vQueueUnregisterQueue+0x50>)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	4413      	add	r3, r2
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d10b      	bne.n	8005a7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005a66:	4a0c      	ldr	r2, [pc, #48]	; (8005a98 <vQueueUnregisterQueue+0x50>)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005a70:	4a09      	ldr	r2, [pc, #36]	; (8005a98 <vQueueUnregisterQueue+0x50>)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	4413      	add	r3, r2
 8005a78:	2200      	movs	r2, #0
 8005a7a:	605a      	str	r2, [r3, #4]
				break;
 8005a7c:	e006      	b.n	8005a8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3301      	adds	r3, #1
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b07      	cmp	r3, #7
 8005a88:	d9e5      	bls.n	8005a56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005a8a:	bf00      	nop
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20003a90 	.word	0x20003a90

08005a9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005aac:	f001 fbf6 	bl	800729c <vPortEnterCritical>
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab6:	b25b      	sxtb	r3, r3
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d103      	bne.n	8005ac6 <vQueueWaitForMessageRestricted+0x2a>
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005acc:	b25b      	sxtb	r3, r3
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d103      	bne.n	8005adc <vQueueWaitForMessageRestricted+0x40>
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005adc:	f001 fc0e 	bl	80072fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d106      	bne.n	8005af6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3324      	adds	r3, #36	; 0x24
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	68b9      	ldr	r1, [r7, #8]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fcff 	bl	80064f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005af6:	6978      	ldr	r0, [r7, #20]
 8005af8:	f7ff fefd 	bl	80058f6 <prvUnlockQueue>
	}
 8005afc:	bf00      	nop
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08e      	sub	sp, #56	; 0x38
 8005b08:	af04      	add	r7, sp, #16
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	623b      	str	r3, [r7, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	e7fe      	b.n	8005b2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <xTaskCreateStatic+0x46>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	61fb      	str	r3, [r7, #28]
}
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b4a:	23bc      	movs	r3, #188	; 0xbc
 8005b4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2bbc      	cmp	r3, #188	; 0xbc
 8005b52:	d00a      	beq.n	8005b6a <xTaskCreateStatic+0x66>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	61bb      	str	r3, [r7, #24]
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01e      	beq.n	8005bae <xTaskCreateStatic+0xaa>
 8005b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01b      	beq.n	8005bae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b88:	2300      	movs	r3, #0
 8005b8a:	9303      	str	r3, [sp, #12]
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	9302      	str	r3, [sp, #8]
 8005b90:	f107 0314 	add.w	r3, r7, #20
 8005b94:	9301      	str	r3, [sp, #4]
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f851 	bl	8005c48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ba8:	f000 f8ec 	bl	8005d84 <prvAddNewTaskToReadyList>
 8005bac:	e001      	b.n	8005bb2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bb2:	697b      	ldr	r3, [r7, #20]
	}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3728      	adds	r7, #40	; 0x28
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08c      	sub	sp, #48	; 0x30
 8005bc0:	af04      	add	r7, sp, #16
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 fc63 	bl	800749c <pvPortMalloc>
 8005bd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00e      	beq.n	8005bfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005bde:	20bc      	movs	r0, #188	; 0xbc
 8005be0:	f001 fc5c 	bl	800749c <pvPortMalloc>
 8005be4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8005bf2:	e005      	b.n	8005c00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bf4:	6978      	ldr	r0, [r7, #20]
 8005bf6:	f001 fd15 	bl	8007624 <vPortFree>
 8005bfa:	e001      	b.n	8005c00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d017      	beq.n	8005c36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	2300      	movs	r3, #0
 8005c12:	9303      	str	r3, [sp, #12]
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	9302      	str	r3, [sp, #8]
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 f80f 	bl	8005c48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c2a:	69f8      	ldr	r0, [r7, #28]
 8005c2c:	f000 f8aa 	bl	8005d84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c30:	2301      	movs	r3, #1
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	e002      	b.n	8005c3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c36:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
	}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	461a      	mov	r2, r3
 8005c60:	21a5      	movs	r1, #165	; 0xa5
 8005c62:	f001 ff24 	bl	8007aae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c70:	3b01      	subs	r3, #1
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	f023 0307 	bic.w	r3, r3, #7
 8005c7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	617b      	str	r3, [r7, #20]
}
 8005c9c:	bf00      	nop
 8005c9e:	e7fe      	b.n	8005c9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61fb      	str	r3, [r7, #28]
 8005ca4:	e012      	b.n	8005ccc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	4413      	add	r3, r2
 8005cac:	7819      	ldrb	r1, [r3, #0]
 8005cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3334      	adds	r3, #52	; 0x34
 8005cb6:	460a      	mov	r2, r1
 8005cb8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d006      	beq.n	8005cd4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	61fb      	str	r3, [r7, #28]
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	2b0f      	cmp	r3, #15
 8005cd0:	d9e9      	bls.n	8005ca6 <prvInitialiseNewTask+0x5e>
 8005cd2:	e000      	b.n	8005cd6 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005cd4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	2b37      	cmp	r3, #55	; 0x37
 8005ce2:	d901      	bls.n	8005ce8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ce4:	2337      	movs	r3, #55	; 0x37
 8005ce6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff f895 	bl	8004e2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	3318      	adds	r3, #24
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff f890 	bl	8004e2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	3354      	adds	r3, #84	; 0x54
 8005d38:	2260      	movs	r2, #96	; 0x60
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f001 feb6 	bl	8007aae <memset>
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <prvInitialiseNewTask+0x130>)
 8005d46:	659a      	str	r2, [r3, #88]	; 0x58
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	4a0c      	ldr	r2, [pc, #48]	; (8005d7c <prvInitialiseNewTask+0x134>)
 8005d4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	4a0b      	ldr	r2, [pc, #44]	; (8005d80 <prvInitialiseNewTask+0x138>)
 8005d52:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	68f9      	ldr	r1, [r7, #12]
 8005d58:	69b8      	ldr	r0, [r7, #24]
 8005d5a:	f001 f9af 	bl	80070bc <pxPortInitialiseStack>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d70:	bf00      	nop
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	0800c4d4 	.word	0x0800c4d4
 8005d7c:	0800c4f4 	.word	0x0800c4f4
 8005d80:	0800c4b4 	.word	0x0800c4b4

08005d84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d8c:	f001 fa86 	bl	800729c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d90:	4b2d      	ldr	r3, [pc, #180]	; (8005e48 <prvAddNewTaskToReadyList+0xc4>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3301      	adds	r3, #1
 8005d96:	4a2c      	ldr	r2, [pc, #176]	; (8005e48 <prvAddNewTaskToReadyList+0xc4>)
 8005d98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d9a:	4b2c      	ldr	r3, [pc, #176]	; (8005e4c <prvAddNewTaskToReadyList+0xc8>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005da2:	4a2a      	ldr	r2, [pc, #168]	; (8005e4c <prvAddNewTaskToReadyList+0xc8>)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005da8:	4b27      	ldr	r3, [pc, #156]	; (8005e48 <prvAddNewTaskToReadyList+0xc4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d110      	bne.n	8005dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005db0:	f000 fccc 	bl	800674c <prvInitialiseTaskLists>
 8005db4:	e00d      	b.n	8005dd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005db6:	4b26      	ldr	r3, [pc, #152]	; (8005e50 <prvAddNewTaskToReadyList+0xcc>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d109      	bne.n	8005dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dbe:	4b23      	ldr	r3, [pc, #140]	; (8005e4c <prvAddNewTaskToReadyList+0xc8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d802      	bhi.n	8005dd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005dcc:	4a1f      	ldr	r2, [pc, #124]	; (8005e4c <prvAddNewTaskToReadyList+0xc8>)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dd2:	4b20      	ldr	r3, [pc, #128]	; (8005e54 <prvAddNewTaskToReadyList+0xd0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	4a1e      	ldr	r2, [pc, #120]	; (8005e54 <prvAddNewTaskToReadyList+0xd0>)
 8005dda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ddc:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <prvAddNewTaskToReadyList+0xd0>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de8:	4b1b      	ldr	r3, [pc, #108]	; (8005e58 <prvAddNewTaskToReadyList+0xd4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d903      	bls.n	8005df8 <prvAddNewTaskToReadyList+0x74>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	4a18      	ldr	r2, [pc, #96]	; (8005e58 <prvAddNewTaskToReadyList+0xd4>)
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <prvAddNewTaskToReadyList+0xd8>)
 8005e06:	441a      	add	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4610      	mov	r0, r2
 8005e10:	f7ff f819 	bl	8004e46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e14:	f001 fa72 	bl	80072fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e18:	4b0d      	ldr	r3, [pc, #52]	; (8005e50 <prvAddNewTaskToReadyList+0xcc>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00e      	beq.n	8005e3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e20:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <prvAddNewTaskToReadyList+0xc8>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d207      	bcs.n	8005e3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <prvAddNewTaskToReadyList+0xdc>)
 8005e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e3e:	bf00      	nop
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20000e54 	.word	0x20000e54
 8005e4c:	20000980 	.word	0x20000980
 8005e50:	20000e60 	.word	0x20000e60
 8005e54:	20000e70 	.word	0x20000e70
 8005e58:	20000e5c 	.word	0x20000e5c
 8005e5c:	20000984 	.word	0x20000984
 8005e60:	e000ed04 	.word	0xe000ed04

08005e64 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08a      	sub	sp, #40	; 0x28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <vTaskDelayUntil+0x2a>
	__asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	617b      	str	r3, [r7, #20]
}
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <vTaskDelayUntil+0x46>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	613b      	str	r3, [r7, #16]
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005eaa:	4b2a      	ldr	r3, [pc, #168]	; (8005f54 <vTaskDelayUntil+0xf0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <vTaskDelayUntil+0x64>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	60fb      	str	r3, [r7, #12]
}
 8005ec4:	bf00      	nop
 8005ec6:	e7fe      	b.n	8005ec6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005ec8:	f000 f8ee 	bl	80060a8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005ecc:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <vTaskDelayUntil+0xf4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	4413      	add	r3, r2
 8005eda:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6a3a      	ldr	r2, [r7, #32]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d20b      	bcs.n	8005efe <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d211      	bcs.n	8005f14 <vTaskDelayUntil+0xb0>
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d90d      	bls.n	8005f14 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
 8005efc:	e00a      	b.n	8005f14 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d303      	bcc.n	8005f10 <vTaskDelayUntil+0xac>
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d901      	bls.n	8005f14 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005f10:	2301      	movs	r3, #1
 8005f12:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d006      	beq.n	8005f2e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2100      	movs	r1, #0
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fd61 	bl	80069f0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005f2e:	f000 f8c9 	bl	80060c4 <xTaskResumeAll>
 8005f32:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d107      	bne.n	8005f4a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005f3a:	4b08      	ldr	r3, [pc, #32]	; (8005f5c <vTaskDelayUntil+0xf8>)
 8005f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f4a:	bf00      	nop
 8005f4c:	3728      	adds	r7, #40	; 0x28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000e7c 	.word	0x20000e7c
 8005f58:	20000e58 	.word	0x20000e58
 8005f5c:	e000ed04 	.word	0xe000ed04

08005f60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d017      	beq.n	8005fa2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f72:	4b13      	ldr	r3, [pc, #76]	; (8005fc0 <vTaskDelay+0x60>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <vTaskDelay+0x30>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	60bb      	str	r3, [r7, #8]
}
 8005f8c:	bf00      	nop
 8005f8e:	e7fe      	b.n	8005f8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f90:	f000 f88a 	bl	80060a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f94:	2100      	movs	r1, #0
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fd2a 	bl	80069f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f9c:	f000 f892 	bl	80060c4 <xTaskResumeAll>
 8005fa0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d107      	bne.n	8005fb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005fa8:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <vTaskDelay+0x64>)
 8005faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20000e7c 	.word	0x20000e7c
 8005fc4:	e000ed04 	.word	0xe000ed04

08005fc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08a      	sub	sp, #40	; 0x28
 8005fcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fd6:	463a      	mov	r2, r7
 8005fd8:	1d39      	adds	r1, r7, #4
 8005fda:	f107 0308 	add.w	r3, r7, #8
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fed4 	bl	8004d8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	9202      	str	r2, [sp, #8]
 8005fec:	9301      	str	r3, [sp, #4]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	460a      	mov	r2, r1
 8005ff6:	4924      	ldr	r1, [pc, #144]	; (8006088 <vTaskStartScheduler+0xc0>)
 8005ff8:	4824      	ldr	r0, [pc, #144]	; (800608c <vTaskStartScheduler+0xc4>)
 8005ffa:	f7ff fd83 	bl	8005b04 <xTaskCreateStatic>
 8005ffe:	4603      	mov	r3, r0
 8006000:	4a23      	ldr	r2, [pc, #140]	; (8006090 <vTaskStartScheduler+0xc8>)
 8006002:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006004:	4b22      	ldr	r3, [pc, #136]	; (8006090 <vTaskStartScheduler+0xc8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800600c:	2301      	movs	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	e001      	b.n	8006016 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006012:	2300      	movs	r3, #0
 8006014:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d102      	bne.n	8006022 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800601c:	f000 fd3c 	bl	8006a98 <xTimerCreateTimerTask>
 8006020:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d11b      	bne.n	8006060 <vTaskStartScheduler+0x98>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	613b      	str	r3, [r7, #16]
}
 800603a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800603c:	4b15      	ldr	r3, [pc, #84]	; (8006094 <vTaskStartScheduler+0xcc>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3354      	adds	r3, #84	; 0x54
 8006042:	4a15      	ldr	r2, [pc, #84]	; (8006098 <vTaskStartScheduler+0xd0>)
 8006044:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006046:	4b15      	ldr	r3, [pc, #84]	; (800609c <vTaskStartScheduler+0xd4>)
 8006048:	f04f 32ff 	mov.w	r2, #4294967295
 800604c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800604e:	4b14      	ldr	r3, [pc, #80]	; (80060a0 <vTaskStartScheduler+0xd8>)
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006054:	4b13      	ldr	r3, [pc, #76]	; (80060a4 <vTaskStartScheduler+0xdc>)
 8006056:	2200      	movs	r2, #0
 8006058:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800605a:	f001 f8ad 	bl	80071b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800605e:	e00e      	b.n	800607e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006066:	d10a      	bne.n	800607e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	60fb      	str	r3, [r7, #12]
}
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <vTaskStartScheduler+0xb4>
}
 800607e:	bf00      	nop
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	0800c3b4 	.word	0x0800c3b4
 800608c:	0800671d 	.word	0x0800671d
 8006090:	20000e78 	.word	0x20000e78
 8006094:	20000980 	.word	0x20000980
 8006098:	20000010 	.word	0x20000010
 800609c:	20000e74 	.word	0x20000e74
 80060a0:	20000e60 	.word	0x20000e60
 80060a4:	20000e58 	.word	0x20000e58

080060a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80060ac:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <vTaskSuspendAll+0x18>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3301      	adds	r3, #1
 80060b2:	4a03      	ldr	r2, [pc, #12]	; (80060c0 <vTaskSuspendAll+0x18>)
 80060b4:	6013      	str	r3, [r2, #0]
}
 80060b6:	bf00      	nop
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bc80      	pop	{r7}
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	20000e7c 	.word	0x20000e7c

080060c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060d2:	4b42      	ldr	r3, [pc, #264]	; (80061dc <xTaskResumeAll+0x118>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	603b      	str	r3, [r7, #0]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060f0:	f001 f8d4 	bl	800729c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060f4:	4b39      	ldr	r3, [pc, #228]	; (80061dc <xTaskResumeAll+0x118>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3b01      	subs	r3, #1
 80060fa:	4a38      	ldr	r2, [pc, #224]	; (80061dc <xTaskResumeAll+0x118>)
 80060fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060fe:	4b37      	ldr	r3, [pc, #220]	; (80061dc <xTaskResumeAll+0x118>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d162      	bne.n	80061cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006106:	4b36      	ldr	r3, [pc, #216]	; (80061e0 <xTaskResumeAll+0x11c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d05e      	beq.n	80061cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800610e:	e02f      	b.n	8006170 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006110:	4b34      	ldr	r3, [pc, #208]	; (80061e4 <xTaskResumeAll+0x120>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3318      	adds	r3, #24
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe feed 	bl	8004efc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3304      	adds	r3, #4
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fee8 	bl	8004efc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006130:	4b2d      	ldr	r3, [pc, #180]	; (80061e8 <xTaskResumeAll+0x124>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d903      	bls.n	8006140 <xTaskResumeAll+0x7c>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	4a2a      	ldr	r2, [pc, #168]	; (80061e8 <xTaskResumeAll+0x124>)
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4a27      	ldr	r2, [pc, #156]	; (80061ec <xTaskResumeAll+0x128>)
 800614e:	441a      	add	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7fe fe75 	bl	8004e46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	4b23      	ldr	r3, [pc, #140]	; (80061f0 <xTaskResumeAll+0x12c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	429a      	cmp	r2, r3
 8006168:	d302      	bcc.n	8006170 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800616a:	4b22      	ldr	r3, [pc, #136]	; (80061f4 <xTaskResumeAll+0x130>)
 800616c:	2201      	movs	r2, #1
 800616e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006170:	4b1c      	ldr	r3, [pc, #112]	; (80061e4 <xTaskResumeAll+0x120>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1cb      	bne.n	8006110 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800617e:	f000 fb87 	bl	8006890 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006182:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <xTaskResumeAll+0x134>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d010      	beq.n	80061b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800618e:	f000 f845 	bl	800621c <xTaskIncrementTick>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006198:	4b16      	ldr	r3, [pc, #88]	; (80061f4 <xTaskResumeAll+0x130>)
 800619a:	2201      	movs	r2, #1
 800619c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3b01      	subs	r3, #1
 80061a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f1      	bne.n	800618e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80061aa:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <xTaskResumeAll+0x134>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061b0:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <xTaskResumeAll+0x130>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d009      	beq.n	80061cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061bc:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <xTaskResumeAll+0x138>)
 80061be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061cc:	f001 f896 	bl	80072fc <vPortExitCritical>

	return xAlreadyYielded;
 80061d0:	68bb      	ldr	r3, [r7, #8]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20000e7c 	.word	0x20000e7c
 80061e0:	20000e54 	.word	0x20000e54
 80061e4:	20000e14 	.word	0x20000e14
 80061e8:	20000e5c 	.word	0x20000e5c
 80061ec:	20000984 	.word	0x20000984
 80061f0:	20000980 	.word	0x20000980
 80061f4:	20000e68 	.word	0x20000e68
 80061f8:	20000e64 	.word	0x20000e64
 80061fc:	e000ed04 	.word	0xe000ed04

08006200 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006206:	4b04      	ldr	r3, [pc, #16]	; (8006218 <xTaskGetTickCount+0x18>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800620c:	687b      	ldr	r3, [r7, #4]
}
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr
 8006218:	20000e58 	.word	0x20000e58

0800621c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006226:	4b51      	ldr	r3, [pc, #324]	; (800636c <xTaskIncrementTick+0x150>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	f040 808e 	bne.w	800634c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006230:	4b4f      	ldr	r3, [pc, #316]	; (8006370 <xTaskIncrementTick+0x154>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3301      	adds	r3, #1
 8006236:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006238:	4a4d      	ldr	r2, [pc, #308]	; (8006370 <xTaskIncrementTick+0x154>)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d120      	bne.n	8006286 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006244:	4b4b      	ldr	r3, [pc, #300]	; (8006374 <xTaskIncrementTick+0x158>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <xTaskIncrementTick+0x48>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	603b      	str	r3, [r7, #0]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <xTaskIncrementTick+0x46>
 8006264:	4b43      	ldr	r3, [pc, #268]	; (8006374 <xTaskIncrementTick+0x158>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	4b43      	ldr	r3, [pc, #268]	; (8006378 <xTaskIncrementTick+0x15c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a41      	ldr	r2, [pc, #260]	; (8006374 <xTaskIncrementTick+0x158>)
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	4a41      	ldr	r2, [pc, #260]	; (8006378 <xTaskIncrementTick+0x15c>)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	4b40      	ldr	r3, [pc, #256]	; (800637c <xTaskIncrementTick+0x160>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3301      	adds	r3, #1
 800627e:	4a3f      	ldr	r2, [pc, #252]	; (800637c <xTaskIncrementTick+0x160>)
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	f000 fb05 	bl	8006890 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006286:	4b3e      	ldr	r3, [pc, #248]	; (8006380 <xTaskIncrementTick+0x164>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	429a      	cmp	r2, r3
 800628e:	d34e      	bcc.n	800632e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006290:	4b38      	ldr	r3, [pc, #224]	; (8006374 <xTaskIncrementTick+0x158>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <xTaskIncrementTick+0x82>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <xTaskIncrementTick+0x84>
 800629e:	2300      	movs	r3, #0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062a4:	4b36      	ldr	r3, [pc, #216]	; (8006380 <xTaskIncrementTick+0x164>)
 80062a6:	f04f 32ff 	mov.w	r2, #4294967295
 80062aa:	601a      	str	r2, [r3, #0]
					break;
 80062ac:	e03f      	b.n	800632e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062ae:	4b31      	ldr	r3, [pc, #196]	; (8006374 <xTaskIncrementTick+0x158>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d203      	bcs.n	80062ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062c6:	4a2e      	ldr	r2, [pc, #184]	; (8006380 <xTaskIncrementTick+0x164>)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6013      	str	r3, [r2, #0]
						break;
 80062cc:	e02f      	b.n	800632e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	3304      	adds	r3, #4
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe fe12 	bl	8004efc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d004      	beq.n	80062ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	3318      	adds	r3, #24
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fe fe09 	bl	8004efc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ee:	4b25      	ldr	r3, [pc, #148]	; (8006384 <xTaskIncrementTick+0x168>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d903      	bls.n	80062fe <xTaskIncrementTick+0xe2>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	4a22      	ldr	r2, [pc, #136]	; (8006384 <xTaskIncrementTick+0x168>)
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006302:	4613      	mov	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4a1f      	ldr	r2, [pc, #124]	; (8006388 <xTaskIncrementTick+0x16c>)
 800630c:	441a      	add	r2, r3
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	3304      	adds	r3, #4
 8006312:	4619      	mov	r1, r3
 8006314:	4610      	mov	r0, r2
 8006316:	f7fe fd96 	bl	8004e46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631e:	4b1b      	ldr	r3, [pc, #108]	; (800638c <xTaskIncrementTick+0x170>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	429a      	cmp	r2, r3
 8006326:	d3b3      	bcc.n	8006290 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006328:	2301      	movs	r3, #1
 800632a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800632c:	e7b0      	b.n	8006290 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800632e:	4b17      	ldr	r3, [pc, #92]	; (800638c <xTaskIncrementTick+0x170>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006334:	4914      	ldr	r1, [pc, #80]	; (8006388 <xTaskIncrementTick+0x16c>)
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	440b      	add	r3, r1
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d907      	bls.n	8006356 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006346:	2301      	movs	r3, #1
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	e004      	b.n	8006356 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800634c:	4b10      	ldr	r3, [pc, #64]	; (8006390 <xTaskIncrementTick+0x174>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3301      	adds	r3, #1
 8006352:	4a0f      	ldr	r2, [pc, #60]	; (8006390 <xTaskIncrementTick+0x174>)
 8006354:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006356:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <xTaskIncrementTick+0x178>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800635e:	2301      	movs	r3, #1
 8006360:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006362:	697b      	ldr	r3, [r7, #20]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	20000e7c 	.word	0x20000e7c
 8006370:	20000e58 	.word	0x20000e58
 8006374:	20000e0c 	.word	0x20000e0c
 8006378:	20000e10 	.word	0x20000e10
 800637c:	20000e6c 	.word	0x20000e6c
 8006380:	20000e74 	.word	0x20000e74
 8006384:	20000e5c 	.word	0x20000e5c
 8006388:	20000984 	.word	0x20000984
 800638c:	20000980 	.word	0x20000980
 8006390:	20000e64 	.word	0x20000e64
 8006394:	20000e68 	.word	0x20000e68

08006398 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800639e:	4b3d      	ldr	r3, [pc, #244]	; (8006494 <vTaskSwitchContext+0xfc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063a6:	4b3c      	ldr	r3, [pc, #240]	; (8006498 <vTaskSwitchContext+0x100>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063ac:	e06d      	b.n	800648a <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 80063ae:	4b3a      	ldr	r3, [pc, #232]	; (8006498 <vTaskSwitchContext+0x100>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80063b4:	4b39      	ldr	r3, [pc, #228]	; (800649c <vTaskSwitchContext+0x104>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d111      	bne.n	80063f0 <vTaskSwitchContext+0x58>
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	3304      	adds	r3, #4
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d10b      	bne.n	80063f0 <vTaskSwitchContext+0x58>
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	3308      	adds	r3, #8
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d105      	bne.n	80063f0 <vTaskSwitchContext+0x58>
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	330c      	adds	r3, #12
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d008      	beq.n	8006402 <vTaskSwitchContext+0x6a>
 80063f0:	4b2a      	ldr	r3, [pc, #168]	; (800649c <vTaskSwitchContext+0x104>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4b29      	ldr	r3, [pc, #164]	; (800649c <vTaskSwitchContext+0x104>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3334      	adds	r3, #52	; 0x34
 80063fa:	4619      	mov	r1, r3
 80063fc:	4610      	mov	r0, r2
 80063fe:	f7fa fccb 	bl	8000d98 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006402:	4b27      	ldr	r3, [pc, #156]	; (80064a0 <vTaskSwitchContext+0x108>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	e010      	b.n	800642c <vTaskSwitchContext+0x94>
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <vTaskSwitchContext+0x8e>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	607b      	str	r3, [r7, #4]
}
 8006422:	bf00      	nop
 8006424:	e7fe      	b.n	8006424 <vTaskSwitchContext+0x8c>
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	3b01      	subs	r3, #1
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	491d      	ldr	r1, [pc, #116]	; (80064a4 <vTaskSwitchContext+0x10c>)
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0e4      	beq.n	800640a <vTaskSwitchContext+0x72>
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4a16      	ldr	r2, [pc, #88]	; (80064a4 <vTaskSwitchContext+0x10c>)
 800644c:	4413      	add	r3, r2
 800644e:	60bb      	str	r3, [r7, #8]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	605a      	str	r2, [r3, #4]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	3308      	adds	r3, #8
 8006462:	429a      	cmp	r2, r3
 8006464:	d104      	bne.n	8006470 <vTaskSwitchContext+0xd8>
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	605a      	str	r2, [r3, #4]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	4a09      	ldr	r2, [pc, #36]	; (800649c <vTaskSwitchContext+0x104>)
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	4a09      	ldr	r2, [pc, #36]	; (80064a0 <vTaskSwitchContext+0x108>)
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006480:	4b06      	ldr	r3, [pc, #24]	; (800649c <vTaskSwitchContext+0x104>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3354      	adds	r3, #84	; 0x54
 8006486:	4a08      	ldr	r2, [pc, #32]	; (80064a8 <vTaskSwitchContext+0x110>)
 8006488:	6013      	str	r3, [r2, #0]
}
 800648a:	bf00      	nop
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20000e7c 	.word	0x20000e7c
 8006498:	20000e68 	.word	0x20000e68
 800649c:	20000980 	.word	0x20000980
 80064a0:	20000e5c 	.word	0x20000e5c
 80064a4:	20000984 	.word	0x20000984
 80064a8:	20000010 	.word	0x20000010

080064ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	60fb      	str	r3, [r7, #12]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064d2:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <vTaskPlaceOnEventList+0x44>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3318      	adds	r3, #24
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fe fcd6 	bl	8004e8c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064e0:	2101      	movs	r1, #1
 80064e2:	6838      	ldr	r0, [r7, #0]
 80064e4:	f000 fa84 	bl	80069f0 <prvAddCurrentTaskToDelayedList>
}
 80064e8:	bf00      	nop
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	20000980 	.word	0x20000980

080064f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10a      	bne.n	800651c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	617b      	str	r3, [r7, #20]
}
 8006518:	bf00      	nop
 800651a:	e7fe      	b.n	800651a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <vTaskPlaceOnEventListRestricted+0x54>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3318      	adds	r3, #24
 8006522:	4619      	mov	r1, r3
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7fe fc8e 	bl	8004e46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006530:	f04f 33ff 	mov.w	r3, #4294967295
 8006534:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	68b8      	ldr	r0, [r7, #8]
 800653a:	f000 fa59 	bl	80069f0 <prvAddCurrentTaskToDelayedList>
	}
 800653e:	bf00      	nop
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000980 	.word	0x20000980

0800654c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	60fb      	str	r3, [r7, #12]
}
 8006574:	bf00      	nop
 8006576:	e7fe      	b.n	8006576 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	3318      	adds	r3, #24
 800657c:	4618      	mov	r0, r3
 800657e:	f7fe fcbd 	bl	8004efc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006582:	4b1e      	ldr	r3, [pc, #120]	; (80065fc <xTaskRemoveFromEventList+0xb0>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d11d      	bne.n	80065c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	3304      	adds	r3, #4
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe fcb4 	bl	8004efc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006598:	4b19      	ldr	r3, [pc, #100]	; (8006600 <xTaskRemoveFromEventList+0xb4>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d903      	bls.n	80065a8 <xTaskRemoveFromEventList+0x5c>
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	4a16      	ldr	r2, [pc, #88]	; (8006600 <xTaskRemoveFromEventList+0xb4>)
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4a13      	ldr	r2, [pc, #76]	; (8006604 <xTaskRemoveFromEventList+0xb8>)
 80065b6:	441a      	add	r2, r3
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f7fe fc41 	bl	8004e46 <vListInsertEnd>
 80065c4:	e005      	b.n	80065d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	3318      	adds	r3, #24
 80065ca:	4619      	mov	r1, r3
 80065cc:	480e      	ldr	r0, [pc, #56]	; (8006608 <xTaskRemoveFromEventList+0xbc>)
 80065ce:	f7fe fc3a 	bl	8004e46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d6:	4b0d      	ldr	r3, [pc, #52]	; (800660c <xTaskRemoveFromEventList+0xc0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	429a      	cmp	r2, r3
 80065de:	d905      	bls.n	80065ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065e0:	2301      	movs	r3, #1
 80065e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065e4:	4b0a      	ldr	r3, [pc, #40]	; (8006610 <xTaskRemoveFromEventList+0xc4>)
 80065e6:	2201      	movs	r2, #1
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	e001      	b.n	80065f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80065ec:	2300      	movs	r3, #0
 80065ee:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80065f0:	697b      	ldr	r3, [r7, #20]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000e7c 	.word	0x20000e7c
 8006600:	20000e5c 	.word	0x20000e5c
 8006604:	20000984 	.word	0x20000984
 8006608:	20000e14 	.word	0x20000e14
 800660c:	20000980 	.word	0x20000980
 8006610:	20000e68 	.word	0x20000e68

08006614 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800661c:	4b06      	ldr	r3, [pc, #24]	; (8006638 <vTaskInternalSetTimeOutState+0x24>)
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006624:	4b05      	ldr	r3, [pc, #20]	; (800663c <vTaskInternalSetTimeOutState+0x28>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	605a      	str	r2, [r3, #4]
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	20000e6c 	.word	0x20000e6c
 800663c:	20000e58 	.word	0x20000e58

08006640 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	613b      	str	r3, [r7, #16]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	60fb      	str	r3, [r7, #12]
}
 800667e:	bf00      	nop
 8006680:	e7fe      	b.n	8006680 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006682:	f000 fe0b 	bl	800729c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006686:	4b1d      	ldr	r3, [pc, #116]	; (80066fc <xTaskCheckForTimeOut+0xbc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669e:	d102      	bne.n	80066a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61fb      	str	r3, [r7, #28]
 80066a4:	e023      	b.n	80066ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	4b15      	ldr	r3, [pc, #84]	; (8006700 <xTaskCheckForTimeOut+0xc0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d007      	beq.n	80066c2 <xTaskCheckForTimeOut+0x82>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d302      	bcc.n	80066c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066bc:	2301      	movs	r3, #1
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	e015      	b.n	80066ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d20b      	bcs.n	80066e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	1ad2      	subs	r2, r2, r3
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff ff9b 	bl	8006614 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066de:	2300      	movs	r3, #0
 80066e0:	61fb      	str	r3, [r7, #28]
 80066e2:	e004      	b.n	80066ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066ea:	2301      	movs	r3, #1
 80066ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066ee:	f000 fe05 	bl	80072fc <vPortExitCritical>

	return xReturn;
 80066f2:	69fb      	ldr	r3, [r7, #28]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3720      	adds	r7, #32
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20000e58 	.word	0x20000e58
 8006700:	20000e6c 	.word	0x20000e6c

08006704 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006708:	4b03      	ldr	r3, [pc, #12]	; (8006718 <vTaskMissedYield+0x14>)
 800670a:	2201      	movs	r2, #1
 800670c:	601a      	str	r2, [r3, #0]
}
 800670e:	bf00      	nop
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20000e68 	.word	0x20000e68

0800671c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006724:	f000 f852 	bl	80067cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006728:	4b06      	ldr	r3, [pc, #24]	; (8006744 <prvIdleTask+0x28>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d9f9      	bls.n	8006724 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006730:	4b05      	ldr	r3, [pc, #20]	; (8006748 <prvIdleTask+0x2c>)
 8006732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006740:	e7f0      	b.n	8006724 <prvIdleTask+0x8>
 8006742:	bf00      	nop
 8006744:	20000984 	.word	0x20000984
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006752:	2300      	movs	r3, #0
 8006754:	607b      	str	r3, [r7, #4]
 8006756:	e00c      	b.n	8006772 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4a12      	ldr	r2, [pc, #72]	; (80067ac <prvInitialiseTaskLists+0x60>)
 8006764:	4413      	add	r3, r2
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe fb42 	bl	8004df0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3301      	adds	r3, #1
 8006770:	607b      	str	r3, [r7, #4]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b37      	cmp	r3, #55	; 0x37
 8006776:	d9ef      	bls.n	8006758 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006778:	480d      	ldr	r0, [pc, #52]	; (80067b0 <prvInitialiseTaskLists+0x64>)
 800677a:	f7fe fb39 	bl	8004df0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800677e:	480d      	ldr	r0, [pc, #52]	; (80067b4 <prvInitialiseTaskLists+0x68>)
 8006780:	f7fe fb36 	bl	8004df0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006784:	480c      	ldr	r0, [pc, #48]	; (80067b8 <prvInitialiseTaskLists+0x6c>)
 8006786:	f7fe fb33 	bl	8004df0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800678a:	480c      	ldr	r0, [pc, #48]	; (80067bc <prvInitialiseTaskLists+0x70>)
 800678c:	f7fe fb30 	bl	8004df0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006790:	480b      	ldr	r0, [pc, #44]	; (80067c0 <prvInitialiseTaskLists+0x74>)
 8006792:	f7fe fb2d 	bl	8004df0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006796:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <prvInitialiseTaskLists+0x78>)
 8006798:	4a05      	ldr	r2, [pc, #20]	; (80067b0 <prvInitialiseTaskLists+0x64>)
 800679a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800679c:	4b0a      	ldr	r3, [pc, #40]	; (80067c8 <prvInitialiseTaskLists+0x7c>)
 800679e:	4a05      	ldr	r2, [pc, #20]	; (80067b4 <prvInitialiseTaskLists+0x68>)
 80067a0:	601a      	str	r2, [r3, #0]
}
 80067a2:	bf00      	nop
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000984 	.word	0x20000984
 80067b0:	20000de4 	.word	0x20000de4
 80067b4:	20000df8 	.word	0x20000df8
 80067b8:	20000e14 	.word	0x20000e14
 80067bc:	20000e28 	.word	0x20000e28
 80067c0:	20000e40 	.word	0x20000e40
 80067c4:	20000e0c 	.word	0x20000e0c
 80067c8:	20000e10 	.word	0x20000e10

080067cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067d2:	e019      	b.n	8006808 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067d4:	f000 fd62 	bl	800729c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80067d8:	4b10      	ldr	r3, [pc, #64]	; (800681c <prvCheckTasksWaitingTermination+0x50>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fe fb89 	bl	8004efc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067ea:	4b0d      	ldr	r3, [pc, #52]	; (8006820 <prvCheckTasksWaitingTermination+0x54>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	4a0b      	ldr	r2, [pc, #44]	; (8006820 <prvCheckTasksWaitingTermination+0x54>)
 80067f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067f4:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <prvCheckTasksWaitingTermination+0x58>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	4a0a      	ldr	r2, [pc, #40]	; (8006824 <prvCheckTasksWaitingTermination+0x58>)
 80067fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067fe:	f000 fd7d 	bl	80072fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f810 	bl	8006828 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006808:	4b06      	ldr	r3, [pc, #24]	; (8006824 <prvCheckTasksWaitingTermination+0x58>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e1      	bne.n	80067d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000e28 	.word	0x20000e28
 8006820:	20000e54 	.word	0x20000e54
 8006824:	20000e3c 	.word	0x20000e3c

08006828 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3354      	adds	r3, #84	; 0x54
 8006834:	4618      	mov	r0, r3
 8006836:	f002 f81d 	bl	8008874 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006840:	2b00      	cmp	r3, #0
 8006842:	d108      	bne.n	8006856 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	4618      	mov	r0, r3
 800684a:	f000 feeb 	bl	8007624 <vPortFree>
				vPortFree( pxTCB );
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fee8 	bl	8007624 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006854:	e018      	b.n	8006888 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800685c:	2b01      	cmp	r3, #1
 800685e:	d103      	bne.n	8006868 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fedf 	bl	8007624 <vPortFree>
	}
 8006866:	e00f      	b.n	8006888 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800686e:	2b02      	cmp	r3, #2
 8006870:	d00a      	beq.n	8006888 <prvDeleteTCB+0x60>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	60fb      	str	r3, [r7, #12]
}
 8006884:	bf00      	nop
 8006886:	e7fe      	b.n	8006886 <prvDeleteTCB+0x5e>
	}
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006896:	4b0e      	ldr	r3, [pc, #56]	; (80068d0 <prvResetNextTaskUnblockTime+0x40>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <prvResetNextTaskUnblockTime+0x14>
 80068a0:	2301      	movs	r3, #1
 80068a2:	e000      	b.n	80068a6 <prvResetNextTaskUnblockTime+0x16>
 80068a4:	2300      	movs	r3, #0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d004      	beq.n	80068b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068aa:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <prvResetNextTaskUnblockTime+0x44>)
 80068ac:	f04f 32ff 	mov.w	r2, #4294967295
 80068b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068b2:	e008      	b.n	80068c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80068b4:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <prvResetNextTaskUnblockTime+0x40>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	4a04      	ldr	r2, [pc, #16]	; (80068d4 <prvResetNextTaskUnblockTime+0x44>)
 80068c4:	6013      	str	r3, [r2, #0]
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr
 80068d0:	20000e0c 	.word	0x20000e0c
 80068d4:	20000e74 	.word	0x20000e74

080068d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068de:	4b0b      	ldr	r3, [pc, #44]	; (800690c <xTaskGetSchedulerState+0x34>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d102      	bne.n	80068ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068e6:	2301      	movs	r3, #1
 80068e8:	607b      	str	r3, [r7, #4]
 80068ea:	e008      	b.n	80068fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ec:	4b08      	ldr	r3, [pc, #32]	; (8006910 <xTaskGetSchedulerState+0x38>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d102      	bne.n	80068fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068f4:	2302      	movs	r3, #2
 80068f6:	607b      	str	r3, [r7, #4]
 80068f8:	e001      	b.n	80068fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068fa:	2300      	movs	r3, #0
 80068fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068fe:	687b      	ldr	r3, [r7, #4]
	}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	20000e60 	.word	0x20000e60
 8006910:	20000e7c 	.word	0x20000e7c

08006914 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006920:	2300      	movs	r3, #0
 8006922:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d056      	beq.n	80069d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800692a:	4b2e      	ldr	r3, [pc, #184]	; (80069e4 <xTaskPriorityDisinherit+0xd0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	429a      	cmp	r2, r3
 8006932:	d00a      	beq.n	800694a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	60fb      	str	r3, [r7, #12]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10a      	bne.n	8006968 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	60bb      	str	r3, [r7, #8]
}
 8006964:	bf00      	nop
 8006966:	e7fe      	b.n	8006966 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696c:	1e5a      	subs	r2, r3, #1
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800697a:	429a      	cmp	r2, r3
 800697c:	d02c      	beq.n	80069d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006982:	2b00      	cmp	r3, #0
 8006984:	d128      	bne.n	80069d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	3304      	adds	r3, #4
 800698a:	4618      	mov	r0, r3
 800698c:	f7fe fab6 	bl	8004efc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	4b0f      	ldr	r3, [pc, #60]	; (80069e8 <xTaskPriorityDisinherit+0xd4>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d903      	bls.n	80069b8 <xTaskPriorityDisinherit+0xa4>
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	4a0c      	ldr	r2, [pc, #48]	; (80069e8 <xTaskPriorityDisinherit+0xd4>)
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4a09      	ldr	r2, [pc, #36]	; (80069ec <xTaskPriorityDisinherit+0xd8>)
 80069c6:	441a      	add	r2, r3
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f7fe fa39 	bl	8004e46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069d4:	2301      	movs	r3, #1
 80069d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069d8:	697b      	ldr	r3, [r7, #20]
	}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20000980 	.word	0x20000980
 80069e8:	20000e5c 	.word	0x20000e5c
 80069ec:	20000984 	.word	0x20000984

080069f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069fa:	4b21      	ldr	r3, [pc, #132]	; (8006a80 <prvAddCurrentTaskToDelayedList+0x90>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a00:	4b20      	ldr	r3, [pc, #128]	; (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3304      	adds	r3, #4
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe fa78 	bl	8004efc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a12:	d10a      	bne.n	8006a2a <prvAddCurrentTaskToDelayedList+0x3a>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d007      	beq.n	8006a2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a1a:	4b1a      	ldr	r3, [pc, #104]	; (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	4619      	mov	r1, r3
 8006a22:	4819      	ldr	r0, [pc, #100]	; (8006a88 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a24:	f7fe fa0f 	bl	8004e46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a28:	e026      	b.n	8006a78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4413      	add	r3, r2
 8006a30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a32:	4b14      	ldr	r3, [pc, #80]	; (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d209      	bcs.n	8006a56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a42:	4b12      	ldr	r3, [pc, #72]	; (8006a8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4610      	mov	r0, r2
 8006a50:	f7fe fa1c 	bl	8004e8c <vListInsert>
}
 8006a54:	e010      	b.n	8006a78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a56:	4b0e      	ldr	r3, [pc, #56]	; (8006a90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4619      	mov	r1, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	f7fe fa12 	bl	8004e8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d202      	bcs.n	8006a78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a72:	4a08      	ldr	r2, [pc, #32]	; (8006a94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	6013      	str	r3, [r2, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	20000e58 	.word	0x20000e58
 8006a84:	20000980 	.word	0x20000980
 8006a88:	20000e40 	.word	0x20000e40
 8006a8c:	20000e10 	.word	0x20000e10
 8006a90:	20000e0c 	.word	0x20000e0c
 8006a94:	20000e74 	.word	0x20000e74

08006a98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	; 0x28
 8006a9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006aa2:	f000 facb 	bl	800703c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006aa6:	4b1c      	ldr	r3, [pc, #112]	; (8006b18 <xTimerCreateTimerTask+0x80>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d021      	beq.n	8006af2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ab6:	1d3a      	adds	r2, r7, #4
 8006ab8:	f107 0108 	add.w	r1, r7, #8
 8006abc:	f107 030c 	add.w	r3, r7, #12
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fe f97b 	bl	8004dbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	9202      	str	r2, [sp, #8]
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	460a      	mov	r2, r1
 8006ad8:	4910      	ldr	r1, [pc, #64]	; (8006b1c <xTimerCreateTimerTask+0x84>)
 8006ada:	4811      	ldr	r0, [pc, #68]	; (8006b20 <xTimerCreateTimerTask+0x88>)
 8006adc:	f7ff f812 	bl	8005b04 <xTaskCreateStatic>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	4a10      	ldr	r2, [pc, #64]	; (8006b24 <xTimerCreateTimerTask+0x8c>)
 8006ae4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006ae6:	4b0f      	ldr	r3, [pc, #60]	; (8006b24 <xTimerCreateTimerTask+0x8c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006aee:	2301      	movs	r3, #1
 8006af0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	613b      	str	r3, [r7, #16]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b0e:	697b      	ldr	r3, [r7, #20]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	20000eb0 	.word	0x20000eb0
 8006b1c:	0800c3bc 	.word	0x0800c3bc
 8006b20:	08006c45 	.word	0x08006c45
 8006b24:	20000eb4 	.word	0x20000eb4

08006b28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08a      	sub	sp, #40	; 0x28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10a      	bne.n	8006b56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	623b      	str	r3, [r7, #32]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b56:	4b1a      	ldr	r3, [pc, #104]	; (8006bc0 <xTimerGenericCommand+0x98>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d02a      	beq.n	8006bb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2b05      	cmp	r3, #5
 8006b6e:	dc18      	bgt.n	8006ba2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b70:	f7ff feb2 	bl	80068d8 <xTaskGetSchedulerState>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d109      	bne.n	8006b8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b7a:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <xTimerGenericCommand+0x98>)
 8006b7c:	6818      	ldr	r0, [r3, #0]
 8006b7e:	f107 0110 	add.w	r1, r7, #16
 8006b82:	2300      	movs	r3, #0
 8006b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b86:	f7fe fb8d 	bl	80052a4 <xQueueGenericSend>
 8006b8a:	6278      	str	r0, [r7, #36]	; 0x24
 8006b8c:	e012      	b.n	8006bb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b8e:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <xTimerGenericCommand+0x98>)
 8006b90:	6818      	ldr	r0, [r3, #0]
 8006b92:	f107 0110 	add.w	r1, r7, #16
 8006b96:	2300      	movs	r3, #0
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f7fe fb83 	bl	80052a4 <xQueueGenericSend>
 8006b9e:	6278      	str	r0, [r7, #36]	; 0x24
 8006ba0:	e008      	b.n	8006bb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ba2:	4b07      	ldr	r3, [pc, #28]	; (8006bc0 <xTimerGenericCommand+0x98>)
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	f107 0110 	add.w	r1, r7, #16
 8006baa:	2300      	movs	r3, #0
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	f7fe fc77 	bl	80054a0 <xQueueGenericSendFromISR>
 8006bb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3728      	adds	r7, #40	; 0x28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20000eb0 	.word	0x20000eb0

08006bc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bce:	4b1c      	ldr	r3, [pc, #112]	; (8006c40 <prvProcessExpiredTimer+0x7c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fe f98d 	bl	8004efc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d122      	bne.n	8006c30 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	699a      	ldr	r2, [r3, #24]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	18d1      	adds	r1, r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	6978      	ldr	r0, [r7, #20]
 8006bf8:	f000 f8c8 	bl	8006d8c <prvInsertTimerInActiveList>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d016      	beq.n	8006c30 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c02:	2300      	movs	r3, #0
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2300      	movs	r3, #0
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	6978      	ldr	r0, [r7, #20]
 8006c0e:	f7ff ff8b 	bl	8006b28 <xTimerGenericCommand>
 8006c12:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10a      	bne.n	8006c30 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	60fb      	str	r3, [r7, #12]
}
 8006c2c:	bf00      	nop
 8006c2e:	e7fe      	b.n	8006c2e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	6978      	ldr	r0, [r7, #20]
 8006c36:	4798      	blx	r3
}
 8006c38:	bf00      	nop
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20000ea8 	.word	0x20000ea8

08006c44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c4c:	f107 0308 	add.w	r3, r7, #8
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 f857 	bl	8006d04 <prvGetNextExpireTime>
 8006c56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f803 	bl	8006c68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c62:	f000 f8d5 	bl	8006e10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c66:	e7f1      	b.n	8006c4c <prvTimerTask+0x8>

08006c68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c72:	f7ff fa19 	bl	80060a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c76:	f107 0308 	add.w	r3, r7, #8
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 f866 	bl	8006d4c <prvSampleTimeNow>
 8006c80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d130      	bne.n	8006cea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10a      	bne.n	8006ca4 <prvProcessTimerOrBlockTask+0x3c>
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d806      	bhi.n	8006ca4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c96:	f7ff fa15 	bl	80060c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c9a:	68f9      	ldr	r1, [r7, #12]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff ff91 	bl	8006bc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ca2:	e024      	b.n	8006cee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d008      	beq.n	8006cbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006caa:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <prvProcessTimerOrBlockTask+0x90>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	bf0c      	ite	eq
 8006cb4:	2301      	moveq	r3, #1
 8006cb6:	2300      	movne	r3, #0
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006cbc:	4b0f      	ldr	r3, [pc, #60]	; (8006cfc <prvProcessTimerOrBlockTask+0x94>)
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	f7fe fee7 	bl	8005a9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006cce:	f7ff f9f9 	bl	80060c4 <xTaskResumeAll>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10a      	bne.n	8006cee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006cd8:	4b09      	ldr	r3, [pc, #36]	; (8006d00 <prvProcessTimerOrBlockTask+0x98>)
 8006cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	f3bf 8f6f 	isb	sy
}
 8006ce8:	e001      	b.n	8006cee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006cea:	f7ff f9eb 	bl	80060c4 <xTaskResumeAll>
}
 8006cee:	bf00      	nop
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000eac 	.word	0x20000eac
 8006cfc:	20000eb0 	.word	0x20000eb0
 8006d00:	e000ed04 	.word	0xe000ed04

08006d04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d0c:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <prvGetNextExpireTime+0x44>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	bf0c      	ite	eq
 8006d16:	2301      	moveq	r3, #1
 8006d18:	2300      	movne	r3, #0
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d105      	bne.n	8006d36 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d2a:	4b07      	ldr	r3, [pc, #28]	; (8006d48 <prvGetNextExpireTime+0x44>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	e001      	b.n	8006d3a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20000ea8 	.word	0x20000ea8

08006d4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d54:	f7ff fa54 	bl	8006200 <xTaskGetTickCount>
 8006d58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <prvSampleTimeNow+0x3c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d205      	bcs.n	8006d70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d64:	f000 f908 	bl	8006f78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e002      	b.n	8006d76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d76:	4a04      	ldr	r2, [pc, #16]	; (8006d88 <prvSampleTimeNow+0x3c>)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000eb8 	.word	0x20000eb8

08006d8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d812      	bhi.n	8006dd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	1ad2      	subs	r2, r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d302      	bcc.n	8006dc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	e01b      	b.n	8006dfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006dc6:	4b10      	ldr	r3, [pc, #64]	; (8006e08 <prvInsertTimerInActiveList+0x7c>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f7fe f85b 	bl	8004e8c <vListInsert>
 8006dd6:	e012      	b.n	8006dfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d206      	bcs.n	8006dee <prvInsertTimerInActiveList+0x62>
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d302      	bcc.n	8006dee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006de8:	2301      	movs	r3, #1
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	e007      	b.n	8006dfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dee:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <prvInsertTimerInActiveList+0x80>)
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3304      	adds	r3, #4
 8006df6:	4619      	mov	r1, r3
 8006df8:	4610      	mov	r0, r2
 8006dfa:	f7fe f847 	bl	8004e8c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006dfe:	697b      	ldr	r3, [r7, #20]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20000eac 	.word	0x20000eac
 8006e0c:	20000ea8 	.word	0x20000ea8

08006e10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08e      	sub	sp, #56	; 0x38
 8006e14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e16:	e09d      	b.n	8006f54 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	da18      	bge.n	8006e50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e1e:	1d3b      	adds	r3, r7, #4
 8006e20:	3304      	adds	r3, #4
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	61fb      	str	r3, [r7, #28]
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e46:	6850      	ldr	r0, [r2, #4]
 8006e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e4a:	6892      	ldr	r2, [r2, #8]
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	db7d      	blt.n	8006f52 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d004      	beq.n	8006e6c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e64:	3304      	adds	r3, #4
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe f848 	bl	8004efc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e6c:	463b      	mov	r3, r7
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff ff6c 	bl	8006d4c <prvSampleTimeNow>
 8006e74:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b09      	cmp	r3, #9
 8006e7a:	d86b      	bhi.n	8006f54 <prvProcessReceivedCommands+0x144>
 8006e7c:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <prvProcessReceivedCommands+0x74>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006ead 	.word	0x08006ead
 8006e88:	08006ead 	.word	0x08006ead
 8006e8c:	08006ead 	.word	0x08006ead
 8006e90:	08006f55 	.word	0x08006f55
 8006e94:	08006f09 	.word	0x08006f09
 8006e98:	08006f41 	.word	0x08006f41
 8006e9c:	08006ead 	.word	0x08006ead
 8006ea0:	08006ead 	.word	0x08006ead
 8006ea4:	08006f55 	.word	0x08006f55
 8006ea8:	08006f09 	.word	0x08006f09
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	18d1      	adds	r1, r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eba:	f7ff ff67 	bl	8006d8c <prvInsertTimerInActiveList>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d047      	beq.n	8006f54 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d13f      	bne.n	8006f54 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	441a      	add	r2, r3
 8006edc:	2300      	movs	r3, #0
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ee6:	f7ff fe1f 	bl	8006b28 <xTimerGenericCommand>
 8006eea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d130      	bne.n	8006f54 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	61bb      	str	r3, [r7, #24]
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	617b      	str	r3, [r7, #20]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2e:	699a      	ldr	r2, [r3, #24]
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	18d1      	adds	r1, r2, r3
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f3a:	f7ff ff27 	bl	8006d8c <prvInsertTimerInActiveList>
					break;
 8006f3e:	e009      	b.n	8006f54 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d104      	bne.n	8006f54 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f4c:	f000 fb6a 	bl	8007624 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f50:	e000      	b.n	8006f54 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006f52:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f54:	4b07      	ldr	r3, [pc, #28]	; (8006f74 <prvProcessReceivedCommands+0x164>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	1d39      	adds	r1, r7, #4
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fe fb37 	bl	80055d0 <xQueueReceive>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f47f af57 	bne.w	8006e18 <prvProcessReceivedCommands+0x8>
	}
}
 8006f6a:	bf00      	nop
 8006f6c:	bf00      	nop
 8006f6e:	3730      	adds	r7, #48	; 0x30
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20000eb0 	.word	0x20000eb0

08006f78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f7e:	e045      	b.n	800700c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f80:	4b2c      	ldr	r3, [pc, #176]	; (8007034 <prvSwitchTimerLists+0xbc>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f8a:	4b2a      	ldr	r3, [pc, #168]	; (8007034 <prvSwitchTimerLists+0xbc>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3304      	adds	r3, #4
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fd ffaf 	bl	8004efc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d12e      	bne.n	800700c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d90e      	bls.n	8006fde <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fcc:	4b19      	ldr	r3, [pc, #100]	; (8007034 <prvSwitchTimerLists+0xbc>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	f7fd ff58 	bl	8004e8c <vListInsert>
 8006fdc:	e016      	b.n	800700c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fde:	2300      	movs	r3, #0
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f7ff fd9d 	bl	8006b28 <xTimerGenericCommand>
 8006fee:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	603b      	str	r3, [r7, #0]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800700c:	4b09      	ldr	r3, [pc, #36]	; (8007034 <prvSwitchTimerLists+0xbc>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1b4      	bne.n	8006f80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007016:	4b07      	ldr	r3, [pc, #28]	; (8007034 <prvSwitchTimerLists+0xbc>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800701c:	4b06      	ldr	r3, [pc, #24]	; (8007038 <prvSwitchTimerLists+0xc0>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a04      	ldr	r2, [pc, #16]	; (8007034 <prvSwitchTimerLists+0xbc>)
 8007022:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007024:	4a04      	ldr	r2, [pc, #16]	; (8007038 <prvSwitchTimerLists+0xc0>)
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	6013      	str	r3, [r2, #0]
}
 800702a:	bf00      	nop
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20000ea8 	.word	0x20000ea8
 8007038:	20000eac 	.word	0x20000eac

0800703c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007042:	f000 f92b 	bl	800729c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007046:	4b15      	ldr	r3, [pc, #84]	; (800709c <prvCheckForValidListAndQueue+0x60>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d120      	bne.n	8007090 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800704e:	4814      	ldr	r0, [pc, #80]	; (80070a0 <prvCheckForValidListAndQueue+0x64>)
 8007050:	f7fd fece 	bl	8004df0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007054:	4813      	ldr	r0, [pc, #76]	; (80070a4 <prvCheckForValidListAndQueue+0x68>)
 8007056:	f7fd fecb 	bl	8004df0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800705a:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <prvCheckForValidListAndQueue+0x6c>)
 800705c:	4a10      	ldr	r2, [pc, #64]	; (80070a0 <prvCheckForValidListAndQueue+0x64>)
 800705e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007060:	4b12      	ldr	r3, [pc, #72]	; (80070ac <prvCheckForValidListAndQueue+0x70>)
 8007062:	4a10      	ldr	r2, [pc, #64]	; (80070a4 <prvCheckForValidListAndQueue+0x68>)
 8007064:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007066:	2300      	movs	r3, #0
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	4b11      	ldr	r3, [pc, #68]	; (80070b0 <prvCheckForValidListAndQueue+0x74>)
 800706c:	4a11      	ldr	r2, [pc, #68]	; (80070b4 <prvCheckForValidListAndQueue+0x78>)
 800706e:	2110      	movs	r1, #16
 8007070:	200a      	movs	r0, #10
 8007072:	f7fd ffd5 	bl	8005020 <xQueueGenericCreateStatic>
 8007076:	4603      	mov	r3, r0
 8007078:	4a08      	ldr	r2, [pc, #32]	; (800709c <prvCheckForValidListAndQueue+0x60>)
 800707a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800707c:	4b07      	ldr	r3, [pc, #28]	; (800709c <prvCheckForValidListAndQueue+0x60>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d005      	beq.n	8007090 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007084:	4b05      	ldr	r3, [pc, #20]	; (800709c <prvCheckForValidListAndQueue+0x60>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	490b      	ldr	r1, [pc, #44]	; (80070b8 <prvCheckForValidListAndQueue+0x7c>)
 800708a:	4618      	mov	r0, r3
 800708c:	f7fe fcb4 	bl	80059f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007090:	f000 f934 	bl	80072fc <vPortExitCritical>
}
 8007094:	bf00      	nop
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20000eb0 	.word	0x20000eb0
 80070a0:	20000e80 	.word	0x20000e80
 80070a4:	20000e94 	.word	0x20000e94
 80070a8:	20000ea8 	.word	0x20000ea8
 80070ac:	20000eac 	.word	0x20000eac
 80070b0:	20000f5c 	.word	0x20000f5c
 80070b4:	20000ebc 	.word	0x20000ebc
 80070b8:	0800c3c4 	.word	0x0800c3c4

080070bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3b04      	subs	r3, #4
 80070cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3b04      	subs	r3, #4
 80070da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f023 0201 	bic.w	r2, r3, #1
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3b04      	subs	r3, #4
 80070ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070ec:	4a08      	ldr	r2, [pc, #32]	; (8007110 <pxPortInitialiseStack+0x54>)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3b14      	subs	r3, #20
 80070f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3b20      	subs	r3, #32
 8007102:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007104:	68fb      	ldr	r3, [r7, #12]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr
 8007110:	08007115 	.word	0x08007115

08007114 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800711a:	2300      	movs	r3, #0
 800711c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800711e:	4b12      	ldr	r3, [pc, #72]	; (8007168 <prvTaskExitError+0x54>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007126:	d00a      	beq.n	800713e <prvTaskExitError+0x2a>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	60fb      	str	r3, [r7, #12]
}
 800713a:	bf00      	nop
 800713c:	e7fe      	b.n	800713c <prvTaskExitError+0x28>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	60bb      	str	r3, [r7, #8]
}
 8007150:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007152:	bf00      	nop
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0fc      	beq.n	8007154 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800715a:	bf00      	nop
 800715c:	bf00      	nop
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	2000000c 	.word	0x2000000c
 800716c:	00000000 	.word	0x00000000

08007170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007170:	4b07      	ldr	r3, [pc, #28]	; (8007190 <pxCurrentTCBConst2>)
 8007172:	6819      	ldr	r1, [r3, #0]
 8007174:	6808      	ldr	r0, [r1, #0]
 8007176:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800717a:	f380 8809 	msr	PSP, r0
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f04f 0000 	mov.w	r0, #0
 8007186:	f380 8811 	msr	BASEPRI, r0
 800718a:	f04e 0e0d 	orr.w	lr, lr, #13
 800718e:	4770      	bx	lr

08007190 <pxCurrentTCBConst2>:
 8007190:	20000980 	.word	0x20000980
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop

08007198 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007198:	4806      	ldr	r0, [pc, #24]	; (80071b4 <prvPortStartFirstTask+0x1c>)
 800719a:	6800      	ldr	r0, [r0, #0]
 800719c:	6800      	ldr	r0, [r0, #0]
 800719e:	f380 8808 	msr	MSP, r0
 80071a2:	b662      	cpsie	i
 80071a4:	b661      	cpsie	f
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	df00      	svc	0
 80071b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071b2:	bf00      	nop
 80071b4:	e000ed08 	.word	0xe000ed08

080071b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071be:	4b32      	ldr	r3, [pc, #200]	; (8007288 <xPortStartScheduler+0xd0>)
 80071c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	22ff      	movs	r2, #255	; 0xff
 80071ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071d8:	78fb      	ldrb	r3, [r7, #3]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	4b2a      	ldr	r3, [pc, #168]	; (800728c <xPortStartScheduler+0xd4>)
 80071e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071e6:	4b2a      	ldr	r3, [pc, #168]	; (8007290 <xPortStartScheduler+0xd8>)
 80071e8:	2207      	movs	r2, #7
 80071ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071ec:	e009      	b.n	8007202 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80071ee:	4b28      	ldr	r3, [pc, #160]	; (8007290 <xPortStartScheduler+0xd8>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	4a26      	ldr	r2, [pc, #152]	; (8007290 <xPortStartScheduler+0xd8>)
 80071f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071f8:	78fb      	ldrb	r3, [r7, #3]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007202:	78fb      	ldrb	r3, [r7, #3]
 8007204:	b2db      	uxtb	r3, r3
 8007206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800720a:	2b80      	cmp	r3, #128	; 0x80
 800720c:	d0ef      	beq.n	80071ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800720e:	4b20      	ldr	r3, [pc, #128]	; (8007290 <xPortStartScheduler+0xd8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f1c3 0307 	rsb	r3, r3, #7
 8007216:	2b04      	cmp	r3, #4
 8007218:	d00a      	beq.n	8007230 <xPortStartScheduler+0x78>
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	60bb      	str	r3, [r7, #8]
}
 800722c:	bf00      	nop
 800722e:	e7fe      	b.n	800722e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007230:	4b17      	ldr	r3, [pc, #92]	; (8007290 <xPortStartScheduler+0xd8>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	4a16      	ldr	r2, [pc, #88]	; (8007290 <xPortStartScheduler+0xd8>)
 8007238:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800723a:	4b15      	ldr	r3, [pc, #84]	; (8007290 <xPortStartScheduler+0xd8>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007242:	4a13      	ldr	r2, [pc, #76]	; (8007290 <xPortStartScheduler+0xd8>)
 8007244:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	b2da      	uxtb	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800724e:	4b11      	ldr	r3, [pc, #68]	; (8007294 <xPortStartScheduler+0xdc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a10      	ldr	r2, [pc, #64]	; (8007294 <xPortStartScheduler+0xdc>)
 8007254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007258:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800725a:	4b0e      	ldr	r3, [pc, #56]	; (8007294 <xPortStartScheduler+0xdc>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a0d      	ldr	r2, [pc, #52]	; (8007294 <xPortStartScheduler+0xdc>)
 8007260:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007264:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007266:	f000 f8b9 	bl	80073dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800726a:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <xPortStartScheduler+0xe0>)
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007270:	f7ff ff92 	bl	8007198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007274:	f7ff f890 	bl	8006398 <vTaskSwitchContext>
	prvTaskExitError();
 8007278:	f7ff ff4c 	bl	8007114 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	e000e400 	.word	0xe000e400
 800728c:	20000fac 	.word	0x20000fac
 8007290:	20000fb0 	.word	0x20000fb0
 8007294:	e000ed20 	.word	0xe000ed20
 8007298:	2000000c 	.word	0x2000000c

0800729c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	607b      	str	r3, [r7, #4]
}
 80072b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80072b6:	4b0f      	ldr	r3, [pc, #60]	; (80072f4 <vPortEnterCritical+0x58>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3301      	adds	r3, #1
 80072bc:	4a0d      	ldr	r2, [pc, #52]	; (80072f4 <vPortEnterCritical+0x58>)
 80072be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072c0:	4b0c      	ldr	r3, [pc, #48]	; (80072f4 <vPortEnterCritical+0x58>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d10f      	bne.n	80072e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072c8:	4b0b      	ldr	r3, [pc, #44]	; (80072f8 <vPortEnterCritical+0x5c>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	603b      	str	r3, [r7, #0]
}
 80072e4:	bf00      	nop
 80072e6:	e7fe      	b.n	80072e6 <vPortEnterCritical+0x4a>
	}
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bc80      	pop	{r7}
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	2000000c 	.word	0x2000000c
 80072f8:	e000ed04 	.word	0xe000ed04

080072fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007302:	4b11      	ldr	r3, [pc, #68]	; (8007348 <vPortExitCritical+0x4c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10a      	bne.n	8007320 <vPortExitCritical+0x24>
	__asm volatile
 800730a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	607b      	str	r3, [r7, #4]
}
 800731c:	bf00      	nop
 800731e:	e7fe      	b.n	800731e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007320:	4b09      	ldr	r3, [pc, #36]	; (8007348 <vPortExitCritical+0x4c>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3b01      	subs	r3, #1
 8007326:	4a08      	ldr	r2, [pc, #32]	; (8007348 <vPortExitCritical+0x4c>)
 8007328:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800732a:	4b07      	ldr	r3, [pc, #28]	; (8007348 <vPortExitCritical+0x4c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d105      	bne.n	800733e <vPortExitCritical+0x42>
 8007332:	2300      	movs	r3, #0
 8007334:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	f383 8811 	msr	BASEPRI, r3
}
 800733c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr
 8007348:	2000000c 	.word	0x2000000c
 800734c:	00000000 	.word	0x00000000

08007350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007350:	f3ef 8009 	mrs	r0, PSP
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <pxCurrentTCBConst>)
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007360:	6010      	str	r0, [r2, #0]
 8007362:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007366:	f04f 0050 	mov.w	r0, #80	; 0x50
 800736a:	f380 8811 	msr	BASEPRI, r0
 800736e:	f7ff f813 	bl	8006398 <vTaskSwitchContext>
 8007372:	f04f 0000 	mov.w	r0, #0
 8007376:	f380 8811 	msr	BASEPRI, r0
 800737a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800737e:	6819      	ldr	r1, [r3, #0]
 8007380:	6808      	ldr	r0, [r1, #0]
 8007382:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007386:	f380 8809 	msr	PSP, r0
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	4770      	bx	lr

08007390 <pxCurrentTCBConst>:
 8007390:	20000980 	.word	0x20000980
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop

08007398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	607b      	str	r3, [r7, #4]
}
 80073b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073b2:	f7fe ff33 	bl	800621c <xTaskIncrementTick>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073bc:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <SysTick_Handler+0x40>)
 80073be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	2300      	movs	r3, #0
 80073c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f383 8811 	msr	BASEPRI, r3
}
 80073ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	e000ed04 	.word	0xe000ed04

080073dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073dc:	b480      	push	{r7}
 80073de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073e0:	4b0a      	ldr	r3, [pc, #40]	; (800740c <vPortSetupTimerInterrupt+0x30>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073e6:	4b0a      	ldr	r3, [pc, #40]	; (8007410 <vPortSetupTimerInterrupt+0x34>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073ec:	4b09      	ldr	r3, [pc, #36]	; (8007414 <vPortSetupTimerInterrupt+0x38>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a09      	ldr	r2, [pc, #36]	; (8007418 <vPortSetupTimerInterrupt+0x3c>)
 80073f2:	fba2 2303 	umull	r2, r3, r2, r3
 80073f6:	099b      	lsrs	r3, r3, #6
 80073f8:	4a08      	ldr	r2, [pc, #32]	; (800741c <vPortSetupTimerInterrupt+0x40>)
 80073fa:	3b01      	subs	r3, #1
 80073fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073fe:	4b03      	ldr	r3, [pc, #12]	; (800740c <vPortSetupTimerInterrupt+0x30>)
 8007400:	2207      	movs	r2, #7
 8007402:	601a      	str	r2, [r3, #0]
}
 8007404:	bf00      	nop
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr
 800740c:	e000e010 	.word	0xe000e010
 8007410:	e000e018 	.word	0xe000e018
 8007414:	20000000 	.word	0x20000000
 8007418:	10624dd3 	.word	0x10624dd3
 800741c:	e000e014 	.word	0xe000e014

08007420 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007426:	f3ef 8305 	mrs	r3, IPSR
 800742a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b0f      	cmp	r3, #15
 8007430:	d914      	bls.n	800745c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007432:	4a16      	ldr	r2, [pc, #88]	; (800748c <vPortValidateInterruptPriority+0x6c>)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4413      	add	r3, r2
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800743c:	4b14      	ldr	r3, [pc, #80]	; (8007490 <vPortValidateInterruptPriority+0x70>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	7afa      	ldrb	r2, [r7, #11]
 8007442:	429a      	cmp	r2, r3
 8007444:	d20a      	bcs.n	800745c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	607b      	str	r3, [r7, #4]
}
 8007458:	bf00      	nop
 800745a:	e7fe      	b.n	800745a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800745c:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <vPortValidateInterruptPriority+0x74>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007464:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <vPortValidateInterruptPriority+0x78>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	429a      	cmp	r2, r3
 800746a:	d90a      	bls.n	8007482 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	603b      	str	r3, [r7, #0]
}
 800747e:	bf00      	nop
 8007480:	e7fe      	b.n	8007480 <vPortValidateInterruptPriority+0x60>
	}
 8007482:	bf00      	nop
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	bc80      	pop	{r7}
 800748a:	4770      	bx	lr
 800748c:	e000e3f0 	.word	0xe000e3f0
 8007490:	20000fac 	.word	0x20000fac
 8007494:	e000ed0c 	.word	0xe000ed0c
 8007498:	20000fb0 	.word	0x20000fb0

0800749c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08a      	sub	sp, #40	; 0x28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074a4:	2300      	movs	r3, #0
 80074a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074a8:	f7fe fdfe 	bl	80060a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074ac:	4b58      	ldr	r3, [pc, #352]	; (8007610 <pvPortMalloc+0x174>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074b4:	f000 f910 	bl	80076d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074b8:	4b56      	ldr	r3, [pc, #344]	; (8007614 <pvPortMalloc+0x178>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4013      	ands	r3, r2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f040 808e 	bne.w	80075e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01d      	beq.n	8007508 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80074cc:	2208      	movs	r2, #8
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4413      	add	r3, r2
 80074d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d014      	beq.n	8007508 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f023 0307 	bic.w	r3, r3, #7
 80074e4:	3308      	adds	r3, #8
 80074e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <pvPortMalloc+0x6c>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	617b      	str	r3, [r7, #20]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d069      	beq.n	80075e2 <pvPortMalloc+0x146>
 800750e:	4b42      	ldr	r3, [pc, #264]	; (8007618 <pvPortMalloc+0x17c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	429a      	cmp	r2, r3
 8007516:	d864      	bhi.n	80075e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007518:	4b40      	ldr	r3, [pc, #256]	; (800761c <pvPortMalloc+0x180>)
 800751a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800751c:	4b3f      	ldr	r3, [pc, #252]	; (800761c <pvPortMalloc+0x180>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007522:	e004      	b.n	800752e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	429a      	cmp	r2, r3
 8007536:	d903      	bls.n	8007540 <pvPortMalloc+0xa4>
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f1      	bne.n	8007524 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007540:	4b33      	ldr	r3, [pc, #204]	; (8007610 <pvPortMalloc+0x174>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007546:	429a      	cmp	r2, r3
 8007548:	d04b      	beq.n	80075e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2208      	movs	r2, #8
 8007550:	4413      	add	r3, r2
 8007552:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	1ad2      	subs	r2, r2, r3
 8007564:	2308      	movs	r3, #8
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	429a      	cmp	r2, r3
 800756a:	d91f      	bls.n	80075ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800756c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4413      	add	r3, r2
 8007572:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00a      	beq.n	8007594 <pvPortMalloc+0xf8>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	613b      	str	r3, [r7, #16]
}
 8007590:	bf00      	nop
 8007592:	e7fe      	b.n	8007592 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	1ad2      	subs	r2, r2, r3
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075a6:	69b8      	ldr	r0, [r7, #24]
 80075a8:	f000 f8f8 	bl	800779c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075ac:	4b1a      	ldr	r3, [pc, #104]	; (8007618 <pvPortMalloc+0x17c>)
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	4a18      	ldr	r2, [pc, #96]	; (8007618 <pvPortMalloc+0x17c>)
 80075b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075ba:	4b17      	ldr	r3, [pc, #92]	; (8007618 <pvPortMalloc+0x17c>)
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	4b18      	ldr	r3, [pc, #96]	; (8007620 <pvPortMalloc+0x184>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d203      	bcs.n	80075ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075c6:	4b14      	ldr	r3, [pc, #80]	; (8007618 <pvPortMalloc+0x17c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a15      	ldr	r2, [pc, #84]	; (8007620 <pvPortMalloc+0x184>)
 80075cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	4b10      	ldr	r3, [pc, #64]	; (8007614 <pvPortMalloc+0x178>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	431a      	orrs	r2, r3
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075e2:	f7fe fd6f 	bl	80060c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	f003 0307 	and.w	r3, r3, #7
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <pvPortMalloc+0x16a>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	60fb      	str	r3, [r7, #12]
}
 8007602:	bf00      	nop
 8007604:	e7fe      	b.n	8007604 <pvPortMalloc+0x168>
	return pvReturn;
 8007606:	69fb      	ldr	r3, [r7, #28]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3728      	adds	r7, #40	; 0x28
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	200036cc 	.word	0x200036cc
 8007614:	200036d8 	.word	0x200036d8
 8007618:	200036d0 	.word	0x200036d0
 800761c:	200036c4 	.word	0x200036c4
 8007620:	200036d4 	.word	0x200036d4

08007624 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d048      	beq.n	80076c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007636:	2308      	movs	r3, #8
 8007638:	425b      	negs	r3, r3
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4413      	add	r3, r2
 800763e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	4b21      	ldr	r3, [pc, #132]	; (80076d0 <vPortFree+0xac>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4013      	ands	r3, r2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10a      	bne.n	8007668 <vPortFree+0x44>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	60fb      	str	r3, [r7, #12]
}
 8007664:	bf00      	nop
 8007666:	e7fe      	b.n	8007666 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00a      	beq.n	8007686 <vPortFree+0x62>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	60bb      	str	r3, [r7, #8]
}
 8007682:	bf00      	nop
 8007684:	e7fe      	b.n	8007684 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	4b11      	ldr	r3, [pc, #68]	; (80076d0 <vPortFree+0xac>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4013      	ands	r3, r2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d019      	beq.n	80076c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d115      	bne.n	80076c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <vPortFree+0xac>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	43db      	mvns	r3, r3
 80076a6:	401a      	ands	r2, r3
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076ac:	f7fe fcfc 	bl	80060a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	4b07      	ldr	r3, [pc, #28]	; (80076d4 <vPortFree+0xb0>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4413      	add	r3, r2
 80076ba:	4a06      	ldr	r2, [pc, #24]	; (80076d4 <vPortFree+0xb0>)
 80076bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076be:	6938      	ldr	r0, [r7, #16]
 80076c0:	f000 f86c 	bl	800779c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80076c4:	f7fe fcfe 	bl	80060c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076c8:	bf00      	nop
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	200036d8 	.word	0x200036d8
 80076d4:	200036d0 	.word	0x200036d0

080076d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076de:	f242 7310 	movw	r3, #10000	; 0x2710
 80076e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076e4:	4b27      	ldr	r3, [pc, #156]	; (8007784 <prvHeapInit+0xac>)
 80076e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00c      	beq.n	800770c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3307      	adds	r3, #7
 80076f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 0307 	bic.w	r3, r3, #7
 80076fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	4a1f      	ldr	r2, [pc, #124]	; (8007784 <prvHeapInit+0xac>)
 8007708:	4413      	add	r3, r2
 800770a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007710:	4a1d      	ldr	r2, [pc, #116]	; (8007788 <prvHeapInit+0xb0>)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007716:	4b1c      	ldr	r3, [pc, #112]	; (8007788 <prvHeapInit+0xb0>)
 8007718:	2200      	movs	r2, #0
 800771a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	4413      	add	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007724:	2208      	movs	r2, #8
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	1a9b      	subs	r3, r3, r2
 800772a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0307 	bic.w	r3, r3, #7
 8007732:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4a15      	ldr	r2, [pc, #84]	; (800778c <prvHeapInit+0xb4>)
 8007738:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800773a:	4b14      	ldr	r3, [pc, #80]	; (800778c <prvHeapInit+0xb4>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2200      	movs	r2, #0
 8007740:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007742:	4b12      	ldr	r3, [pc, #72]	; (800778c <prvHeapInit+0xb4>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	1ad2      	subs	r2, r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007758:	4b0c      	ldr	r3, [pc, #48]	; (800778c <prvHeapInit+0xb4>)
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	4a0a      	ldr	r2, [pc, #40]	; (8007790 <prvHeapInit+0xb8>)
 8007766:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	4a09      	ldr	r2, [pc, #36]	; (8007794 <prvHeapInit+0xbc>)
 800776e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007770:	4b09      	ldr	r3, [pc, #36]	; (8007798 <prvHeapInit+0xc0>)
 8007772:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007776:	601a      	str	r2, [r3, #0]
}
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000fb4 	.word	0x20000fb4
 8007788:	200036c4 	.word	0x200036c4
 800778c:	200036cc 	.word	0x200036cc
 8007790:	200036d4 	.word	0x200036d4
 8007794:	200036d0 	.word	0x200036d0
 8007798:	200036d8 	.word	0x200036d8

0800779c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077a4:	4b27      	ldr	r3, [pc, #156]	; (8007844 <prvInsertBlockIntoFreeList+0xa8>)
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	e002      	b.n	80077b0 <prvInsertBlockIntoFreeList+0x14>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d8f7      	bhi.n	80077aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	4413      	add	r3, r2
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d108      	bne.n	80077de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	441a      	add	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	441a      	add	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d118      	bne.n	8007824 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	4b14      	ldr	r3, [pc, #80]	; (8007848 <prvInsertBlockIntoFreeList+0xac>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d00d      	beq.n	800781a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	441a      	add	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	e008      	b.n	800782c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800781a:	4b0b      	ldr	r3, [pc, #44]	; (8007848 <prvInsertBlockIntoFreeList+0xac>)
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	e003      	b.n	800782c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	429a      	cmp	r2, r3
 8007832:	d002      	beq.n	800783a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800783a:	bf00      	nop
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	bc80      	pop	{r7}
 8007842:	4770      	bx	lr
 8007844:	200036c4 	.word	0x200036c4
 8007848:	200036cc 	.word	0x200036cc

0800784c <__errno>:
 800784c:	4b01      	ldr	r3, [pc, #4]	; (8007854 <__errno+0x8>)
 800784e:	6818      	ldr	r0, [r3, #0]
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20000010 	.word	0x20000010

08007858 <std>:
 8007858:	2300      	movs	r3, #0
 800785a:	b510      	push	{r4, lr}
 800785c:	4604      	mov	r4, r0
 800785e:	e9c0 3300 	strd	r3, r3, [r0]
 8007862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007866:	6083      	str	r3, [r0, #8]
 8007868:	8181      	strh	r1, [r0, #12]
 800786a:	6643      	str	r3, [r0, #100]	; 0x64
 800786c:	81c2      	strh	r2, [r0, #14]
 800786e:	6183      	str	r3, [r0, #24]
 8007870:	4619      	mov	r1, r3
 8007872:	2208      	movs	r2, #8
 8007874:	305c      	adds	r0, #92	; 0x5c
 8007876:	f000 f91a 	bl	8007aae <memset>
 800787a:	4b05      	ldr	r3, [pc, #20]	; (8007890 <std+0x38>)
 800787c:	6224      	str	r4, [r4, #32]
 800787e:	6263      	str	r3, [r4, #36]	; 0x24
 8007880:	4b04      	ldr	r3, [pc, #16]	; (8007894 <std+0x3c>)
 8007882:	62a3      	str	r3, [r4, #40]	; 0x28
 8007884:	4b04      	ldr	r3, [pc, #16]	; (8007898 <std+0x40>)
 8007886:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007888:	4b04      	ldr	r3, [pc, #16]	; (800789c <std+0x44>)
 800788a:	6323      	str	r3, [r4, #48]	; 0x30
 800788c:	bd10      	pop	{r4, pc}
 800788e:	bf00      	nop
 8007890:	08008995 	.word	0x08008995
 8007894:	080089b7 	.word	0x080089b7
 8007898:	080089ef 	.word	0x080089ef
 800789c:	08008a13 	.word	0x08008a13

080078a0 <_cleanup_r>:
 80078a0:	4901      	ldr	r1, [pc, #4]	; (80078a8 <_cleanup_r+0x8>)
 80078a2:	f000 b8af 	b.w	8007a04 <_fwalk_reent>
 80078a6:	bf00      	nop
 80078a8:	0800a5b1 	.word	0x0800a5b1

080078ac <__sfmoreglue>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	2568      	movs	r5, #104	; 0x68
 80078b0:	1e4a      	subs	r2, r1, #1
 80078b2:	4355      	muls	r5, r2
 80078b4:	460e      	mov	r6, r1
 80078b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078ba:	f000 f901 	bl	8007ac0 <_malloc_r>
 80078be:	4604      	mov	r4, r0
 80078c0:	b140      	cbz	r0, 80078d4 <__sfmoreglue+0x28>
 80078c2:	2100      	movs	r1, #0
 80078c4:	e9c0 1600 	strd	r1, r6, [r0]
 80078c8:	300c      	adds	r0, #12
 80078ca:	60a0      	str	r0, [r4, #8]
 80078cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078d0:	f000 f8ed 	bl	8007aae <memset>
 80078d4:	4620      	mov	r0, r4
 80078d6:	bd70      	pop	{r4, r5, r6, pc}

080078d8 <__sfp_lock_acquire>:
 80078d8:	4801      	ldr	r0, [pc, #4]	; (80078e0 <__sfp_lock_acquire+0x8>)
 80078da:	f000 b8d8 	b.w	8007a8e <__retarget_lock_acquire_recursive>
 80078de:	bf00      	nop
 80078e0:	20003ad8 	.word	0x20003ad8

080078e4 <__sfp_lock_release>:
 80078e4:	4801      	ldr	r0, [pc, #4]	; (80078ec <__sfp_lock_release+0x8>)
 80078e6:	f000 b8d3 	b.w	8007a90 <__retarget_lock_release_recursive>
 80078ea:	bf00      	nop
 80078ec:	20003ad8 	.word	0x20003ad8

080078f0 <__sinit_lock_acquire>:
 80078f0:	4801      	ldr	r0, [pc, #4]	; (80078f8 <__sinit_lock_acquire+0x8>)
 80078f2:	f000 b8cc 	b.w	8007a8e <__retarget_lock_acquire_recursive>
 80078f6:	bf00      	nop
 80078f8:	20003ad3 	.word	0x20003ad3

080078fc <__sinit_lock_release>:
 80078fc:	4801      	ldr	r0, [pc, #4]	; (8007904 <__sinit_lock_release+0x8>)
 80078fe:	f000 b8c7 	b.w	8007a90 <__retarget_lock_release_recursive>
 8007902:	bf00      	nop
 8007904:	20003ad3 	.word	0x20003ad3

08007908 <__sinit>:
 8007908:	b510      	push	{r4, lr}
 800790a:	4604      	mov	r4, r0
 800790c:	f7ff fff0 	bl	80078f0 <__sinit_lock_acquire>
 8007910:	69a3      	ldr	r3, [r4, #24]
 8007912:	b11b      	cbz	r3, 800791c <__sinit+0x14>
 8007914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007918:	f7ff bff0 	b.w	80078fc <__sinit_lock_release>
 800791c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007920:	6523      	str	r3, [r4, #80]	; 0x50
 8007922:	4b13      	ldr	r3, [pc, #76]	; (8007970 <__sinit+0x68>)
 8007924:	4a13      	ldr	r2, [pc, #76]	; (8007974 <__sinit+0x6c>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	62a2      	str	r2, [r4, #40]	; 0x28
 800792a:	42a3      	cmp	r3, r4
 800792c:	bf08      	it	eq
 800792e:	2301      	moveq	r3, #1
 8007930:	4620      	mov	r0, r4
 8007932:	bf08      	it	eq
 8007934:	61a3      	streq	r3, [r4, #24]
 8007936:	f000 f81f 	bl	8007978 <__sfp>
 800793a:	6060      	str	r0, [r4, #4]
 800793c:	4620      	mov	r0, r4
 800793e:	f000 f81b 	bl	8007978 <__sfp>
 8007942:	60a0      	str	r0, [r4, #8]
 8007944:	4620      	mov	r0, r4
 8007946:	f000 f817 	bl	8007978 <__sfp>
 800794a:	2200      	movs	r2, #0
 800794c:	2104      	movs	r1, #4
 800794e:	60e0      	str	r0, [r4, #12]
 8007950:	6860      	ldr	r0, [r4, #4]
 8007952:	f7ff ff81 	bl	8007858 <std>
 8007956:	2201      	movs	r2, #1
 8007958:	2109      	movs	r1, #9
 800795a:	68a0      	ldr	r0, [r4, #8]
 800795c:	f7ff ff7c 	bl	8007858 <std>
 8007960:	2202      	movs	r2, #2
 8007962:	2112      	movs	r1, #18
 8007964:	68e0      	ldr	r0, [r4, #12]
 8007966:	f7ff ff77 	bl	8007858 <std>
 800796a:	2301      	movs	r3, #1
 800796c:	61a3      	str	r3, [r4, #24]
 800796e:	e7d1      	b.n	8007914 <__sinit+0xc>
 8007970:	0800c514 	.word	0x0800c514
 8007974:	080078a1 	.word	0x080078a1

08007978 <__sfp>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	4607      	mov	r7, r0
 800797c:	f7ff ffac 	bl	80078d8 <__sfp_lock_acquire>
 8007980:	4b1e      	ldr	r3, [pc, #120]	; (80079fc <__sfp+0x84>)
 8007982:	681e      	ldr	r6, [r3, #0]
 8007984:	69b3      	ldr	r3, [r6, #24]
 8007986:	b913      	cbnz	r3, 800798e <__sfp+0x16>
 8007988:	4630      	mov	r0, r6
 800798a:	f7ff ffbd 	bl	8007908 <__sinit>
 800798e:	3648      	adds	r6, #72	; 0x48
 8007990:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007994:	3b01      	subs	r3, #1
 8007996:	d503      	bpl.n	80079a0 <__sfp+0x28>
 8007998:	6833      	ldr	r3, [r6, #0]
 800799a:	b30b      	cbz	r3, 80079e0 <__sfp+0x68>
 800799c:	6836      	ldr	r6, [r6, #0]
 800799e:	e7f7      	b.n	8007990 <__sfp+0x18>
 80079a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079a4:	b9d5      	cbnz	r5, 80079dc <__sfp+0x64>
 80079a6:	4b16      	ldr	r3, [pc, #88]	; (8007a00 <__sfp+0x88>)
 80079a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079ac:	60e3      	str	r3, [r4, #12]
 80079ae:	6665      	str	r5, [r4, #100]	; 0x64
 80079b0:	f000 f86c 	bl	8007a8c <__retarget_lock_init_recursive>
 80079b4:	f7ff ff96 	bl	80078e4 <__sfp_lock_release>
 80079b8:	2208      	movs	r2, #8
 80079ba:	4629      	mov	r1, r5
 80079bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079c4:	6025      	str	r5, [r4, #0]
 80079c6:	61a5      	str	r5, [r4, #24]
 80079c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079cc:	f000 f86f 	bl	8007aae <memset>
 80079d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079d8:	4620      	mov	r0, r4
 80079da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079dc:	3468      	adds	r4, #104	; 0x68
 80079de:	e7d9      	b.n	8007994 <__sfp+0x1c>
 80079e0:	2104      	movs	r1, #4
 80079e2:	4638      	mov	r0, r7
 80079e4:	f7ff ff62 	bl	80078ac <__sfmoreglue>
 80079e8:	4604      	mov	r4, r0
 80079ea:	6030      	str	r0, [r6, #0]
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d1d5      	bne.n	800799c <__sfp+0x24>
 80079f0:	f7ff ff78 	bl	80078e4 <__sfp_lock_release>
 80079f4:	230c      	movs	r3, #12
 80079f6:	603b      	str	r3, [r7, #0]
 80079f8:	e7ee      	b.n	80079d8 <__sfp+0x60>
 80079fa:	bf00      	nop
 80079fc:	0800c514 	.word	0x0800c514
 8007a00:	ffff0001 	.word	0xffff0001

08007a04 <_fwalk_reent>:
 8007a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a08:	4606      	mov	r6, r0
 8007a0a:	4688      	mov	r8, r1
 8007a0c:	2700      	movs	r7, #0
 8007a0e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a16:	f1b9 0901 	subs.w	r9, r9, #1
 8007a1a:	d505      	bpl.n	8007a28 <_fwalk_reent+0x24>
 8007a1c:	6824      	ldr	r4, [r4, #0]
 8007a1e:	2c00      	cmp	r4, #0
 8007a20:	d1f7      	bne.n	8007a12 <_fwalk_reent+0xe>
 8007a22:	4638      	mov	r0, r7
 8007a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a28:	89ab      	ldrh	r3, [r5, #12]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d907      	bls.n	8007a3e <_fwalk_reent+0x3a>
 8007a2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a32:	3301      	adds	r3, #1
 8007a34:	d003      	beq.n	8007a3e <_fwalk_reent+0x3a>
 8007a36:	4629      	mov	r1, r5
 8007a38:	4630      	mov	r0, r6
 8007a3a:	47c0      	blx	r8
 8007a3c:	4307      	orrs	r7, r0
 8007a3e:	3568      	adds	r5, #104	; 0x68
 8007a40:	e7e9      	b.n	8007a16 <_fwalk_reent+0x12>
	...

08007a44 <__libc_init_array>:
 8007a44:	b570      	push	{r4, r5, r6, lr}
 8007a46:	2600      	movs	r6, #0
 8007a48:	4d0c      	ldr	r5, [pc, #48]	; (8007a7c <__libc_init_array+0x38>)
 8007a4a:	4c0d      	ldr	r4, [pc, #52]	; (8007a80 <__libc_init_array+0x3c>)
 8007a4c:	1b64      	subs	r4, r4, r5
 8007a4e:	10a4      	asrs	r4, r4, #2
 8007a50:	42a6      	cmp	r6, r4
 8007a52:	d109      	bne.n	8007a68 <__libc_init_array+0x24>
 8007a54:	f004 fba0 	bl	800c198 <_init>
 8007a58:	2600      	movs	r6, #0
 8007a5a:	4d0a      	ldr	r5, [pc, #40]	; (8007a84 <__libc_init_array+0x40>)
 8007a5c:	4c0a      	ldr	r4, [pc, #40]	; (8007a88 <__libc_init_array+0x44>)
 8007a5e:	1b64      	subs	r4, r4, r5
 8007a60:	10a4      	asrs	r4, r4, #2
 8007a62:	42a6      	cmp	r6, r4
 8007a64:	d105      	bne.n	8007a72 <__libc_init_array+0x2e>
 8007a66:	bd70      	pop	{r4, r5, r6, pc}
 8007a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a6c:	4798      	blx	r3
 8007a6e:	3601      	adds	r6, #1
 8007a70:	e7ee      	b.n	8007a50 <__libc_init_array+0xc>
 8007a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a76:	4798      	blx	r3
 8007a78:	3601      	adds	r6, #1
 8007a7a:	e7f2      	b.n	8007a62 <__libc_init_array+0x1e>
 8007a7c:	0800c96c 	.word	0x0800c96c
 8007a80:	0800c96c 	.word	0x0800c96c
 8007a84:	0800c96c 	.word	0x0800c96c
 8007a88:	0800c970 	.word	0x0800c970

08007a8c <__retarget_lock_init_recursive>:
 8007a8c:	4770      	bx	lr

08007a8e <__retarget_lock_acquire_recursive>:
 8007a8e:	4770      	bx	lr

08007a90 <__retarget_lock_release_recursive>:
 8007a90:	4770      	bx	lr

08007a92 <memcpy>:
 8007a92:	440a      	add	r2, r1
 8007a94:	4291      	cmp	r1, r2
 8007a96:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a9a:	d100      	bne.n	8007a9e <memcpy+0xc>
 8007a9c:	4770      	bx	lr
 8007a9e:	b510      	push	{r4, lr}
 8007aa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aa4:	4291      	cmp	r1, r2
 8007aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aaa:	d1f9      	bne.n	8007aa0 <memcpy+0xe>
 8007aac:	bd10      	pop	{r4, pc}

08007aae <memset>:
 8007aae:	4603      	mov	r3, r0
 8007ab0:	4402      	add	r2, r0
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d100      	bne.n	8007ab8 <memset+0xa>
 8007ab6:	4770      	bx	lr
 8007ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8007abc:	e7f9      	b.n	8007ab2 <memset+0x4>
	...

08007ac0 <_malloc_r>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	1ccd      	adds	r5, r1, #3
 8007ac4:	f025 0503 	bic.w	r5, r5, #3
 8007ac8:	3508      	adds	r5, #8
 8007aca:	2d0c      	cmp	r5, #12
 8007acc:	bf38      	it	cc
 8007ace:	250c      	movcc	r5, #12
 8007ad0:	2d00      	cmp	r5, #0
 8007ad2:	4606      	mov	r6, r0
 8007ad4:	db01      	blt.n	8007ada <_malloc_r+0x1a>
 8007ad6:	42a9      	cmp	r1, r5
 8007ad8:	d903      	bls.n	8007ae2 <_malloc_r+0x22>
 8007ada:	230c      	movs	r3, #12
 8007adc:	6033      	str	r3, [r6, #0]
 8007ade:	2000      	movs	r0, #0
 8007ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ae2:	f003 f945 	bl	800ad70 <__malloc_lock>
 8007ae6:	4921      	ldr	r1, [pc, #132]	; (8007b6c <_malloc_r+0xac>)
 8007ae8:	680a      	ldr	r2, [r1, #0]
 8007aea:	4614      	mov	r4, r2
 8007aec:	b99c      	cbnz	r4, 8007b16 <_malloc_r+0x56>
 8007aee:	4f20      	ldr	r7, [pc, #128]	; (8007b70 <_malloc_r+0xb0>)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	b923      	cbnz	r3, 8007afe <_malloc_r+0x3e>
 8007af4:	4621      	mov	r1, r4
 8007af6:	4630      	mov	r0, r6
 8007af8:	f000 ff18 	bl	800892c <_sbrk_r>
 8007afc:	6038      	str	r0, [r7, #0]
 8007afe:	4629      	mov	r1, r5
 8007b00:	4630      	mov	r0, r6
 8007b02:	f000 ff13 	bl	800892c <_sbrk_r>
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	d123      	bne.n	8007b52 <_malloc_r+0x92>
 8007b0a:	230c      	movs	r3, #12
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	6033      	str	r3, [r6, #0]
 8007b10:	f003 f934 	bl	800ad7c <__malloc_unlock>
 8007b14:	e7e3      	b.n	8007ade <_malloc_r+0x1e>
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	1b5b      	subs	r3, r3, r5
 8007b1a:	d417      	bmi.n	8007b4c <_malloc_r+0x8c>
 8007b1c:	2b0b      	cmp	r3, #11
 8007b1e:	d903      	bls.n	8007b28 <_malloc_r+0x68>
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	441c      	add	r4, r3
 8007b24:	6025      	str	r5, [r4, #0]
 8007b26:	e004      	b.n	8007b32 <_malloc_r+0x72>
 8007b28:	6863      	ldr	r3, [r4, #4]
 8007b2a:	42a2      	cmp	r2, r4
 8007b2c:	bf0c      	ite	eq
 8007b2e:	600b      	streq	r3, [r1, #0]
 8007b30:	6053      	strne	r3, [r2, #4]
 8007b32:	4630      	mov	r0, r6
 8007b34:	f003 f922 	bl	800ad7c <__malloc_unlock>
 8007b38:	f104 000b 	add.w	r0, r4, #11
 8007b3c:	1d23      	adds	r3, r4, #4
 8007b3e:	f020 0007 	bic.w	r0, r0, #7
 8007b42:	1ac2      	subs	r2, r0, r3
 8007b44:	d0cc      	beq.n	8007ae0 <_malloc_r+0x20>
 8007b46:	1a1b      	subs	r3, r3, r0
 8007b48:	50a3      	str	r3, [r4, r2]
 8007b4a:	e7c9      	b.n	8007ae0 <_malloc_r+0x20>
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	6864      	ldr	r4, [r4, #4]
 8007b50:	e7cc      	b.n	8007aec <_malloc_r+0x2c>
 8007b52:	1cc4      	adds	r4, r0, #3
 8007b54:	f024 0403 	bic.w	r4, r4, #3
 8007b58:	42a0      	cmp	r0, r4
 8007b5a:	d0e3      	beq.n	8007b24 <_malloc_r+0x64>
 8007b5c:	1a21      	subs	r1, r4, r0
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f000 fee4 	bl	800892c <_sbrk_r>
 8007b64:	3001      	adds	r0, #1
 8007b66:	d1dd      	bne.n	8007b24 <_malloc_r+0x64>
 8007b68:	e7cf      	b.n	8007b0a <_malloc_r+0x4a>
 8007b6a:	bf00      	nop
 8007b6c:	200036dc 	.word	0x200036dc
 8007b70:	200036e0 	.word	0x200036e0

08007b74 <__cvt>:
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b7a:	461f      	mov	r7, r3
 8007b7c:	bfbb      	ittet	lt
 8007b7e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007b82:	461f      	movlt	r7, r3
 8007b84:	2300      	movge	r3, #0
 8007b86:	232d      	movlt	r3, #45	; 0x2d
 8007b88:	b088      	sub	sp, #32
 8007b8a:	4614      	mov	r4, r2
 8007b8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007b90:	7013      	strb	r3, [r2, #0]
 8007b92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b94:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007b98:	f023 0820 	bic.w	r8, r3, #32
 8007b9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ba0:	d005      	beq.n	8007bae <__cvt+0x3a>
 8007ba2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007ba6:	d100      	bne.n	8007baa <__cvt+0x36>
 8007ba8:	3501      	adds	r5, #1
 8007baa:	2302      	movs	r3, #2
 8007bac:	e000      	b.n	8007bb0 <__cvt+0x3c>
 8007bae:	2303      	movs	r3, #3
 8007bb0:	aa07      	add	r2, sp, #28
 8007bb2:	9204      	str	r2, [sp, #16]
 8007bb4:	aa06      	add	r2, sp, #24
 8007bb6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007bba:	e9cd 3500 	strd	r3, r5, [sp]
 8007bbe:	4622      	mov	r2, r4
 8007bc0:	463b      	mov	r3, r7
 8007bc2:	f001 fe81 	bl	80098c8 <_dtoa_r>
 8007bc6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007bca:	4606      	mov	r6, r0
 8007bcc:	d102      	bne.n	8007bd4 <__cvt+0x60>
 8007bce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bd0:	07db      	lsls	r3, r3, #31
 8007bd2:	d522      	bpl.n	8007c1a <__cvt+0xa6>
 8007bd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bd8:	eb06 0905 	add.w	r9, r6, r5
 8007bdc:	d110      	bne.n	8007c00 <__cvt+0x8c>
 8007bde:	7833      	ldrb	r3, [r6, #0]
 8007be0:	2b30      	cmp	r3, #48	; 0x30
 8007be2:	d10a      	bne.n	8007bfa <__cvt+0x86>
 8007be4:	2200      	movs	r2, #0
 8007be6:	2300      	movs	r3, #0
 8007be8:	4620      	mov	r0, r4
 8007bea:	4639      	mov	r1, r7
 8007bec:	f7f8 fee6 	bl	80009bc <__aeabi_dcmpeq>
 8007bf0:	b918      	cbnz	r0, 8007bfa <__cvt+0x86>
 8007bf2:	f1c5 0501 	rsb	r5, r5, #1
 8007bf6:	f8ca 5000 	str.w	r5, [sl]
 8007bfa:	f8da 3000 	ldr.w	r3, [sl]
 8007bfe:	4499      	add	r9, r3
 8007c00:	2200      	movs	r2, #0
 8007c02:	2300      	movs	r3, #0
 8007c04:	4620      	mov	r0, r4
 8007c06:	4639      	mov	r1, r7
 8007c08:	f7f8 fed8 	bl	80009bc <__aeabi_dcmpeq>
 8007c0c:	b108      	cbz	r0, 8007c12 <__cvt+0x9e>
 8007c0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007c12:	2230      	movs	r2, #48	; 0x30
 8007c14:	9b07      	ldr	r3, [sp, #28]
 8007c16:	454b      	cmp	r3, r9
 8007c18:	d307      	bcc.n	8007c2a <__cvt+0xb6>
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	9b07      	ldr	r3, [sp, #28]
 8007c1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c20:	1b9b      	subs	r3, r3, r6
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	b008      	add	sp, #32
 8007c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c2a:	1c59      	adds	r1, r3, #1
 8007c2c:	9107      	str	r1, [sp, #28]
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	e7f0      	b.n	8007c14 <__cvt+0xa0>

08007c32 <__exponent>:
 8007c32:	4603      	mov	r3, r0
 8007c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c36:	2900      	cmp	r1, #0
 8007c38:	f803 2b02 	strb.w	r2, [r3], #2
 8007c3c:	bfb6      	itet	lt
 8007c3e:	222d      	movlt	r2, #45	; 0x2d
 8007c40:	222b      	movge	r2, #43	; 0x2b
 8007c42:	4249      	neglt	r1, r1
 8007c44:	2909      	cmp	r1, #9
 8007c46:	7042      	strb	r2, [r0, #1]
 8007c48:	dd2b      	ble.n	8007ca2 <__exponent+0x70>
 8007c4a:	f10d 0407 	add.w	r4, sp, #7
 8007c4e:	46a4      	mov	ip, r4
 8007c50:	270a      	movs	r7, #10
 8007c52:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c56:	460a      	mov	r2, r1
 8007c58:	46a6      	mov	lr, r4
 8007c5a:	fb07 1516 	mls	r5, r7, r6, r1
 8007c5e:	2a63      	cmp	r2, #99	; 0x63
 8007c60:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007c64:	4631      	mov	r1, r6
 8007c66:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c6e:	dcf0      	bgt.n	8007c52 <__exponent+0x20>
 8007c70:	3130      	adds	r1, #48	; 0x30
 8007c72:	f1ae 0502 	sub.w	r5, lr, #2
 8007c76:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	1c44      	adds	r4, r0, #1
 8007c7e:	4561      	cmp	r1, ip
 8007c80:	d30a      	bcc.n	8007c98 <__exponent+0x66>
 8007c82:	f10d 0209 	add.w	r2, sp, #9
 8007c86:	eba2 020e 	sub.w	r2, r2, lr
 8007c8a:	4565      	cmp	r5, ip
 8007c8c:	bf88      	it	hi
 8007c8e:	2200      	movhi	r2, #0
 8007c90:	4413      	add	r3, r2
 8007c92:	1a18      	subs	r0, r3, r0
 8007c94:	b003      	add	sp, #12
 8007c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c9c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ca0:	e7ed      	b.n	8007c7e <__exponent+0x4c>
 8007ca2:	2330      	movs	r3, #48	; 0x30
 8007ca4:	3130      	adds	r1, #48	; 0x30
 8007ca6:	7083      	strb	r3, [r0, #2]
 8007ca8:	70c1      	strb	r1, [r0, #3]
 8007caa:	1d03      	adds	r3, r0, #4
 8007cac:	e7f1      	b.n	8007c92 <__exponent+0x60>
	...

08007cb0 <_printf_float>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	b091      	sub	sp, #68	; 0x44
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007cbc:	4616      	mov	r6, r2
 8007cbe:	461f      	mov	r7, r3
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	f003 f817 	bl	800acf4 <_localeconv_r>
 8007cc6:	6803      	ldr	r3, [r0, #0]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	9309      	str	r3, [sp, #36]	; 0x24
 8007ccc:	f7f8 fa4a 	bl	8000164 <strlen>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	930e      	str	r3, [sp, #56]	; 0x38
 8007cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8007cd8:	900a      	str	r0, [sp, #40]	; 0x28
 8007cda:	3307      	adds	r3, #7
 8007cdc:	f023 0307 	bic.w	r3, r3, #7
 8007ce0:	f103 0208 	add.w	r2, r3, #8
 8007ce4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007ce8:	f8d4 b000 	ldr.w	fp, [r4]
 8007cec:	f8c8 2000 	str.w	r2, [r8]
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007cf8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007cfc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007d00:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d02:	f04f 32ff 	mov.w	r2, #4294967295
 8007d06:	4640      	mov	r0, r8
 8007d08:	4b9c      	ldr	r3, [pc, #624]	; (8007f7c <_printf_float+0x2cc>)
 8007d0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d0c:	f7f8 fe88 	bl	8000a20 <__aeabi_dcmpun>
 8007d10:	bb70      	cbnz	r0, 8007d70 <_printf_float+0xc0>
 8007d12:	f04f 32ff 	mov.w	r2, #4294967295
 8007d16:	4640      	mov	r0, r8
 8007d18:	4b98      	ldr	r3, [pc, #608]	; (8007f7c <_printf_float+0x2cc>)
 8007d1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d1c:	f7f8 fe62 	bl	80009e4 <__aeabi_dcmple>
 8007d20:	bb30      	cbnz	r0, 8007d70 <_printf_float+0xc0>
 8007d22:	2200      	movs	r2, #0
 8007d24:	2300      	movs	r3, #0
 8007d26:	4640      	mov	r0, r8
 8007d28:	4651      	mov	r1, sl
 8007d2a:	f7f8 fe51 	bl	80009d0 <__aeabi_dcmplt>
 8007d2e:	b110      	cbz	r0, 8007d36 <_printf_float+0x86>
 8007d30:	232d      	movs	r3, #45	; 0x2d
 8007d32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d36:	4b92      	ldr	r3, [pc, #584]	; (8007f80 <_printf_float+0x2d0>)
 8007d38:	4892      	ldr	r0, [pc, #584]	; (8007f84 <_printf_float+0x2d4>)
 8007d3a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007d3e:	bf94      	ite	ls
 8007d40:	4698      	movls	r8, r3
 8007d42:	4680      	movhi	r8, r0
 8007d44:	2303      	movs	r3, #3
 8007d46:	f04f 0a00 	mov.w	sl, #0
 8007d4a:	6123      	str	r3, [r4, #16]
 8007d4c:	f02b 0304 	bic.w	r3, fp, #4
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	4633      	mov	r3, r6
 8007d54:	4621      	mov	r1, r4
 8007d56:	4628      	mov	r0, r5
 8007d58:	9700      	str	r7, [sp, #0]
 8007d5a:	aa0f      	add	r2, sp, #60	; 0x3c
 8007d5c:	f000 f9d4 	bl	8008108 <_printf_common>
 8007d60:	3001      	adds	r0, #1
 8007d62:	f040 8090 	bne.w	8007e86 <_printf_float+0x1d6>
 8007d66:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6a:	b011      	add	sp, #68	; 0x44
 8007d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d70:	4642      	mov	r2, r8
 8007d72:	4653      	mov	r3, sl
 8007d74:	4640      	mov	r0, r8
 8007d76:	4651      	mov	r1, sl
 8007d78:	f7f8 fe52 	bl	8000a20 <__aeabi_dcmpun>
 8007d7c:	b148      	cbz	r0, 8007d92 <_printf_float+0xe2>
 8007d7e:	f1ba 0f00 	cmp.w	sl, #0
 8007d82:	bfb8      	it	lt
 8007d84:	232d      	movlt	r3, #45	; 0x2d
 8007d86:	4880      	ldr	r0, [pc, #512]	; (8007f88 <_printf_float+0x2d8>)
 8007d88:	bfb8      	it	lt
 8007d8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d8e:	4b7f      	ldr	r3, [pc, #508]	; (8007f8c <_printf_float+0x2dc>)
 8007d90:	e7d3      	b.n	8007d3a <_printf_float+0x8a>
 8007d92:	6863      	ldr	r3, [r4, #4]
 8007d94:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	d142      	bne.n	8007e22 <_printf_float+0x172>
 8007d9c:	2306      	movs	r3, #6
 8007d9e:	6063      	str	r3, [r4, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	9206      	str	r2, [sp, #24]
 8007da4:	aa0e      	add	r2, sp, #56	; 0x38
 8007da6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007daa:	aa0d      	add	r2, sp, #52	; 0x34
 8007dac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007db0:	9203      	str	r2, [sp, #12]
 8007db2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007db6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007dba:	6023      	str	r3, [r4, #0]
 8007dbc:	6863      	ldr	r3, [r4, #4]
 8007dbe:	4642      	mov	r2, r8
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	4653      	mov	r3, sl
 8007dc6:	910b      	str	r1, [sp, #44]	; 0x2c
 8007dc8:	f7ff fed4 	bl	8007b74 <__cvt>
 8007dcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007dce:	4680      	mov	r8, r0
 8007dd0:	2947      	cmp	r1, #71	; 0x47
 8007dd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007dd4:	d108      	bne.n	8007de8 <_printf_float+0x138>
 8007dd6:	1cc8      	adds	r0, r1, #3
 8007dd8:	db02      	blt.n	8007de0 <_printf_float+0x130>
 8007dda:	6863      	ldr	r3, [r4, #4]
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	dd40      	ble.n	8007e62 <_printf_float+0x1b2>
 8007de0:	f1a9 0902 	sub.w	r9, r9, #2
 8007de4:	fa5f f989 	uxtb.w	r9, r9
 8007de8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007dec:	d81f      	bhi.n	8007e2e <_printf_float+0x17e>
 8007dee:	464a      	mov	r2, r9
 8007df0:	3901      	subs	r1, #1
 8007df2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007df6:	910d      	str	r1, [sp, #52]	; 0x34
 8007df8:	f7ff ff1b 	bl	8007c32 <__exponent>
 8007dfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dfe:	4682      	mov	sl, r0
 8007e00:	1813      	adds	r3, r2, r0
 8007e02:	2a01      	cmp	r2, #1
 8007e04:	6123      	str	r3, [r4, #16]
 8007e06:	dc02      	bgt.n	8007e0e <_printf_float+0x15e>
 8007e08:	6822      	ldr	r2, [r4, #0]
 8007e0a:	07d2      	lsls	r2, r2, #31
 8007e0c:	d501      	bpl.n	8007e12 <_printf_float+0x162>
 8007e0e:	3301      	adds	r3, #1
 8007e10:	6123      	str	r3, [r4, #16]
 8007e12:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d09b      	beq.n	8007d52 <_printf_float+0xa2>
 8007e1a:	232d      	movs	r3, #45	; 0x2d
 8007e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e20:	e797      	b.n	8007d52 <_printf_float+0xa2>
 8007e22:	2947      	cmp	r1, #71	; 0x47
 8007e24:	d1bc      	bne.n	8007da0 <_printf_float+0xf0>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1ba      	bne.n	8007da0 <_printf_float+0xf0>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e7b7      	b.n	8007d9e <_printf_float+0xee>
 8007e2e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007e32:	d118      	bne.n	8007e66 <_printf_float+0x1b6>
 8007e34:	2900      	cmp	r1, #0
 8007e36:	6863      	ldr	r3, [r4, #4]
 8007e38:	dd0b      	ble.n	8007e52 <_printf_float+0x1a2>
 8007e3a:	6121      	str	r1, [r4, #16]
 8007e3c:	b913      	cbnz	r3, 8007e44 <_printf_float+0x194>
 8007e3e:	6822      	ldr	r2, [r4, #0]
 8007e40:	07d0      	lsls	r0, r2, #31
 8007e42:	d502      	bpl.n	8007e4a <_printf_float+0x19a>
 8007e44:	3301      	adds	r3, #1
 8007e46:	440b      	add	r3, r1
 8007e48:	6123      	str	r3, [r4, #16]
 8007e4a:	f04f 0a00 	mov.w	sl, #0
 8007e4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e50:	e7df      	b.n	8007e12 <_printf_float+0x162>
 8007e52:	b913      	cbnz	r3, 8007e5a <_printf_float+0x1aa>
 8007e54:	6822      	ldr	r2, [r4, #0]
 8007e56:	07d2      	lsls	r2, r2, #31
 8007e58:	d501      	bpl.n	8007e5e <_printf_float+0x1ae>
 8007e5a:	3302      	adds	r3, #2
 8007e5c:	e7f4      	b.n	8007e48 <_printf_float+0x198>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e7f2      	b.n	8007e48 <_printf_float+0x198>
 8007e62:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e68:	4299      	cmp	r1, r3
 8007e6a:	db05      	blt.n	8007e78 <_printf_float+0x1c8>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	6121      	str	r1, [r4, #16]
 8007e70:	07d8      	lsls	r0, r3, #31
 8007e72:	d5ea      	bpl.n	8007e4a <_printf_float+0x19a>
 8007e74:	1c4b      	adds	r3, r1, #1
 8007e76:	e7e7      	b.n	8007e48 <_printf_float+0x198>
 8007e78:	2900      	cmp	r1, #0
 8007e7a:	bfcc      	ite	gt
 8007e7c:	2201      	movgt	r2, #1
 8007e7e:	f1c1 0202 	rsble	r2, r1, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	e7e0      	b.n	8007e48 <_printf_float+0x198>
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	055a      	lsls	r2, r3, #21
 8007e8a:	d407      	bmi.n	8007e9c <_printf_float+0x1ec>
 8007e8c:	6923      	ldr	r3, [r4, #16]
 8007e8e:	4642      	mov	r2, r8
 8007e90:	4631      	mov	r1, r6
 8007e92:	4628      	mov	r0, r5
 8007e94:	47b8      	blx	r7
 8007e96:	3001      	adds	r0, #1
 8007e98:	d12b      	bne.n	8007ef2 <_printf_float+0x242>
 8007e9a:	e764      	b.n	8007d66 <_printf_float+0xb6>
 8007e9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007ea0:	f240 80dd 	bls.w	800805e <_printf_float+0x3ae>
 8007ea4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f7f8 fd86 	bl	80009bc <__aeabi_dcmpeq>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d033      	beq.n	8007f1c <_printf_float+0x26c>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	4631      	mov	r1, r6
 8007eb8:	4628      	mov	r0, r5
 8007eba:	4a35      	ldr	r2, [pc, #212]	; (8007f90 <_printf_float+0x2e0>)
 8007ebc:	47b8      	blx	r7
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	f43f af51 	beq.w	8007d66 <_printf_float+0xb6>
 8007ec4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	db02      	blt.n	8007ed2 <_printf_float+0x222>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	07d8      	lsls	r0, r3, #31
 8007ed0:	d50f      	bpl.n	8007ef2 <_printf_float+0x242>
 8007ed2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	4628      	mov	r0, r5
 8007eda:	47b8      	blx	r7
 8007edc:	3001      	adds	r0, #1
 8007ede:	f43f af42 	beq.w	8007d66 <_printf_float+0xb6>
 8007ee2:	f04f 0800 	mov.w	r8, #0
 8007ee6:	f104 091a 	add.w	r9, r4, #26
 8007eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eec:	3b01      	subs	r3, #1
 8007eee:	4543      	cmp	r3, r8
 8007ef0:	dc09      	bgt.n	8007f06 <_printf_float+0x256>
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	079b      	lsls	r3, r3, #30
 8007ef6:	f100 8102 	bmi.w	80080fe <_printf_float+0x44e>
 8007efa:	68e0      	ldr	r0, [r4, #12]
 8007efc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007efe:	4298      	cmp	r0, r3
 8007f00:	bfb8      	it	lt
 8007f02:	4618      	movlt	r0, r3
 8007f04:	e731      	b.n	8007d6a <_printf_float+0xba>
 8007f06:	2301      	movs	r3, #1
 8007f08:	464a      	mov	r2, r9
 8007f0a:	4631      	mov	r1, r6
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	47b8      	blx	r7
 8007f10:	3001      	adds	r0, #1
 8007f12:	f43f af28 	beq.w	8007d66 <_printf_float+0xb6>
 8007f16:	f108 0801 	add.w	r8, r8, #1
 8007f1a:	e7e6      	b.n	8007eea <_printf_float+0x23a>
 8007f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dc38      	bgt.n	8007f94 <_printf_float+0x2e4>
 8007f22:	2301      	movs	r3, #1
 8007f24:	4631      	mov	r1, r6
 8007f26:	4628      	mov	r0, r5
 8007f28:	4a19      	ldr	r2, [pc, #100]	; (8007f90 <_printf_float+0x2e0>)
 8007f2a:	47b8      	blx	r7
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	f43f af1a 	beq.w	8007d66 <_printf_float+0xb6>
 8007f32:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f36:	4313      	orrs	r3, r2
 8007f38:	d102      	bne.n	8007f40 <_printf_float+0x290>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	07d9      	lsls	r1, r3, #31
 8007f3e:	d5d8      	bpl.n	8007ef2 <_printf_float+0x242>
 8007f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f44:	4631      	mov	r1, r6
 8007f46:	4628      	mov	r0, r5
 8007f48:	47b8      	blx	r7
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	f43f af0b 	beq.w	8007d66 <_printf_float+0xb6>
 8007f50:	f04f 0900 	mov.w	r9, #0
 8007f54:	f104 0a1a 	add.w	sl, r4, #26
 8007f58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f5a:	425b      	negs	r3, r3
 8007f5c:	454b      	cmp	r3, r9
 8007f5e:	dc01      	bgt.n	8007f64 <_printf_float+0x2b4>
 8007f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f62:	e794      	b.n	8007e8e <_printf_float+0x1de>
 8007f64:	2301      	movs	r3, #1
 8007f66:	4652      	mov	r2, sl
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f aef9 	beq.w	8007d66 <_printf_float+0xb6>
 8007f74:	f109 0901 	add.w	r9, r9, #1
 8007f78:	e7ee      	b.n	8007f58 <_printf_float+0x2a8>
 8007f7a:	bf00      	nop
 8007f7c:	7fefffff 	.word	0x7fefffff
 8007f80:	0800c518 	.word	0x0800c518
 8007f84:	0800c51c 	.word	0x0800c51c
 8007f88:	0800c524 	.word	0x0800c524
 8007f8c:	0800c520 	.word	0x0800c520
 8007f90:	0800c528 	.word	0x0800c528
 8007f94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	bfa8      	it	ge
 8007f9c:	461a      	movge	r2, r3
 8007f9e:	2a00      	cmp	r2, #0
 8007fa0:	4691      	mov	r9, r2
 8007fa2:	dc37      	bgt.n	8008014 <_printf_float+0x364>
 8007fa4:	f04f 0b00 	mov.w	fp, #0
 8007fa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fac:	f104 021a 	add.w	r2, r4, #26
 8007fb0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007fb4:	ebaa 0309 	sub.w	r3, sl, r9
 8007fb8:	455b      	cmp	r3, fp
 8007fba:	dc33      	bgt.n	8008024 <_printf_float+0x374>
 8007fbc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	db3b      	blt.n	800803c <_printf_float+0x38c>
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	07da      	lsls	r2, r3, #31
 8007fc8:	d438      	bmi.n	800803c <_printf_float+0x38c>
 8007fca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fcc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007fce:	eba2 030a 	sub.w	r3, r2, sl
 8007fd2:	eba2 0901 	sub.w	r9, r2, r1
 8007fd6:	4599      	cmp	r9, r3
 8007fd8:	bfa8      	it	ge
 8007fda:	4699      	movge	r9, r3
 8007fdc:	f1b9 0f00 	cmp.w	r9, #0
 8007fe0:	dc34      	bgt.n	800804c <_printf_float+0x39c>
 8007fe2:	f04f 0800 	mov.w	r8, #0
 8007fe6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fea:	f104 0a1a 	add.w	sl, r4, #26
 8007fee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007ff2:	1a9b      	subs	r3, r3, r2
 8007ff4:	eba3 0309 	sub.w	r3, r3, r9
 8007ff8:	4543      	cmp	r3, r8
 8007ffa:	f77f af7a 	ble.w	8007ef2 <_printf_float+0x242>
 8007ffe:	2301      	movs	r3, #1
 8008000:	4652      	mov	r2, sl
 8008002:	4631      	mov	r1, r6
 8008004:	4628      	mov	r0, r5
 8008006:	47b8      	blx	r7
 8008008:	3001      	adds	r0, #1
 800800a:	f43f aeac 	beq.w	8007d66 <_printf_float+0xb6>
 800800e:	f108 0801 	add.w	r8, r8, #1
 8008012:	e7ec      	b.n	8007fee <_printf_float+0x33e>
 8008014:	4613      	mov	r3, r2
 8008016:	4631      	mov	r1, r6
 8008018:	4642      	mov	r2, r8
 800801a:	4628      	mov	r0, r5
 800801c:	47b8      	blx	r7
 800801e:	3001      	adds	r0, #1
 8008020:	d1c0      	bne.n	8007fa4 <_printf_float+0x2f4>
 8008022:	e6a0      	b.n	8007d66 <_printf_float+0xb6>
 8008024:	2301      	movs	r3, #1
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	920b      	str	r2, [sp, #44]	; 0x2c
 800802c:	47b8      	blx	r7
 800802e:	3001      	adds	r0, #1
 8008030:	f43f ae99 	beq.w	8007d66 <_printf_float+0xb6>
 8008034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008036:	f10b 0b01 	add.w	fp, fp, #1
 800803a:	e7b9      	b.n	8007fb0 <_printf_float+0x300>
 800803c:	4631      	mov	r1, r6
 800803e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008042:	4628      	mov	r0, r5
 8008044:	47b8      	blx	r7
 8008046:	3001      	adds	r0, #1
 8008048:	d1bf      	bne.n	8007fca <_printf_float+0x31a>
 800804a:	e68c      	b.n	8007d66 <_printf_float+0xb6>
 800804c:	464b      	mov	r3, r9
 800804e:	4631      	mov	r1, r6
 8008050:	4628      	mov	r0, r5
 8008052:	eb08 020a 	add.w	r2, r8, sl
 8008056:	47b8      	blx	r7
 8008058:	3001      	adds	r0, #1
 800805a:	d1c2      	bne.n	8007fe2 <_printf_float+0x332>
 800805c:	e683      	b.n	8007d66 <_printf_float+0xb6>
 800805e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008060:	2a01      	cmp	r2, #1
 8008062:	dc01      	bgt.n	8008068 <_printf_float+0x3b8>
 8008064:	07db      	lsls	r3, r3, #31
 8008066:	d537      	bpl.n	80080d8 <_printf_float+0x428>
 8008068:	2301      	movs	r3, #1
 800806a:	4642      	mov	r2, r8
 800806c:	4631      	mov	r1, r6
 800806e:	4628      	mov	r0, r5
 8008070:	47b8      	blx	r7
 8008072:	3001      	adds	r0, #1
 8008074:	f43f ae77 	beq.w	8007d66 <_printf_float+0xb6>
 8008078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800807c:	4631      	mov	r1, r6
 800807e:	4628      	mov	r0, r5
 8008080:	47b8      	blx	r7
 8008082:	3001      	adds	r0, #1
 8008084:	f43f ae6f 	beq.w	8007d66 <_printf_float+0xb6>
 8008088:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800808c:	2200      	movs	r2, #0
 800808e:	2300      	movs	r3, #0
 8008090:	f7f8 fc94 	bl	80009bc <__aeabi_dcmpeq>
 8008094:	b9d8      	cbnz	r0, 80080ce <_printf_float+0x41e>
 8008096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008098:	f108 0201 	add.w	r2, r8, #1
 800809c:	3b01      	subs	r3, #1
 800809e:	4631      	mov	r1, r6
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	d10e      	bne.n	80080c6 <_printf_float+0x416>
 80080a8:	e65d      	b.n	8007d66 <_printf_float+0xb6>
 80080aa:	2301      	movs	r3, #1
 80080ac:	464a      	mov	r2, r9
 80080ae:	4631      	mov	r1, r6
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b8      	blx	r7
 80080b4:	3001      	adds	r0, #1
 80080b6:	f43f ae56 	beq.w	8007d66 <_printf_float+0xb6>
 80080ba:	f108 0801 	add.w	r8, r8, #1
 80080be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080c0:	3b01      	subs	r3, #1
 80080c2:	4543      	cmp	r3, r8
 80080c4:	dcf1      	bgt.n	80080aa <_printf_float+0x3fa>
 80080c6:	4653      	mov	r3, sl
 80080c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080cc:	e6e0      	b.n	8007e90 <_printf_float+0x1e0>
 80080ce:	f04f 0800 	mov.w	r8, #0
 80080d2:	f104 091a 	add.w	r9, r4, #26
 80080d6:	e7f2      	b.n	80080be <_printf_float+0x40e>
 80080d8:	2301      	movs	r3, #1
 80080da:	4642      	mov	r2, r8
 80080dc:	e7df      	b.n	800809e <_printf_float+0x3ee>
 80080de:	2301      	movs	r3, #1
 80080e0:	464a      	mov	r2, r9
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	f43f ae3c 	beq.w	8007d66 <_printf_float+0xb6>
 80080ee:	f108 0801 	add.w	r8, r8, #1
 80080f2:	68e3      	ldr	r3, [r4, #12]
 80080f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80080f6:	1a5b      	subs	r3, r3, r1
 80080f8:	4543      	cmp	r3, r8
 80080fa:	dcf0      	bgt.n	80080de <_printf_float+0x42e>
 80080fc:	e6fd      	b.n	8007efa <_printf_float+0x24a>
 80080fe:	f04f 0800 	mov.w	r8, #0
 8008102:	f104 0919 	add.w	r9, r4, #25
 8008106:	e7f4      	b.n	80080f2 <_printf_float+0x442>

08008108 <_printf_common>:
 8008108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800810c:	4616      	mov	r6, r2
 800810e:	4699      	mov	r9, r3
 8008110:	688a      	ldr	r2, [r1, #8]
 8008112:	690b      	ldr	r3, [r1, #16]
 8008114:	4607      	mov	r7, r0
 8008116:	4293      	cmp	r3, r2
 8008118:	bfb8      	it	lt
 800811a:	4613      	movlt	r3, r2
 800811c:	6033      	str	r3, [r6, #0]
 800811e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008122:	460c      	mov	r4, r1
 8008124:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008128:	b10a      	cbz	r2, 800812e <_printf_common+0x26>
 800812a:	3301      	adds	r3, #1
 800812c:	6033      	str	r3, [r6, #0]
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	0699      	lsls	r1, r3, #26
 8008132:	bf42      	ittt	mi
 8008134:	6833      	ldrmi	r3, [r6, #0]
 8008136:	3302      	addmi	r3, #2
 8008138:	6033      	strmi	r3, [r6, #0]
 800813a:	6825      	ldr	r5, [r4, #0]
 800813c:	f015 0506 	ands.w	r5, r5, #6
 8008140:	d106      	bne.n	8008150 <_printf_common+0x48>
 8008142:	f104 0a19 	add.w	sl, r4, #25
 8008146:	68e3      	ldr	r3, [r4, #12]
 8008148:	6832      	ldr	r2, [r6, #0]
 800814a:	1a9b      	subs	r3, r3, r2
 800814c:	42ab      	cmp	r3, r5
 800814e:	dc28      	bgt.n	80081a2 <_printf_common+0x9a>
 8008150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008154:	1e13      	subs	r3, r2, #0
 8008156:	6822      	ldr	r2, [r4, #0]
 8008158:	bf18      	it	ne
 800815a:	2301      	movne	r3, #1
 800815c:	0692      	lsls	r2, r2, #26
 800815e:	d42d      	bmi.n	80081bc <_printf_common+0xb4>
 8008160:	4649      	mov	r1, r9
 8008162:	4638      	mov	r0, r7
 8008164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008168:	47c0      	blx	r8
 800816a:	3001      	adds	r0, #1
 800816c:	d020      	beq.n	80081b0 <_printf_common+0xa8>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	68e5      	ldr	r5, [r4, #12]
 8008172:	f003 0306 	and.w	r3, r3, #6
 8008176:	2b04      	cmp	r3, #4
 8008178:	bf18      	it	ne
 800817a:	2500      	movne	r5, #0
 800817c:	6832      	ldr	r2, [r6, #0]
 800817e:	f04f 0600 	mov.w	r6, #0
 8008182:	68a3      	ldr	r3, [r4, #8]
 8008184:	bf08      	it	eq
 8008186:	1aad      	subeq	r5, r5, r2
 8008188:	6922      	ldr	r2, [r4, #16]
 800818a:	bf08      	it	eq
 800818c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008190:	4293      	cmp	r3, r2
 8008192:	bfc4      	itt	gt
 8008194:	1a9b      	subgt	r3, r3, r2
 8008196:	18ed      	addgt	r5, r5, r3
 8008198:	341a      	adds	r4, #26
 800819a:	42b5      	cmp	r5, r6
 800819c:	d11a      	bne.n	80081d4 <_printf_common+0xcc>
 800819e:	2000      	movs	r0, #0
 80081a0:	e008      	b.n	80081b4 <_printf_common+0xac>
 80081a2:	2301      	movs	r3, #1
 80081a4:	4652      	mov	r2, sl
 80081a6:	4649      	mov	r1, r9
 80081a8:	4638      	mov	r0, r7
 80081aa:	47c0      	blx	r8
 80081ac:	3001      	adds	r0, #1
 80081ae:	d103      	bne.n	80081b8 <_printf_common+0xb0>
 80081b0:	f04f 30ff 	mov.w	r0, #4294967295
 80081b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b8:	3501      	adds	r5, #1
 80081ba:	e7c4      	b.n	8008146 <_printf_common+0x3e>
 80081bc:	2030      	movs	r0, #48	; 0x30
 80081be:	18e1      	adds	r1, r4, r3
 80081c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081ca:	4422      	add	r2, r4
 80081cc:	3302      	adds	r3, #2
 80081ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081d2:	e7c5      	b.n	8008160 <_printf_common+0x58>
 80081d4:	2301      	movs	r3, #1
 80081d6:	4622      	mov	r2, r4
 80081d8:	4649      	mov	r1, r9
 80081da:	4638      	mov	r0, r7
 80081dc:	47c0      	blx	r8
 80081de:	3001      	adds	r0, #1
 80081e0:	d0e6      	beq.n	80081b0 <_printf_common+0xa8>
 80081e2:	3601      	adds	r6, #1
 80081e4:	e7d9      	b.n	800819a <_printf_common+0x92>
	...

080081e8 <_printf_i>:
 80081e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081ec:	460c      	mov	r4, r1
 80081ee:	7e27      	ldrb	r7, [r4, #24]
 80081f0:	4691      	mov	r9, r2
 80081f2:	2f78      	cmp	r7, #120	; 0x78
 80081f4:	4680      	mov	r8, r0
 80081f6:	469a      	mov	sl, r3
 80081f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081fe:	d807      	bhi.n	8008210 <_printf_i+0x28>
 8008200:	2f62      	cmp	r7, #98	; 0x62
 8008202:	d80a      	bhi.n	800821a <_printf_i+0x32>
 8008204:	2f00      	cmp	r7, #0
 8008206:	f000 80d9 	beq.w	80083bc <_printf_i+0x1d4>
 800820a:	2f58      	cmp	r7, #88	; 0x58
 800820c:	f000 80a4 	beq.w	8008358 <_printf_i+0x170>
 8008210:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008218:	e03a      	b.n	8008290 <_printf_i+0xa8>
 800821a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800821e:	2b15      	cmp	r3, #21
 8008220:	d8f6      	bhi.n	8008210 <_printf_i+0x28>
 8008222:	a001      	add	r0, pc, #4	; (adr r0, 8008228 <_printf_i+0x40>)
 8008224:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008228:	08008281 	.word	0x08008281
 800822c:	08008295 	.word	0x08008295
 8008230:	08008211 	.word	0x08008211
 8008234:	08008211 	.word	0x08008211
 8008238:	08008211 	.word	0x08008211
 800823c:	08008211 	.word	0x08008211
 8008240:	08008295 	.word	0x08008295
 8008244:	08008211 	.word	0x08008211
 8008248:	08008211 	.word	0x08008211
 800824c:	08008211 	.word	0x08008211
 8008250:	08008211 	.word	0x08008211
 8008254:	080083a3 	.word	0x080083a3
 8008258:	080082c5 	.word	0x080082c5
 800825c:	08008385 	.word	0x08008385
 8008260:	08008211 	.word	0x08008211
 8008264:	08008211 	.word	0x08008211
 8008268:	080083c5 	.word	0x080083c5
 800826c:	08008211 	.word	0x08008211
 8008270:	080082c5 	.word	0x080082c5
 8008274:	08008211 	.word	0x08008211
 8008278:	08008211 	.word	0x08008211
 800827c:	0800838d 	.word	0x0800838d
 8008280:	680b      	ldr	r3, [r1, #0]
 8008282:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008286:	1d1a      	adds	r2, r3, #4
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	600a      	str	r2, [r1, #0]
 800828c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008290:	2301      	movs	r3, #1
 8008292:	e0a4      	b.n	80083de <_printf_i+0x1f6>
 8008294:	6825      	ldr	r5, [r4, #0]
 8008296:	6808      	ldr	r0, [r1, #0]
 8008298:	062e      	lsls	r6, r5, #24
 800829a:	f100 0304 	add.w	r3, r0, #4
 800829e:	d50a      	bpl.n	80082b6 <_printf_i+0xce>
 80082a0:	6805      	ldr	r5, [r0, #0]
 80082a2:	600b      	str	r3, [r1, #0]
 80082a4:	2d00      	cmp	r5, #0
 80082a6:	da03      	bge.n	80082b0 <_printf_i+0xc8>
 80082a8:	232d      	movs	r3, #45	; 0x2d
 80082aa:	426d      	negs	r5, r5
 80082ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082b0:	230a      	movs	r3, #10
 80082b2:	485e      	ldr	r0, [pc, #376]	; (800842c <_printf_i+0x244>)
 80082b4:	e019      	b.n	80082ea <_printf_i+0x102>
 80082b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80082ba:	6805      	ldr	r5, [r0, #0]
 80082bc:	600b      	str	r3, [r1, #0]
 80082be:	bf18      	it	ne
 80082c0:	b22d      	sxthne	r5, r5
 80082c2:	e7ef      	b.n	80082a4 <_printf_i+0xbc>
 80082c4:	680b      	ldr	r3, [r1, #0]
 80082c6:	6825      	ldr	r5, [r4, #0]
 80082c8:	1d18      	adds	r0, r3, #4
 80082ca:	6008      	str	r0, [r1, #0]
 80082cc:	0628      	lsls	r0, r5, #24
 80082ce:	d501      	bpl.n	80082d4 <_printf_i+0xec>
 80082d0:	681d      	ldr	r5, [r3, #0]
 80082d2:	e002      	b.n	80082da <_printf_i+0xf2>
 80082d4:	0669      	lsls	r1, r5, #25
 80082d6:	d5fb      	bpl.n	80082d0 <_printf_i+0xe8>
 80082d8:	881d      	ldrh	r5, [r3, #0]
 80082da:	2f6f      	cmp	r7, #111	; 0x6f
 80082dc:	bf0c      	ite	eq
 80082de:	2308      	moveq	r3, #8
 80082e0:	230a      	movne	r3, #10
 80082e2:	4852      	ldr	r0, [pc, #328]	; (800842c <_printf_i+0x244>)
 80082e4:	2100      	movs	r1, #0
 80082e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082ea:	6866      	ldr	r6, [r4, #4]
 80082ec:	2e00      	cmp	r6, #0
 80082ee:	bfa8      	it	ge
 80082f0:	6821      	ldrge	r1, [r4, #0]
 80082f2:	60a6      	str	r6, [r4, #8]
 80082f4:	bfa4      	itt	ge
 80082f6:	f021 0104 	bicge.w	r1, r1, #4
 80082fa:	6021      	strge	r1, [r4, #0]
 80082fc:	b90d      	cbnz	r5, 8008302 <_printf_i+0x11a>
 80082fe:	2e00      	cmp	r6, #0
 8008300:	d04d      	beq.n	800839e <_printf_i+0x1b6>
 8008302:	4616      	mov	r6, r2
 8008304:	fbb5 f1f3 	udiv	r1, r5, r3
 8008308:	fb03 5711 	mls	r7, r3, r1, r5
 800830c:	5dc7      	ldrb	r7, [r0, r7]
 800830e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008312:	462f      	mov	r7, r5
 8008314:	42bb      	cmp	r3, r7
 8008316:	460d      	mov	r5, r1
 8008318:	d9f4      	bls.n	8008304 <_printf_i+0x11c>
 800831a:	2b08      	cmp	r3, #8
 800831c:	d10b      	bne.n	8008336 <_printf_i+0x14e>
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	07df      	lsls	r7, r3, #31
 8008322:	d508      	bpl.n	8008336 <_printf_i+0x14e>
 8008324:	6923      	ldr	r3, [r4, #16]
 8008326:	6861      	ldr	r1, [r4, #4]
 8008328:	4299      	cmp	r1, r3
 800832a:	bfde      	ittt	le
 800832c:	2330      	movle	r3, #48	; 0x30
 800832e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008332:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008336:	1b92      	subs	r2, r2, r6
 8008338:	6122      	str	r2, [r4, #16]
 800833a:	464b      	mov	r3, r9
 800833c:	4621      	mov	r1, r4
 800833e:	4640      	mov	r0, r8
 8008340:	f8cd a000 	str.w	sl, [sp]
 8008344:	aa03      	add	r2, sp, #12
 8008346:	f7ff fedf 	bl	8008108 <_printf_common>
 800834a:	3001      	adds	r0, #1
 800834c:	d14c      	bne.n	80083e8 <_printf_i+0x200>
 800834e:	f04f 30ff 	mov.w	r0, #4294967295
 8008352:	b004      	add	sp, #16
 8008354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008358:	4834      	ldr	r0, [pc, #208]	; (800842c <_printf_i+0x244>)
 800835a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800835e:	680e      	ldr	r6, [r1, #0]
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	f856 5b04 	ldr.w	r5, [r6], #4
 8008366:	061f      	lsls	r7, r3, #24
 8008368:	600e      	str	r6, [r1, #0]
 800836a:	d514      	bpl.n	8008396 <_printf_i+0x1ae>
 800836c:	07d9      	lsls	r1, r3, #31
 800836e:	bf44      	itt	mi
 8008370:	f043 0320 	orrmi.w	r3, r3, #32
 8008374:	6023      	strmi	r3, [r4, #0]
 8008376:	b91d      	cbnz	r5, 8008380 <_printf_i+0x198>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	f023 0320 	bic.w	r3, r3, #32
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	2310      	movs	r3, #16
 8008382:	e7af      	b.n	80082e4 <_printf_i+0xfc>
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	f043 0320 	orr.w	r3, r3, #32
 800838a:	6023      	str	r3, [r4, #0]
 800838c:	2378      	movs	r3, #120	; 0x78
 800838e:	4828      	ldr	r0, [pc, #160]	; (8008430 <_printf_i+0x248>)
 8008390:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008394:	e7e3      	b.n	800835e <_printf_i+0x176>
 8008396:	065e      	lsls	r6, r3, #25
 8008398:	bf48      	it	mi
 800839a:	b2ad      	uxthmi	r5, r5
 800839c:	e7e6      	b.n	800836c <_printf_i+0x184>
 800839e:	4616      	mov	r6, r2
 80083a0:	e7bb      	b.n	800831a <_printf_i+0x132>
 80083a2:	680b      	ldr	r3, [r1, #0]
 80083a4:	6826      	ldr	r6, [r4, #0]
 80083a6:	1d1d      	adds	r5, r3, #4
 80083a8:	6960      	ldr	r0, [r4, #20]
 80083aa:	600d      	str	r5, [r1, #0]
 80083ac:	0635      	lsls	r5, r6, #24
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	d501      	bpl.n	80083b6 <_printf_i+0x1ce>
 80083b2:	6018      	str	r0, [r3, #0]
 80083b4:	e002      	b.n	80083bc <_printf_i+0x1d4>
 80083b6:	0671      	lsls	r1, r6, #25
 80083b8:	d5fb      	bpl.n	80083b2 <_printf_i+0x1ca>
 80083ba:	8018      	strh	r0, [r3, #0]
 80083bc:	2300      	movs	r3, #0
 80083be:	4616      	mov	r6, r2
 80083c0:	6123      	str	r3, [r4, #16]
 80083c2:	e7ba      	b.n	800833a <_printf_i+0x152>
 80083c4:	680b      	ldr	r3, [r1, #0]
 80083c6:	1d1a      	adds	r2, r3, #4
 80083c8:	600a      	str	r2, [r1, #0]
 80083ca:	681e      	ldr	r6, [r3, #0]
 80083cc:	2100      	movs	r1, #0
 80083ce:	4630      	mov	r0, r6
 80083d0:	6862      	ldr	r2, [r4, #4]
 80083d2:	f002 fcbf 	bl	800ad54 <memchr>
 80083d6:	b108      	cbz	r0, 80083dc <_printf_i+0x1f4>
 80083d8:	1b80      	subs	r0, r0, r6
 80083da:	6060      	str	r0, [r4, #4]
 80083dc:	6863      	ldr	r3, [r4, #4]
 80083de:	6123      	str	r3, [r4, #16]
 80083e0:	2300      	movs	r3, #0
 80083e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083e6:	e7a8      	b.n	800833a <_printf_i+0x152>
 80083e8:	4632      	mov	r2, r6
 80083ea:	4649      	mov	r1, r9
 80083ec:	4640      	mov	r0, r8
 80083ee:	6923      	ldr	r3, [r4, #16]
 80083f0:	47d0      	blx	sl
 80083f2:	3001      	adds	r0, #1
 80083f4:	d0ab      	beq.n	800834e <_printf_i+0x166>
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	079b      	lsls	r3, r3, #30
 80083fa:	d413      	bmi.n	8008424 <_printf_i+0x23c>
 80083fc:	68e0      	ldr	r0, [r4, #12]
 80083fe:	9b03      	ldr	r3, [sp, #12]
 8008400:	4298      	cmp	r0, r3
 8008402:	bfb8      	it	lt
 8008404:	4618      	movlt	r0, r3
 8008406:	e7a4      	b.n	8008352 <_printf_i+0x16a>
 8008408:	2301      	movs	r3, #1
 800840a:	4632      	mov	r2, r6
 800840c:	4649      	mov	r1, r9
 800840e:	4640      	mov	r0, r8
 8008410:	47d0      	blx	sl
 8008412:	3001      	adds	r0, #1
 8008414:	d09b      	beq.n	800834e <_printf_i+0x166>
 8008416:	3501      	adds	r5, #1
 8008418:	68e3      	ldr	r3, [r4, #12]
 800841a:	9903      	ldr	r1, [sp, #12]
 800841c:	1a5b      	subs	r3, r3, r1
 800841e:	42ab      	cmp	r3, r5
 8008420:	dcf2      	bgt.n	8008408 <_printf_i+0x220>
 8008422:	e7eb      	b.n	80083fc <_printf_i+0x214>
 8008424:	2500      	movs	r5, #0
 8008426:	f104 0619 	add.w	r6, r4, #25
 800842a:	e7f5      	b.n	8008418 <_printf_i+0x230>
 800842c:	0800c52a 	.word	0x0800c52a
 8008430:	0800c53b 	.word	0x0800c53b

08008434 <_scanf_float>:
 8008434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	b087      	sub	sp, #28
 800843a:	9303      	str	r3, [sp, #12]
 800843c:	688b      	ldr	r3, [r1, #8]
 800843e:	4617      	mov	r7, r2
 8008440:	1e5a      	subs	r2, r3, #1
 8008442:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008446:	bf85      	ittet	hi
 8008448:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800844c:	195b      	addhi	r3, r3, r5
 800844e:	2300      	movls	r3, #0
 8008450:	9302      	strhi	r3, [sp, #8]
 8008452:	bf88      	it	hi
 8008454:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008458:	468b      	mov	fp, r1
 800845a:	f04f 0500 	mov.w	r5, #0
 800845e:	bf8c      	ite	hi
 8008460:	608b      	strhi	r3, [r1, #8]
 8008462:	9302      	strls	r3, [sp, #8]
 8008464:	680b      	ldr	r3, [r1, #0]
 8008466:	4680      	mov	r8, r0
 8008468:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800846c:	f84b 3b1c 	str.w	r3, [fp], #28
 8008470:	460c      	mov	r4, r1
 8008472:	465e      	mov	r6, fp
 8008474:	46aa      	mov	sl, r5
 8008476:	46a9      	mov	r9, r5
 8008478:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800847c:	9501      	str	r5, [sp, #4]
 800847e:	68a2      	ldr	r2, [r4, #8]
 8008480:	b152      	cbz	r2, 8008498 <_scanf_float+0x64>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b4e      	cmp	r3, #78	; 0x4e
 8008488:	d864      	bhi.n	8008554 <_scanf_float+0x120>
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d83c      	bhi.n	8008508 <_scanf_float+0xd4>
 800848e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008492:	b2c8      	uxtb	r0, r1
 8008494:	280e      	cmp	r0, #14
 8008496:	d93a      	bls.n	800850e <_scanf_float+0xda>
 8008498:	f1b9 0f00 	cmp.w	r9, #0
 800849c:	d003      	beq.n	80084a6 <_scanf_float+0x72>
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084aa:	f1ba 0f01 	cmp.w	sl, #1
 80084ae:	f200 8113 	bhi.w	80086d8 <_scanf_float+0x2a4>
 80084b2:	455e      	cmp	r6, fp
 80084b4:	f200 8105 	bhi.w	80086c2 <_scanf_float+0x28e>
 80084b8:	2501      	movs	r5, #1
 80084ba:	4628      	mov	r0, r5
 80084bc:	b007      	add	sp, #28
 80084be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80084c6:	2a0d      	cmp	r2, #13
 80084c8:	d8e6      	bhi.n	8008498 <_scanf_float+0x64>
 80084ca:	a101      	add	r1, pc, #4	; (adr r1, 80084d0 <_scanf_float+0x9c>)
 80084cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084d0:	0800860f 	.word	0x0800860f
 80084d4:	08008499 	.word	0x08008499
 80084d8:	08008499 	.word	0x08008499
 80084dc:	08008499 	.word	0x08008499
 80084e0:	0800866f 	.word	0x0800866f
 80084e4:	08008647 	.word	0x08008647
 80084e8:	08008499 	.word	0x08008499
 80084ec:	08008499 	.word	0x08008499
 80084f0:	0800861d 	.word	0x0800861d
 80084f4:	08008499 	.word	0x08008499
 80084f8:	08008499 	.word	0x08008499
 80084fc:	08008499 	.word	0x08008499
 8008500:	08008499 	.word	0x08008499
 8008504:	080085d5 	.word	0x080085d5
 8008508:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800850c:	e7db      	b.n	80084c6 <_scanf_float+0x92>
 800850e:	290e      	cmp	r1, #14
 8008510:	d8c2      	bhi.n	8008498 <_scanf_float+0x64>
 8008512:	a001      	add	r0, pc, #4	; (adr r0, 8008518 <_scanf_float+0xe4>)
 8008514:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008518:	080085c7 	.word	0x080085c7
 800851c:	08008499 	.word	0x08008499
 8008520:	080085c7 	.word	0x080085c7
 8008524:	0800865b 	.word	0x0800865b
 8008528:	08008499 	.word	0x08008499
 800852c:	08008575 	.word	0x08008575
 8008530:	080085b1 	.word	0x080085b1
 8008534:	080085b1 	.word	0x080085b1
 8008538:	080085b1 	.word	0x080085b1
 800853c:	080085b1 	.word	0x080085b1
 8008540:	080085b1 	.word	0x080085b1
 8008544:	080085b1 	.word	0x080085b1
 8008548:	080085b1 	.word	0x080085b1
 800854c:	080085b1 	.word	0x080085b1
 8008550:	080085b1 	.word	0x080085b1
 8008554:	2b6e      	cmp	r3, #110	; 0x6e
 8008556:	d809      	bhi.n	800856c <_scanf_float+0x138>
 8008558:	2b60      	cmp	r3, #96	; 0x60
 800855a:	d8b2      	bhi.n	80084c2 <_scanf_float+0x8e>
 800855c:	2b54      	cmp	r3, #84	; 0x54
 800855e:	d077      	beq.n	8008650 <_scanf_float+0x21c>
 8008560:	2b59      	cmp	r3, #89	; 0x59
 8008562:	d199      	bne.n	8008498 <_scanf_float+0x64>
 8008564:	2d07      	cmp	r5, #7
 8008566:	d197      	bne.n	8008498 <_scanf_float+0x64>
 8008568:	2508      	movs	r5, #8
 800856a:	e029      	b.n	80085c0 <_scanf_float+0x18c>
 800856c:	2b74      	cmp	r3, #116	; 0x74
 800856e:	d06f      	beq.n	8008650 <_scanf_float+0x21c>
 8008570:	2b79      	cmp	r3, #121	; 0x79
 8008572:	e7f6      	b.n	8008562 <_scanf_float+0x12e>
 8008574:	6821      	ldr	r1, [r4, #0]
 8008576:	05c8      	lsls	r0, r1, #23
 8008578:	d51a      	bpl.n	80085b0 <_scanf_float+0x17c>
 800857a:	9b02      	ldr	r3, [sp, #8]
 800857c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008580:	6021      	str	r1, [r4, #0]
 8008582:	f109 0901 	add.w	r9, r9, #1
 8008586:	b11b      	cbz	r3, 8008590 <_scanf_float+0x15c>
 8008588:	3b01      	subs	r3, #1
 800858a:	3201      	adds	r2, #1
 800858c:	9302      	str	r3, [sp, #8]
 800858e:	60a2      	str	r2, [r4, #8]
 8008590:	68a3      	ldr	r3, [r4, #8]
 8008592:	3b01      	subs	r3, #1
 8008594:	60a3      	str	r3, [r4, #8]
 8008596:	6923      	ldr	r3, [r4, #16]
 8008598:	3301      	adds	r3, #1
 800859a:	6123      	str	r3, [r4, #16]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3b01      	subs	r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	607b      	str	r3, [r7, #4]
 80085a4:	f340 8084 	ble.w	80086b0 <_scanf_float+0x27c>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	3301      	adds	r3, #1
 80085ac:	603b      	str	r3, [r7, #0]
 80085ae:	e766      	b.n	800847e <_scanf_float+0x4a>
 80085b0:	eb1a 0f05 	cmn.w	sl, r5
 80085b4:	f47f af70 	bne.w	8008498 <_scanf_float+0x64>
 80085b8:	6822      	ldr	r2, [r4, #0]
 80085ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80085be:	6022      	str	r2, [r4, #0]
 80085c0:	f806 3b01 	strb.w	r3, [r6], #1
 80085c4:	e7e4      	b.n	8008590 <_scanf_float+0x15c>
 80085c6:	6822      	ldr	r2, [r4, #0]
 80085c8:	0610      	lsls	r0, r2, #24
 80085ca:	f57f af65 	bpl.w	8008498 <_scanf_float+0x64>
 80085ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085d2:	e7f4      	b.n	80085be <_scanf_float+0x18a>
 80085d4:	f1ba 0f00 	cmp.w	sl, #0
 80085d8:	d10e      	bne.n	80085f8 <_scanf_float+0x1c4>
 80085da:	f1b9 0f00 	cmp.w	r9, #0
 80085de:	d10e      	bne.n	80085fe <_scanf_float+0x1ca>
 80085e0:	6822      	ldr	r2, [r4, #0]
 80085e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085ea:	d108      	bne.n	80085fe <_scanf_float+0x1ca>
 80085ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085f0:	f04f 0a01 	mov.w	sl, #1
 80085f4:	6022      	str	r2, [r4, #0]
 80085f6:	e7e3      	b.n	80085c0 <_scanf_float+0x18c>
 80085f8:	f1ba 0f02 	cmp.w	sl, #2
 80085fc:	d055      	beq.n	80086aa <_scanf_float+0x276>
 80085fe:	2d01      	cmp	r5, #1
 8008600:	d002      	beq.n	8008608 <_scanf_float+0x1d4>
 8008602:	2d04      	cmp	r5, #4
 8008604:	f47f af48 	bne.w	8008498 <_scanf_float+0x64>
 8008608:	3501      	adds	r5, #1
 800860a:	b2ed      	uxtb	r5, r5
 800860c:	e7d8      	b.n	80085c0 <_scanf_float+0x18c>
 800860e:	f1ba 0f01 	cmp.w	sl, #1
 8008612:	f47f af41 	bne.w	8008498 <_scanf_float+0x64>
 8008616:	f04f 0a02 	mov.w	sl, #2
 800861a:	e7d1      	b.n	80085c0 <_scanf_float+0x18c>
 800861c:	b97d      	cbnz	r5, 800863e <_scanf_float+0x20a>
 800861e:	f1b9 0f00 	cmp.w	r9, #0
 8008622:	f47f af3c 	bne.w	800849e <_scanf_float+0x6a>
 8008626:	6822      	ldr	r2, [r4, #0]
 8008628:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800862c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008630:	f47f af39 	bne.w	80084a6 <_scanf_float+0x72>
 8008634:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008638:	2501      	movs	r5, #1
 800863a:	6022      	str	r2, [r4, #0]
 800863c:	e7c0      	b.n	80085c0 <_scanf_float+0x18c>
 800863e:	2d03      	cmp	r5, #3
 8008640:	d0e2      	beq.n	8008608 <_scanf_float+0x1d4>
 8008642:	2d05      	cmp	r5, #5
 8008644:	e7de      	b.n	8008604 <_scanf_float+0x1d0>
 8008646:	2d02      	cmp	r5, #2
 8008648:	f47f af26 	bne.w	8008498 <_scanf_float+0x64>
 800864c:	2503      	movs	r5, #3
 800864e:	e7b7      	b.n	80085c0 <_scanf_float+0x18c>
 8008650:	2d06      	cmp	r5, #6
 8008652:	f47f af21 	bne.w	8008498 <_scanf_float+0x64>
 8008656:	2507      	movs	r5, #7
 8008658:	e7b2      	b.n	80085c0 <_scanf_float+0x18c>
 800865a:	6822      	ldr	r2, [r4, #0]
 800865c:	0591      	lsls	r1, r2, #22
 800865e:	f57f af1b 	bpl.w	8008498 <_scanf_float+0x64>
 8008662:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008666:	6022      	str	r2, [r4, #0]
 8008668:	f8cd 9004 	str.w	r9, [sp, #4]
 800866c:	e7a8      	b.n	80085c0 <_scanf_float+0x18c>
 800866e:	6822      	ldr	r2, [r4, #0]
 8008670:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008674:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008678:	d006      	beq.n	8008688 <_scanf_float+0x254>
 800867a:	0550      	lsls	r0, r2, #21
 800867c:	f57f af0c 	bpl.w	8008498 <_scanf_float+0x64>
 8008680:	f1b9 0f00 	cmp.w	r9, #0
 8008684:	f43f af0f 	beq.w	80084a6 <_scanf_float+0x72>
 8008688:	0591      	lsls	r1, r2, #22
 800868a:	bf58      	it	pl
 800868c:	9901      	ldrpl	r1, [sp, #4]
 800868e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008692:	bf58      	it	pl
 8008694:	eba9 0101 	subpl.w	r1, r9, r1
 8008698:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800869c:	f04f 0900 	mov.w	r9, #0
 80086a0:	bf58      	it	pl
 80086a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80086a6:	6022      	str	r2, [r4, #0]
 80086a8:	e78a      	b.n	80085c0 <_scanf_float+0x18c>
 80086aa:	f04f 0a03 	mov.w	sl, #3
 80086ae:	e787      	b.n	80085c0 <_scanf_float+0x18c>
 80086b0:	4639      	mov	r1, r7
 80086b2:	4640      	mov	r0, r8
 80086b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80086b8:	4798      	blx	r3
 80086ba:	2800      	cmp	r0, #0
 80086bc:	f43f aedf 	beq.w	800847e <_scanf_float+0x4a>
 80086c0:	e6ea      	b.n	8008498 <_scanf_float+0x64>
 80086c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086c6:	463a      	mov	r2, r7
 80086c8:	4640      	mov	r0, r8
 80086ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086ce:	4798      	blx	r3
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	6123      	str	r3, [r4, #16]
 80086d6:	e6ec      	b.n	80084b2 <_scanf_float+0x7e>
 80086d8:	1e6b      	subs	r3, r5, #1
 80086da:	2b06      	cmp	r3, #6
 80086dc:	d825      	bhi.n	800872a <_scanf_float+0x2f6>
 80086de:	2d02      	cmp	r5, #2
 80086e0:	d836      	bhi.n	8008750 <_scanf_float+0x31c>
 80086e2:	455e      	cmp	r6, fp
 80086e4:	f67f aee8 	bls.w	80084b8 <_scanf_float+0x84>
 80086e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086ec:	463a      	mov	r2, r7
 80086ee:	4640      	mov	r0, r8
 80086f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086f4:	4798      	blx	r3
 80086f6:	6923      	ldr	r3, [r4, #16]
 80086f8:	3b01      	subs	r3, #1
 80086fa:	6123      	str	r3, [r4, #16]
 80086fc:	e7f1      	b.n	80086e2 <_scanf_float+0x2ae>
 80086fe:	9802      	ldr	r0, [sp, #8]
 8008700:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008704:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008708:	463a      	mov	r2, r7
 800870a:	9002      	str	r0, [sp, #8]
 800870c:	4640      	mov	r0, r8
 800870e:	4798      	blx	r3
 8008710:	6923      	ldr	r3, [r4, #16]
 8008712:	3b01      	subs	r3, #1
 8008714:	6123      	str	r3, [r4, #16]
 8008716:	f10a 3aff 	add.w	sl, sl, #4294967295
 800871a:	fa5f fa8a 	uxtb.w	sl, sl
 800871e:	f1ba 0f02 	cmp.w	sl, #2
 8008722:	d1ec      	bne.n	80086fe <_scanf_float+0x2ca>
 8008724:	3d03      	subs	r5, #3
 8008726:	b2ed      	uxtb	r5, r5
 8008728:	1b76      	subs	r6, r6, r5
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	05da      	lsls	r2, r3, #23
 800872e:	d52f      	bpl.n	8008790 <_scanf_float+0x35c>
 8008730:	055b      	lsls	r3, r3, #21
 8008732:	d510      	bpl.n	8008756 <_scanf_float+0x322>
 8008734:	455e      	cmp	r6, fp
 8008736:	f67f aebf 	bls.w	80084b8 <_scanf_float+0x84>
 800873a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800873e:	463a      	mov	r2, r7
 8008740:	4640      	mov	r0, r8
 8008742:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008746:	4798      	blx	r3
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	3b01      	subs	r3, #1
 800874c:	6123      	str	r3, [r4, #16]
 800874e:	e7f1      	b.n	8008734 <_scanf_float+0x300>
 8008750:	46aa      	mov	sl, r5
 8008752:	9602      	str	r6, [sp, #8]
 8008754:	e7df      	b.n	8008716 <_scanf_float+0x2e2>
 8008756:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800875a:	6923      	ldr	r3, [r4, #16]
 800875c:	2965      	cmp	r1, #101	; 0x65
 800875e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008762:	f106 35ff 	add.w	r5, r6, #4294967295
 8008766:	6123      	str	r3, [r4, #16]
 8008768:	d00c      	beq.n	8008784 <_scanf_float+0x350>
 800876a:	2945      	cmp	r1, #69	; 0x45
 800876c:	d00a      	beq.n	8008784 <_scanf_float+0x350>
 800876e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008772:	463a      	mov	r2, r7
 8008774:	4640      	mov	r0, r8
 8008776:	4798      	blx	r3
 8008778:	6923      	ldr	r3, [r4, #16]
 800877a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800877e:	3b01      	subs	r3, #1
 8008780:	1eb5      	subs	r5, r6, #2
 8008782:	6123      	str	r3, [r4, #16]
 8008784:	463a      	mov	r2, r7
 8008786:	4640      	mov	r0, r8
 8008788:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800878c:	4798      	blx	r3
 800878e:	462e      	mov	r6, r5
 8008790:	6825      	ldr	r5, [r4, #0]
 8008792:	f015 0510 	ands.w	r5, r5, #16
 8008796:	d159      	bne.n	800884c <_scanf_float+0x418>
 8008798:	7035      	strb	r5, [r6, #0]
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80087a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087a4:	d11c      	bne.n	80087e0 <_scanf_float+0x3ac>
 80087a6:	9b01      	ldr	r3, [sp, #4]
 80087a8:	454b      	cmp	r3, r9
 80087aa:	eba3 0209 	sub.w	r2, r3, r9
 80087ae:	d124      	bne.n	80087fa <_scanf_float+0x3c6>
 80087b0:	2200      	movs	r2, #0
 80087b2:	4659      	mov	r1, fp
 80087b4:	4640      	mov	r0, r8
 80087b6:	f000 ff47 	bl	8009648 <_strtod_r>
 80087ba:	f8d4 c000 	ldr.w	ip, [r4]
 80087be:	9b03      	ldr	r3, [sp, #12]
 80087c0:	f01c 0f02 	tst.w	ip, #2
 80087c4:	4606      	mov	r6, r0
 80087c6:	460f      	mov	r7, r1
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	d021      	beq.n	8008810 <_scanf_float+0x3dc>
 80087cc:	9903      	ldr	r1, [sp, #12]
 80087ce:	1d1a      	adds	r2, r3, #4
 80087d0:	600a      	str	r2, [r1, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	e9c3 6700 	strd	r6, r7, [r3]
 80087d8:	68e3      	ldr	r3, [r4, #12]
 80087da:	3301      	adds	r3, #1
 80087dc:	60e3      	str	r3, [r4, #12]
 80087de:	e66c      	b.n	80084ba <_scanf_float+0x86>
 80087e0:	9b04      	ldr	r3, [sp, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d0e4      	beq.n	80087b0 <_scanf_float+0x37c>
 80087e6:	9905      	ldr	r1, [sp, #20]
 80087e8:	230a      	movs	r3, #10
 80087ea:	462a      	mov	r2, r5
 80087ec:	4640      	mov	r0, r8
 80087ee:	3101      	adds	r1, #1
 80087f0:	f000 ffb6 	bl	8009760 <_strtol_r>
 80087f4:	9b04      	ldr	r3, [sp, #16]
 80087f6:	9e05      	ldr	r6, [sp, #20]
 80087f8:	1ac2      	subs	r2, r0, r3
 80087fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80087fe:	429e      	cmp	r6, r3
 8008800:	bf28      	it	cs
 8008802:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008806:	4630      	mov	r0, r6
 8008808:	4911      	ldr	r1, [pc, #68]	; (8008850 <_scanf_float+0x41c>)
 800880a:	f000 f8a3 	bl	8008954 <siprintf>
 800880e:	e7cf      	b.n	80087b0 <_scanf_float+0x37c>
 8008810:	f01c 0f04 	tst.w	ip, #4
 8008814:	f103 0e04 	add.w	lr, r3, #4
 8008818:	d003      	beq.n	8008822 <_scanf_float+0x3ee>
 800881a:	9903      	ldr	r1, [sp, #12]
 800881c:	f8c1 e000 	str.w	lr, [r1]
 8008820:	e7d7      	b.n	80087d2 <_scanf_float+0x39e>
 8008822:	9a03      	ldr	r2, [sp, #12]
 8008824:	f8c2 e000 	str.w	lr, [r2]
 8008828:	f8d3 8000 	ldr.w	r8, [r3]
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	f7f8 f8f6 	bl	8000a20 <__aeabi_dcmpun>
 8008834:	b128      	cbz	r0, 8008842 <_scanf_float+0x40e>
 8008836:	4807      	ldr	r0, [pc, #28]	; (8008854 <_scanf_float+0x420>)
 8008838:	f000 f888 	bl	800894c <nanf>
 800883c:	f8c8 0000 	str.w	r0, [r8]
 8008840:	e7ca      	b.n	80087d8 <_scanf_float+0x3a4>
 8008842:	4630      	mov	r0, r6
 8008844:	4639      	mov	r1, r7
 8008846:	f7f8 f949 	bl	8000adc <__aeabi_d2f>
 800884a:	e7f7      	b.n	800883c <_scanf_float+0x408>
 800884c:	2500      	movs	r5, #0
 800884e:	e634      	b.n	80084ba <_scanf_float+0x86>
 8008850:	0800c54c 	.word	0x0800c54c
 8008854:	0800c968 	.word	0x0800c968

08008858 <cleanup_glue>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	460c      	mov	r4, r1
 800885c:	6809      	ldr	r1, [r1, #0]
 800885e:	4605      	mov	r5, r0
 8008860:	b109      	cbz	r1, 8008866 <cleanup_glue+0xe>
 8008862:	f7ff fff9 	bl	8008858 <cleanup_glue>
 8008866:	4621      	mov	r1, r4
 8008868:	4628      	mov	r0, r5
 800886a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800886e:	f002 bf51 	b.w	800b714 <_free_r>
	...

08008874 <_reclaim_reent>:
 8008874:	4b2c      	ldr	r3, [pc, #176]	; (8008928 <_reclaim_reent+0xb4>)
 8008876:	b570      	push	{r4, r5, r6, lr}
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4604      	mov	r4, r0
 800887c:	4283      	cmp	r3, r0
 800887e:	d051      	beq.n	8008924 <_reclaim_reent+0xb0>
 8008880:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008882:	b143      	cbz	r3, 8008896 <_reclaim_reent+0x22>
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d14a      	bne.n	8008920 <_reclaim_reent+0xac>
 800888a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800888c:	6819      	ldr	r1, [r3, #0]
 800888e:	b111      	cbz	r1, 8008896 <_reclaim_reent+0x22>
 8008890:	4620      	mov	r0, r4
 8008892:	f002 ff3f 	bl	800b714 <_free_r>
 8008896:	6961      	ldr	r1, [r4, #20]
 8008898:	b111      	cbz	r1, 80088a0 <_reclaim_reent+0x2c>
 800889a:	4620      	mov	r0, r4
 800889c:	f002 ff3a 	bl	800b714 <_free_r>
 80088a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80088a2:	b111      	cbz	r1, 80088aa <_reclaim_reent+0x36>
 80088a4:	4620      	mov	r0, r4
 80088a6:	f002 ff35 	bl	800b714 <_free_r>
 80088aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80088ac:	b111      	cbz	r1, 80088b4 <_reclaim_reent+0x40>
 80088ae:	4620      	mov	r0, r4
 80088b0:	f002 ff30 	bl	800b714 <_free_r>
 80088b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80088b6:	b111      	cbz	r1, 80088be <_reclaim_reent+0x4a>
 80088b8:	4620      	mov	r0, r4
 80088ba:	f002 ff2b 	bl	800b714 <_free_r>
 80088be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80088c0:	b111      	cbz	r1, 80088c8 <_reclaim_reent+0x54>
 80088c2:	4620      	mov	r0, r4
 80088c4:	f002 ff26 	bl	800b714 <_free_r>
 80088c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80088ca:	b111      	cbz	r1, 80088d2 <_reclaim_reent+0x5e>
 80088cc:	4620      	mov	r0, r4
 80088ce:	f002 ff21 	bl	800b714 <_free_r>
 80088d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80088d4:	b111      	cbz	r1, 80088dc <_reclaim_reent+0x68>
 80088d6:	4620      	mov	r0, r4
 80088d8:	f002 ff1c 	bl	800b714 <_free_r>
 80088dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088de:	b111      	cbz	r1, 80088e6 <_reclaim_reent+0x72>
 80088e0:	4620      	mov	r0, r4
 80088e2:	f002 ff17 	bl	800b714 <_free_r>
 80088e6:	69a3      	ldr	r3, [r4, #24]
 80088e8:	b1e3      	cbz	r3, 8008924 <_reclaim_reent+0xb0>
 80088ea:	4620      	mov	r0, r4
 80088ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80088ee:	4798      	blx	r3
 80088f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80088f2:	b1b9      	cbz	r1, 8008924 <_reclaim_reent+0xb0>
 80088f4:	4620      	mov	r0, r4
 80088f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80088fa:	f7ff bfad 	b.w	8008858 <cleanup_glue>
 80088fe:	5949      	ldr	r1, [r1, r5]
 8008900:	b941      	cbnz	r1, 8008914 <_reclaim_reent+0xa0>
 8008902:	3504      	adds	r5, #4
 8008904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008906:	2d80      	cmp	r5, #128	; 0x80
 8008908:	68d9      	ldr	r1, [r3, #12]
 800890a:	d1f8      	bne.n	80088fe <_reclaim_reent+0x8a>
 800890c:	4620      	mov	r0, r4
 800890e:	f002 ff01 	bl	800b714 <_free_r>
 8008912:	e7ba      	b.n	800888a <_reclaim_reent+0x16>
 8008914:	680e      	ldr	r6, [r1, #0]
 8008916:	4620      	mov	r0, r4
 8008918:	f002 fefc 	bl	800b714 <_free_r>
 800891c:	4631      	mov	r1, r6
 800891e:	e7ef      	b.n	8008900 <_reclaim_reent+0x8c>
 8008920:	2500      	movs	r5, #0
 8008922:	e7ef      	b.n	8008904 <_reclaim_reent+0x90>
 8008924:	bd70      	pop	{r4, r5, r6, pc}
 8008926:	bf00      	nop
 8008928:	20000010 	.word	0x20000010

0800892c <_sbrk_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	2300      	movs	r3, #0
 8008930:	4d05      	ldr	r5, [pc, #20]	; (8008948 <_sbrk_r+0x1c>)
 8008932:	4604      	mov	r4, r0
 8008934:	4608      	mov	r0, r1
 8008936:	602b      	str	r3, [r5, #0]
 8008938:	f7f8 fe6e 	bl	8001618 <_sbrk>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d102      	bne.n	8008946 <_sbrk_r+0x1a>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	b103      	cbz	r3, 8008946 <_sbrk_r+0x1a>
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	20003adc 	.word	0x20003adc

0800894c <nanf>:
 800894c:	4800      	ldr	r0, [pc, #0]	; (8008950 <nanf+0x4>)
 800894e:	4770      	bx	lr
 8008950:	7fc00000 	.word	0x7fc00000

08008954 <siprintf>:
 8008954:	b40e      	push	{r1, r2, r3}
 8008956:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800895a:	b500      	push	{lr}
 800895c:	b09c      	sub	sp, #112	; 0x70
 800895e:	ab1d      	add	r3, sp, #116	; 0x74
 8008960:	9002      	str	r0, [sp, #8]
 8008962:	9006      	str	r0, [sp, #24]
 8008964:	9107      	str	r1, [sp, #28]
 8008966:	9104      	str	r1, [sp, #16]
 8008968:	4808      	ldr	r0, [pc, #32]	; (800898c <siprintf+0x38>)
 800896a:	4909      	ldr	r1, [pc, #36]	; (8008990 <siprintf+0x3c>)
 800896c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008970:	9105      	str	r1, [sp, #20]
 8008972:	6800      	ldr	r0, [r0, #0]
 8008974:	a902      	add	r1, sp, #8
 8008976:	9301      	str	r3, [sp, #4]
 8008978:	f002 ff74 	bl	800b864 <_svfiprintf_r>
 800897c:	2200      	movs	r2, #0
 800897e:	9b02      	ldr	r3, [sp, #8]
 8008980:	701a      	strb	r2, [r3, #0]
 8008982:	b01c      	add	sp, #112	; 0x70
 8008984:	f85d eb04 	ldr.w	lr, [sp], #4
 8008988:	b003      	add	sp, #12
 800898a:	4770      	bx	lr
 800898c:	20000010 	.word	0x20000010
 8008990:	ffff0208 	.word	0xffff0208

08008994 <__sread>:
 8008994:	b510      	push	{r4, lr}
 8008996:	460c      	mov	r4, r1
 8008998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800899c:	f003 f862 	bl	800ba64 <_read_r>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	bfab      	itete	ge
 80089a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089a6:	89a3      	ldrhlt	r3, [r4, #12]
 80089a8:	181b      	addge	r3, r3, r0
 80089aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089ae:	bfac      	ite	ge
 80089b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80089b2:	81a3      	strhlt	r3, [r4, #12]
 80089b4:	bd10      	pop	{r4, pc}

080089b6 <__swrite>:
 80089b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ba:	461f      	mov	r7, r3
 80089bc:	898b      	ldrh	r3, [r1, #12]
 80089be:	4605      	mov	r5, r0
 80089c0:	05db      	lsls	r3, r3, #23
 80089c2:	460c      	mov	r4, r1
 80089c4:	4616      	mov	r6, r2
 80089c6:	d505      	bpl.n	80089d4 <__swrite+0x1e>
 80089c8:	2302      	movs	r3, #2
 80089ca:	2200      	movs	r2, #0
 80089cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d0:	f002 f994 	bl	800acfc <_lseek_r>
 80089d4:	89a3      	ldrh	r3, [r4, #12]
 80089d6:	4632      	mov	r2, r6
 80089d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089dc:	81a3      	strh	r3, [r4, #12]
 80089de:	4628      	mov	r0, r5
 80089e0:	463b      	mov	r3, r7
 80089e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089ea:	f000 bebb 	b.w	8009764 <_write_r>

080089ee <__sseek>:
 80089ee:	b510      	push	{r4, lr}
 80089f0:	460c      	mov	r4, r1
 80089f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f6:	f002 f981 	bl	800acfc <_lseek_r>
 80089fa:	1c43      	adds	r3, r0, #1
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	bf15      	itete	ne
 8008a00:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a0a:	81a3      	strheq	r3, [r4, #12]
 8008a0c:	bf18      	it	ne
 8008a0e:	81a3      	strhne	r3, [r4, #12]
 8008a10:	bd10      	pop	{r4, pc}

08008a12 <__sclose>:
 8008a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a16:	f000 beb7 	b.w	8009788 <_close_r>

08008a1a <sulp>:
 8008a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1e:	460f      	mov	r7, r1
 8008a20:	4690      	mov	r8, r2
 8008a22:	f002 fd21 	bl	800b468 <__ulp>
 8008a26:	4604      	mov	r4, r0
 8008a28:	460d      	mov	r5, r1
 8008a2a:	f1b8 0f00 	cmp.w	r8, #0
 8008a2e:	d011      	beq.n	8008a54 <sulp+0x3a>
 8008a30:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008a34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	dd0b      	ble.n	8008a54 <sulp+0x3a>
 8008a3c:	2400      	movs	r4, #0
 8008a3e:	051b      	lsls	r3, r3, #20
 8008a40:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a44:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a48:	4622      	mov	r2, r4
 8008a4a:	462b      	mov	r3, r5
 8008a4c:	f7f7 fd4e 	bl	80004ec <__aeabi_dmul>
 8008a50:	4604      	mov	r4, r0
 8008a52:	460d      	mov	r5, r1
 8008a54:	4620      	mov	r0, r4
 8008a56:	4629      	mov	r1, r5
 8008a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a5c:	0000      	movs	r0, r0
	...

08008a60 <_strtod_l>:
 8008a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a64:	469b      	mov	fp, r3
 8008a66:	2300      	movs	r3, #0
 8008a68:	b0a1      	sub	sp, #132	; 0x84
 8008a6a:	931c      	str	r3, [sp, #112]	; 0x70
 8008a6c:	4ba1      	ldr	r3, [pc, #644]	; (8008cf4 <_strtod_l+0x294>)
 8008a6e:	4682      	mov	sl, r0
 8008a70:	681f      	ldr	r7, [r3, #0]
 8008a72:	460e      	mov	r6, r1
 8008a74:	4638      	mov	r0, r7
 8008a76:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a78:	f7f7 fb74 	bl	8000164 <strlen>
 8008a7c:	f04f 0800 	mov.w	r8, #0
 8008a80:	4604      	mov	r4, r0
 8008a82:	f04f 0900 	mov.w	r9, #0
 8008a86:	961b      	str	r6, [sp, #108]	; 0x6c
 8008a88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a8a:	781a      	ldrb	r2, [r3, #0]
 8008a8c:	2a2b      	cmp	r2, #43	; 0x2b
 8008a8e:	d04c      	beq.n	8008b2a <_strtod_l+0xca>
 8008a90:	d83a      	bhi.n	8008b08 <_strtod_l+0xa8>
 8008a92:	2a0d      	cmp	r2, #13
 8008a94:	d833      	bhi.n	8008afe <_strtod_l+0x9e>
 8008a96:	2a08      	cmp	r2, #8
 8008a98:	d833      	bhi.n	8008b02 <_strtod_l+0xa2>
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	d03d      	beq.n	8008b1a <_strtod_l+0xba>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	930c      	str	r3, [sp, #48]	; 0x30
 8008aa2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008aa4:	782b      	ldrb	r3, [r5, #0]
 8008aa6:	2b30      	cmp	r3, #48	; 0x30
 8008aa8:	f040 80af 	bne.w	8008c0a <_strtod_l+0x1aa>
 8008aac:	786b      	ldrb	r3, [r5, #1]
 8008aae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ab2:	2b58      	cmp	r3, #88	; 0x58
 8008ab4:	d16c      	bne.n	8008b90 <_strtod_l+0x130>
 8008ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ab8:	4650      	mov	r0, sl
 8008aba:	9301      	str	r3, [sp, #4]
 8008abc:	ab1c      	add	r3, sp, #112	; 0x70
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	4a8d      	ldr	r2, [pc, #564]	; (8008cf8 <_strtod_l+0x298>)
 8008ac2:	f8cd b008 	str.w	fp, [sp, #8]
 8008ac6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ac8:	a91b      	add	r1, sp, #108	; 0x6c
 8008aca:	f001 fe15 	bl	800a6f8 <__gethex>
 8008ace:	f010 0607 	ands.w	r6, r0, #7
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	d005      	beq.n	8008ae2 <_strtod_l+0x82>
 8008ad6:	2e06      	cmp	r6, #6
 8008ad8:	d129      	bne.n	8008b2e <_strtod_l+0xce>
 8008ada:	2300      	movs	r3, #0
 8008adc:	3501      	adds	r5, #1
 8008ade:	951b      	str	r5, [sp, #108]	; 0x6c
 8008ae0:	930c      	str	r3, [sp, #48]	; 0x30
 8008ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f040 8596 	bne.w	8009616 <_strtod_l+0xbb6>
 8008aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aec:	b1d3      	cbz	r3, 8008b24 <_strtod_l+0xc4>
 8008aee:	4642      	mov	r2, r8
 8008af0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008af4:	4610      	mov	r0, r2
 8008af6:	4619      	mov	r1, r3
 8008af8:	b021      	add	sp, #132	; 0x84
 8008afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008afe:	2a20      	cmp	r2, #32
 8008b00:	d1cd      	bne.n	8008a9e <_strtod_l+0x3e>
 8008b02:	3301      	adds	r3, #1
 8008b04:	931b      	str	r3, [sp, #108]	; 0x6c
 8008b06:	e7bf      	b.n	8008a88 <_strtod_l+0x28>
 8008b08:	2a2d      	cmp	r2, #45	; 0x2d
 8008b0a:	d1c8      	bne.n	8008a9e <_strtod_l+0x3e>
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	920c      	str	r2, [sp, #48]	; 0x30
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b14:	785b      	ldrb	r3, [r3, #1]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1c3      	bne.n	8008aa2 <_strtod_l+0x42>
 8008b1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b1c:	961b      	str	r6, [sp, #108]	; 0x6c
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f040 8577 	bne.w	8009612 <_strtod_l+0xbb2>
 8008b24:	4642      	mov	r2, r8
 8008b26:	464b      	mov	r3, r9
 8008b28:	e7e4      	b.n	8008af4 <_strtod_l+0x94>
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	e7ef      	b.n	8008b0e <_strtod_l+0xae>
 8008b2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b30:	b13a      	cbz	r2, 8008b42 <_strtod_l+0xe2>
 8008b32:	2135      	movs	r1, #53	; 0x35
 8008b34:	a81e      	add	r0, sp, #120	; 0x78
 8008b36:	f002 fd9b 	bl	800b670 <__copybits>
 8008b3a:	4650      	mov	r0, sl
 8008b3c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008b3e:	f002 f963 	bl	800ae08 <_Bfree>
 8008b42:	3e01      	subs	r6, #1
 8008b44:	2e05      	cmp	r6, #5
 8008b46:	d807      	bhi.n	8008b58 <_strtod_l+0xf8>
 8008b48:	e8df f006 	tbb	[pc, r6]
 8008b4c:	1d180b0e 	.word	0x1d180b0e
 8008b50:	030e      	.short	0x030e
 8008b52:	f04f 0900 	mov.w	r9, #0
 8008b56:	46c8      	mov	r8, r9
 8008b58:	0721      	lsls	r1, r4, #28
 8008b5a:	d5c2      	bpl.n	8008ae2 <_strtod_l+0x82>
 8008b5c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008b60:	e7bf      	b.n	8008ae2 <_strtod_l+0x82>
 8008b62:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8008b66:	e7f7      	b.n	8008b58 <_strtod_l+0xf8>
 8008b68:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008b6a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8008b6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b76:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008b7a:	e7ed      	b.n	8008b58 <_strtod_l+0xf8>
 8008b7c:	f04f 0800 	mov.w	r8, #0
 8008b80:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008cfc <_strtod_l+0x29c>
 8008b84:	e7e8      	b.n	8008b58 <_strtod_l+0xf8>
 8008b86:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008b8a:	f04f 38ff 	mov.w	r8, #4294967295
 8008b8e:	e7e3      	b.n	8008b58 <_strtod_l+0xf8>
 8008b90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b92:	1c5a      	adds	r2, r3, #1
 8008b94:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b96:	785b      	ldrb	r3, [r3, #1]
 8008b98:	2b30      	cmp	r3, #48	; 0x30
 8008b9a:	d0f9      	beq.n	8008b90 <_strtod_l+0x130>
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0a0      	beq.n	8008ae2 <_strtod_l+0x82>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	9307      	str	r3, [sp, #28]
 8008ba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ba6:	220a      	movs	r2, #10
 8008ba8:	9308      	str	r3, [sp, #32]
 8008baa:	2300      	movs	r3, #0
 8008bac:	469b      	mov	fp, r3
 8008bae:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008bb2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008bb4:	7805      	ldrb	r5, [r0, #0]
 8008bb6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008bba:	b2d9      	uxtb	r1, r3
 8008bbc:	2909      	cmp	r1, #9
 8008bbe:	d926      	bls.n	8008c0e <_strtod_l+0x1ae>
 8008bc0:	4622      	mov	r2, r4
 8008bc2:	4639      	mov	r1, r7
 8008bc4:	f002 ff66 	bl	800ba94 <strncmp>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d032      	beq.n	8008c32 <_strtod_l+0x1d2>
 8008bcc:	2000      	movs	r0, #0
 8008bce:	462b      	mov	r3, r5
 8008bd0:	465c      	mov	r4, fp
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	9004      	str	r0, [sp, #16]
 8008bd6:	2b65      	cmp	r3, #101	; 0x65
 8008bd8:	d001      	beq.n	8008bde <_strtod_l+0x17e>
 8008bda:	2b45      	cmp	r3, #69	; 0x45
 8008bdc:	d113      	bne.n	8008c06 <_strtod_l+0x1a6>
 8008bde:	b91c      	cbnz	r4, 8008be8 <_strtod_l+0x188>
 8008be0:	9b07      	ldr	r3, [sp, #28]
 8008be2:	4303      	orrs	r3, r0
 8008be4:	d099      	beq.n	8008b1a <_strtod_l+0xba>
 8008be6:	2400      	movs	r4, #0
 8008be8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008bea:	1c73      	adds	r3, r6, #1
 8008bec:	931b      	str	r3, [sp, #108]	; 0x6c
 8008bee:	7873      	ldrb	r3, [r6, #1]
 8008bf0:	2b2b      	cmp	r3, #43	; 0x2b
 8008bf2:	d078      	beq.n	8008ce6 <_strtod_l+0x286>
 8008bf4:	2b2d      	cmp	r3, #45	; 0x2d
 8008bf6:	d07b      	beq.n	8008cf0 <_strtod_l+0x290>
 8008bf8:	2700      	movs	r7, #0
 8008bfa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008bfe:	2909      	cmp	r1, #9
 8008c00:	f240 8082 	bls.w	8008d08 <_strtod_l+0x2a8>
 8008c04:	961b      	str	r6, [sp, #108]	; 0x6c
 8008c06:	2500      	movs	r5, #0
 8008c08:	e09e      	b.n	8008d48 <_strtod_l+0x2e8>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	e7c9      	b.n	8008ba2 <_strtod_l+0x142>
 8008c0e:	f1bb 0f08 	cmp.w	fp, #8
 8008c12:	bfd5      	itete	le
 8008c14:	9906      	ldrle	r1, [sp, #24]
 8008c16:	9905      	ldrgt	r1, [sp, #20]
 8008c18:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c1c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008c20:	f100 0001 	add.w	r0, r0, #1
 8008c24:	bfd4      	ite	le
 8008c26:	9306      	strle	r3, [sp, #24]
 8008c28:	9305      	strgt	r3, [sp, #20]
 8008c2a:	f10b 0b01 	add.w	fp, fp, #1
 8008c2e:	901b      	str	r0, [sp, #108]	; 0x6c
 8008c30:	e7bf      	b.n	8008bb2 <_strtod_l+0x152>
 8008c32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c34:	191a      	adds	r2, r3, r4
 8008c36:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c38:	5d1b      	ldrb	r3, [r3, r4]
 8008c3a:	f1bb 0f00 	cmp.w	fp, #0
 8008c3e:	d036      	beq.n	8008cae <_strtod_l+0x24e>
 8008c40:	465c      	mov	r4, fp
 8008c42:	9004      	str	r0, [sp, #16]
 8008c44:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008c48:	2a09      	cmp	r2, #9
 8008c4a:	d912      	bls.n	8008c72 <_strtod_l+0x212>
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	e7c2      	b.n	8008bd6 <_strtod_l+0x176>
 8008c50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c52:	3001      	adds	r0, #1
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	2b30      	cmp	r3, #48	; 0x30
 8008c5c:	d0f8      	beq.n	8008c50 <_strtod_l+0x1f0>
 8008c5e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008c62:	2a08      	cmp	r2, #8
 8008c64:	f200 84dc 	bhi.w	8009620 <_strtod_l+0xbc0>
 8008c68:	9004      	str	r0, [sp, #16]
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008c70:	9208      	str	r2, [sp, #32]
 8008c72:	3b30      	subs	r3, #48	; 0x30
 8008c74:	f100 0201 	add.w	r2, r0, #1
 8008c78:	d013      	beq.n	8008ca2 <_strtod_l+0x242>
 8008c7a:	9904      	ldr	r1, [sp, #16]
 8008c7c:	1905      	adds	r5, r0, r4
 8008c7e:	4411      	add	r1, r2
 8008c80:	9104      	str	r1, [sp, #16]
 8008c82:	4622      	mov	r2, r4
 8008c84:	210a      	movs	r1, #10
 8008c86:	42aa      	cmp	r2, r5
 8008c88:	d113      	bne.n	8008cb2 <_strtod_l+0x252>
 8008c8a:	1822      	adds	r2, r4, r0
 8008c8c:	2a08      	cmp	r2, #8
 8008c8e:	f104 0401 	add.w	r4, r4, #1
 8008c92:	4404      	add	r4, r0
 8008c94:	dc1b      	bgt.n	8008cce <_strtod_l+0x26e>
 8008c96:	220a      	movs	r2, #10
 8008c98:	9906      	ldr	r1, [sp, #24]
 8008c9a:	fb02 3301 	mla	r3, r2, r1, r3
 8008c9e:	9306      	str	r3, [sp, #24]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	1c59      	adds	r1, r3, #1
 8008ca8:	911b      	str	r1, [sp, #108]	; 0x6c
 8008caa:	785b      	ldrb	r3, [r3, #1]
 8008cac:	e7ca      	b.n	8008c44 <_strtod_l+0x1e4>
 8008cae:	4658      	mov	r0, fp
 8008cb0:	e7d3      	b.n	8008c5a <_strtod_l+0x1fa>
 8008cb2:	2a08      	cmp	r2, #8
 8008cb4:	dc04      	bgt.n	8008cc0 <_strtod_l+0x260>
 8008cb6:	9f06      	ldr	r7, [sp, #24]
 8008cb8:	434f      	muls	r7, r1
 8008cba:	9706      	str	r7, [sp, #24]
 8008cbc:	3201      	adds	r2, #1
 8008cbe:	e7e2      	b.n	8008c86 <_strtod_l+0x226>
 8008cc0:	1c57      	adds	r7, r2, #1
 8008cc2:	2f10      	cmp	r7, #16
 8008cc4:	bfde      	ittt	le
 8008cc6:	9f05      	ldrle	r7, [sp, #20]
 8008cc8:	434f      	mulle	r7, r1
 8008cca:	9705      	strle	r7, [sp, #20]
 8008ccc:	e7f6      	b.n	8008cbc <_strtod_l+0x25c>
 8008cce:	2c10      	cmp	r4, #16
 8008cd0:	bfdf      	itttt	le
 8008cd2:	220a      	movle	r2, #10
 8008cd4:	9905      	ldrle	r1, [sp, #20]
 8008cd6:	fb02 3301 	mlale	r3, r2, r1, r3
 8008cda:	9305      	strle	r3, [sp, #20]
 8008cdc:	e7e0      	b.n	8008ca0 <_strtod_l+0x240>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	9304      	str	r3, [sp, #16]
 8008ce4:	e77c      	b.n	8008be0 <_strtod_l+0x180>
 8008ce6:	2700      	movs	r7, #0
 8008ce8:	1cb3      	adds	r3, r6, #2
 8008cea:	931b      	str	r3, [sp, #108]	; 0x6c
 8008cec:	78b3      	ldrb	r3, [r6, #2]
 8008cee:	e784      	b.n	8008bfa <_strtod_l+0x19a>
 8008cf0:	2701      	movs	r7, #1
 8008cf2:	e7f9      	b.n	8008ce8 <_strtod_l+0x288>
 8008cf4:	0800c7a8 	.word	0x0800c7a8
 8008cf8:	0800c554 	.word	0x0800c554
 8008cfc:	7ff00000 	.word	0x7ff00000
 8008d00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d02:	1c59      	adds	r1, r3, #1
 8008d04:	911b      	str	r1, [sp, #108]	; 0x6c
 8008d06:	785b      	ldrb	r3, [r3, #1]
 8008d08:	2b30      	cmp	r3, #48	; 0x30
 8008d0a:	d0f9      	beq.n	8008d00 <_strtod_l+0x2a0>
 8008d0c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008d10:	2908      	cmp	r1, #8
 8008d12:	f63f af78 	bhi.w	8008c06 <_strtod_l+0x1a6>
 8008d16:	f04f 0e0a 	mov.w	lr, #10
 8008d1a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8008d1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d20:	9309      	str	r3, [sp, #36]	; 0x24
 8008d22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d24:	1c59      	adds	r1, r3, #1
 8008d26:	911b      	str	r1, [sp, #108]	; 0x6c
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8008d2e:	2d09      	cmp	r5, #9
 8008d30:	d935      	bls.n	8008d9e <_strtod_l+0x33e>
 8008d32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d34:	1b49      	subs	r1, r1, r5
 8008d36:	2908      	cmp	r1, #8
 8008d38:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008d3c:	dc02      	bgt.n	8008d44 <_strtod_l+0x2e4>
 8008d3e:	4565      	cmp	r5, ip
 8008d40:	bfa8      	it	ge
 8008d42:	4665      	movge	r5, ip
 8008d44:	b107      	cbz	r7, 8008d48 <_strtod_l+0x2e8>
 8008d46:	426d      	negs	r5, r5
 8008d48:	2c00      	cmp	r4, #0
 8008d4a:	d14c      	bne.n	8008de6 <_strtod_l+0x386>
 8008d4c:	9907      	ldr	r1, [sp, #28]
 8008d4e:	4301      	orrs	r1, r0
 8008d50:	f47f aec7 	bne.w	8008ae2 <_strtod_l+0x82>
 8008d54:	2a00      	cmp	r2, #0
 8008d56:	f47f aee0 	bne.w	8008b1a <_strtod_l+0xba>
 8008d5a:	2b69      	cmp	r3, #105	; 0x69
 8008d5c:	d026      	beq.n	8008dac <_strtod_l+0x34c>
 8008d5e:	dc23      	bgt.n	8008da8 <_strtod_l+0x348>
 8008d60:	2b49      	cmp	r3, #73	; 0x49
 8008d62:	d023      	beq.n	8008dac <_strtod_l+0x34c>
 8008d64:	2b4e      	cmp	r3, #78	; 0x4e
 8008d66:	f47f aed8 	bne.w	8008b1a <_strtod_l+0xba>
 8008d6a:	499c      	ldr	r1, [pc, #624]	; (8008fdc <_strtod_l+0x57c>)
 8008d6c:	a81b      	add	r0, sp, #108	; 0x6c
 8008d6e:	f001 ff11 	bl	800ab94 <__match>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	f43f aed1 	beq.w	8008b1a <_strtod_l+0xba>
 8008d78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b28      	cmp	r3, #40	; 0x28
 8008d7e:	d12c      	bne.n	8008dda <_strtod_l+0x37a>
 8008d80:	4997      	ldr	r1, [pc, #604]	; (8008fe0 <_strtod_l+0x580>)
 8008d82:	aa1e      	add	r2, sp, #120	; 0x78
 8008d84:	a81b      	add	r0, sp, #108	; 0x6c
 8008d86:	f001 ff19 	bl	800abbc <__hexnan>
 8008d8a:	2805      	cmp	r0, #5
 8008d8c:	d125      	bne.n	8008dda <_strtod_l+0x37a>
 8008d8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d90:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8008d94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008d98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008d9c:	e6a1      	b.n	8008ae2 <_strtod_l+0x82>
 8008d9e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8008da2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008da6:	e7bc      	b.n	8008d22 <_strtod_l+0x2c2>
 8008da8:	2b6e      	cmp	r3, #110	; 0x6e
 8008daa:	e7dc      	b.n	8008d66 <_strtod_l+0x306>
 8008dac:	498d      	ldr	r1, [pc, #564]	; (8008fe4 <_strtod_l+0x584>)
 8008dae:	a81b      	add	r0, sp, #108	; 0x6c
 8008db0:	f001 fef0 	bl	800ab94 <__match>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	f43f aeb0 	beq.w	8008b1a <_strtod_l+0xba>
 8008dba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dbc:	498a      	ldr	r1, [pc, #552]	; (8008fe8 <_strtod_l+0x588>)
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	a81b      	add	r0, sp, #108	; 0x6c
 8008dc2:	931b      	str	r3, [sp, #108]	; 0x6c
 8008dc4:	f001 fee6 	bl	800ab94 <__match>
 8008dc8:	b910      	cbnz	r0, 8008dd0 <_strtod_l+0x370>
 8008dca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dcc:	3301      	adds	r3, #1
 8008dce:	931b      	str	r3, [sp, #108]	; 0x6c
 8008dd0:	f04f 0800 	mov.w	r8, #0
 8008dd4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8008ff8 <_strtod_l+0x598>
 8008dd8:	e683      	b.n	8008ae2 <_strtod_l+0x82>
 8008dda:	4884      	ldr	r0, [pc, #528]	; (8008fec <_strtod_l+0x58c>)
 8008ddc:	f002 fe54 	bl	800ba88 <nan>
 8008de0:	4680      	mov	r8, r0
 8008de2:	4689      	mov	r9, r1
 8008de4:	e67d      	b.n	8008ae2 <_strtod_l+0x82>
 8008de6:	9b04      	ldr	r3, [sp, #16]
 8008de8:	f1bb 0f00 	cmp.w	fp, #0
 8008dec:	bf08      	it	eq
 8008dee:	46a3      	moveq	fp, r4
 8008df0:	1aeb      	subs	r3, r5, r3
 8008df2:	2c10      	cmp	r4, #16
 8008df4:	9806      	ldr	r0, [sp, #24]
 8008df6:	4626      	mov	r6, r4
 8008df8:	9307      	str	r3, [sp, #28]
 8008dfa:	bfa8      	it	ge
 8008dfc:	2610      	movge	r6, #16
 8008dfe:	f7f7 fafb 	bl	80003f8 <__aeabi_ui2d>
 8008e02:	2c09      	cmp	r4, #9
 8008e04:	4680      	mov	r8, r0
 8008e06:	4689      	mov	r9, r1
 8008e08:	dd13      	ble.n	8008e32 <_strtod_l+0x3d2>
 8008e0a:	4b79      	ldr	r3, [pc, #484]	; (8008ff0 <_strtod_l+0x590>)
 8008e0c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e10:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e14:	f7f7 fb6a 	bl	80004ec <__aeabi_dmul>
 8008e18:	4680      	mov	r8, r0
 8008e1a:	9805      	ldr	r0, [sp, #20]
 8008e1c:	4689      	mov	r9, r1
 8008e1e:	f7f7 faeb 	bl	80003f8 <__aeabi_ui2d>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4640      	mov	r0, r8
 8008e28:	4649      	mov	r1, r9
 8008e2a:	f7f7 f9a9 	bl	8000180 <__adddf3>
 8008e2e:	4680      	mov	r8, r0
 8008e30:	4689      	mov	r9, r1
 8008e32:	2c0f      	cmp	r4, #15
 8008e34:	dc36      	bgt.n	8008ea4 <_strtod_l+0x444>
 8008e36:	9b07      	ldr	r3, [sp, #28]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f43f ae52 	beq.w	8008ae2 <_strtod_l+0x82>
 8008e3e:	dd22      	ble.n	8008e86 <_strtod_l+0x426>
 8008e40:	2b16      	cmp	r3, #22
 8008e42:	dc09      	bgt.n	8008e58 <_strtod_l+0x3f8>
 8008e44:	4c6a      	ldr	r4, [pc, #424]	; (8008ff0 <_strtod_l+0x590>)
 8008e46:	4642      	mov	r2, r8
 8008e48:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8008e4c:	464b      	mov	r3, r9
 8008e4e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008e52:	f7f7 fb4b 	bl	80004ec <__aeabi_dmul>
 8008e56:	e7c3      	b.n	8008de0 <_strtod_l+0x380>
 8008e58:	9a07      	ldr	r2, [sp, #28]
 8008e5a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	db20      	blt.n	8008ea4 <_strtod_l+0x444>
 8008e62:	4d63      	ldr	r5, [pc, #396]	; (8008ff0 <_strtod_l+0x590>)
 8008e64:	f1c4 040f 	rsb	r4, r4, #15
 8008e68:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008e6c:	4642      	mov	r2, r8
 8008e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e72:	464b      	mov	r3, r9
 8008e74:	f7f7 fb3a 	bl	80004ec <__aeabi_dmul>
 8008e78:	9b07      	ldr	r3, [sp, #28]
 8008e7a:	1b1c      	subs	r4, r3, r4
 8008e7c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008e80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e84:	e7e5      	b.n	8008e52 <_strtod_l+0x3f2>
 8008e86:	9b07      	ldr	r3, [sp, #28]
 8008e88:	3316      	adds	r3, #22
 8008e8a:	db0b      	blt.n	8008ea4 <_strtod_l+0x444>
 8008e8c:	9b04      	ldr	r3, [sp, #16]
 8008e8e:	4a58      	ldr	r2, [pc, #352]	; (8008ff0 <_strtod_l+0x590>)
 8008e90:	1b5d      	subs	r5, r3, r5
 8008e92:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008e96:	4640      	mov	r0, r8
 8008e98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	f7f7 fc4f 	bl	8000740 <__aeabi_ddiv>
 8008ea2:	e79d      	b.n	8008de0 <_strtod_l+0x380>
 8008ea4:	9b07      	ldr	r3, [sp, #28]
 8008ea6:	1ba6      	subs	r6, r4, r6
 8008ea8:	441e      	add	r6, r3
 8008eaa:	2e00      	cmp	r6, #0
 8008eac:	dd71      	ble.n	8008f92 <_strtod_l+0x532>
 8008eae:	f016 030f 	ands.w	r3, r6, #15
 8008eb2:	d00a      	beq.n	8008eca <_strtod_l+0x46a>
 8008eb4:	494e      	ldr	r1, [pc, #312]	; (8008ff0 <_strtod_l+0x590>)
 8008eb6:	4642      	mov	r2, r8
 8008eb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec0:	464b      	mov	r3, r9
 8008ec2:	f7f7 fb13 	bl	80004ec <__aeabi_dmul>
 8008ec6:	4680      	mov	r8, r0
 8008ec8:	4689      	mov	r9, r1
 8008eca:	f036 060f 	bics.w	r6, r6, #15
 8008ece:	d050      	beq.n	8008f72 <_strtod_l+0x512>
 8008ed0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8008ed4:	dd27      	ble.n	8008f26 <_strtod_l+0x4c6>
 8008ed6:	f04f 0b00 	mov.w	fp, #0
 8008eda:	f8cd b010 	str.w	fp, [sp, #16]
 8008ede:	f8cd b020 	str.w	fp, [sp, #32]
 8008ee2:	f8cd b018 	str.w	fp, [sp, #24]
 8008ee6:	2322      	movs	r3, #34	; 0x22
 8008ee8:	f04f 0800 	mov.w	r8, #0
 8008eec:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008ff8 <_strtod_l+0x598>
 8008ef0:	f8ca 3000 	str.w	r3, [sl]
 8008ef4:	9b08      	ldr	r3, [sp, #32]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f43f adf3 	beq.w	8008ae2 <_strtod_l+0x82>
 8008efc:	4650      	mov	r0, sl
 8008efe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008f00:	f001 ff82 	bl	800ae08 <_Bfree>
 8008f04:	4650      	mov	r0, sl
 8008f06:	9906      	ldr	r1, [sp, #24]
 8008f08:	f001 ff7e 	bl	800ae08 <_Bfree>
 8008f0c:	4650      	mov	r0, sl
 8008f0e:	9904      	ldr	r1, [sp, #16]
 8008f10:	f001 ff7a 	bl	800ae08 <_Bfree>
 8008f14:	4650      	mov	r0, sl
 8008f16:	9908      	ldr	r1, [sp, #32]
 8008f18:	f001 ff76 	bl	800ae08 <_Bfree>
 8008f1c:	4659      	mov	r1, fp
 8008f1e:	4650      	mov	r0, sl
 8008f20:	f001 ff72 	bl	800ae08 <_Bfree>
 8008f24:	e5dd      	b.n	8008ae2 <_strtod_l+0x82>
 8008f26:	2300      	movs	r3, #0
 8008f28:	4640      	mov	r0, r8
 8008f2a:	4649      	mov	r1, r9
 8008f2c:	461f      	mov	r7, r3
 8008f2e:	1136      	asrs	r6, r6, #4
 8008f30:	2e01      	cmp	r6, #1
 8008f32:	dc21      	bgt.n	8008f78 <_strtod_l+0x518>
 8008f34:	b10b      	cbz	r3, 8008f3a <_strtod_l+0x4da>
 8008f36:	4680      	mov	r8, r0
 8008f38:	4689      	mov	r9, r1
 8008f3a:	4b2e      	ldr	r3, [pc, #184]	; (8008ff4 <_strtod_l+0x594>)
 8008f3c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008f40:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008f44:	4642      	mov	r2, r8
 8008f46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f4a:	464b      	mov	r3, r9
 8008f4c:	f7f7 face 	bl	80004ec <__aeabi_dmul>
 8008f50:	4b29      	ldr	r3, [pc, #164]	; (8008ff8 <_strtod_l+0x598>)
 8008f52:	460a      	mov	r2, r1
 8008f54:	400b      	ands	r3, r1
 8008f56:	4929      	ldr	r1, [pc, #164]	; (8008ffc <_strtod_l+0x59c>)
 8008f58:	4680      	mov	r8, r0
 8008f5a:	428b      	cmp	r3, r1
 8008f5c:	d8bb      	bhi.n	8008ed6 <_strtod_l+0x476>
 8008f5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f62:	428b      	cmp	r3, r1
 8008f64:	bf86      	itte	hi
 8008f66:	f04f 38ff 	movhi.w	r8, #4294967295
 8008f6a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009000 <_strtod_l+0x5a0>
 8008f6e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008f72:	2300      	movs	r3, #0
 8008f74:	9305      	str	r3, [sp, #20]
 8008f76:	e07e      	b.n	8009076 <_strtod_l+0x616>
 8008f78:	07f2      	lsls	r2, r6, #31
 8008f7a:	d507      	bpl.n	8008f8c <_strtod_l+0x52c>
 8008f7c:	4b1d      	ldr	r3, [pc, #116]	; (8008ff4 <_strtod_l+0x594>)
 8008f7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f86:	f7f7 fab1 	bl	80004ec <__aeabi_dmul>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	3701      	adds	r7, #1
 8008f8e:	1076      	asrs	r6, r6, #1
 8008f90:	e7ce      	b.n	8008f30 <_strtod_l+0x4d0>
 8008f92:	d0ee      	beq.n	8008f72 <_strtod_l+0x512>
 8008f94:	4276      	negs	r6, r6
 8008f96:	f016 020f 	ands.w	r2, r6, #15
 8008f9a:	d00a      	beq.n	8008fb2 <_strtod_l+0x552>
 8008f9c:	4b14      	ldr	r3, [pc, #80]	; (8008ff0 <_strtod_l+0x590>)
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008faa:	f7f7 fbc9 	bl	8000740 <__aeabi_ddiv>
 8008fae:	4680      	mov	r8, r0
 8008fb0:	4689      	mov	r9, r1
 8008fb2:	1136      	asrs	r6, r6, #4
 8008fb4:	d0dd      	beq.n	8008f72 <_strtod_l+0x512>
 8008fb6:	2e1f      	cmp	r6, #31
 8008fb8:	dd24      	ble.n	8009004 <_strtod_l+0x5a4>
 8008fba:	f04f 0b00 	mov.w	fp, #0
 8008fbe:	f8cd b010 	str.w	fp, [sp, #16]
 8008fc2:	f8cd b020 	str.w	fp, [sp, #32]
 8008fc6:	f8cd b018 	str.w	fp, [sp, #24]
 8008fca:	2322      	movs	r3, #34	; 0x22
 8008fcc:	f04f 0800 	mov.w	r8, #0
 8008fd0:	f04f 0900 	mov.w	r9, #0
 8008fd4:	f8ca 3000 	str.w	r3, [sl]
 8008fd8:	e78c      	b.n	8008ef4 <_strtod_l+0x494>
 8008fda:	bf00      	nop
 8008fdc:	0800c525 	.word	0x0800c525
 8008fe0:	0800c568 	.word	0x0800c568
 8008fe4:	0800c51d 	.word	0x0800c51d
 8008fe8:	0800c6ac 	.word	0x0800c6ac
 8008fec:	0800c968 	.word	0x0800c968
 8008ff0:	0800c848 	.word	0x0800c848
 8008ff4:	0800c820 	.word	0x0800c820
 8008ff8:	7ff00000 	.word	0x7ff00000
 8008ffc:	7ca00000 	.word	0x7ca00000
 8009000:	7fefffff 	.word	0x7fefffff
 8009004:	f016 0310 	ands.w	r3, r6, #16
 8009008:	bf18      	it	ne
 800900a:	236a      	movne	r3, #106	; 0x6a
 800900c:	4640      	mov	r0, r8
 800900e:	9305      	str	r3, [sp, #20]
 8009010:	4649      	mov	r1, r9
 8009012:	2300      	movs	r3, #0
 8009014:	4fb2      	ldr	r7, [pc, #712]	; (80092e0 <_strtod_l+0x880>)
 8009016:	07f2      	lsls	r2, r6, #31
 8009018:	d504      	bpl.n	8009024 <_strtod_l+0x5c4>
 800901a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800901e:	f7f7 fa65 	bl	80004ec <__aeabi_dmul>
 8009022:	2301      	movs	r3, #1
 8009024:	1076      	asrs	r6, r6, #1
 8009026:	f107 0708 	add.w	r7, r7, #8
 800902a:	d1f4      	bne.n	8009016 <_strtod_l+0x5b6>
 800902c:	b10b      	cbz	r3, 8009032 <_strtod_l+0x5d2>
 800902e:	4680      	mov	r8, r0
 8009030:	4689      	mov	r9, r1
 8009032:	9b05      	ldr	r3, [sp, #20]
 8009034:	b1bb      	cbz	r3, 8009066 <_strtod_l+0x606>
 8009036:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800903a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800903e:	2b00      	cmp	r3, #0
 8009040:	4649      	mov	r1, r9
 8009042:	dd10      	ble.n	8009066 <_strtod_l+0x606>
 8009044:	2b1f      	cmp	r3, #31
 8009046:	f340 812b 	ble.w	80092a0 <_strtod_l+0x840>
 800904a:	2b34      	cmp	r3, #52	; 0x34
 800904c:	bfd8      	it	le
 800904e:	f04f 32ff 	movle.w	r2, #4294967295
 8009052:	f04f 0800 	mov.w	r8, #0
 8009056:	bfcf      	iteee	gt
 8009058:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800905c:	3b20      	suble	r3, #32
 800905e:	fa02 f303 	lslle.w	r3, r2, r3
 8009062:	ea03 0901 	andle.w	r9, r3, r1
 8009066:	2200      	movs	r2, #0
 8009068:	2300      	movs	r3, #0
 800906a:	4640      	mov	r0, r8
 800906c:	4649      	mov	r1, r9
 800906e:	f7f7 fca5 	bl	80009bc <__aeabi_dcmpeq>
 8009072:	2800      	cmp	r0, #0
 8009074:	d1a1      	bne.n	8008fba <_strtod_l+0x55a>
 8009076:	9b06      	ldr	r3, [sp, #24]
 8009078:	465a      	mov	r2, fp
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	4650      	mov	r0, sl
 800907e:	4623      	mov	r3, r4
 8009080:	9908      	ldr	r1, [sp, #32]
 8009082:	f001 ff2d 	bl	800aee0 <__s2b>
 8009086:	9008      	str	r0, [sp, #32]
 8009088:	2800      	cmp	r0, #0
 800908a:	f43f af24 	beq.w	8008ed6 <_strtod_l+0x476>
 800908e:	9b04      	ldr	r3, [sp, #16]
 8009090:	f04f 0b00 	mov.w	fp, #0
 8009094:	1b5d      	subs	r5, r3, r5
 8009096:	9b07      	ldr	r3, [sp, #28]
 8009098:	f8cd b010 	str.w	fp, [sp, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	bfb4      	ite	lt
 80090a0:	462b      	movlt	r3, r5
 80090a2:	2300      	movge	r3, #0
 80090a4:	930e      	str	r3, [sp, #56]	; 0x38
 80090a6:	9b07      	ldr	r3, [sp, #28]
 80090a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80090ac:	9316      	str	r3, [sp, #88]	; 0x58
 80090ae:	9b08      	ldr	r3, [sp, #32]
 80090b0:	4650      	mov	r0, sl
 80090b2:	6859      	ldr	r1, [r3, #4]
 80090b4:	f001 fe68 	bl	800ad88 <_Balloc>
 80090b8:	9006      	str	r0, [sp, #24]
 80090ba:	2800      	cmp	r0, #0
 80090bc:	f43f af13 	beq.w	8008ee6 <_strtod_l+0x486>
 80090c0:	9b08      	ldr	r3, [sp, #32]
 80090c2:	300c      	adds	r0, #12
 80090c4:	691a      	ldr	r2, [r3, #16]
 80090c6:	f103 010c 	add.w	r1, r3, #12
 80090ca:	3202      	adds	r2, #2
 80090cc:	0092      	lsls	r2, r2, #2
 80090ce:	f7fe fce0 	bl	8007a92 <memcpy>
 80090d2:	ab1e      	add	r3, sp, #120	; 0x78
 80090d4:	9301      	str	r3, [sp, #4]
 80090d6:	ab1d      	add	r3, sp, #116	; 0x74
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	4642      	mov	r2, r8
 80090dc:	464b      	mov	r3, r9
 80090de:	4650      	mov	r0, sl
 80090e0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80090e4:	f002 fa3a 	bl	800b55c <__d2b>
 80090e8:	901c      	str	r0, [sp, #112]	; 0x70
 80090ea:	2800      	cmp	r0, #0
 80090ec:	f43f aefb 	beq.w	8008ee6 <_strtod_l+0x486>
 80090f0:	2101      	movs	r1, #1
 80090f2:	4650      	mov	r0, sl
 80090f4:	f001 ff8c 	bl	800b010 <__i2b>
 80090f8:	4603      	mov	r3, r0
 80090fa:	9004      	str	r0, [sp, #16]
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f43f aef2 	beq.w	8008ee6 <_strtod_l+0x486>
 8009102:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009104:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009106:	2d00      	cmp	r5, #0
 8009108:	bfab      	itete	ge
 800910a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800910c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800910e:	18ee      	addge	r6, r5, r3
 8009110:	1b5c      	sublt	r4, r3, r5
 8009112:	9b05      	ldr	r3, [sp, #20]
 8009114:	bfa8      	it	ge
 8009116:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8009118:	eba5 0503 	sub.w	r5, r5, r3
 800911c:	4415      	add	r5, r2
 800911e:	4b71      	ldr	r3, [pc, #452]	; (80092e4 <_strtod_l+0x884>)
 8009120:	f105 35ff 	add.w	r5, r5, #4294967295
 8009124:	bfb8      	it	lt
 8009126:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009128:	429d      	cmp	r5, r3
 800912a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800912e:	f280 80c9 	bge.w	80092c4 <_strtod_l+0x864>
 8009132:	1b5b      	subs	r3, r3, r5
 8009134:	2b1f      	cmp	r3, #31
 8009136:	f04f 0701 	mov.w	r7, #1
 800913a:	eba2 0203 	sub.w	r2, r2, r3
 800913e:	f300 80b6 	bgt.w	80092ae <_strtod_l+0x84e>
 8009142:	2500      	movs	r5, #0
 8009144:	fa07 f303 	lsl.w	r3, r7, r3
 8009148:	930f      	str	r3, [sp, #60]	; 0x3c
 800914a:	18b7      	adds	r7, r6, r2
 800914c:	9b05      	ldr	r3, [sp, #20]
 800914e:	42be      	cmp	r6, r7
 8009150:	4414      	add	r4, r2
 8009152:	441c      	add	r4, r3
 8009154:	4633      	mov	r3, r6
 8009156:	bfa8      	it	ge
 8009158:	463b      	movge	r3, r7
 800915a:	42a3      	cmp	r3, r4
 800915c:	bfa8      	it	ge
 800915e:	4623      	movge	r3, r4
 8009160:	2b00      	cmp	r3, #0
 8009162:	bfc2      	ittt	gt
 8009164:	1aff      	subgt	r7, r7, r3
 8009166:	1ae4      	subgt	r4, r4, r3
 8009168:	1af6      	subgt	r6, r6, r3
 800916a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800916c:	2b00      	cmp	r3, #0
 800916e:	dd17      	ble.n	80091a0 <_strtod_l+0x740>
 8009170:	461a      	mov	r2, r3
 8009172:	4650      	mov	r0, sl
 8009174:	9904      	ldr	r1, [sp, #16]
 8009176:	f002 f805 	bl	800b184 <__pow5mult>
 800917a:	9004      	str	r0, [sp, #16]
 800917c:	2800      	cmp	r0, #0
 800917e:	f43f aeb2 	beq.w	8008ee6 <_strtod_l+0x486>
 8009182:	4601      	mov	r1, r0
 8009184:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009186:	4650      	mov	r0, sl
 8009188:	f001 ff58 	bl	800b03c <__multiply>
 800918c:	9009      	str	r0, [sp, #36]	; 0x24
 800918e:	2800      	cmp	r0, #0
 8009190:	f43f aea9 	beq.w	8008ee6 <_strtod_l+0x486>
 8009194:	4650      	mov	r0, sl
 8009196:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009198:	f001 fe36 	bl	800ae08 <_Bfree>
 800919c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800919e:	931c      	str	r3, [sp, #112]	; 0x70
 80091a0:	2f00      	cmp	r7, #0
 80091a2:	f300 8093 	bgt.w	80092cc <_strtod_l+0x86c>
 80091a6:	9b07      	ldr	r3, [sp, #28]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	dd08      	ble.n	80091be <_strtod_l+0x75e>
 80091ac:	4650      	mov	r0, sl
 80091ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80091b0:	9906      	ldr	r1, [sp, #24]
 80091b2:	f001 ffe7 	bl	800b184 <__pow5mult>
 80091b6:	9006      	str	r0, [sp, #24]
 80091b8:	2800      	cmp	r0, #0
 80091ba:	f43f ae94 	beq.w	8008ee6 <_strtod_l+0x486>
 80091be:	2c00      	cmp	r4, #0
 80091c0:	dd08      	ble.n	80091d4 <_strtod_l+0x774>
 80091c2:	4622      	mov	r2, r4
 80091c4:	4650      	mov	r0, sl
 80091c6:	9906      	ldr	r1, [sp, #24]
 80091c8:	f002 f836 	bl	800b238 <__lshift>
 80091cc:	9006      	str	r0, [sp, #24]
 80091ce:	2800      	cmp	r0, #0
 80091d0:	f43f ae89 	beq.w	8008ee6 <_strtod_l+0x486>
 80091d4:	2e00      	cmp	r6, #0
 80091d6:	dd08      	ble.n	80091ea <_strtod_l+0x78a>
 80091d8:	4632      	mov	r2, r6
 80091da:	4650      	mov	r0, sl
 80091dc:	9904      	ldr	r1, [sp, #16]
 80091de:	f002 f82b 	bl	800b238 <__lshift>
 80091e2:	9004      	str	r0, [sp, #16]
 80091e4:	2800      	cmp	r0, #0
 80091e6:	f43f ae7e 	beq.w	8008ee6 <_strtod_l+0x486>
 80091ea:	4650      	mov	r0, sl
 80091ec:	9a06      	ldr	r2, [sp, #24]
 80091ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 80091f0:	f002 f8aa 	bl	800b348 <__mdiff>
 80091f4:	4683      	mov	fp, r0
 80091f6:	2800      	cmp	r0, #0
 80091f8:	f43f ae75 	beq.w	8008ee6 <_strtod_l+0x486>
 80091fc:	2400      	movs	r4, #0
 80091fe:	68c3      	ldr	r3, [r0, #12]
 8009200:	9904      	ldr	r1, [sp, #16]
 8009202:	60c4      	str	r4, [r0, #12]
 8009204:	930d      	str	r3, [sp, #52]	; 0x34
 8009206:	f002 f883 	bl	800b310 <__mcmp>
 800920a:	42a0      	cmp	r0, r4
 800920c:	da70      	bge.n	80092f0 <_strtod_l+0x890>
 800920e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009210:	ea53 0308 	orrs.w	r3, r3, r8
 8009214:	f040 8096 	bne.w	8009344 <_strtod_l+0x8e4>
 8009218:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800921c:	2b00      	cmp	r3, #0
 800921e:	f040 8091 	bne.w	8009344 <_strtod_l+0x8e4>
 8009222:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009226:	0d1b      	lsrs	r3, r3, #20
 8009228:	051b      	lsls	r3, r3, #20
 800922a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800922e:	f240 8089 	bls.w	8009344 <_strtod_l+0x8e4>
 8009232:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009236:	b923      	cbnz	r3, 8009242 <_strtod_l+0x7e2>
 8009238:	f8db 3010 	ldr.w	r3, [fp, #16]
 800923c:	2b01      	cmp	r3, #1
 800923e:	f340 8081 	ble.w	8009344 <_strtod_l+0x8e4>
 8009242:	4659      	mov	r1, fp
 8009244:	2201      	movs	r2, #1
 8009246:	4650      	mov	r0, sl
 8009248:	f001 fff6 	bl	800b238 <__lshift>
 800924c:	9904      	ldr	r1, [sp, #16]
 800924e:	4683      	mov	fp, r0
 8009250:	f002 f85e 	bl	800b310 <__mcmp>
 8009254:	2800      	cmp	r0, #0
 8009256:	dd75      	ble.n	8009344 <_strtod_l+0x8e4>
 8009258:	9905      	ldr	r1, [sp, #20]
 800925a:	464b      	mov	r3, r9
 800925c:	4a22      	ldr	r2, [pc, #136]	; (80092e8 <_strtod_l+0x888>)
 800925e:	2900      	cmp	r1, #0
 8009260:	f000 8091 	beq.w	8009386 <_strtod_l+0x926>
 8009264:	ea02 0109 	and.w	r1, r2, r9
 8009268:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800926c:	f300 808b 	bgt.w	8009386 <_strtod_l+0x926>
 8009270:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009274:	f77f aea9 	ble.w	8008fca <_strtod_l+0x56a>
 8009278:	2300      	movs	r3, #0
 800927a:	4a1c      	ldr	r2, [pc, #112]	; (80092ec <_strtod_l+0x88c>)
 800927c:	4640      	mov	r0, r8
 800927e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009282:	4649      	mov	r1, r9
 8009284:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009288:	f7f7 f930 	bl	80004ec <__aeabi_dmul>
 800928c:	460b      	mov	r3, r1
 800928e:	4303      	orrs	r3, r0
 8009290:	bf08      	it	eq
 8009292:	2322      	moveq	r3, #34	; 0x22
 8009294:	4680      	mov	r8, r0
 8009296:	4689      	mov	r9, r1
 8009298:	bf08      	it	eq
 800929a:	f8ca 3000 	streq.w	r3, [sl]
 800929e:	e62d      	b.n	8008efc <_strtod_l+0x49c>
 80092a0:	f04f 32ff 	mov.w	r2, #4294967295
 80092a4:	fa02 f303 	lsl.w	r3, r2, r3
 80092a8:	ea03 0808 	and.w	r8, r3, r8
 80092ac:	e6db      	b.n	8009066 <_strtod_l+0x606>
 80092ae:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80092b2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80092b6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80092ba:	35e2      	adds	r5, #226	; 0xe2
 80092bc:	fa07 f505 	lsl.w	r5, r7, r5
 80092c0:	970f      	str	r7, [sp, #60]	; 0x3c
 80092c2:	e742      	b.n	800914a <_strtod_l+0x6ea>
 80092c4:	2301      	movs	r3, #1
 80092c6:	2500      	movs	r5, #0
 80092c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80092ca:	e73e      	b.n	800914a <_strtod_l+0x6ea>
 80092cc:	463a      	mov	r2, r7
 80092ce:	4650      	mov	r0, sl
 80092d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80092d2:	f001 ffb1 	bl	800b238 <__lshift>
 80092d6:	901c      	str	r0, [sp, #112]	; 0x70
 80092d8:	2800      	cmp	r0, #0
 80092da:	f47f af64 	bne.w	80091a6 <_strtod_l+0x746>
 80092de:	e602      	b.n	8008ee6 <_strtod_l+0x486>
 80092e0:	0800c580 	.word	0x0800c580
 80092e4:	fffffc02 	.word	0xfffffc02
 80092e8:	7ff00000 	.word	0x7ff00000
 80092ec:	39500000 	.word	0x39500000
 80092f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80092f4:	d166      	bne.n	80093c4 <_strtod_l+0x964>
 80092f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092fc:	b35a      	cbz	r2, 8009356 <_strtod_l+0x8f6>
 80092fe:	4a9c      	ldr	r2, [pc, #624]	; (8009570 <_strtod_l+0xb10>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d12c      	bne.n	800935e <_strtod_l+0x8fe>
 8009304:	9b05      	ldr	r3, [sp, #20]
 8009306:	4640      	mov	r0, r8
 8009308:	b303      	cbz	r3, 800934c <_strtod_l+0x8ec>
 800930a:	464b      	mov	r3, r9
 800930c:	4a99      	ldr	r2, [pc, #612]	; (8009574 <_strtod_l+0xb14>)
 800930e:	f04f 31ff 	mov.w	r1, #4294967295
 8009312:	401a      	ands	r2, r3
 8009314:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009318:	d81b      	bhi.n	8009352 <_strtod_l+0x8f2>
 800931a:	0d12      	lsrs	r2, r2, #20
 800931c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009320:	fa01 f303 	lsl.w	r3, r1, r3
 8009324:	4298      	cmp	r0, r3
 8009326:	d11a      	bne.n	800935e <_strtod_l+0x8fe>
 8009328:	4b93      	ldr	r3, [pc, #588]	; (8009578 <_strtod_l+0xb18>)
 800932a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800932c:	429a      	cmp	r2, r3
 800932e:	d102      	bne.n	8009336 <_strtod_l+0x8d6>
 8009330:	3001      	adds	r0, #1
 8009332:	f43f add8 	beq.w	8008ee6 <_strtod_l+0x486>
 8009336:	f04f 0800 	mov.w	r8, #0
 800933a:	4b8e      	ldr	r3, [pc, #568]	; (8009574 <_strtod_l+0xb14>)
 800933c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800933e:	401a      	ands	r2, r3
 8009340:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009344:	9b05      	ldr	r3, [sp, #20]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d196      	bne.n	8009278 <_strtod_l+0x818>
 800934a:	e5d7      	b.n	8008efc <_strtod_l+0x49c>
 800934c:	f04f 33ff 	mov.w	r3, #4294967295
 8009350:	e7e8      	b.n	8009324 <_strtod_l+0x8c4>
 8009352:	460b      	mov	r3, r1
 8009354:	e7e6      	b.n	8009324 <_strtod_l+0x8c4>
 8009356:	ea53 0308 	orrs.w	r3, r3, r8
 800935a:	f43f af7d 	beq.w	8009258 <_strtod_l+0x7f8>
 800935e:	b1e5      	cbz	r5, 800939a <_strtod_l+0x93a>
 8009360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009362:	421d      	tst	r5, r3
 8009364:	d0ee      	beq.n	8009344 <_strtod_l+0x8e4>
 8009366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009368:	4640      	mov	r0, r8
 800936a:	4649      	mov	r1, r9
 800936c:	9a05      	ldr	r2, [sp, #20]
 800936e:	b1c3      	cbz	r3, 80093a2 <_strtod_l+0x942>
 8009370:	f7ff fb53 	bl	8008a1a <sulp>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800937c:	f7f6 ff00 	bl	8000180 <__adddf3>
 8009380:	4680      	mov	r8, r0
 8009382:	4689      	mov	r9, r1
 8009384:	e7de      	b.n	8009344 <_strtod_l+0x8e4>
 8009386:	4013      	ands	r3, r2
 8009388:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800938c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009390:	f04f 38ff 	mov.w	r8, #4294967295
 8009394:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009398:	e7d4      	b.n	8009344 <_strtod_l+0x8e4>
 800939a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800939c:	ea13 0f08 	tst.w	r3, r8
 80093a0:	e7e0      	b.n	8009364 <_strtod_l+0x904>
 80093a2:	f7ff fb3a 	bl	8008a1a <sulp>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093ae:	f7f6 fee5 	bl	800017c <__aeabi_dsub>
 80093b2:	2200      	movs	r2, #0
 80093b4:	2300      	movs	r3, #0
 80093b6:	4680      	mov	r8, r0
 80093b8:	4689      	mov	r9, r1
 80093ba:	f7f7 faff 	bl	80009bc <__aeabi_dcmpeq>
 80093be:	2800      	cmp	r0, #0
 80093c0:	d0c0      	beq.n	8009344 <_strtod_l+0x8e4>
 80093c2:	e602      	b.n	8008fca <_strtod_l+0x56a>
 80093c4:	4658      	mov	r0, fp
 80093c6:	9904      	ldr	r1, [sp, #16]
 80093c8:	f002 f924 	bl	800b614 <__ratio>
 80093cc:	2200      	movs	r2, #0
 80093ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093d2:	4606      	mov	r6, r0
 80093d4:	460f      	mov	r7, r1
 80093d6:	f7f7 fb05 	bl	80009e4 <__aeabi_dcmple>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d075      	beq.n	80094ca <_strtod_l+0xa6a>
 80093de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d047      	beq.n	8009474 <_strtod_l+0xa14>
 80093e4:	2600      	movs	r6, #0
 80093e6:	4f65      	ldr	r7, [pc, #404]	; (800957c <_strtod_l+0xb1c>)
 80093e8:	4d64      	ldr	r5, [pc, #400]	; (800957c <_strtod_l+0xb1c>)
 80093ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093f0:	0d1b      	lsrs	r3, r3, #20
 80093f2:	051b      	lsls	r3, r3, #20
 80093f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80093f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093f8:	4b61      	ldr	r3, [pc, #388]	; (8009580 <_strtod_l+0xb20>)
 80093fa:	429a      	cmp	r2, r3
 80093fc:	f040 80c8 	bne.w	8009590 <_strtod_l+0xb30>
 8009400:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009404:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940a:	4640      	mov	r0, r8
 800940c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009410:	4649      	mov	r1, r9
 8009412:	f002 f829 	bl	800b468 <__ulp>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	4630      	mov	r0, r6
 800941c:	4639      	mov	r1, r7
 800941e:	f7f7 f865 	bl	80004ec <__aeabi_dmul>
 8009422:	4642      	mov	r2, r8
 8009424:	464b      	mov	r3, r9
 8009426:	f7f6 feab 	bl	8000180 <__adddf3>
 800942a:	460b      	mov	r3, r1
 800942c:	4951      	ldr	r1, [pc, #324]	; (8009574 <_strtod_l+0xb14>)
 800942e:	4a55      	ldr	r2, [pc, #340]	; (8009584 <_strtod_l+0xb24>)
 8009430:	4019      	ands	r1, r3
 8009432:	4291      	cmp	r1, r2
 8009434:	4680      	mov	r8, r0
 8009436:	d95e      	bls.n	80094f6 <_strtod_l+0xa96>
 8009438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800943a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800943e:	4293      	cmp	r3, r2
 8009440:	d103      	bne.n	800944a <_strtod_l+0x9ea>
 8009442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009444:	3301      	adds	r3, #1
 8009446:	f43f ad4e 	beq.w	8008ee6 <_strtod_l+0x486>
 800944a:	f04f 38ff 	mov.w	r8, #4294967295
 800944e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009578 <_strtod_l+0xb18>
 8009452:	4650      	mov	r0, sl
 8009454:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009456:	f001 fcd7 	bl	800ae08 <_Bfree>
 800945a:	4650      	mov	r0, sl
 800945c:	9906      	ldr	r1, [sp, #24]
 800945e:	f001 fcd3 	bl	800ae08 <_Bfree>
 8009462:	4650      	mov	r0, sl
 8009464:	9904      	ldr	r1, [sp, #16]
 8009466:	f001 fccf 	bl	800ae08 <_Bfree>
 800946a:	4659      	mov	r1, fp
 800946c:	4650      	mov	r0, sl
 800946e:	f001 fccb 	bl	800ae08 <_Bfree>
 8009472:	e61c      	b.n	80090ae <_strtod_l+0x64e>
 8009474:	f1b8 0f00 	cmp.w	r8, #0
 8009478:	d119      	bne.n	80094ae <_strtod_l+0xa4e>
 800947a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009480:	b9e3      	cbnz	r3, 80094bc <_strtod_l+0xa5c>
 8009482:	2200      	movs	r2, #0
 8009484:	4630      	mov	r0, r6
 8009486:	4639      	mov	r1, r7
 8009488:	4b3c      	ldr	r3, [pc, #240]	; (800957c <_strtod_l+0xb1c>)
 800948a:	f7f7 faa1 	bl	80009d0 <__aeabi_dcmplt>
 800948e:	b9c8      	cbnz	r0, 80094c4 <_strtod_l+0xa64>
 8009490:	2200      	movs	r2, #0
 8009492:	4630      	mov	r0, r6
 8009494:	4639      	mov	r1, r7
 8009496:	4b3c      	ldr	r3, [pc, #240]	; (8009588 <_strtod_l+0xb28>)
 8009498:	f7f7 f828 	bl	80004ec <__aeabi_dmul>
 800949c:	4604      	mov	r4, r0
 800949e:	460d      	mov	r5, r1
 80094a0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80094a4:	9418      	str	r4, [sp, #96]	; 0x60
 80094a6:	9319      	str	r3, [sp, #100]	; 0x64
 80094a8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80094ac:	e79d      	b.n	80093ea <_strtod_l+0x98a>
 80094ae:	f1b8 0f01 	cmp.w	r8, #1
 80094b2:	d103      	bne.n	80094bc <_strtod_l+0xa5c>
 80094b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f43f ad87 	beq.w	8008fca <_strtod_l+0x56a>
 80094bc:	2600      	movs	r6, #0
 80094be:	2400      	movs	r4, #0
 80094c0:	4f32      	ldr	r7, [pc, #200]	; (800958c <_strtod_l+0xb2c>)
 80094c2:	e791      	b.n	80093e8 <_strtod_l+0x988>
 80094c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80094c6:	4d30      	ldr	r5, [pc, #192]	; (8009588 <_strtod_l+0xb28>)
 80094c8:	e7ea      	b.n	80094a0 <_strtod_l+0xa40>
 80094ca:	4b2f      	ldr	r3, [pc, #188]	; (8009588 <_strtod_l+0xb28>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	4630      	mov	r0, r6
 80094d0:	4639      	mov	r1, r7
 80094d2:	f7f7 f80b 	bl	80004ec <__aeabi_dmul>
 80094d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094d8:	4604      	mov	r4, r0
 80094da:	460d      	mov	r5, r1
 80094dc:	b933      	cbnz	r3, 80094ec <_strtod_l+0xa8c>
 80094de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094e2:	9010      	str	r0, [sp, #64]	; 0x40
 80094e4:	9311      	str	r3, [sp, #68]	; 0x44
 80094e6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80094ea:	e77e      	b.n	80093ea <_strtod_l+0x98a>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80094f4:	e7f7      	b.n	80094e6 <_strtod_l+0xa86>
 80094f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80094fa:	9b05      	ldr	r3, [sp, #20]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1a8      	bne.n	8009452 <_strtod_l+0x9f2>
 8009500:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009504:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009506:	0d1b      	lsrs	r3, r3, #20
 8009508:	051b      	lsls	r3, r3, #20
 800950a:	429a      	cmp	r2, r3
 800950c:	d1a1      	bne.n	8009452 <_strtod_l+0x9f2>
 800950e:	4620      	mov	r0, r4
 8009510:	4629      	mov	r1, r5
 8009512:	f7f7 fb33 	bl	8000b7c <__aeabi_d2lz>
 8009516:	f7f6 ffbb 	bl	8000490 <__aeabi_l2d>
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	4620      	mov	r0, r4
 8009520:	4629      	mov	r1, r5
 8009522:	f7f6 fe2b 	bl	800017c <__aeabi_dsub>
 8009526:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009528:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800952c:	ea43 0308 	orr.w	r3, r3, r8
 8009530:	4313      	orrs	r3, r2
 8009532:	4604      	mov	r4, r0
 8009534:	460d      	mov	r5, r1
 8009536:	d066      	beq.n	8009606 <_strtod_l+0xba6>
 8009538:	a309      	add	r3, pc, #36	; (adr r3, 8009560 <_strtod_l+0xb00>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f7 fa47 	bl	80009d0 <__aeabi_dcmplt>
 8009542:	2800      	cmp	r0, #0
 8009544:	f47f acda 	bne.w	8008efc <_strtod_l+0x49c>
 8009548:	a307      	add	r3, pc, #28	; (adr r3, 8009568 <_strtod_l+0xb08>)
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	4620      	mov	r0, r4
 8009550:	4629      	mov	r1, r5
 8009552:	f7f7 fa5b 	bl	8000a0c <__aeabi_dcmpgt>
 8009556:	2800      	cmp	r0, #0
 8009558:	f43f af7b 	beq.w	8009452 <_strtod_l+0x9f2>
 800955c:	e4ce      	b.n	8008efc <_strtod_l+0x49c>
 800955e:	bf00      	nop
 8009560:	94a03595 	.word	0x94a03595
 8009564:	3fdfffff 	.word	0x3fdfffff
 8009568:	35afe535 	.word	0x35afe535
 800956c:	3fe00000 	.word	0x3fe00000
 8009570:	000fffff 	.word	0x000fffff
 8009574:	7ff00000 	.word	0x7ff00000
 8009578:	7fefffff 	.word	0x7fefffff
 800957c:	3ff00000 	.word	0x3ff00000
 8009580:	7fe00000 	.word	0x7fe00000
 8009584:	7c9fffff 	.word	0x7c9fffff
 8009588:	3fe00000 	.word	0x3fe00000
 800958c:	bff00000 	.word	0xbff00000
 8009590:	9b05      	ldr	r3, [sp, #20]
 8009592:	b313      	cbz	r3, 80095da <_strtod_l+0xb7a>
 8009594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009596:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800959a:	d81e      	bhi.n	80095da <_strtod_l+0xb7a>
 800959c:	a326      	add	r3, pc, #152	; (adr r3, 8009638 <_strtod_l+0xbd8>)
 800959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a2:	4620      	mov	r0, r4
 80095a4:	4629      	mov	r1, r5
 80095a6:	f7f7 fa1d 	bl	80009e4 <__aeabi_dcmple>
 80095aa:	b190      	cbz	r0, 80095d2 <_strtod_l+0xb72>
 80095ac:	4629      	mov	r1, r5
 80095ae:	4620      	mov	r0, r4
 80095b0:	f7f7 fa74 	bl	8000a9c <__aeabi_d2uiz>
 80095b4:	2801      	cmp	r0, #1
 80095b6:	bf38      	it	cc
 80095b8:	2001      	movcc	r0, #1
 80095ba:	f7f6 ff1d 	bl	80003f8 <__aeabi_ui2d>
 80095be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095c0:	4604      	mov	r4, r0
 80095c2:	460d      	mov	r5, r1
 80095c4:	b9d3      	cbnz	r3, 80095fc <_strtod_l+0xb9c>
 80095c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095ca:	9012      	str	r0, [sp, #72]	; 0x48
 80095cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80095ce:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80095d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095d4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80095d8:	1a9f      	subs	r7, r3, r2
 80095da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80095de:	f001 ff43 	bl	800b468 <__ulp>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	4630      	mov	r0, r6
 80095e8:	4639      	mov	r1, r7
 80095ea:	f7f6 ff7f 	bl	80004ec <__aeabi_dmul>
 80095ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80095f2:	f7f6 fdc5 	bl	8000180 <__adddf3>
 80095f6:	4680      	mov	r8, r0
 80095f8:	4689      	mov	r9, r1
 80095fa:	e77e      	b.n	80094fa <_strtod_l+0xa9a>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009604:	e7e3      	b.n	80095ce <_strtod_l+0xb6e>
 8009606:	a30e      	add	r3, pc, #56	; (adr r3, 8009640 <_strtod_l+0xbe0>)
 8009608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960c:	f7f7 f9e0 	bl	80009d0 <__aeabi_dcmplt>
 8009610:	e7a1      	b.n	8009556 <_strtod_l+0xaf6>
 8009612:	2300      	movs	r3, #0
 8009614:	930c      	str	r3, [sp, #48]	; 0x30
 8009616:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009618:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800961a:	6013      	str	r3, [r2, #0]
 800961c:	f7ff ba65 	b.w	8008aea <_strtod_l+0x8a>
 8009620:	2b65      	cmp	r3, #101	; 0x65
 8009622:	f43f ab5c 	beq.w	8008cde <_strtod_l+0x27e>
 8009626:	2b45      	cmp	r3, #69	; 0x45
 8009628:	f43f ab59 	beq.w	8008cde <_strtod_l+0x27e>
 800962c:	2201      	movs	r2, #1
 800962e:	f7ff bb8d 	b.w	8008d4c <_strtod_l+0x2ec>
 8009632:	bf00      	nop
 8009634:	f3af 8000 	nop.w
 8009638:	ffc00000 	.word	0xffc00000
 800963c:	41dfffff 	.word	0x41dfffff
 8009640:	94a03595 	.word	0x94a03595
 8009644:	3fcfffff 	.word	0x3fcfffff

08009648 <_strtod_r>:
 8009648:	4b01      	ldr	r3, [pc, #4]	; (8009650 <_strtod_r+0x8>)
 800964a:	f7ff ba09 	b.w	8008a60 <_strtod_l>
 800964e:	bf00      	nop
 8009650:	20000078 	.word	0x20000078

08009654 <_strtol_l.isra.0>:
 8009654:	2b01      	cmp	r3, #1
 8009656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800965a:	4686      	mov	lr, r0
 800965c:	d001      	beq.n	8009662 <_strtol_l.isra.0+0xe>
 800965e:	2b24      	cmp	r3, #36	; 0x24
 8009660:	d906      	bls.n	8009670 <_strtol_l.isra.0+0x1c>
 8009662:	f7fe f8f3 	bl	800784c <__errno>
 8009666:	2316      	movs	r3, #22
 8009668:	6003      	str	r3, [r0, #0]
 800966a:	2000      	movs	r0, #0
 800966c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009670:	468c      	mov	ip, r1
 8009672:	4e3a      	ldr	r6, [pc, #232]	; (800975c <_strtol_l.isra.0+0x108>)
 8009674:	4660      	mov	r0, ip
 8009676:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800967a:	5da5      	ldrb	r5, [r4, r6]
 800967c:	f015 0508 	ands.w	r5, r5, #8
 8009680:	d1f8      	bne.n	8009674 <_strtol_l.isra.0+0x20>
 8009682:	2c2d      	cmp	r4, #45	; 0x2d
 8009684:	d133      	bne.n	80096ee <_strtol_l.isra.0+0x9a>
 8009686:	f04f 0801 	mov.w	r8, #1
 800968a:	f89c 4000 	ldrb.w	r4, [ip]
 800968e:	f100 0c02 	add.w	ip, r0, #2
 8009692:	2b00      	cmp	r3, #0
 8009694:	d05d      	beq.n	8009752 <_strtol_l.isra.0+0xfe>
 8009696:	2b10      	cmp	r3, #16
 8009698:	d10c      	bne.n	80096b4 <_strtol_l.isra.0+0x60>
 800969a:	2c30      	cmp	r4, #48	; 0x30
 800969c:	d10a      	bne.n	80096b4 <_strtol_l.isra.0+0x60>
 800969e:	f89c 0000 	ldrb.w	r0, [ip]
 80096a2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80096a6:	2858      	cmp	r0, #88	; 0x58
 80096a8:	d14e      	bne.n	8009748 <_strtol_l.isra.0+0xf4>
 80096aa:	2310      	movs	r3, #16
 80096ac:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80096b0:	f10c 0c02 	add.w	ip, ip, #2
 80096b4:	2500      	movs	r5, #0
 80096b6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80096ba:	3f01      	subs	r7, #1
 80096bc:	fbb7 f9f3 	udiv	r9, r7, r3
 80096c0:	4628      	mov	r0, r5
 80096c2:	fb03 7a19 	mls	sl, r3, r9, r7
 80096c6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80096ca:	2e09      	cmp	r6, #9
 80096cc:	d818      	bhi.n	8009700 <_strtol_l.isra.0+0xac>
 80096ce:	4634      	mov	r4, r6
 80096d0:	42a3      	cmp	r3, r4
 80096d2:	dd24      	ble.n	800971e <_strtol_l.isra.0+0xca>
 80096d4:	2d00      	cmp	r5, #0
 80096d6:	db1f      	blt.n	8009718 <_strtol_l.isra.0+0xc4>
 80096d8:	4581      	cmp	r9, r0
 80096da:	d31d      	bcc.n	8009718 <_strtol_l.isra.0+0xc4>
 80096dc:	d101      	bne.n	80096e2 <_strtol_l.isra.0+0x8e>
 80096de:	45a2      	cmp	sl, r4
 80096e0:	db1a      	blt.n	8009718 <_strtol_l.isra.0+0xc4>
 80096e2:	2501      	movs	r5, #1
 80096e4:	fb00 4003 	mla	r0, r0, r3, r4
 80096e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80096ec:	e7eb      	b.n	80096c6 <_strtol_l.isra.0+0x72>
 80096ee:	2c2b      	cmp	r4, #43	; 0x2b
 80096f0:	bf08      	it	eq
 80096f2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80096f6:	46a8      	mov	r8, r5
 80096f8:	bf08      	it	eq
 80096fa:	f100 0c02 	addeq.w	ip, r0, #2
 80096fe:	e7c8      	b.n	8009692 <_strtol_l.isra.0+0x3e>
 8009700:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009704:	2e19      	cmp	r6, #25
 8009706:	d801      	bhi.n	800970c <_strtol_l.isra.0+0xb8>
 8009708:	3c37      	subs	r4, #55	; 0x37
 800970a:	e7e1      	b.n	80096d0 <_strtol_l.isra.0+0x7c>
 800970c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009710:	2e19      	cmp	r6, #25
 8009712:	d804      	bhi.n	800971e <_strtol_l.isra.0+0xca>
 8009714:	3c57      	subs	r4, #87	; 0x57
 8009716:	e7db      	b.n	80096d0 <_strtol_l.isra.0+0x7c>
 8009718:	f04f 35ff 	mov.w	r5, #4294967295
 800971c:	e7e4      	b.n	80096e8 <_strtol_l.isra.0+0x94>
 800971e:	2d00      	cmp	r5, #0
 8009720:	da08      	bge.n	8009734 <_strtol_l.isra.0+0xe0>
 8009722:	2322      	movs	r3, #34	; 0x22
 8009724:	4638      	mov	r0, r7
 8009726:	f8ce 3000 	str.w	r3, [lr]
 800972a:	2a00      	cmp	r2, #0
 800972c:	d09e      	beq.n	800966c <_strtol_l.isra.0+0x18>
 800972e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009732:	e007      	b.n	8009744 <_strtol_l.isra.0+0xf0>
 8009734:	f1b8 0f00 	cmp.w	r8, #0
 8009738:	d000      	beq.n	800973c <_strtol_l.isra.0+0xe8>
 800973a:	4240      	negs	r0, r0
 800973c:	2a00      	cmp	r2, #0
 800973e:	d095      	beq.n	800966c <_strtol_l.isra.0+0x18>
 8009740:	2d00      	cmp	r5, #0
 8009742:	d1f4      	bne.n	800972e <_strtol_l.isra.0+0xda>
 8009744:	6011      	str	r1, [r2, #0]
 8009746:	e791      	b.n	800966c <_strtol_l.isra.0+0x18>
 8009748:	2430      	movs	r4, #48	; 0x30
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1b2      	bne.n	80096b4 <_strtol_l.isra.0+0x60>
 800974e:	2308      	movs	r3, #8
 8009750:	e7b0      	b.n	80096b4 <_strtol_l.isra.0+0x60>
 8009752:	2c30      	cmp	r4, #48	; 0x30
 8009754:	d0a3      	beq.n	800969e <_strtol_l.isra.0+0x4a>
 8009756:	230a      	movs	r3, #10
 8009758:	e7ac      	b.n	80096b4 <_strtol_l.isra.0+0x60>
 800975a:	bf00      	nop
 800975c:	0800c5a9 	.word	0x0800c5a9

08009760 <_strtol_r>:
 8009760:	f7ff bf78 	b.w	8009654 <_strtol_l.isra.0>

08009764 <_write_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	4611      	mov	r1, r2
 800976c:	2200      	movs	r2, #0
 800976e:	4d05      	ldr	r5, [pc, #20]	; (8009784 <_write_r+0x20>)
 8009770:	602a      	str	r2, [r5, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	f7f7 ff04 	bl	8001580 <_write>
 8009778:	1c43      	adds	r3, r0, #1
 800977a:	d102      	bne.n	8009782 <_write_r+0x1e>
 800977c:	682b      	ldr	r3, [r5, #0]
 800977e:	b103      	cbz	r3, 8009782 <_write_r+0x1e>
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	bd38      	pop	{r3, r4, r5, pc}
 8009784:	20003adc 	.word	0x20003adc

08009788 <_close_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	2300      	movs	r3, #0
 800978c:	4d05      	ldr	r5, [pc, #20]	; (80097a4 <_close_r+0x1c>)
 800978e:	4604      	mov	r4, r0
 8009790:	4608      	mov	r0, r1
 8009792:	602b      	str	r3, [r5, #0]
 8009794:	f7f7 ff10 	bl	80015b8 <_close>
 8009798:	1c43      	adds	r3, r0, #1
 800979a:	d102      	bne.n	80097a2 <_close_r+0x1a>
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	b103      	cbz	r3, 80097a2 <_close_r+0x1a>
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	bd38      	pop	{r3, r4, r5, pc}
 80097a4:	20003adc 	.word	0x20003adc

080097a8 <quorem>:
 80097a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ac:	6903      	ldr	r3, [r0, #16]
 80097ae:	690c      	ldr	r4, [r1, #16]
 80097b0:	4607      	mov	r7, r0
 80097b2:	42a3      	cmp	r3, r4
 80097b4:	f2c0 8083 	blt.w	80098be <quorem+0x116>
 80097b8:	3c01      	subs	r4, #1
 80097ba:	f100 0514 	add.w	r5, r0, #20
 80097be:	f101 0814 	add.w	r8, r1, #20
 80097c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097c6:	9301      	str	r3, [sp, #4]
 80097c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097d0:	3301      	adds	r3, #1
 80097d2:	429a      	cmp	r2, r3
 80097d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80097d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80097dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097e0:	d332      	bcc.n	8009848 <quorem+0xa0>
 80097e2:	f04f 0e00 	mov.w	lr, #0
 80097e6:	4640      	mov	r0, r8
 80097e8:	46ac      	mov	ip, r5
 80097ea:	46f2      	mov	sl, lr
 80097ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80097f0:	b293      	uxth	r3, r2
 80097f2:	fb06 e303 	mla	r3, r6, r3, lr
 80097f6:	0c12      	lsrs	r2, r2, #16
 80097f8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80097fc:	fb06 e202 	mla	r2, r6, r2, lr
 8009800:	b29b      	uxth	r3, r3
 8009802:	ebaa 0303 	sub.w	r3, sl, r3
 8009806:	f8dc a000 	ldr.w	sl, [ip]
 800980a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800980e:	fa1f fa8a 	uxth.w	sl, sl
 8009812:	4453      	add	r3, sl
 8009814:	fa1f fa82 	uxth.w	sl, r2
 8009818:	f8dc 2000 	ldr.w	r2, [ip]
 800981c:	4581      	cmp	r9, r0
 800981e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009822:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009826:	b29b      	uxth	r3, r3
 8009828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800982c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009830:	f84c 3b04 	str.w	r3, [ip], #4
 8009834:	d2da      	bcs.n	80097ec <quorem+0x44>
 8009836:	f855 300b 	ldr.w	r3, [r5, fp]
 800983a:	b92b      	cbnz	r3, 8009848 <quorem+0xa0>
 800983c:	9b01      	ldr	r3, [sp, #4]
 800983e:	3b04      	subs	r3, #4
 8009840:	429d      	cmp	r5, r3
 8009842:	461a      	mov	r2, r3
 8009844:	d32f      	bcc.n	80098a6 <quorem+0xfe>
 8009846:	613c      	str	r4, [r7, #16]
 8009848:	4638      	mov	r0, r7
 800984a:	f001 fd61 	bl	800b310 <__mcmp>
 800984e:	2800      	cmp	r0, #0
 8009850:	db25      	blt.n	800989e <quorem+0xf6>
 8009852:	4628      	mov	r0, r5
 8009854:	f04f 0c00 	mov.w	ip, #0
 8009858:	3601      	adds	r6, #1
 800985a:	f858 1b04 	ldr.w	r1, [r8], #4
 800985e:	f8d0 e000 	ldr.w	lr, [r0]
 8009862:	b28b      	uxth	r3, r1
 8009864:	ebac 0303 	sub.w	r3, ip, r3
 8009868:	fa1f f28e 	uxth.w	r2, lr
 800986c:	4413      	add	r3, r2
 800986e:	0c0a      	lsrs	r2, r1, #16
 8009870:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009874:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009878:	b29b      	uxth	r3, r3
 800987a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800987e:	45c1      	cmp	r9, r8
 8009880:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009884:	f840 3b04 	str.w	r3, [r0], #4
 8009888:	d2e7      	bcs.n	800985a <quorem+0xb2>
 800988a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800988e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009892:	b922      	cbnz	r2, 800989e <quorem+0xf6>
 8009894:	3b04      	subs	r3, #4
 8009896:	429d      	cmp	r5, r3
 8009898:	461a      	mov	r2, r3
 800989a:	d30a      	bcc.n	80098b2 <quorem+0x10a>
 800989c:	613c      	str	r4, [r7, #16]
 800989e:	4630      	mov	r0, r6
 80098a0:	b003      	add	sp, #12
 80098a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a6:	6812      	ldr	r2, [r2, #0]
 80098a8:	3b04      	subs	r3, #4
 80098aa:	2a00      	cmp	r2, #0
 80098ac:	d1cb      	bne.n	8009846 <quorem+0x9e>
 80098ae:	3c01      	subs	r4, #1
 80098b0:	e7c6      	b.n	8009840 <quorem+0x98>
 80098b2:	6812      	ldr	r2, [r2, #0]
 80098b4:	3b04      	subs	r3, #4
 80098b6:	2a00      	cmp	r2, #0
 80098b8:	d1f0      	bne.n	800989c <quorem+0xf4>
 80098ba:	3c01      	subs	r4, #1
 80098bc:	e7eb      	b.n	8009896 <quorem+0xee>
 80098be:	2000      	movs	r0, #0
 80098c0:	e7ee      	b.n	80098a0 <quorem+0xf8>
 80098c2:	0000      	movs	r0, r0
 80098c4:	0000      	movs	r0, r0
	...

080098c8 <_dtoa_r>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	4616      	mov	r6, r2
 80098ce:	461f      	mov	r7, r3
 80098d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80098d2:	b099      	sub	sp, #100	; 0x64
 80098d4:	4605      	mov	r5, r0
 80098d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80098da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80098de:	b974      	cbnz	r4, 80098fe <_dtoa_r+0x36>
 80098e0:	2010      	movs	r0, #16
 80098e2:	f001 fa1d 	bl	800ad20 <malloc>
 80098e6:	4602      	mov	r2, r0
 80098e8:	6268      	str	r0, [r5, #36]	; 0x24
 80098ea:	b920      	cbnz	r0, 80098f6 <_dtoa_r+0x2e>
 80098ec:	21ea      	movs	r1, #234	; 0xea
 80098ee:	4bae      	ldr	r3, [pc, #696]	; (8009ba8 <_dtoa_r+0x2e0>)
 80098f0:	48ae      	ldr	r0, [pc, #696]	; (8009bac <_dtoa_r+0x2e4>)
 80098f2:	f002 f8ef 	bl	800bad4 <__assert_func>
 80098f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098fa:	6004      	str	r4, [r0, #0]
 80098fc:	60c4      	str	r4, [r0, #12]
 80098fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009900:	6819      	ldr	r1, [r3, #0]
 8009902:	b151      	cbz	r1, 800991a <_dtoa_r+0x52>
 8009904:	685a      	ldr	r2, [r3, #4]
 8009906:	2301      	movs	r3, #1
 8009908:	4093      	lsls	r3, r2
 800990a:	604a      	str	r2, [r1, #4]
 800990c:	608b      	str	r3, [r1, #8]
 800990e:	4628      	mov	r0, r5
 8009910:	f001 fa7a 	bl	800ae08 <_Bfree>
 8009914:	2200      	movs	r2, #0
 8009916:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	1e3b      	subs	r3, r7, #0
 800991c:	bfaf      	iteee	ge
 800991e:	2300      	movge	r3, #0
 8009920:	2201      	movlt	r2, #1
 8009922:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009926:	9305      	strlt	r3, [sp, #20]
 8009928:	bfa8      	it	ge
 800992a:	f8c8 3000 	strge.w	r3, [r8]
 800992e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009932:	4b9f      	ldr	r3, [pc, #636]	; (8009bb0 <_dtoa_r+0x2e8>)
 8009934:	bfb8      	it	lt
 8009936:	f8c8 2000 	strlt.w	r2, [r8]
 800993a:	ea33 0309 	bics.w	r3, r3, r9
 800993e:	d119      	bne.n	8009974 <_dtoa_r+0xac>
 8009940:	f242 730f 	movw	r3, #9999	; 0x270f
 8009944:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800994c:	4333      	orrs	r3, r6
 800994e:	f000 8580 	beq.w	800a452 <_dtoa_r+0xb8a>
 8009952:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009954:	b953      	cbnz	r3, 800996c <_dtoa_r+0xa4>
 8009956:	4b97      	ldr	r3, [pc, #604]	; (8009bb4 <_dtoa_r+0x2ec>)
 8009958:	e022      	b.n	80099a0 <_dtoa_r+0xd8>
 800995a:	4b97      	ldr	r3, [pc, #604]	; (8009bb8 <_dtoa_r+0x2f0>)
 800995c:	9308      	str	r3, [sp, #32]
 800995e:	3308      	adds	r3, #8
 8009960:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	9808      	ldr	r0, [sp, #32]
 8009966:	b019      	add	sp, #100	; 0x64
 8009968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996c:	4b91      	ldr	r3, [pc, #580]	; (8009bb4 <_dtoa_r+0x2ec>)
 800996e:	9308      	str	r3, [sp, #32]
 8009970:	3303      	adds	r3, #3
 8009972:	e7f5      	b.n	8009960 <_dtoa_r+0x98>
 8009974:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009978:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800997c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009980:	2200      	movs	r2, #0
 8009982:	2300      	movs	r3, #0
 8009984:	f7f7 f81a 	bl	80009bc <__aeabi_dcmpeq>
 8009988:	4680      	mov	r8, r0
 800998a:	b158      	cbz	r0, 80099a4 <_dtoa_r+0xdc>
 800998c:	2301      	movs	r3, #1
 800998e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 8559 	beq.w	800a44c <_dtoa_r+0xb84>
 800999a:	4888      	ldr	r0, [pc, #544]	; (8009bbc <_dtoa_r+0x2f4>)
 800999c:	6018      	str	r0, [r3, #0]
 800999e:	1e43      	subs	r3, r0, #1
 80099a0:	9308      	str	r3, [sp, #32]
 80099a2:	e7df      	b.n	8009964 <_dtoa_r+0x9c>
 80099a4:	ab16      	add	r3, sp, #88	; 0x58
 80099a6:	9301      	str	r3, [sp, #4]
 80099a8:	ab17      	add	r3, sp, #92	; 0x5c
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	4628      	mov	r0, r5
 80099ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80099b2:	f001 fdd3 	bl	800b55c <__d2b>
 80099b6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80099ba:	4682      	mov	sl, r0
 80099bc:	2c00      	cmp	r4, #0
 80099be:	d07e      	beq.n	8009abe <_dtoa_r+0x1f6>
 80099c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099c6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80099ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80099d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80099d6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80099da:	2200      	movs	r2, #0
 80099dc:	4b78      	ldr	r3, [pc, #480]	; (8009bc0 <_dtoa_r+0x2f8>)
 80099de:	f7f6 fbcd 	bl	800017c <__aeabi_dsub>
 80099e2:	a36b      	add	r3, pc, #428	; (adr r3, 8009b90 <_dtoa_r+0x2c8>)
 80099e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e8:	f7f6 fd80 	bl	80004ec <__aeabi_dmul>
 80099ec:	a36a      	add	r3, pc, #424	; (adr r3, 8009b98 <_dtoa_r+0x2d0>)
 80099ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f2:	f7f6 fbc5 	bl	8000180 <__adddf3>
 80099f6:	4606      	mov	r6, r0
 80099f8:	4620      	mov	r0, r4
 80099fa:	460f      	mov	r7, r1
 80099fc:	f7f6 fd0c 	bl	8000418 <__aeabi_i2d>
 8009a00:	a367      	add	r3, pc, #412	; (adr r3, 8009ba0 <_dtoa_r+0x2d8>)
 8009a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a06:	f7f6 fd71 	bl	80004ec <__aeabi_dmul>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4630      	mov	r0, r6
 8009a10:	4639      	mov	r1, r7
 8009a12:	f7f6 fbb5 	bl	8000180 <__adddf3>
 8009a16:	4606      	mov	r6, r0
 8009a18:	460f      	mov	r7, r1
 8009a1a:	f7f7 f817 	bl	8000a4c <__aeabi_d2iz>
 8009a1e:	2200      	movs	r2, #0
 8009a20:	4681      	mov	r9, r0
 8009a22:	2300      	movs	r3, #0
 8009a24:	4630      	mov	r0, r6
 8009a26:	4639      	mov	r1, r7
 8009a28:	f7f6 ffd2 	bl	80009d0 <__aeabi_dcmplt>
 8009a2c:	b148      	cbz	r0, 8009a42 <_dtoa_r+0x17a>
 8009a2e:	4648      	mov	r0, r9
 8009a30:	f7f6 fcf2 	bl	8000418 <__aeabi_i2d>
 8009a34:	4632      	mov	r2, r6
 8009a36:	463b      	mov	r3, r7
 8009a38:	f7f6 ffc0 	bl	80009bc <__aeabi_dcmpeq>
 8009a3c:	b908      	cbnz	r0, 8009a42 <_dtoa_r+0x17a>
 8009a3e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a42:	f1b9 0f16 	cmp.w	r9, #22
 8009a46:	d857      	bhi.n	8009af8 <_dtoa_r+0x230>
 8009a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a4c:	4b5d      	ldr	r3, [pc, #372]	; (8009bc4 <_dtoa_r+0x2fc>)
 8009a4e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	f7f6 ffbb 	bl	80009d0 <__aeabi_dcmplt>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d04e      	beq.n	8009afc <_dtoa_r+0x234>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a64:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009a68:	1b1c      	subs	r4, r3, r4
 8009a6a:	1e63      	subs	r3, r4, #1
 8009a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6e:	bf49      	itett	mi
 8009a70:	f1c4 0301 	rsbmi	r3, r4, #1
 8009a74:	2300      	movpl	r3, #0
 8009a76:	9306      	strmi	r3, [sp, #24]
 8009a78:	2300      	movmi	r3, #0
 8009a7a:	bf54      	ite	pl
 8009a7c:	9306      	strpl	r3, [sp, #24]
 8009a7e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009a80:	f1b9 0f00 	cmp.w	r9, #0
 8009a84:	db3c      	blt.n	8009b00 <_dtoa_r+0x238>
 8009a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a88:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009a8c:	444b      	add	r3, r9
 8009a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a90:	2300      	movs	r3, #0
 8009a92:	930a      	str	r3, [sp, #40]	; 0x28
 8009a94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a96:	2b09      	cmp	r3, #9
 8009a98:	d86c      	bhi.n	8009b74 <_dtoa_r+0x2ac>
 8009a9a:	2b05      	cmp	r3, #5
 8009a9c:	bfc4      	itt	gt
 8009a9e:	3b04      	subgt	r3, #4
 8009aa0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009aa2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009aa4:	bfc8      	it	gt
 8009aa6:	2400      	movgt	r4, #0
 8009aa8:	f1a3 0302 	sub.w	r3, r3, #2
 8009aac:	bfd8      	it	le
 8009aae:	2401      	movle	r4, #1
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	f200 808b 	bhi.w	8009bcc <_dtoa_r+0x304>
 8009ab6:	e8df f003 	tbb	[pc, r3]
 8009aba:	4f2d      	.short	0x4f2d
 8009abc:	5b4d      	.short	0x5b4d
 8009abe:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009ac2:	441c      	add	r4, r3
 8009ac4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009ac8:	2b20      	cmp	r3, #32
 8009aca:	bfc3      	ittte	gt
 8009acc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009ad0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009ad4:	fa09 f303 	lslgt.w	r3, r9, r3
 8009ad8:	f1c3 0320 	rsble	r3, r3, #32
 8009adc:	bfc6      	itte	gt
 8009ade:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009ae2:	4318      	orrgt	r0, r3
 8009ae4:	fa06 f003 	lslle.w	r0, r6, r3
 8009ae8:	f7f6 fc86 	bl	80003f8 <__aeabi_ui2d>
 8009aec:	2301      	movs	r3, #1
 8009aee:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009af2:	3c01      	subs	r4, #1
 8009af4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009af6:	e770      	b.n	80099da <_dtoa_r+0x112>
 8009af8:	2301      	movs	r3, #1
 8009afa:	e7b3      	b.n	8009a64 <_dtoa_r+0x19c>
 8009afc:	900f      	str	r0, [sp, #60]	; 0x3c
 8009afe:	e7b2      	b.n	8009a66 <_dtoa_r+0x19e>
 8009b00:	9b06      	ldr	r3, [sp, #24]
 8009b02:	eba3 0309 	sub.w	r3, r3, r9
 8009b06:	9306      	str	r3, [sp, #24]
 8009b08:	f1c9 0300 	rsb	r3, r9, #0
 8009b0c:	930a      	str	r3, [sp, #40]	; 0x28
 8009b0e:	2300      	movs	r3, #0
 8009b10:	930e      	str	r3, [sp, #56]	; 0x38
 8009b12:	e7bf      	b.n	8009a94 <_dtoa_r+0x1cc>
 8009b14:	2300      	movs	r3, #0
 8009b16:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	dc59      	bgt.n	8009bd2 <_dtoa_r+0x30a>
 8009b1e:	f04f 0b01 	mov.w	fp, #1
 8009b22:	465b      	mov	r3, fp
 8009b24:	f8cd b008 	str.w	fp, [sp, #8]
 8009b28:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009b30:	6042      	str	r2, [r0, #4]
 8009b32:	2204      	movs	r2, #4
 8009b34:	f102 0614 	add.w	r6, r2, #20
 8009b38:	429e      	cmp	r6, r3
 8009b3a:	6841      	ldr	r1, [r0, #4]
 8009b3c:	d94f      	bls.n	8009bde <_dtoa_r+0x316>
 8009b3e:	4628      	mov	r0, r5
 8009b40:	f001 f922 	bl	800ad88 <_Balloc>
 8009b44:	9008      	str	r0, [sp, #32]
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d14d      	bne.n	8009be6 <_dtoa_r+0x31e>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b50:	4b1d      	ldr	r3, [pc, #116]	; (8009bc8 <_dtoa_r+0x300>)
 8009b52:	e6cd      	b.n	80098f0 <_dtoa_r+0x28>
 8009b54:	2301      	movs	r3, #1
 8009b56:	e7de      	b.n	8009b16 <_dtoa_r+0x24e>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b5e:	eb09 0b03 	add.w	fp, r9, r3
 8009b62:	f10b 0301 	add.w	r3, fp, #1
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	9302      	str	r3, [sp, #8]
 8009b6a:	bfb8      	it	lt
 8009b6c:	2301      	movlt	r3, #1
 8009b6e:	e7dd      	b.n	8009b2c <_dtoa_r+0x264>
 8009b70:	2301      	movs	r3, #1
 8009b72:	e7f2      	b.n	8009b5a <_dtoa_r+0x292>
 8009b74:	2401      	movs	r4, #1
 8009b76:	2300      	movs	r3, #0
 8009b78:	940b      	str	r4, [sp, #44]	; 0x2c
 8009b7a:	9322      	str	r3, [sp, #136]	; 0x88
 8009b7c:	f04f 3bff 	mov.w	fp, #4294967295
 8009b80:	2200      	movs	r2, #0
 8009b82:	2312      	movs	r3, #18
 8009b84:	f8cd b008 	str.w	fp, [sp, #8]
 8009b88:	9223      	str	r2, [sp, #140]	; 0x8c
 8009b8a:	e7cf      	b.n	8009b2c <_dtoa_r+0x264>
 8009b8c:	f3af 8000 	nop.w
 8009b90:	636f4361 	.word	0x636f4361
 8009b94:	3fd287a7 	.word	0x3fd287a7
 8009b98:	8b60c8b3 	.word	0x8b60c8b3
 8009b9c:	3fc68a28 	.word	0x3fc68a28
 8009ba0:	509f79fb 	.word	0x509f79fb
 8009ba4:	3fd34413 	.word	0x3fd34413
 8009ba8:	0800c6b6 	.word	0x0800c6b6
 8009bac:	0800c6cd 	.word	0x0800c6cd
 8009bb0:	7ff00000 	.word	0x7ff00000
 8009bb4:	0800c6b2 	.word	0x0800c6b2
 8009bb8:	0800c6a9 	.word	0x0800c6a9
 8009bbc:	0800c529 	.word	0x0800c529
 8009bc0:	3ff80000 	.word	0x3ff80000
 8009bc4:	0800c848 	.word	0x0800c848
 8009bc8:	0800c72c 	.word	0x0800c72c
 8009bcc:	2301      	movs	r3, #1
 8009bce:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bd0:	e7d4      	b.n	8009b7c <_dtoa_r+0x2b4>
 8009bd2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009bd6:	465b      	mov	r3, fp
 8009bd8:	f8cd b008 	str.w	fp, [sp, #8]
 8009bdc:	e7a6      	b.n	8009b2c <_dtoa_r+0x264>
 8009bde:	3101      	adds	r1, #1
 8009be0:	6041      	str	r1, [r0, #4]
 8009be2:	0052      	lsls	r2, r2, #1
 8009be4:	e7a6      	b.n	8009b34 <_dtoa_r+0x26c>
 8009be6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009be8:	9a08      	ldr	r2, [sp, #32]
 8009bea:	601a      	str	r2, [r3, #0]
 8009bec:	9b02      	ldr	r3, [sp, #8]
 8009bee:	2b0e      	cmp	r3, #14
 8009bf0:	f200 80a8 	bhi.w	8009d44 <_dtoa_r+0x47c>
 8009bf4:	2c00      	cmp	r4, #0
 8009bf6:	f000 80a5 	beq.w	8009d44 <_dtoa_r+0x47c>
 8009bfa:	f1b9 0f00 	cmp.w	r9, #0
 8009bfe:	dd34      	ble.n	8009c6a <_dtoa_r+0x3a2>
 8009c00:	4a9a      	ldr	r2, [pc, #616]	; (8009e6c <_dtoa_r+0x5a4>)
 8009c02:	f009 030f 	and.w	r3, r9, #15
 8009c06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c0a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8009c0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009c16:	ea4f 1429 	mov.w	r4, r9, asr #4
 8009c1a:	d016      	beq.n	8009c4a <_dtoa_r+0x382>
 8009c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c20:	4b93      	ldr	r3, [pc, #588]	; (8009e70 <_dtoa_r+0x5a8>)
 8009c22:	2703      	movs	r7, #3
 8009c24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c28:	f7f6 fd8a 	bl	8000740 <__aeabi_ddiv>
 8009c2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c30:	f004 040f 	and.w	r4, r4, #15
 8009c34:	4e8e      	ldr	r6, [pc, #568]	; (8009e70 <_dtoa_r+0x5a8>)
 8009c36:	b954      	cbnz	r4, 8009c4e <_dtoa_r+0x386>
 8009c38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c40:	f7f6 fd7e 	bl	8000740 <__aeabi_ddiv>
 8009c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c48:	e029      	b.n	8009c9e <_dtoa_r+0x3d6>
 8009c4a:	2702      	movs	r7, #2
 8009c4c:	e7f2      	b.n	8009c34 <_dtoa_r+0x36c>
 8009c4e:	07e1      	lsls	r1, r4, #31
 8009c50:	d508      	bpl.n	8009c64 <_dtoa_r+0x39c>
 8009c52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c5a:	f7f6 fc47 	bl	80004ec <__aeabi_dmul>
 8009c5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c62:	3701      	adds	r7, #1
 8009c64:	1064      	asrs	r4, r4, #1
 8009c66:	3608      	adds	r6, #8
 8009c68:	e7e5      	b.n	8009c36 <_dtoa_r+0x36e>
 8009c6a:	f000 80a5 	beq.w	8009db8 <_dtoa_r+0x4f0>
 8009c6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c72:	f1c9 0400 	rsb	r4, r9, #0
 8009c76:	4b7d      	ldr	r3, [pc, #500]	; (8009e6c <_dtoa_r+0x5a4>)
 8009c78:	f004 020f 	and.w	r2, r4, #15
 8009c7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c84:	f7f6 fc32 	bl	80004ec <__aeabi_dmul>
 8009c88:	2702      	movs	r7, #2
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c90:	4e77      	ldr	r6, [pc, #476]	; (8009e70 <_dtoa_r+0x5a8>)
 8009c92:	1124      	asrs	r4, r4, #4
 8009c94:	2c00      	cmp	r4, #0
 8009c96:	f040 8084 	bne.w	8009da2 <_dtoa_r+0x4da>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1d2      	bne.n	8009c44 <_dtoa_r+0x37c>
 8009c9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 808b 	beq.w	8009dbc <_dtoa_r+0x4f4>
 8009ca6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009caa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009cae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	4b6f      	ldr	r3, [pc, #444]	; (8009e74 <_dtoa_r+0x5ac>)
 8009cb6:	f7f6 fe8b 	bl	80009d0 <__aeabi_dcmplt>
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	d07e      	beq.n	8009dbc <_dtoa_r+0x4f4>
 8009cbe:	9b02      	ldr	r3, [sp, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d07b      	beq.n	8009dbc <_dtoa_r+0x4f4>
 8009cc4:	f1bb 0f00 	cmp.w	fp, #0
 8009cc8:	dd38      	ble.n	8009d3c <_dtoa_r+0x474>
 8009cca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009cce:	2200      	movs	r2, #0
 8009cd0:	4b69      	ldr	r3, [pc, #420]	; (8009e78 <_dtoa_r+0x5b0>)
 8009cd2:	f7f6 fc0b 	bl	80004ec <__aeabi_dmul>
 8009cd6:	465c      	mov	r4, fp
 8009cd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cdc:	f109 38ff 	add.w	r8, r9, #4294967295
 8009ce0:	3701      	adds	r7, #1
 8009ce2:	4638      	mov	r0, r7
 8009ce4:	f7f6 fb98 	bl	8000418 <__aeabi_i2d>
 8009ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cec:	f7f6 fbfe 	bl	80004ec <__aeabi_dmul>
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	4b62      	ldr	r3, [pc, #392]	; (8009e7c <_dtoa_r+0x5b4>)
 8009cf4:	f7f6 fa44 	bl	8000180 <__adddf3>
 8009cf8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009cfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d00:	9611      	str	r6, [sp, #68]	; 0x44
 8009d02:	2c00      	cmp	r4, #0
 8009d04:	d15d      	bne.n	8009dc2 <_dtoa_r+0x4fa>
 8009d06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	4b5c      	ldr	r3, [pc, #368]	; (8009e80 <_dtoa_r+0x5b8>)
 8009d0e:	f7f6 fa35 	bl	800017c <__aeabi_dsub>
 8009d12:	4602      	mov	r2, r0
 8009d14:	460b      	mov	r3, r1
 8009d16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d1a:	4633      	mov	r3, r6
 8009d1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d1e:	f7f6 fe75 	bl	8000a0c <__aeabi_dcmpgt>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	f040 829e 	bne.w	800a264 <_dtoa_r+0x99c>
 8009d28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d2e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009d32:	f7f6 fe4d 	bl	80009d0 <__aeabi_dcmplt>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	f040 8292 	bne.w	800a260 <_dtoa_r+0x998>
 8009d3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009d40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009d44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f2c0 8153 	blt.w	8009ff2 <_dtoa_r+0x72a>
 8009d4c:	f1b9 0f0e 	cmp.w	r9, #14
 8009d50:	f300 814f 	bgt.w	8009ff2 <_dtoa_r+0x72a>
 8009d54:	4b45      	ldr	r3, [pc, #276]	; (8009e6c <_dtoa_r+0x5a4>)
 8009d56:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009d5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009d62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f280 80db 	bge.w	8009f20 <_dtoa_r+0x658>
 8009d6a:	9b02      	ldr	r3, [sp, #8]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f300 80d7 	bgt.w	8009f20 <_dtoa_r+0x658>
 8009d72:	f040 8274 	bne.w	800a25e <_dtoa_r+0x996>
 8009d76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	4b40      	ldr	r3, [pc, #256]	; (8009e80 <_dtoa_r+0x5b8>)
 8009d7e:	f7f6 fbb5 	bl	80004ec <__aeabi_dmul>
 8009d82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d86:	f7f6 fe37 	bl	80009f8 <__aeabi_dcmpge>
 8009d8a:	9c02      	ldr	r4, [sp, #8]
 8009d8c:	4626      	mov	r6, r4
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	f040 824a 	bne.w	800a228 <_dtoa_r+0x960>
 8009d94:	2331      	movs	r3, #49	; 0x31
 8009d96:	9f08      	ldr	r7, [sp, #32]
 8009d98:	f109 0901 	add.w	r9, r9, #1
 8009d9c:	f807 3b01 	strb.w	r3, [r7], #1
 8009da0:	e246      	b.n	800a230 <_dtoa_r+0x968>
 8009da2:	07e2      	lsls	r2, r4, #31
 8009da4:	d505      	bpl.n	8009db2 <_dtoa_r+0x4ea>
 8009da6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009daa:	f7f6 fb9f 	bl	80004ec <__aeabi_dmul>
 8009dae:	2301      	movs	r3, #1
 8009db0:	3701      	adds	r7, #1
 8009db2:	1064      	asrs	r4, r4, #1
 8009db4:	3608      	adds	r6, #8
 8009db6:	e76d      	b.n	8009c94 <_dtoa_r+0x3cc>
 8009db8:	2702      	movs	r7, #2
 8009dba:	e770      	b.n	8009c9e <_dtoa_r+0x3d6>
 8009dbc:	46c8      	mov	r8, r9
 8009dbe:	9c02      	ldr	r4, [sp, #8]
 8009dc0:	e78f      	b.n	8009ce2 <_dtoa_r+0x41a>
 8009dc2:	9908      	ldr	r1, [sp, #32]
 8009dc4:	4b29      	ldr	r3, [pc, #164]	; (8009e6c <_dtoa_r+0x5a4>)
 8009dc6:	4421      	add	r1, r4
 8009dc8:	9112      	str	r1, [sp, #72]	; 0x48
 8009dca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009dd0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009dd4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009dd8:	2900      	cmp	r1, #0
 8009dda:	d055      	beq.n	8009e88 <_dtoa_r+0x5c0>
 8009ddc:	2000      	movs	r0, #0
 8009dde:	4929      	ldr	r1, [pc, #164]	; (8009e84 <_dtoa_r+0x5bc>)
 8009de0:	f7f6 fcae 	bl	8000740 <__aeabi_ddiv>
 8009de4:	463b      	mov	r3, r7
 8009de6:	4632      	mov	r2, r6
 8009de8:	f7f6 f9c8 	bl	800017c <__aeabi_dsub>
 8009dec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009df0:	9f08      	ldr	r7, [sp, #32]
 8009df2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009df6:	f7f6 fe29 	bl	8000a4c <__aeabi_d2iz>
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	f7f6 fb0c 	bl	8000418 <__aeabi_i2d>
 8009e00:	4602      	mov	r2, r0
 8009e02:	460b      	mov	r3, r1
 8009e04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e08:	f7f6 f9b8 	bl	800017c <__aeabi_dsub>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	3430      	adds	r4, #48	; 0x30
 8009e12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e1a:	f807 4b01 	strb.w	r4, [r7], #1
 8009e1e:	f7f6 fdd7 	bl	80009d0 <__aeabi_dcmplt>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d174      	bne.n	8009f10 <_dtoa_r+0x648>
 8009e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	4911      	ldr	r1, [pc, #68]	; (8009e74 <_dtoa_r+0x5ac>)
 8009e2e:	f7f6 f9a5 	bl	800017c <__aeabi_dsub>
 8009e32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e36:	f7f6 fdcb 	bl	80009d0 <__aeabi_dcmplt>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	f040 80b6 	bne.w	8009fac <_dtoa_r+0x6e4>
 8009e40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e42:	429f      	cmp	r7, r3
 8009e44:	f43f af7a 	beq.w	8009d3c <_dtoa_r+0x474>
 8009e48:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	4b0a      	ldr	r3, [pc, #40]	; (8009e78 <_dtoa_r+0x5b0>)
 8009e50:	f7f6 fb4c 	bl	80004ec <__aeabi_dmul>
 8009e54:	2200      	movs	r2, #0
 8009e56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e5e:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <_dtoa_r+0x5b0>)
 8009e60:	f7f6 fb44 	bl	80004ec <__aeabi_dmul>
 8009e64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e68:	e7c3      	b.n	8009df2 <_dtoa_r+0x52a>
 8009e6a:	bf00      	nop
 8009e6c:	0800c848 	.word	0x0800c848
 8009e70:	0800c820 	.word	0x0800c820
 8009e74:	3ff00000 	.word	0x3ff00000
 8009e78:	40240000 	.word	0x40240000
 8009e7c:	401c0000 	.word	0x401c0000
 8009e80:	40140000 	.word	0x40140000
 8009e84:	3fe00000 	.word	0x3fe00000
 8009e88:	4630      	mov	r0, r6
 8009e8a:	4639      	mov	r1, r7
 8009e8c:	f7f6 fb2e 	bl	80004ec <__aeabi_dmul>
 8009e90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e92:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e96:	9c08      	ldr	r4, [sp, #32]
 8009e98:	9314      	str	r3, [sp, #80]	; 0x50
 8009e9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e9e:	f7f6 fdd5 	bl	8000a4c <__aeabi_d2iz>
 8009ea2:	9015      	str	r0, [sp, #84]	; 0x54
 8009ea4:	f7f6 fab8 	bl	8000418 <__aeabi_i2d>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	460b      	mov	r3, r1
 8009eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eb0:	f7f6 f964 	bl	800017c <__aeabi_dsub>
 8009eb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	3330      	adds	r3, #48	; 0x30
 8009eba:	f804 3b01 	strb.w	r3, [r4], #1
 8009ebe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ec0:	460f      	mov	r7, r1
 8009ec2:	429c      	cmp	r4, r3
 8009ec4:	f04f 0200 	mov.w	r2, #0
 8009ec8:	d124      	bne.n	8009f14 <_dtoa_r+0x64c>
 8009eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ece:	4bb3      	ldr	r3, [pc, #716]	; (800a19c <_dtoa_r+0x8d4>)
 8009ed0:	f7f6 f956 	bl	8000180 <__adddf3>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	4630      	mov	r0, r6
 8009eda:	4639      	mov	r1, r7
 8009edc:	f7f6 fd96 	bl	8000a0c <__aeabi_dcmpgt>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d162      	bne.n	8009faa <_dtoa_r+0x6e2>
 8009ee4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ee8:	2000      	movs	r0, #0
 8009eea:	49ac      	ldr	r1, [pc, #688]	; (800a19c <_dtoa_r+0x8d4>)
 8009eec:	f7f6 f946 	bl	800017c <__aeabi_dsub>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 fd6a 	bl	80009d0 <__aeabi_dcmplt>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	f43f af1d 	beq.w	8009d3c <_dtoa_r+0x474>
 8009f02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009f04:	1e7b      	subs	r3, r7, #1
 8009f06:	9314      	str	r3, [sp, #80]	; 0x50
 8009f08:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009f0c:	2b30      	cmp	r3, #48	; 0x30
 8009f0e:	d0f8      	beq.n	8009f02 <_dtoa_r+0x63a>
 8009f10:	46c1      	mov	r9, r8
 8009f12:	e03a      	b.n	8009f8a <_dtoa_r+0x6c2>
 8009f14:	4ba2      	ldr	r3, [pc, #648]	; (800a1a0 <_dtoa_r+0x8d8>)
 8009f16:	f7f6 fae9 	bl	80004ec <__aeabi_dmul>
 8009f1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f1e:	e7bc      	b.n	8009e9a <_dtoa_r+0x5d2>
 8009f20:	9f08      	ldr	r7, [sp, #32]
 8009f22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f2a:	f7f6 fc09 	bl	8000740 <__aeabi_ddiv>
 8009f2e:	f7f6 fd8d 	bl	8000a4c <__aeabi_d2iz>
 8009f32:	4604      	mov	r4, r0
 8009f34:	f7f6 fa70 	bl	8000418 <__aeabi_i2d>
 8009f38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f3c:	f7f6 fad6 	bl	80004ec <__aeabi_dmul>
 8009f40:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009f44:	460b      	mov	r3, r1
 8009f46:	4602      	mov	r2, r0
 8009f48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f4c:	f7f6 f916 	bl	800017c <__aeabi_dsub>
 8009f50:	f807 6b01 	strb.w	r6, [r7], #1
 8009f54:	9e08      	ldr	r6, [sp, #32]
 8009f56:	9b02      	ldr	r3, [sp, #8]
 8009f58:	1bbe      	subs	r6, r7, r6
 8009f5a:	42b3      	cmp	r3, r6
 8009f5c:	d13a      	bne.n	8009fd4 <_dtoa_r+0x70c>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	f7f6 f90d 	bl	8000180 <__adddf3>
 8009f66:	4602      	mov	r2, r0
 8009f68:	460b      	mov	r3, r1
 8009f6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f72:	f7f6 fd4b 	bl	8000a0c <__aeabi_dcmpgt>
 8009f76:	bb58      	cbnz	r0, 8009fd0 <_dtoa_r+0x708>
 8009f78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f80:	f7f6 fd1c 	bl	80009bc <__aeabi_dcmpeq>
 8009f84:	b108      	cbz	r0, 8009f8a <_dtoa_r+0x6c2>
 8009f86:	07e1      	lsls	r1, r4, #31
 8009f88:	d422      	bmi.n	8009fd0 <_dtoa_r+0x708>
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	4651      	mov	r1, sl
 8009f8e:	f000 ff3b 	bl	800ae08 <_Bfree>
 8009f92:	2300      	movs	r3, #0
 8009f94:	703b      	strb	r3, [r7, #0]
 8009f96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009f98:	f109 0001 	add.w	r0, r9, #1
 8009f9c:	6018      	str	r0, [r3, #0]
 8009f9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f43f acdf 	beq.w	8009964 <_dtoa_r+0x9c>
 8009fa6:	601f      	str	r7, [r3, #0]
 8009fa8:	e4dc      	b.n	8009964 <_dtoa_r+0x9c>
 8009faa:	4627      	mov	r7, r4
 8009fac:	463b      	mov	r3, r7
 8009fae:	461f      	mov	r7, r3
 8009fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fb4:	2a39      	cmp	r2, #57	; 0x39
 8009fb6:	d107      	bne.n	8009fc8 <_dtoa_r+0x700>
 8009fb8:	9a08      	ldr	r2, [sp, #32]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d1f7      	bne.n	8009fae <_dtoa_r+0x6e6>
 8009fbe:	2230      	movs	r2, #48	; 0x30
 8009fc0:	9908      	ldr	r1, [sp, #32]
 8009fc2:	f108 0801 	add.w	r8, r8, #1
 8009fc6:	700a      	strb	r2, [r1, #0]
 8009fc8:	781a      	ldrb	r2, [r3, #0]
 8009fca:	3201      	adds	r2, #1
 8009fcc:	701a      	strb	r2, [r3, #0]
 8009fce:	e79f      	b.n	8009f10 <_dtoa_r+0x648>
 8009fd0:	46c8      	mov	r8, r9
 8009fd2:	e7eb      	b.n	8009fac <_dtoa_r+0x6e4>
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	4b72      	ldr	r3, [pc, #456]	; (800a1a0 <_dtoa_r+0x8d8>)
 8009fd8:	f7f6 fa88 	bl	80004ec <__aeabi_dmul>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f7f6 fce8 	bl	80009bc <__aeabi_dcmpeq>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d098      	beq.n	8009f22 <_dtoa_r+0x65a>
 8009ff0:	e7cb      	b.n	8009f8a <_dtoa_r+0x6c2>
 8009ff2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ff4:	2a00      	cmp	r2, #0
 8009ff6:	f000 80cd 	beq.w	800a194 <_dtoa_r+0x8cc>
 8009ffa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009ffc:	2a01      	cmp	r2, #1
 8009ffe:	f300 80af 	bgt.w	800a160 <_dtoa_r+0x898>
 800a002:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a004:	2a00      	cmp	r2, #0
 800a006:	f000 80a7 	beq.w	800a158 <_dtoa_r+0x890>
 800a00a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a00e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a010:	9f06      	ldr	r7, [sp, #24]
 800a012:	9a06      	ldr	r2, [sp, #24]
 800a014:	2101      	movs	r1, #1
 800a016:	441a      	add	r2, r3
 800a018:	9206      	str	r2, [sp, #24]
 800a01a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a01c:	4628      	mov	r0, r5
 800a01e:	441a      	add	r2, r3
 800a020:	9209      	str	r2, [sp, #36]	; 0x24
 800a022:	f000 fff5 	bl	800b010 <__i2b>
 800a026:	4606      	mov	r6, r0
 800a028:	2f00      	cmp	r7, #0
 800a02a:	dd0c      	ble.n	800a046 <_dtoa_r+0x77e>
 800a02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02e:	2b00      	cmp	r3, #0
 800a030:	dd09      	ble.n	800a046 <_dtoa_r+0x77e>
 800a032:	42bb      	cmp	r3, r7
 800a034:	bfa8      	it	ge
 800a036:	463b      	movge	r3, r7
 800a038:	9a06      	ldr	r2, [sp, #24]
 800a03a:	1aff      	subs	r7, r7, r3
 800a03c:	1ad2      	subs	r2, r2, r3
 800a03e:	9206      	str	r2, [sp, #24]
 800a040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	9309      	str	r3, [sp, #36]	; 0x24
 800a046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a048:	b1f3      	cbz	r3, 800a088 <_dtoa_r+0x7c0>
 800a04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 80a9 	beq.w	800a1a4 <_dtoa_r+0x8dc>
 800a052:	2c00      	cmp	r4, #0
 800a054:	dd10      	ble.n	800a078 <_dtoa_r+0x7b0>
 800a056:	4631      	mov	r1, r6
 800a058:	4622      	mov	r2, r4
 800a05a:	4628      	mov	r0, r5
 800a05c:	f001 f892 	bl	800b184 <__pow5mult>
 800a060:	4652      	mov	r2, sl
 800a062:	4601      	mov	r1, r0
 800a064:	4606      	mov	r6, r0
 800a066:	4628      	mov	r0, r5
 800a068:	f000 ffe8 	bl	800b03c <__multiply>
 800a06c:	4680      	mov	r8, r0
 800a06e:	4651      	mov	r1, sl
 800a070:	4628      	mov	r0, r5
 800a072:	f000 fec9 	bl	800ae08 <_Bfree>
 800a076:	46c2      	mov	sl, r8
 800a078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a07a:	1b1a      	subs	r2, r3, r4
 800a07c:	d004      	beq.n	800a088 <_dtoa_r+0x7c0>
 800a07e:	4651      	mov	r1, sl
 800a080:	4628      	mov	r0, r5
 800a082:	f001 f87f 	bl	800b184 <__pow5mult>
 800a086:	4682      	mov	sl, r0
 800a088:	2101      	movs	r1, #1
 800a08a:	4628      	mov	r0, r5
 800a08c:	f000 ffc0 	bl	800b010 <__i2b>
 800a090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a092:	4604      	mov	r4, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	f340 8087 	ble.w	800a1a8 <_dtoa_r+0x8e0>
 800a09a:	461a      	mov	r2, r3
 800a09c:	4601      	mov	r1, r0
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f001 f870 	bl	800b184 <__pow5mult>
 800a0a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	f340 8080 	ble.w	800a1ae <_dtoa_r+0x8e6>
 800a0ae:	f04f 0800 	mov.w	r8, #0
 800a0b2:	6923      	ldr	r3, [r4, #16]
 800a0b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0b8:	6918      	ldr	r0, [r3, #16]
 800a0ba:	f000 ff5b 	bl	800af74 <__hi0bits>
 800a0be:	f1c0 0020 	rsb	r0, r0, #32
 800a0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c4:	4418      	add	r0, r3
 800a0c6:	f010 001f 	ands.w	r0, r0, #31
 800a0ca:	f000 8092 	beq.w	800a1f2 <_dtoa_r+0x92a>
 800a0ce:	f1c0 0320 	rsb	r3, r0, #32
 800a0d2:	2b04      	cmp	r3, #4
 800a0d4:	f340 808a 	ble.w	800a1ec <_dtoa_r+0x924>
 800a0d8:	f1c0 001c 	rsb	r0, r0, #28
 800a0dc:	9b06      	ldr	r3, [sp, #24]
 800a0de:	4407      	add	r7, r0
 800a0e0:	4403      	add	r3, r0
 800a0e2:	9306      	str	r3, [sp, #24]
 800a0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e6:	4403      	add	r3, r0
 800a0e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ea:	9b06      	ldr	r3, [sp, #24]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dd05      	ble.n	800a0fc <_dtoa_r+0x834>
 800a0f0:	4651      	mov	r1, sl
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f001 f89f 	bl	800b238 <__lshift>
 800a0fa:	4682      	mov	sl, r0
 800a0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	dd05      	ble.n	800a10e <_dtoa_r+0x846>
 800a102:	4621      	mov	r1, r4
 800a104:	461a      	mov	r2, r3
 800a106:	4628      	mov	r0, r5
 800a108:	f001 f896 	bl	800b238 <__lshift>
 800a10c:	4604      	mov	r4, r0
 800a10e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a110:	2b00      	cmp	r3, #0
 800a112:	d070      	beq.n	800a1f6 <_dtoa_r+0x92e>
 800a114:	4621      	mov	r1, r4
 800a116:	4650      	mov	r0, sl
 800a118:	f001 f8fa 	bl	800b310 <__mcmp>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	da6a      	bge.n	800a1f6 <_dtoa_r+0x92e>
 800a120:	2300      	movs	r3, #0
 800a122:	4651      	mov	r1, sl
 800a124:	220a      	movs	r2, #10
 800a126:	4628      	mov	r0, r5
 800a128:	f000 fe90 	bl	800ae4c <__multadd>
 800a12c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a12e:	4682      	mov	sl, r0
 800a130:	f109 39ff 	add.w	r9, r9, #4294967295
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 8193 	beq.w	800a460 <_dtoa_r+0xb98>
 800a13a:	4631      	mov	r1, r6
 800a13c:	2300      	movs	r3, #0
 800a13e:	220a      	movs	r2, #10
 800a140:	4628      	mov	r0, r5
 800a142:	f000 fe83 	bl	800ae4c <__multadd>
 800a146:	f1bb 0f00 	cmp.w	fp, #0
 800a14a:	4606      	mov	r6, r0
 800a14c:	f300 8093 	bgt.w	800a276 <_dtoa_r+0x9ae>
 800a150:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a152:	2b02      	cmp	r3, #2
 800a154:	dc57      	bgt.n	800a206 <_dtoa_r+0x93e>
 800a156:	e08e      	b.n	800a276 <_dtoa_r+0x9ae>
 800a158:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a15a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a15e:	e756      	b.n	800a00e <_dtoa_r+0x746>
 800a160:	9b02      	ldr	r3, [sp, #8]
 800a162:	1e5c      	subs	r4, r3, #1
 800a164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a166:	42a3      	cmp	r3, r4
 800a168:	bfb7      	itett	lt
 800a16a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a16c:	1b1c      	subge	r4, r3, r4
 800a16e:	1ae2      	sublt	r2, r4, r3
 800a170:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a172:	bfbe      	ittt	lt
 800a174:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a176:	189b      	addlt	r3, r3, r2
 800a178:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a17a:	9b02      	ldr	r3, [sp, #8]
 800a17c:	bfb8      	it	lt
 800a17e:	2400      	movlt	r4, #0
 800a180:	2b00      	cmp	r3, #0
 800a182:	bfbb      	ittet	lt
 800a184:	9b06      	ldrlt	r3, [sp, #24]
 800a186:	9a02      	ldrlt	r2, [sp, #8]
 800a188:	9f06      	ldrge	r7, [sp, #24]
 800a18a:	1a9f      	sublt	r7, r3, r2
 800a18c:	bfac      	ite	ge
 800a18e:	9b02      	ldrge	r3, [sp, #8]
 800a190:	2300      	movlt	r3, #0
 800a192:	e73e      	b.n	800a012 <_dtoa_r+0x74a>
 800a194:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a196:	9f06      	ldr	r7, [sp, #24]
 800a198:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a19a:	e745      	b.n	800a028 <_dtoa_r+0x760>
 800a19c:	3fe00000 	.word	0x3fe00000
 800a1a0:	40240000 	.word	0x40240000
 800a1a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1a6:	e76a      	b.n	800a07e <_dtoa_r+0x7b6>
 800a1a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	dc19      	bgt.n	800a1e2 <_dtoa_r+0x91a>
 800a1ae:	9b04      	ldr	r3, [sp, #16]
 800a1b0:	b9bb      	cbnz	r3, 800a1e2 <_dtoa_r+0x91a>
 800a1b2:	9b05      	ldr	r3, [sp, #20]
 800a1b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1b8:	b99b      	cbnz	r3, 800a1e2 <_dtoa_r+0x91a>
 800a1ba:	9b05      	ldr	r3, [sp, #20]
 800a1bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1c0:	0d1b      	lsrs	r3, r3, #20
 800a1c2:	051b      	lsls	r3, r3, #20
 800a1c4:	b183      	cbz	r3, 800a1e8 <_dtoa_r+0x920>
 800a1c6:	f04f 0801 	mov.w	r8, #1
 800a1ca:	9b06      	ldr	r3, [sp, #24]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	9306      	str	r3, [sp, #24]
 800a1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f47f af6a 	bne.w	800a0b2 <_dtoa_r+0x7ea>
 800a1de:	2001      	movs	r0, #1
 800a1e0:	e76f      	b.n	800a0c2 <_dtoa_r+0x7fa>
 800a1e2:	f04f 0800 	mov.w	r8, #0
 800a1e6:	e7f6      	b.n	800a1d6 <_dtoa_r+0x90e>
 800a1e8:	4698      	mov	r8, r3
 800a1ea:	e7f4      	b.n	800a1d6 <_dtoa_r+0x90e>
 800a1ec:	f43f af7d 	beq.w	800a0ea <_dtoa_r+0x822>
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	301c      	adds	r0, #28
 800a1f4:	e772      	b.n	800a0dc <_dtoa_r+0x814>
 800a1f6:	9b02      	ldr	r3, [sp, #8]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	dc36      	bgt.n	800a26a <_dtoa_r+0x9a2>
 800a1fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	dd33      	ble.n	800a26a <_dtoa_r+0x9a2>
 800a202:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a206:	f1bb 0f00 	cmp.w	fp, #0
 800a20a:	d10d      	bne.n	800a228 <_dtoa_r+0x960>
 800a20c:	4621      	mov	r1, r4
 800a20e:	465b      	mov	r3, fp
 800a210:	2205      	movs	r2, #5
 800a212:	4628      	mov	r0, r5
 800a214:	f000 fe1a 	bl	800ae4c <__multadd>
 800a218:	4601      	mov	r1, r0
 800a21a:	4604      	mov	r4, r0
 800a21c:	4650      	mov	r0, sl
 800a21e:	f001 f877 	bl	800b310 <__mcmp>
 800a222:	2800      	cmp	r0, #0
 800a224:	f73f adb6 	bgt.w	8009d94 <_dtoa_r+0x4cc>
 800a228:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a22a:	9f08      	ldr	r7, [sp, #32]
 800a22c:	ea6f 0903 	mvn.w	r9, r3
 800a230:	f04f 0800 	mov.w	r8, #0
 800a234:	4621      	mov	r1, r4
 800a236:	4628      	mov	r0, r5
 800a238:	f000 fde6 	bl	800ae08 <_Bfree>
 800a23c:	2e00      	cmp	r6, #0
 800a23e:	f43f aea4 	beq.w	8009f8a <_dtoa_r+0x6c2>
 800a242:	f1b8 0f00 	cmp.w	r8, #0
 800a246:	d005      	beq.n	800a254 <_dtoa_r+0x98c>
 800a248:	45b0      	cmp	r8, r6
 800a24a:	d003      	beq.n	800a254 <_dtoa_r+0x98c>
 800a24c:	4641      	mov	r1, r8
 800a24e:	4628      	mov	r0, r5
 800a250:	f000 fdda 	bl	800ae08 <_Bfree>
 800a254:	4631      	mov	r1, r6
 800a256:	4628      	mov	r0, r5
 800a258:	f000 fdd6 	bl	800ae08 <_Bfree>
 800a25c:	e695      	b.n	8009f8a <_dtoa_r+0x6c2>
 800a25e:	2400      	movs	r4, #0
 800a260:	4626      	mov	r6, r4
 800a262:	e7e1      	b.n	800a228 <_dtoa_r+0x960>
 800a264:	46c1      	mov	r9, r8
 800a266:	4626      	mov	r6, r4
 800a268:	e594      	b.n	8009d94 <_dtoa_r+0x4cc>
 800a26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a26c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 80fc 	beq.w	800a46e <_dtoa_r+0xba6>
 800a276:	2f00      	cmp	r7, #0
 800a278:	dd05      	ble.n	800a286 <_dtoa_r+0x9be>
 800a27a:	4631      	mov	r1, r6
 800a27c:	463a      	mov	r2, r7
 800a27e:	4628      	mov	r0, r5
 800a280:	f000 ffda 	bl	800b238 <__lshift>
 800a284:	4606      	mov	r6, r0
 800a286:	f1b8 0f00 	cmp.w	r8, #0
 800a28a:	d05c      	beq.n	800a346 <_dtoa_r+0xa7e>
 800a28c:	4628      	mov	r0, r5
 800a28e:	6871      	ldr	r1, [r6, #4]
 800a290:	f000 fd7a 	bl	800ad88 <_Balloc>
 800a294:	4607      	mov	r7, r0
 800a296:	b928      	cbnz	r0, 800a2a4 <_dtoa_r+0x9dc>
 800a298:	4602      	mov	r2, r0
 800a29a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a29e:	4b7e      	ldr	r3, [pc, #504]	; (800a498 <_dtoa_r+0xbd0>)
 800a2a0:	f7ff bb26 	b.w	80098f0 <_dtoa_r+0x28>
 800a2a4:	6932      	ldr	r2, [r6, #16]
 800a2a6:	f106 010c 	add.w	r1, r6, #12
 800a2aa:	3202      	adds	r2, #2
 800a2ac:	0092      	lsls	r2, r2, #2
 800a2ae:	300c      	adds	r0, #12
 800a2b0:	f7fd fbef 	bl	8007a92 <memcpy>
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	f000 ffbd 	bl	800b238 <__lshift>
 800a2be:	46b0      	mov	r8, r6
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	9b08      	ldr	r3, [sp, #32]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	9302      	str	r3, [sp, #8]
 800a2c8:	9b08      	ldr	r3, [sp, #32]
 800a2ca:	445b      	add	r3, fp
 800a2cc:	930a      	str	r3, [sp, #40]	; 0x28
 800a2ce:	9b04      	ldr	r3, [sp, #16]
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d6:	9b02      	ldr	r3, [sp, #8]
 800a2d8:	4621      	mov	r1, r4
 800a2da:	4650      	mov	r0, sl
 800a2dc:	f103 3bff 	add.w	fp, r3, #4294967295
 800a2e0:	f7ff fa62 	bl	80097a8 <quorem>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	4641      	mov	r1, r8
 800a2e8:	3330      	adds	r3, #48	; 0x30
 800a2ea:	9004      	str	r0, [sp, #16]
 800a2ec:	4650      	mov	r0, sl
 800a2ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2f0:	f001 f80e 	bl	800b310 <__mcmp>
 800a2f4:	4632      	mov	r2, r6
 800a2f6:	9006      	str	r0, [sp, #24]
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f001 f824 	bl	800b348 <__mdiff>
 800a300:	68c2      	ldr	r2, [r0, #12]
 800a302:	4607      	mov	r7, r0
 800a304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a306:	bb02      	cbnz	r2, 800a34a <_dtoa_r+0xa82>
 800a308:	4601      	mov	r1, r0
 800a30a:	4650      	mov	r0, sl
 800a30c:	f001 f800 	bl	800b310 <__mcmp>
 800a310:	4602      	mov	r2, r0
 800a312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a314:	4639      	mov	r1, r7
 800a316:	4628      	mov	r0, r5
 800a318:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a31c:	f000 fd74 	bl	800ae08 <_Bfree>
 800a320:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a322:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a324:	9f02      	ldr	r7, [sp, #8]
 800a326:	ea43 0102 	orr.w	r1, r3, r2
 800a32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32c:	430b      	orrs	r3, r1
 800a32e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a330:	d10d      	bne.n	800a34e <_dtoa_r+0xa86>
 800a332:	2b39      	cmp	r3, #57	; 0x39
 800a334:	d027      	beq.n	800a386 <_dtoa_r+0xabe>
 800a336:	9a06      	ldr	r2, [sp, #24]
 800a338:	2a00      	cmp	r2, #0
 800a33a:	dd01      	ble.n	800a340 <_dtoa_r+0xa78>
 800a33c:	9b04      	ldr	r3, [sp, #16]
 800a33e:	3331      	adds	r3, #49	; 0x31
 800a340:	f88b 3000 	strb.w	r3, [fp]
 800a344:	e776      	b.n	800a234 <_dtoa_r+0x96c>
 800a346:	4630      	mov	r0, r6
 800a348:	e7b9      	b.n	800a2be <_dtoa_r+0x9f6>
 800a34a:	2201      	movs	r2, #1
 800a34c:	e7e2      	b.n	800a314 <_dtoa_r+0xa4c>
 800a34e:	9906      	ldr	r1, [sp, #24]
 800a350:	2900      	cmp	r1, #0
 800a352:	db04      	blt.n	800a35e <_dtoa_r+0xa96>
 800a354:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a356:	4301      	orrs	r1, r0
 800a358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a35a:	4301      	orrs	r1, r0
 800a35c:	d120      	bne.n	800a3a0 <_dtoa_r+0xad8>
 800a35e:	2a00      	cmp	r2, #0
 800a360:	ddee      	ble.n	800a340 <_dtoa_r+0xa78>
 800a362:	4651      	mov	r1, sl
 800a364:	2201      	movs	r2, #1
 800a366:	4628      	mov	r0, r5
 800a368:	9302      	str	r3, [sp, #8]
 800a36a:	f000 ff65 	bl	800b238 <__lshift>
 800a36e:	4621      	mov	r1, r4
 800a370:	4682      	mov	sl, r0
 800a372:	f000 ffcd 	bl	800b310 <__mcmp>
 800a376:	2800      	cmp	r0, #0
 800a378:	9b02      	ldr	r3, [sp, #8]
 800a37a:	dc02      	bgt.n	800a382 <_dtoa_r+0xaba>
 800a37c:	d1e0      	bne.n	800a340 <_dtoa_r+0xa78>
 800a37e:	07da      	lsls	r2, r3, #31
 800a380:	d5de      	bpl.n	800a340 <_dtoa_r+0xa78>
 800a382:	2b39      	cmp	r3, #57	; 0x39
 800a384:	d1da      	bne.n	800a33c <_dtoa_r+0xa74>
 800a386:	2339      	movs	r3, #57	; 0x39
 800a388:	f88b 3000 	strb.w	r3, [fp]
 800a38c:	463b      	mov	r3, r7
 800a38e:	461f      	mov	r7, r3
 800a390:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a394:	3b01      	subs	r3, #1
 800a396:	2a39      	cmp	r2, #57	; 0x39
 800a398:	d050      	beq.n	800a43c <_dtoa_r+0xb74>
 800a39a:	3201      	adds	r2, #1
 800a39c:	701a      	strb	r2, [r3, #0]
 800a39e:	e749      	b.n	800a234 <_dtoa_r+0x96c>
 800a3a0:	2a00      	cmp	r2, #0
 800a3a2:	dd03      	ble.n	800a3ac <_dtoa_r+0xae4>
 800a3a4:	2b39      	cmp	r3, #57	; 0x39
 800a3a6:	d0ee      	beq.n	800a386 <_dtoa_r+0xabe>
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	e7c9      	b.n	800a340 <_dtoa_r+0xa78>
 800a3ac:	9a02      	ldr	r2, [sp, #8]
 800a3ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a3b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a3b4:	428a      	cmp	r2, r1
 800a3b6:	d02a      	beq.n	800a40e <_dtoa_r+0xb46>
 800a3b8:	4651      	mov	r1, sl
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	220a      	movs	r2, #10
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f000 fd44 	bl	800ae4c <__multadd>
 800a3c4:	45b0      	cmp	r8, r6
 800a3c6:	4682      	mov	sl, r0
 800a3c8:	f04f 0300 	mov.w	r3, #0
 800a3cc:	f04f 020a 	mov.w	r2, #10
 800a3d0:	4641      	mov	r1, r8
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	d107      	bne.n	800a3e6 <_dtoa_r+0xb1e>
 800a3d6:	f000 fd39 	bl	800ae4c <__multadd>
 800a3da:	4680      	mov	r8, r0
 800a3dc:	4606      	mov	r6, r0
 800a3de:	9b02      	ldr	r3, [sp, #8]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	9302      	str	r3, [sp, #8]
 800a3e4:	e777      	b.n	800a2d6 <_dtoa_r+0xa0e>
 800a3e6:	f000 fd31 	bl	800ae4c <__multadd>
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	4680      	mov	r8, r0
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	220a      	movs	r2, #10
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f000 fd2a 	bl	800ae4c <__multadd>
 800a3f8:	4606      	mov	r6, r0
 800a3fa:	e7f0      	b.n	800a3de <_dtoa_r+0xb16>
 800a3fc:	f1bb 0f00 	cmp.w	fp, #0
 800a400:	bfcc      	ite	gt
 800a402:	465f      	movgt	r7, fp
 800a404:	2701      	movle	r7, #1
 800a406:	f04f 0800 	mov.w	r8, #0
 800a40a:	9a08      	ldr	r2, [sp, #32]
 800a40c:	4417      	add	r7, r2
 800a40e:	4651      	mov	r1, sl
 800a410:	2201      	movs	r2, #1
 800a412:	4628      	mov	r0, r5
 800a414:	9302      	str	r3, [sp, #8]
 800a416:	f000 ff0f 	bl	800b238 <__lshift>
 800a41a:	4621      	mov	r1, r4
 800a41c:	4682      	mov	sl, r0
 800a41e:	f000 ff77 	bl	800b310 <__mcmp>
 800a422:	2800      	cmp	r0, #0
 800a424:	dcb2      	bgt.n	800a38c <_dtoa_r+0xac4>
 800a426:	d102      	bne.n	800a42e <_dtoa_r+0xb66>
 800a428:	9b02      	ldr	r3, [sp, #8]
 800a42a:	07db      	lsls	r3, r3, #31
 800a42c:	d4ae      	bmi.n	800a38c <_dtoa_r+0xac4>
 800a42e:	463b      	mov	r3, r7
 800a430:	461f      	mov	r7, r3
 800a432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a436:	2a30      	cmp	r2, #48	; 0x30
 800a438:	d0fa      	beq.n	800a430 <_dtoa_r+0xb68>
 800a43a:	e6fb      	b.n	800a234 <_dtoa_r+0x96c>
 800a43c:	9a08      	ldr	r2, [sp, #32]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d1a5      	bne.n	800a38e <_dtoa_r+0xac6>
 800a442:	2331      	movs	r3, #49	; 0x31
 800a444:	f109 0901 	add.w	r9, r9, #1
 800a448:	7013      	strb	r3, [r2, #0]
 800a44a:	e6f3      	b.n	800a234 <_dtoa_r+0x96c>
 800a44c:	4b13      	ldr	r3, [pc, #76]	; (800a49c <_dtoa_r+0xbd4>)
 800a44e:	f7ff baa7 	b.w	80099a0 <_dtoa_r+0xd8>
 800a452:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a454:	2b00      	cmp	r3, #0
 800a456:	f47f aa80 	bne.w	800995a <_dtoa_r+0x92>
 800a45a:	4b11      	ldr	r3, [pc, #68]	; (800a4a0 <_dtoa_r+0xbd8>)
 800a45c:	f7ff baa0 	b.w	80099a0 <_dtoa_r+0xd8>
 800a460:	f1bb 0f00 	cmp.w	fp, #0
 800a464:	dc03      	bgt.n	800a46e <_dtoa_r+0xba6>
 800a466:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a468:	2b02      	cmp	r3, #2
 800a46a:	f73f aecc 	bgt.w	800a206 <_dtoa_r+0x93e>
 800a46e:	9f08      	ldr	r7, [sp, #32]
 800a470:	4621      	mov	r1, r4
 800a472:	4650      	mov	r0, sl
 800a474:	f7ff f998 	bl	80097a8 <quorem>
 800a478:	9a08      	ldr	r2, [sp, #32]
 800a47a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a47e:	f807 3b01 	strb.w	r3, [r7], #1
 800a482:	1aba      	subs	r2, r7, r2
 800a484:	4593      	cmp	fp, r2
 800a486:	ddb9      	ble.n	800a3fc <_dtoa_r+0xb34>
 800a488:	4651      	mov	r1, sl
 800a48a:	2300      	movs	r3, #0
 800a48c:	220a      	movs	r2, #10
 800a48e:	4628      	mov	r0, r5
 800a490:	f000 fcdc 	bl	800ae4c <__multadd>
 800a494:	4682      	mov	sl, r0
 800a496:	e7eb      	b.n	800a470 <_dtoa_r+0xba8>
 800a498:	0800c72c 	.word	0x0800c72c
 800a49c:	0800c528 	.word	0x0800c528
 800a4a0:	0800c6a9 	.word	0x0800c6a9

0800a4a4 <__sflush_r>:
 800a4a4:	898a      	ldrh	r2, [r1, #12]
 800a4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	0710      	lsls	r0, r2, #28
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	d458      	bmi.n	800a564 <__sflush_r+0xc0>
 800a4b2:	684b      	ldr	r3, [r1, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	dc05      	bgt.n	800a4c4 <__sflush_r+0x20>
 800a4b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	dc02      	bgt.n	800a4c4 <__sflush_r+0x20>
 800a4be:	2000      	movs	r0, #0
 800a4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4c6:	2e00      	cmp	r6, #0
 800a4c8:	d0f9      	beq.n	800a4be <__sflush_r+0x1a>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4d0:	682f      	ldr	r7, [r5, #0]
 800a4d2:	602b      	str	r3, [r5, #0]
 800a4d4:	d032      	beq.n	800a53c <__sflush_r+0x98>
 800a4d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4d8:	89a3      	ldrh	r3, [r4, #12]
 800a4da:	075a      	lsls	r2, r3, #29
 800a4dc:	d505      	bpl.n	800a4ea <__sflush_r+0x46>
 800a4de:	6863      	ldr	r3, [r4, #4]
 800a4e0:	1ac0      	subs	r0, r0, r3
 800a4e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4e4:	b10b      	cbz	r3, 800a4ea <__sflush_r+0x46>
 800a4e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4e8:	1ac0      	subs	r0, r0, r3
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	6a21      	ldr	r1, [r4, #32]
 800a4f4:	47b0      	blx	r6
 800a4f6:	1c43      	adds	r3, r0, #1
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	d106      	bne.n	800a50a <__sflush_r+0x66>
 800a4fc:	6829      	ldr	r1, [r5, #0]
 800a4fe:	291d      	cmp	r1, #29
 800a500:	d82c      	bhi.n	800a55c <__sflush_r+0xb8>
 800a502:	4a2a      	ldr	r2, [pc, #168]	; (800a5ac <__sflush_r+0x108>)
 800a504:	40ca      	lsrs	r2, r1
 800a506:	07d6      	lsls	r6, r2, #31
 800a508:	d528      	bpl.n	800a55c <__sflush_r+0xb8>
 800a50a:	2200      	movs	r2, #0
 800a50c:	6062      	str	r2, [r4, #4]
 800a50e:	6922      	ldr	r2, [r4, #16]
 800a510:	04d9      	lsls	r1, r3, #19
 800a512:	6022      	str	r2, [r4, #0]
 800a514:	d504      	bpl.n	800a520 <__sflush_r+0x7c>
 800a516:	1c42      	adds	r2, r0, #1
 800a518:	d101      	bne.n	800a51e <__sflush_r+0x7a>
 800a51a:	682b      	ldr	r3, [r5, #0]
 800a51c:	b903      	cbnz	r3, 800a520 <__sflush_r+0x7c>
 800a51e:	6560      	str	r0, [r4, #84]	; 0x54
 800a520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a522:	602f      	str	r7, [r5, #0]
 800a524:	2900      	cmp	r1, #0
 800a526:	d0ca      	beq.n	800a4be <__sflush_r+0x1a>
 800a528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a52c:	4299      	cmp	r1, r3
 800a52e:	d002      	beq.n	800a536 <__sflush_r+0x92>
 800a530:	4628      	mov	r0, r5
 800a532:	f001 f8ef 	bl	800b714 <_free_r>
 800a536:	2000      	movs	r0, #0
 800a538:	6360      	str	r0, [r4, #52]	; 0x34
 800a53a:	e7c1      	b.n	800a4c0 <__sflush_r+0x1c>
 800a53c:	6a21      	ldr	r1, [r4, #32]
 800a53e:	2301      	movs	r3, #1
 800a540:	4628      	mov	r0, r5
 800a542:	47b0      	blx	r6
 800a544:	1c41      	adds	r1, r0, #1
 800a546:	d1c7      	bne.n	800a4d8 <__sflush_r+0x34>
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d0c4      	beq.n	800a4d8 <__sflush_r+0x34>
 800a54e:	2b1d      	cmp	r3, #29
 800a550:	d001      	beq.n	800a556 <__sflush_r+0xb2>
 800a552:	2b16      	cmp	r3, #22
 800a554:	d101      	bne.n	800a55a <__sflush_r+0xb6>
 800a556:	602f      	str	r7, [r5, #0]
 800a558:	e7b1      	b.n	800a4be <__sflush_r+0x1a>
 800a55a:	89a3      	ldrh	r3, [r4, #12]
 800a55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a560:	81a3      	strh	r3, [r4, #12]
 800a562:	e7ad      	b.n	800a4c0 <__sflush_r+0x1c>
 800a564:	690f      	ldr	r7, [r1, #16]
 800a566:	2f00      	cmp	r7, #0
 800a568:	d0a9      	beq.n	800a4be <__sflush_r+0x1a>
 800a56a:	0793      	lsls	r3, r2, #30
 800a56c:	bf18      	it	ne
 800a56e:	2300      	movne	r3, #0
 800a570:	680e      	ldr	r6, [r1, #0]
 800a572:	bf08      	it	eq
 800a574:	694b      	ldreq	r3, [r1, #20]
 800a576:	eba6 0807 	sub.w	r8, r6, r7
 800a57a:	600f      	str	r7, [r1, #0]
 800a57c:	608b      	str	r3, [r1, #8]
 800a57e:	f1b8 0f00 	cmp.w	r8, #0
 800a582:	dd9c      	ble.n	800a4be <__sflush_r+0x1a>
 800a584:	4643      	mov	r3, r8
 800a586:	463a      	mov	r2, r7
 800a588:	4628      	mov	r0, r5
 800a58a:	6a21      	ldr	r1, [r4, #32]
 800a58c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a58e:	47b0      	blx	r6
 800a590:	2800      	cmp	r0, #0
 800a592:	dc06      	bgt.n	800a5a2 <__sflush_r+0xfe>
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	f04f 30ff 	mov.w	r0, #4294967295
 800a59a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a59e:	81a3      	strh	r3, [r4, #12]
 800a5a0:	e78e      	b.n	800a4c0 <__sflush_r+0x1c>
 800a5a2:	4407      	add	r7, r0
 800a5a4:	eba8 0800 	sub.w	r8, r8, r0
 800a5a8:	e7e9      	b.n	800a57e <__sflush_r+0xda>
 800a5aa:	bf00      	nop
 800a5ac:	20400001 	.word	0x20400001

0800a5b0 <_fflush_r>:
 800a5b0:	b538      	push	{r3, r4, r5, lr}
 800a5b2:	690b      	ldr	r3, [r1, #16]
 800a5b4:	4605      	mov	r5, r0
 800a5b6:	460c      	mov	r4, r1
 800a5b8:	b913      	cbnz	r3, 800a5c0 <_fflush_r+0x10>
 800a5ba:	2500      	movs	r5, #0
 800a5bc:	4628      	mov	r0, r5
 800a5be:	bd38      	pop	{r3, r4, r5, pc}
 800a5c0:	b118      	cbz	r0, 800a5ca <_fflush_r+0x1a>
 800a5c2:	6983      	ldr	r3, [r0, #24]
 800a5c4:	b90b      	cbnz	r3, 800a5ca <_fflush_r+0x1a>
 800a5c6:	f7fd f99f 	bl	8007908 <__sinit>
 800a5ca:	4b14      	ldr	r3, [pc, #80]	; (800a61c <_fflush_r+0x6c>)
 800a5cc:	429c      	cmp	r4, r3
 800a5ce:	d11b      	bne.n	800a608 <_fflush_r+0x58>
 800a5d0:	686c      	ldr	r4, [r5, #4]
 800a5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d0ef      	beq.n	800a5ba <_fflush_r+0xa>
 800a5da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5dc:	07d0      	lsls	r0, r2, #31
 800a5de:	d404      	bmi.n	800a5ea <_fflush_r+0x3a>
 800a5e0:	0599      	lsls	r1, r3, #22
 800a5e2:	d402      	bmi.n	800a5ea <_fflush_r+0x3a>
 800a5e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5e6:	f7fd fa52 	bl	8007a8e <__retarget_lock_acquire_recursive>
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	f7ff ff59 	bl	800a4a4 <__sflush_r>
 800a5f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	07da      	lsls	r2, r3, #31
 800a5f8:	d4e0      	bmi.n	800a5bc <_fflush_r+0xc>
 800a5fa:	89a3      	ldrh	r3, [r4, #12]
 800a5fc:	059b      	lsls	r3, r3, #22
 800a5fe:	d4dd      	bmi.n	800a5bc <_fflush_r+0xc>
 800a600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a602:	f7fd fa45 	bl	8007a90 <__retarget_lock_release_recursive>
 800a606:	e7d9      	b.n	800a5bc <_fflush_r+0xc>
 800a608:	4b05      	ldr	r3, [pc, #20]	; (800a620 <_fflush_r+0x70>)
 800a60a:	429c      	cmp	r4, r3
 800a60c:	d101      	bne.n	800a612 <_fflush_r+0x62>
 800a60e:	68ac      	ldr	r4, [r5, #8]
 800a610:	e7df      	b.n	800a5d2 <_fflush_r+0x22>
 800a612:	4b04      	ldr	r3, [pc, #16]	; (800a624 <_fflush_r+0x74>)
 800a614:	429c      	cmp	r4, r3
 800a616:	bf08      	it	eq
 800a618:	68ec      	ldreq	r4, [r5, #12]
 800a61a:	e7da      	b.n	800a5d2 <_fflush_r+0x22>
 800a61c:	0800c4d4 	.word	0x0800c4d4
 800a620:	0800c4f4 	.word	0x0800c4f4
 800a624:	0800c4b4 	.word	0x0800c4b4

0800a628 <rshift>:
 800a628:	6903      	ldr	r3, [r0, #16]
 800a62a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a62e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a632:	f100 0414 	add.w	r4, r0, #20
 800a636:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a63a:	dd46      	ble.n	800a6ca <rshift+0xa2>
 800a63c:	f011 011f 	ands.w	r1, r1, #31
 800a640:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a644:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a648:	d10c      	bne.n	800a664 <rshift+0x3c>
 800a64a:	4629      	mov	r1, r5
 800a64c:	f100 0710 	add.w	r7, r0, #16
 800a650:	42b1      	cmp	r1, r6
 800a652:	d335      	bcc.n	800a6c0 <rshift+0x98>
 800a654:	1a9b      	subs	r3, r3, r2
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	1eea      	subs	r2, r5, #3
 800a65a:	4296      	cmp	r6, r2
 800a65c:	bf38      	it	cc
 800a65e:	2300      	movcc	r3, #0
 800a660:	4423      	add	r3, r4
 800a662:	e015      	b.n	800a690 <rshift+0x68>
 800a664:	46a1      	mov	r9, r4
 800a666:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a66a:	f1c1 0820 	rsb	r8, r1, #32
 800a66e:	40cf      	lsrs	r7, r1
 800a670:	f105 0e04 	add.w	lr, r5, #4
 800a674:	4576      	cmp	r6, lr
 800a676:	46f4      	mov	ip, lr
 800a678:	d816      	bhi.n	800a6a8 <rshift+0x80>
 800a67a:	1a9b      	subs	r3, r3, r2
 800a67c:	009a      	lsls	r2, r3, #2
 800a67e:	3a04      	subs	r2, #4
 800a680:	3501      	adds	r5, #1
 800a682:	42ae      	cmp	r6, r5
 800a684:	bf38      	it	cc
 800a686:	2200      	movcc	r2, #0
 800a688:	18a3      	adds	r3, r4, r2
 800a68a:	50a7      	str	r7, [r4, r2]
 800a68c:	b107      	cbz	r7, 800a690 <rshift+0x68>
 800a68e:	3304      	adds	r3, #4
 800a690:	42a3      	cmp	r3, r4
 800a692:	eba3 0204 	sub.w	r2, r3, r4
 800a696:	bf08      	it	eq
 800a698:	2300      	moveq	r3, #0
 800a69a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a69e:	6102      	str	r2, [r0, #16]
 800a6a0:	bf08      	it	eq
 800a6a2:	6143      	streq	r3, [r0, #20]
 800a6a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6a8:	f8dc c000 	ldr.w	ip, [ip]
 800a6ac:	fa0c fc08 	lsl.w	ip, ip, r8
 800a6b0:	ea4c 0707 	orr.w	r7, ip, r7
 800a6b4:	f849 7b04 	str.w	r7, [r9], #4
 800a6b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6bc:	40cf      	lsrs	r7, r1
 800a6be:	e7d9      	b.n	800a674 <rshift+0x4c>
 800a6c0:	f851 cb04 	ldr.w	ip, [r1], #4
 800a6c4:	f847 cf04 	str.w	ip, [r7, #4]!
 800a6c8:	e7c2      	b.n	800a650 <rshift+0x28>
 800a6ca:	4623      	mov	r3, r4
 800a6cc:	e7e0      	b.n	800a690 <rshift+0x68>

0800a6ce <__hexdig_fun>:
 800a6ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a6d2:	2b09      	cmp	r3, #9
 800a6d4:	d802      	bhi.n	800a6dc <__hexdig_fun+0xe>
 800a6d6:	3820      	subs	r0, #32
 800a6d8:	b2c0      	uxtb	r0, r0
 800a6da:	4770      	bx	lr
 800a6dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a6e0:	2b05      	cmp	r3, #5
 800a6e2:	d801      	bhi.n	800a6e8 <__hexdig_fun+0x1a>
 800a6e4:	3847      	subs	r0, #71	; 0x47
 800a6e6:	e7f7      	b.n	800a6d8 <__hexdig_fun+0xa>
 800a6e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a6ec:	2b05      	cmp	r3, #5
 800a6ee:	d801      	bhi.n	800a6f4 <__hexdig_fun+0x26>
 800a6f0:	3827      	subs	r0, #39	; 0x27
 800a6f2:	e7f1      	b.n	800a6d8 <__hexdig_fun+0xa>
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	4770      	bx	lr

0800a6f8 <__gethex>:
 800a6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	b08b      	sub	sp, #44	; 0x2c
 800a6fe:	9306      	str	r3, [sp, #24]
 800a700:	4bb9      	ldr	r3, [pc, #740]	; (800a9e8 <__gethex+0x2f0>)
 800a702:	9002      	str	r0, [sp, #8]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	468b      	mov	fp, r1
 800a708:	4618      	mov	r0, r3
 800a70a:	4690      	mov	r8, r2
 800a70c:	9303      	str	r3, [sp, #12]
 800a70e:	f7f5 fd29 	bl	8000164 <strlen>
 800a712:	4682      	mov	sl, r0
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	f8db 2000 	ldr.w	r2, [fp]
 800a71a:	4403      	add	r3, r0
 800a71c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a720:	9307      	str	r3, [sp, #28]
 800a722:	1c93      	adds	r3, r2, #2
 800a724:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a728:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a72c:	32fe      	adds	r2, #254	; 0xfe
 800a72e:	18d1      	adds	r1, r2, r3
 800a730:	461f      	mov	r7, r3
 800a732:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a736:	9101      	str	r1, [sp, #4]
 800a738:	2830      	cmp	r0, #48	; 0x30
 800a73a:	d0f8      	beq.n	800a72e <__gethex+0x36>
 800a73c:	f7ff ffc7 	bl	800a6ce <__hexdig_fun>
 800a740:	4604      	mov	r4, r0
 800a742:	2800      	cmp	r0, #0
 800a744:	d13a      	bne.n	800a7bc <__gethex+0xc4>
 800a746:	4652      	mov	r2, sl
 800a748:	4638      	mov	r0, r7
 800a74a:	9903      	ldr	r1, [sp, #12]
 800a74c:	f001 f9a2 	bl	800ba94 <strncmp>
 800a750:	4605      	mov	r5, r0
 800a752:	2800      	cmp	r0, #0
 800a754:	d166      	bne.n	800a824 <__gethex+0x12c>
 800a756:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a75a:	eb07 060a 	add.w	r6, r7, sl
 800a75e:	f7ff ffb6 	bl	800a6ce <__hexdig_fun>
 800a762:	2800      	cmp	r0, #0
 800a764:	d060      	beq.n	800a828 <__gethex+0x130>
 800a766:	4633      	mov	r3, r6
 800a768:	7818      	ldrb	r0, [r3, #0]
 800a76a:	461f      	mov	r7, r3
 800a76c:	2830      	cmp	r0, #48	; 0x30
 800a76e:	f103 0301 	add.w	r3, r3, #1
 800a772:	d0f9      	beq.n	800a768 <__gethex+0x70>
 800a774:	f7ff ffab 	bl	800a6ce <__hexdig_fun>
 800a778:	2301      	movs	r3, #1
 800a77a:	fab0 f480 	clz	r4, r0
 800a77e:	4635      	mov	r5, r6
 800a780:	0964      	lsrs	r4, r4, #5
 800a782:	9301      	str	r3, [sp, #4]
 800a784:	463a      	mov	r2, r7
 800a786:	4616      	mov	r6, r2
 800a788:	7830      	ldrb	r0, [r6, #0]
 800a78a:	3201      	adds	r2, #1
 800a78c:	f7ff ff9f 	bl	800a6ce <__hexdig_fun>
 800a790:	2800      	cmp	r0, #0
 800a792:	d1f8      	bne.n	800a786 <__gethex+0x8e>
 800a794:	4652      	mov	r2, sl
 800a796:	4630      	mov	r0, r6
 800a798:	9903      	ldr	r1, [sp, #12]
 800a79a:	f001 f97b 	bl	800ba94 <strncmp>
 800a79e:	b980      	cbnz	r0, 800a7c2 <__gethex+0xca>
 800a7a0:	b94d      	cbnz	r5, 800a7b6 <__gethex+0xbe>
 800a7a2:	eb06 050a 	add.w	r5, r6, sl
 800a7a6:	462a      	mov	r2, r5
 800a7a8:	4616      	mov	r6, r2
 800a7aa:	7830      	ldrb	r0, [r6, #0]
 800a7ac:	3201      	adds	r2, #1
 800a7ae:	f7ff ff8e 	bl	800a6ce <__hexdig_fun>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d1f8      	bne.n	800a7a8 <__gethex+0xb0>
 800a7b6:	1bad      	subs	r5, r5, r6
 800a7b8:	00ad      	lsls	r5, r5, #2
 800a7ba:	e004      	b.n	800a7c6 <__gethex+0xce>
 800a7bc:	2400      	movs	r4, #0
 800a7be:	4625      	mov	r5, r4
 800a7c0:	e7e0      	b.n	800a784 <__gethex+0x8c>
 800a7c2:	2d00      	cmp	r5, #0
 800a7c4:	d1f7      	bne.n	800a7b6 <__gethex+0xbe>
 800a7c6:	7833      	ldrb	r3, [r6, #0]
 800a7c8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a7cc:	2b50      	cmp	r3, #80	; 0x50
 800a7ce:	d139      	bne.n	800a844 <__gethex+0x14c>
 800a7d0:	7873      	ldrb	r3, [r6, #1]
 800a7d2:	2b2b      	cmp	r3, #43	; 0x2b
 800a7d4:	d02a      	beq.n	800a82c <__gethex+0x134>
 800a7d6:	2b2d      	cmp	r3, #45	; 0x2d
 800a7d8:	d02c      	beq.n	800a834 <__gethex+0x13c>
 800a7da:	f04f 0900 	mov.w	r9, #0
 800a7de:	1c71      	adds	r1, r6, #1
 800a7e0:	7808      	ldrb	r0, [r1, #0]
 800a7e2:	f7ff ff74 	bl	800a6ce <__hexdig_fun>
 800a7e6:	1e43      	subs	r3, r0, #1
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b18      	cmp	r3, #24
 800a7ec:	d82a      	bhi.n	800a844 <__gethex+0x14c>
 800a7ee:	f1a0 0210 	sub.w	r2, r0, #16
 800a7f2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a7f6:	f7ff ff6a 	bl	800a6ce <__hexdig_fun>
 800a7fa:	1e43      	subs	r3, r0, #1
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b18      	cmp	r3, #24
 800a800:	d91b      	bls.n	800a83a <__gethex+0x142>
 800a802:	f1b9 0f00 	cmp.w	r9, #0
 800a806:	d000      	beq.n	800a80a <__gethex+0x112>
 800a808:	4252      	negs	r2, r2
 800a80a:	4415      	add	r5, r2
 800a80c:	f8cb 1000 	str.w	r1, [fp]
 800a810:	b1d4      	cbz	r4, 800a848 <__gethex+0x150>
 800a812:	9b01      	ldr	r3, [sp, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	bf14      	ite	ne
 800a818:	2700      	movne	r7, #0
 800a81a:	2706      	moveq	r7, #6
 800a81c:	4638      	mov	r0, r7
 800a81e:	b00b      	add	sp, #44	; 0x2c
 800a820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a824:	463e      	mov	r6, r7
 800a826:	4625      	mov	r5, r4
 800a828:	2401      	movs	r4, #1
 800a82a:	e7cc      	b.n	800a7c6 <__gethex+0xce>
 800a82c:	f04f 0900 	mov.w	r9, #0
 800a830:	1cb1      	adds	r1, r6, #2
 800a832:	e7d5      	b.n	800a7e0 <__gethex+0xe8>
 800a834:	f04f 0901 	mov.w	r9, #1
 800a838:	e7fa      	b.n	800a830 <__gethex+0x138>
 800a83a:	230a      	movs	r3, #10
 800a83c:	fb03 0202 	mla	r2, r3, r2, r0
 800a840:	3a10      	subs	r2, #16
 800a842:	e7d6      	b.n	800a7f2 <__gethex+0xfa>
 800a844:	4631      	mov	r1, r6
 800a846:	e7e1      	b.n	800a80c <__gethex+0x114>
 800a848:	4621      	mov	r1, r4
 800a84a:	1bf3      	subs	r3, r6, r7
 800a84c:	3b01      	subs	r3, #1
 800a84e:	2b07      	cmp	r3, #7
 800a850:	dc0a      	bgt.n	800a868 <__gethex+0x170>
 800a852:	9802      	ldr	r0, [sp, #8]
 800a854:	f000 fa98 	bl	800ad88 <_Balloc>
 800a858:	4604      	mov	r4, r0
 800a85a:	b940      	cbnz	r0, 800a86e <__gethex+0x176>
 800a85c:	4602      	mov	r2, r0
 800a85e:	21de      	movs	r1, #222	; 0xde
 800a860:	4b62      	ldr	r3, [pc, #392]	; (800a9ec <__gethex+0x2f4>)
 800a862:	4863      	ldr	r0, [pc, #396]	; (800a9f0 <__gethex+0x2f8>)
 800a864:	f001 f936 	bl	800bad4 <__assert_func>
 800a868:	3101      	adds	r1, #1
 800a86a:	105b      	asrs	r3, r3, #1
 800a86c:	e7ef      	b.n	800a84e <__gethex+0x156>
 800a86e:	f04f 0b00 	mov.w	fp, #0
 800a872:	f100 0914 	add.w	r9, r0, #20
 800a876:	f1ca 0301 	rsb	r3, sl, #1
 800a87a:	f8cd 9010 	str.w	r9, [sp, #16]
 800a87e:	f8cd b004 	str.w	fp, [sp, #4]
 800a882:	9308      	str	r3, [sp, #32]
 800a884:	42b7      	cmp	r7, r6
 800a886:	d33f      	bcc.n	800a908 <__gethex+0x210>
 800a888:	9f04      	ldr	r7, [sp, #16]
 800a88a:	9b01      	ldr	r3, [sp, #4]
 800a88c:	f847 3b04 	str.w	r3, [r7], #4
 800a890:	eba7 0709 	sub.w	r7, r7, r9
 800a894:	10bf      	asrs	r7, r7, #2
 800a896:	6127      	str	r7, [r4, #16]
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 fb6b 	bl	800af74 <__hi0bits>
 800a89e:	017f      	lsls	r7, r7, #5
 800a8a0:	f8d8 6000 	ldr.w	r6, [r8]
 800a8a4:	1a3f      	subs	r7, r7, r0
 800a8a6:	42b7      	cmp	r7, r6
 800a8a8:	dd62      	ble.n	800a970 <__gethex+0x278>
 800a8aa:	1bbf      	subs	r7, r7, r6
 800a8ac:	4639      	mov	r1, r7
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f000 ff01 	bl	800b6b6 <__any_on>
 800a8b4:	4682      	mov	sl, r0
 800a8b6:	b1a8      	cbz	r0, 800a8e4 <__gethex+0x1ec>
 800a8b8:	f04f 0a01 	mov.w	sl, #1
 800a8bc:	1e7b      	subs	r3, r7, #1
 800a8be:	1159      	asrs	r1, r3, #5
 800a8c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a8c4:	f003 021f 	and.w	r2, r3, #31
 800a8c8:	fa0a f202 	lsl.w	r2, sl, r2
 800a8cc:	420a      	tst	r2, r1
 800a8ce:	d009      	beq.n	800a8e4 <__gethex+0x1ec>
 800a8d0:	4553      	cmp	r3, sl
 800a8d2:	dd05      	ble.n	800a8e0 <__gethex+0x1e8>
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	1eb9      	subs	r1, r7, #2
 800a8d8:	f000 feed 	bl	800b6b6 <__any_on>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d144      	bne.n	800a96a <__gethex+0x272>
 800a8e0:	f04f 0a02 	mov.w	sl, #2
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f7ff fe9e 	bl	800a628 <rshift>
 800a8ec:	443d      	add	r5, r7
 800a8ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8f2:	42ab      	cmp	r3, r5
 800a8f4:	da4a      	bge.n	800a98c <__gethex+0x294>
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	9802      	ldr	r0, [sp, #8]
 800a8fa:	f000 fa85 	bl	800ae08 <_Bfree>
 800a8fe:	2300      	movs	r3, #0
 800a900:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a902:	27a3      	movs	r7, #163	; 0xa3
 800a904:	6013      	str	r3, [r2, #0]
 800a906:	e789      	b.n	800a81c <__gethex+0x124>
 800a908:	1e73      	subs	r3, r6, #1
 800a90a:	9a07      	ldr	r2, [sp, #28]
 800a90c:	9305      	str	r3, [sp, #20]
 800a90e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a912:	4293      	cmp	r3, r2
 800a914:	d019      	beq.n	800a94a <__gethex+0x252>
 800a916:	f1bb 0f20 	cmp.w	fp, #32
 800a91a:	d107      	bne.n	800a92c <__gethex+0x234>
 800a91c:	9b04      	ldr	r3, [sp, #16]
 800a91e:	9a01      	ldr	r2, [sp, #4]
 800a920:	f843 2b04 	str.w	r2, [r3], #4
 800a924:	9304      	str	r3, [sp, #16]
 800a926:	2300      	movs	r3, #0
 800a928:	469b      	mov	fp, r3
 800a92a:	9301      	str	r3, [sp, #4]
 800a92c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a930:	f7ff fecd 	bl	800a6ce <__hexdig_fun>
 800a934:	9b01      	ldr	r3, [sp, #4]
 800a936:	f000 000f 	and.w	r0, r0, #15
 800a93a:	fa00 f00b 	lsl.w	r0, r0, fp
 800a93e:	4303      	orrs	r3, r0
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	f10b 0b04 	add.w	fp, fp, #4
 800a946:	9b05      	ldr	r3, [sp, #20]
 800a948:	e00d      	b.n	800a966 <__gethex+0x26e>
 800a94a:	9b05      	ldr	r3, [sp, #20]
 800a94c:	9a08      	ldr	r2, [sp, #32]
 800a94e:	4413      	add	r3, r2
 800a950:	42bb      	cmp	r3, r7
 800a952:	d3e0      	bcc.n	800a916 <__gethex+0x21e>
 800a954:	4618      	mov	r0, r3
 800a956:	4652      	mov	r2, sl
 800a958:	9903      	ldr	r1, [sp, #12]
 800a95a:	9309      	str	r3, [sp, #36]	; 0x24
 800a95c:	f001 f89a 	bl	800ba94 <strncmp>
 800a960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a962:	2800      	cmp	r0, #0
 800a964:	d1d7      	bne.n	800a916 <__gethex+0x21e>
 800a966:	461e      	mov	r6, r3
 800a968:	e78c      	b.n	800a884 <__gethex+0x18c>
 800a96a:	f04f 0a03 	mov.w	sl, #3
 800a96e:	e7b9      	b.n	800a8e4 <__gethex+0x1ec>
 800a970:	da09      	bge.n	800a986 <__gethex+0x28e>
 800a972:	1bf7      	subs	r7, r6, r7
 800a974:	4621      	mov	r1, r4
 800a976:	463a      	mov	r2, r7
 800a978:	9802      	ldr	r0, [sp, #8]
 800a97a:	f000 fc5d 	bl	800b238 <__lshift>
 800a97e:	4604      	mov	r4, r0
 800a980:	1bed      	subs	r5, r5, r7
 800a982:	f100 0914 	add.w	r9, r0, #20
 800a986:	f04f 0a00 	mov.w	sl, #0
 800a98a:	e7b0      	b.n	800a8ee <__gethex+0x1f6>
 800a98c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a990:	42a8      	cmp	r0, r5
 800a992:	dd71      	ble.n	800aa78 <__gethex+0x380>
 800a994:	1b45      	subs	r5, r0, r5
 800a996:	42ae      	cmp	r6, r5
 800a998:	dc34      	bgt.n	800aa04 <__gethex+0x30c>
 800a99a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d028      	beq.n	800a9f4 <__gethex+0x2fc>
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d02a      	beq.n	800a9fc <__gethex+0x304>
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d115      	bne.n	800a9d6 <__gethex+0x2de>
 800a9aa:	42ae      	cmp	r6, r5
 800a9ac:	d113      	bne.n	800a9d6 <__gethex+0x2de>
 800a9ae:	2e01      	cmp	r6, #1
 800a9b0:	d10b      	bne.n	800a9ca <__gethex+0x2d2>
 800a9b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a9b6:	9a06      	ldr	r2, [sp, #24]
 800a9b8:	2762      	movs	r7, #98	; 0x62
 800a9ba:	6013      	str	r3, [r2, #0]
 800a9bc:	2301      	movs	r3, #1
 800a9be:	6123      	str	r3, [r4, #16]
 800a9c0:	f8c9 3000 	str.w	r3, [r9]
 800a9c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9c6:	601c      	str	r4, [r3, #0]
 800a9c8:	e728      	b.n	800a81c <__gethex+0x124>
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	1e71      	subs	r1, r6, #1
 800a9ce:	f000 fe72 	bl	800b6b6 <__any_on>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d1ed      	bne.n	800a9b2 <__gethex+0x2ba>
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	9802      	ldr	r0, [sp, #8]
 800a9da:	f000 fa15 	bl	800ae08 <_Bfree>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a9e2:	2750      	movs	r7, #80	; 0x50
 800a9e4:	6013      	str	r3, [r2, #0]
 800a9e6:	e719      	b.n	800a81c <__gethex+0x124>
 800a9e8:	0800c7a8 	.word	0x0800c7a8
 800a9ec:	0800c72c 	.word	0x0800c72c
 800a9f0:	0800c73d 	.word	0x0800c73d
 800a9f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1ed      	bne.n	800a9d6 <__gethex+0x2de>
 800a9fa:	e7da      	b.n	800a9b2 <__gethex+0x2ba>
 800a9fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1d7      	bne.n	800a9b2 <__gethex+0x2ba>
 800aa02:	e7e8      	b.n	800a9d6 <__gethex+0x2de>
 800aa04:	1e6f      	subs	r7, r5, #1
 800aa06:	f1ba 0f00 	cmp.w	sl, #0
 800aa0a:	d132      	bne.n	800aa72 <__gethex+0x37a>
 800aa0c:	b127      	cbz	r7, 800aa18 <__gethex+0x320>
 800aa0e:	4639      	mov	r1, r7
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 fe50 	bl	800b6b6 <__any_on>
 800aa16:	4682      	mov	sl, r0
 800aa18:	2101      	movs	r1, #1
 800aa1a:	117b      	asrs	r3, r7, #5
 800aa1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aa20:	f007 071f 	and.w	r7, r7, #31
 800aa24:	fa01 f707 	lsl.w	r7, r1, r7
 800aa28:	421f      	tst	r7, r3
 800aa2a:	f04f 0702 	mov.w	r7, #2
 800aa2e:	4629      	mov	r1, r5
 800aa30:	4620      	mov	r0, r4
 800aa32:	bf18      	it	ne
 800aa34:	f04a 0a02 	orrne.w	sl, sl, #2
 800aa38:	1b76      	subs	r6, r6, r5
 800aa3a:	f7ff fdf5 	bl	800a628 <rshift>
 800aa3e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa42:	f1ba 0f00 	cmp.w	sl, #0
 800aa46:	d048      	beq.n	800aada <__gethex+0x3e2>
 800aa48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d015      	beq.n	800aa7c <__gethex+0x384>
 800aa50:	2b03      	cmp	r3, #3
 800aa52:	d017      	beq.n	800aa84 <__gethex+0x38c>
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d109      	bne.n	800aa6c <__gethex+0x374>
 800aa58:	f01a 0f02 	tst.w	sl, #2
 800aa5c:	d006      	beq.n	800aa6c <__gethex+0x374>
 800aa5e:	f8d9 0000 	ldr.w	r0, [r9]
 800aa62:	ea4a 0a00 	orr.w	sl, sl, r0
 800aa66:	f01a 0f01 	tst.w	sl, #1
 800aa6a:	d10e      	bne.n	800aa8a <__gethex+0x392>
 800aa6c:	f047 0710 	orr.w	r7, r7, #16
 800aa70:	e033      	b.n	800aada <__gethex+0x3e2>
 800aa72:	f04f 0a01 	mov.w	sl, #1
 800aa76:	e7cf      	b.n	800aa18 <__gethex+0x320>
 800aa78:	2701      	movs	r7, #1
 800aa7a:	e7e2      	b.n	800aa42 <__gethex+0x34a>
 800aa7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa7e:	f1c3 0301 	rsb	r3, r3, #1
 800aa82:	9315      	str	r3, [sp, #84]	; 0x54
 800aa84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d0f0      	beq.n	800aa6c <__gethex+0x374>
 800aa8a:	f04f 0c00 	mov.w	ip, #0
 800aa8e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aa92:	f104 0314 	add.w	r3, r4, #20
 800aa96:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aa9a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaa4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aaa8:	d01c      	beq.n	800aae4 <__gethex+0x3ec>
 800aaaa:	3201      	adds	r2, #1
 800aaac:	6002      	str	r2, [r0, #0]
 800aaae:	2f02      	cmp	r7, #2
 800aab0:	f104 0314 	add.w	r3, r4, #20
 800aab4:	d13d      	bne.n	800ab32 <__gethex+0x43a>
 800aab6:	f8d8 2000 	ldr.w	r2, [r8]
 800aaba:	3a01      	subs	r2, #1
 800aabc:	42b2      	cmp	r2, r6
 800aabe:	d10a      	bne.n	800aad6 <__gethex+0x3de>
 800aac0:	2201      	movs	r2, #1
 800aac2:	1171      	asrs	r1, r6, #5
 800aac4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aac8:	f006 061f 	and.w	r6, r6, #31
 800aacc:	fa02 f606 	lsl.w	r6, r2, r6
 800aad0:	421e      	tst	r6, r3
 800aad2:	bf18      	it	ne
 800aad4:	4617      	movne	r7, r2
 800aad6:	f047 0720 	orr.w	r7, r7, #32
 800aada:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aadc:	601c      	str	r4, [r3, #0]
 800aade:	9b06      	ldr	r3, [sp, #24]
 800aae0:	601d      	str	r5, [r3, #0]
 800aae2:	e69b      	b.n	800a81c <__gethex+0x124>
 800aae4:	4299      	cmp	r1, r3
 800aae6:	f843 cc04 	str.w	ip, [r3, #-4]
 800aaea:	d8d8      	bhi.n	800aa9e <__gethex+0x3a6>
 800aaec:	68a3      	ldr	r3, [r4, #8]
 800aaee:	459b      	cmp	fp, r3
 800aaf0:	db17      	blt.n	800ab22 <__gethex+0x42a>
 800aaf2:	6861      	ldr	r1, [r4, #4]
 800aaf4:	9802      	ldr	r0, [sp, #8]
 800aaf6:	3101      	adds	r1, #1
 800aaf8:	f000 f946 	bl	800ad88 <_Balloc>
 800aafc:	4681      	mov	r9, r0
 800aafe:	b918      	cbnz	r0, 800ab08 <__gethex+0x410>
 800ab00:	4602      	mov	r2, r0
 800ab02:	2184      	movs	r1, #132	; 0x84
 800ab04:	4b19      	ldr	r3, [pc, #100]	; (800ab6c <__gethex+0x474>)
 800ab06:	e6ac      	b.n	800a862 <__gethex+0x16a>
 800ab08:	6922      	ldr	r2, [r4, #16]
 800ab0a:	f104 010c 	add.w	r1, r4, #12
 800ab0e:	3202      	adds	r2, #2
 800ab10:	0092      	lsls	r2, r2, #2
 800ab12:	300c      	adds	r0, #12
 800ab14:	f7fc ffbd 	bl	8007a92 <memcpy>
 800ab18:	4621      	mov	r1, r4
 800ab1a:	9802      	ldr	r0, [sp, #8]
 800ab1c:	f000 f974 	bl	800ae08 <_Bfree>
 800ab20:	464c      	mov	r4, r9
 800ab22:	6923      	ldr	r3, [r4, #16]
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	6122      	str	r2, [r4, #16]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab2e:	615a      	str	r2, [r3, #20]
 800ab30:	e7bd      	b.n	800aaae <__gethex+0x3b6>
 800ab32:	6922      	ldr	r2, [r4, #16]
 800ab34:	455a      	cmp	r2, fp
 800ab36:	dd0b      	ble.n	800ab50 <__gethex+0x458>
 800ab38:	2101      	movs	r1, #1
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f7ff fd74 	bl	800a628 <rshift>
 800ab40:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab44:	3501      	adds	r5, #1
 800ab46:	42ab      	cmp	r3, r5
 800ab48:	f6ff aed5 	blt.w	800a8f6 <__gethex+0x1fe>
 800ab4c:	2701      	movs	r7, #1
 800ab4e:	e7c2      	b.n	800aad6 <__gethex+0x3de>
 800ab50:	f016 061f 	ands.w	r6, r6, #31
 800ab54:	d0fa      	beq.n	800ab4c <__gethex+0x454>
 800ab56:	449a      	add	sl, r3
 800ab58:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ab5c:	f000 fa0a 	bl	800af74 <__hi0bits>
 800ab60:	f1c6 0620 	rsb	r6, r6, #32
 800ab64:	42b0      	cmp	r0, r6
 800ab66:	dbe7      	blt.n	800ab38 <__gethex+0x440>
 800ab68:	e7f0      	b.n	800ab4c <__gethex+0x454>
 800ab6a:	bf00      	nop
 800ab6c:	0800c72c 	.word	0x0800c72c

0800ab70 <L_shift>:
 800ab70:	f1c2 0208 	rsb	r2, r2, #8
 800ab74:	0092      	lsls	r2, r2, #2
 800ab76:	b570      	push	{r4, r5, r6, lr}
 800ab78:	f1c2 0620 	rsb	r6, r2, #32
 800ab7c:	6843      	ldr	r3, [r0, #4]
 800ab7e:	6804      	ldr	r4, [r0, #0]
 800ab80:	fa03 f506 	lsl.w	r5, r3, r6
 800ab84:	432c      	orrs	r4, r5
 800ab86:	40d3      	lsrs	r3, r2
 800ab88:	6004      	str	r4, [r0, #0]
 800ab8a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ab8e:	4288      	cmp	r0, r1
 800ab90:	d3f4      	bcc.n	800ab7c <L_shift+0xc>
 800ab92:	bd70      	pop	{r4, r5, r6, pc}

0800ab94 <__match>:
 800ab94:	b530      	push	{r4, r5, lr}
 800ab96:	6803      	ldr	r3, [r0, #0]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab9e:	b914      	cbnz	r4, 800aba6 <__match+0x12>
 800aba0:	6003      	str	r3, [r0, #0]
 800aba2:	2001      	movs	r0, #1
 800aba4:	bd30      	pop	{r4, r5, pc}
 800aba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800abae:	2d19      	cmp	r5, #25
 800abb0:	bf98      	it	ls
 800abb2:	3220      	addls	r2, #32
 800abb4:	42a2      	cmp	r2, r4
 800abb6:	d0f0      	beq.n	800ab9a <__match+0x6>
 800abb8:	2000      	movs	r0, #0
 800abba:	e7f3      	b.n	800aba4 <__match+0x10>

0800abbc <__hexnan>:
 800abbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc0:	2500      	movs	r5, #0
 800abc2:	680b      	ldr	r3, [r1, #0]
 800abc4:	4682      	mov	sl, r0
 800abc6:	115e      	asrs	r6, r3, #5
 800abc8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800abcc:	f013 031f 	ands.w	r3, r3, #31
 800abd0:	bf18      	it	ne
 800abd2:	3604      	addne	r6, #4
 800abd4:	1f37      	subs	r7, r6, #4
 800abd6:	4690      	mov	r8, r2
 800abd8:	46b9      	mov	r9, r7
 800abda:	463c      	mov	r4, r7
 800abdc:	46ab      	mov	fp, r5
 800abde:	b087      	sub	sp, #28
 800abe0:	6801      	ldr	r1, [r0, #0]
 800abe2:	9301      	str	r3, [sp, #4]
 800abe4:	f846 5c04 	str.w	r5, [r6, #-4]
 800abe8:	9502      	str	r5, [sp, #8]
 800abea:	784a      	ldrb	r2, [r1, #1]
 800abec:	1c4b      	adds	r3, r1, #1
 800abee:	9303      	str	r3, [sp, #12]
 800abf0:	b342      	cbz	r2, 800ac44 <__hexnan+0x88>
 800abf2:	4610      	mov	r0, r2
 800abf4:	9105      	str	r1, [sp, #20]
 800abf6:	9204      	str	r2, [sp, #16]
 800abf8:	f7ff fd69 	bl	800a6ce <__hexdig_fun>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d14f      	bne.n	800aca0 <__hexnan+0xe4>
 800ac00:	9a04      	ldr	r2, [sp, #16]
 800ac02:	9905      	ldr	r1, [sp, #20]
 800ac04:	2a20      	cmp	r2, #32
 800ac06:	d818      	bhi.n	800ac3a <__hexnan+0x7e>
 800ac08:	9b02      	ldr	r3, [sp, #8]
 800ac0a:	459b      	cmp	fp, r3
 800ac0c:	dd13      	ble.n	800ac36 <__hexnan+0x7a>
 800ac0e:	454c      	cmp	r4, r9
 800ac10:	d206      	bcs.n	800ac20 <__hexnan+0x64>
 800ac12:	2d07      	cmp	r5, #7
 800ac14:	dc04      	bgt.n	800ac20 <__hexnan+0x64>
 800ac16:	462a      	mov	r2, r5
 800ac18:	4649      	mov	r1, r9
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f7ff ffa8 	bl	800ab70 <L_shift>
 800ac20:	4544      	cmp	r4, r8
 800ac22:	d950      	bls.n	800acc6 <__hexnan+0x10a>
 800ac24:	2300      	movs	r3, #0
 800ac26:	f1a4 0904 	sub.w	r9, r4, #4
 800ac2a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac2e:	461d      	mov	r5, r3
 800ac30:	464c      	mov	r4, r9
 800ac32:	f8cd b008 	str.w	fp, [sp, #8]
 800ac36:	9903      	ldr	r1, [sp, #12]
 800ac38:	e7d7      	b.n	800abea <__hexnan+0x2e>
 800ac3a:	2a29      	cmp	r2, #41	; 0x29
 800ac3c:	d156      	bne.n	800acec <__hexnan+0x130>
 800ac3e:	3102      	adds	r1, #2
 800ac40:	f8ca 1000 	str.w	r1, [sl]
 800ac44:	f1bb 0f00 	cmp.w	fp, #0
 800ac48:	d050      	beq.n	800acec <__hexnan+0x130>
 800ac4a:	454c      	cmp	r4, r9
 800ac4c:	d206      	bcs.n	800ac5c <__hexnan+0xa0>
 800ac4e:	2d07      	cmp	r5, #7
 800ac50:	dc04      	bgt.n	800ac5c <__hexnan+0xa0>
 800ac52:	462a      	mov	r2, r5
 800ac54:	4649      	mov	r1, r9
 800ac56:	4620      	mov	r0, r4
 800ac58:	f7ff ff8a 	bl	800ab70 <L_shift>
 800ac5c:	4544      	cmp	r4, r8
 800ac5e:	d934      	bls.n	800acca <__hexnan+0x10e>
 800ac60:	4623      	mov	r3, r4
 800ac62:	f1a8 0204 	sub.w	r2, r8, #4
 800ac66:	f853 1b04 	ldr.w	r1, [r3], #4
 800ac6a:	429f      	cmp	r7, r3
 800ac6c:	f842 1f04 	str.w	r1, [r2, #4]!
 800ac70:	d2f9      	bcs.n	800ac66 <__hexnan+0xaa>
 800ac72:	1b3b      	subs	r3, r7, r4
 800ac74:	f023 0303 	bic.w	r3, r3, #3
 800ac78:	3304      	adds	r3, #4
 800ac7a:	3401      	adds	r4, #1
 800ac7c:	3e03      	subs	r6, #3
 800ac7e:	42b4      	cmp	r4, r6
 800ac80:	bf88      	it	hi
 800ac82:	2304      	movhi	r3, #4
 800ac84:	2200      	movs	r2, #0
 800ac86:	4443      	add	r3, r8
 800ac88:	f843 2b04 	str.w	r2, [r3], #4
 800ac8c:	429f      	cmp	r7, r3
 800ac8e:	d2fb      	bcs.n	800ac88 <__hexnan+0xcc>
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	b91b      	cbnz	r3, 800ac9c <__hexnan+0xe0>
 800ac94:	4547      	cmp	r7, r8
 800ac96:	d127      	bne.n	800ace8 <__hexnan+0x12c>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	603b      	str	r3, [r7, #0]
 800ac9c:	2005      	movs	r0, #5
 800ac9e:	e026      	b.n	800acee <__hexnan+0x132>
 800aca0:	3501      	adds	r5, #1
 800aca2:	2d08      	cmp	r5, #8
 800aca4:	f10b 0b01 	add.w	fp, fp, #1
 800aca8:	dd06      	ble.n	800acb8 <__hexnan+0xfc>
 800acaa:	4544      	cmp	r4, r8
 800acac:	d9c3      	bls.n	800ac36 <__hexnan+0x7a>
 800acae:	2300      	movs	r3, #0
 800acb0:	2501      	movs	r5, #1
 800acb2:	f844 3c04 	str.w	r3, [r4, #-4]
 800acb6:	3c04      	subs	r4, #4
 800acb8:	6822      	ldr	r2, [r4, #0]
 800acba:	f000 000f 	and.w	r0, r0, #15
 800acbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800acc2:	6022      	str	r2, [r4, #0]
 800acc4:	e7b7      	b.n	800ac36 <__hexnan+0x7a>
 800acc6:	2508      	movs	r5, #8
 800acc8:	e7b5      	b.n	800ac36 <__hexnan+0x7a>
 800acca:	9b01      	ldr	r3, [sp, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d0df      	beq.n	800ac90 <__hexnan+0xd4>
 800acd0:	f04f 32ff 	mov.w	r2, #4294967295
 800acd4:	f1c3 0320 	rsb	r3, r3, #32
 800acd8:	fa22 f303 	lsr.w	r3, r2, r3
 800acdc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ace0:	401a      	ands	r2, r3
 800ace2:	f846 2c04 	str.w	r2, [r6, #-4]
 800ace6:	e7d3      	b.n	800ac90 <__hexnan+0xd4>
 800ace8:	3f04      	subs	r7, #4
 800acea:	e7d1      	b.n	800ac90 <__hexnan+0xd4>
 800acec:	2004      	movs	r0, #4
 800acee:	b007      	add	sp, #28
 800acf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800acf4 <_localeconv_r>:
 800acf4:	4800      	ldr	r0, [pc, #0]	; (800acf8 <_localeconv_r+0x4>)
 800acf6:	4770      	bx	lr
 800acf8:	20000168 	.word	0x20000168

0800acfc <_lseek_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4604      	mov	r4, r0
 800ad00:	4608      	mov	r0, r1
 800ad02:	4611      	mov	r1, r2
 800ad04:	2200      	movs	r2, #0
 800ad06:	4d05      	ldr	r5, [pc, #20]	; (800ad1c <_lseek_r+0x20>)
 800ad08:	602a      	str	r2, [r5, #0]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f7f6 fc78 	bl	8001600 <_lseek>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	d102      	bne.n	800ad1a <_lseek_r+0x1e>
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	b103      	cbz	r3, 800ad1a <_lseek_r+0x1e>
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	20003adc 	.word	0x20003adc

0800ad20 <malloc>:
 800ad20:	4b02      	ldr	r3, [pc, #8]	; (800ad2c <malloc+0xc>)
 800ad22:	4601      	mov	r1, r0
 800ad24:	6818      	ldr	r0, [r3, #0]
 800ad26:	f7fc becb 	b.w	8007ac0 <_malloc_r>
 800ad2a:	bf00      	nop
 800ad2c:	20000010 	.word	0x20000010

0800ad30 <__ascii_mbtowc>:
 800ad30:	b082      	sub	sp, #8
 800ad32:	b901      	cbnz	r1, 800ad36 <__ascii_mbtowc+0x6>
 800ad34:	a901      	add	r1, sp, #4
 800ad36:	b142      	cbz	r2, 800ad4a <__ascii_mbtowc+0x1a>
 800ad38:	b14b      	cbz	r3, 800ad4e <__ascii_mbtowc+0x1e>
 800ad3a:	7813      	ldrb	r3, [r2, #0]
 800ad3c:	600b      	str	r3, [r1, #0]
 800ad3e:	7812      	ldrb	r2, [r2, #0]
 800ad40:	1e10      	subs	r0, r2, #0
 800ad42:	bf18      	it	ne
 800ad44:	2001      	movne	r0, #1
 800ad46:	b002      	add	sp, #8
 800ad48:	4770      	bx	lr
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	e7fb      	b.n	800ad46 <__ascii_mbtowc+0x16>
 800ad4e:	f06f 0001 	mvn.w	r0, #1
 800ad52:	e7f8      	b.n	800ad46 <__ascii_mbtowc+0x16>

0800ad54 <memchr>:
 800ad54:	4603      	mov	r3, r0
 800ad56:	b510      	push	{r4, lr}
 800ad58:	b2c9      	uxtb	r1, r1
 800ad5a:	4402      	add	r2, r0
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	4618      	mov	r0, r3
 800ad60:	d101      	bne.n	800ad66 <memchr+0x12>
 800ad62:	2000      	movs	r0, #0
 800ad64:	e003      	b.n	800ad6e <memchr+0x1a>
 800ad66:	7804      	ldrb	r4, [r0, #0]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	428c      	cmp	r4, r1
 800ad6c:	d1f6      	bne.n	800ad5c <memchr+0x8>
 800ad6e:	bd10      	pop	{r4, pc}

0800ad70 <__malloc_lock>:
 800ad70:	4801      	ldr	r0, [pc, #4]	; (800ad78 <__malloc_lock+0x8>)
 800ad72:	f7fc be8c 	b.w	8007a8e <__retarget_lock_acquire_recursive>
 800ad76:	bf00      	nop
 800ad78:	20003ad4 	.word	0x20003ad4

0800ad7c <__malloc_unlock>:
 800ad7c:	4801      	ldr	r0, [pc, #4]	; (800ad84 <__malloc_unlock+0x8>)
 800ad7e:	f7fc be87 	b.w	8007a90 <__retarget_lock_release_recursive>
 800ad82:	bf00      	nop
 800ad84:	20003ad4 	.word	0x20003ad4

0800ad88 <_Balloc>:
 800ad88:	b570      	push	{r4, r5, r6, lr}
 800ad8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	460d      	mov	r5, r1
 800ad90:	b976      	cbnz	r6, 800adb0 <_Balloc+0x28>
 800ad92:	2010      	movs	r0, #16
 800ad94:	f7ff ffc4 	bl	800ad20 <malloc>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	6260      	str	r0, [r4, #36]	; 0x24
 800ad9c:	b920      	cbnz	r0, 800ada8 <_Balloc+0x20>
 800ad9e:	2166      	movs	r1, #102	; 0x66
 800ada0:	4b17      	ldr	r3, [pc, #92]	; (800ae00 <_Balloc+0x78>)
 800ada2:	4818      	ldr	r0, [pc, #96]	; (800ae04 <_Balloc+0x7c>)
 800ada4:	f000 fe96 	bl	800bad4 <__assert_func>
 800ada8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adac:	6006      	str	r6, [r0, #0]
 800adae:	60c6      	str	r6, [r0, #12]
 800adb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800adb2:	68f3      	ldr	r3, [r6, #12]
 800adb4:	b183      	cbz	r3, 800add8 <_Balloc+0x50>
 800adb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adbe:	b9b8      	cbnz	r0, 800adf0 <_Balloc+0x68>
 800adc0:	2101      	movs	r1, #1
 800adc2:	fa01 f605 	lsl.w	r6, r1, r5
 800adc6:	1d72      	adds	r2, r6, #5
 800adc8:	4620      	mov	r0, r4
 800adca:	0092      	lsls	r2, r2, #2
 800adcc:	f000 fc94 	bl	800b6f8 <_calloc_r>
 800add0:	b160      	cbz	r0, 800adec <_Balloc+0x64>
 800add2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800add6:	e00e      	b.n	800adf6 <_Balloc+0x6e>
 800add8:	2221      	movs	r2, #33	; 0x21
 800adda:	2104      	movs	r1, #4
 800addc:	4620      	mov	r0, r4
 800adde:	f000 fc8b 	bl	800b6f8 <_calloc_r>
 800ade2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ade4:	60f0      	str	r0, [r6, #12]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1e4      	bne.n	800adb6 <_Balloc+0x2e>
 800adec:	2000      	movs	r0, #0
 800adee:	bd70      	pop	{r4, r5, r6, pc}
 800adf0:	6802      	ldr	r2, [r0, #0]
 800adf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800adf6:	2300      	movs	r3, #0
 800adf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800adfc:	e7f7      	b.n	800adee <_Balloc+0x66>
 800adfe:	bf00      	nop
 800ae00:	0800c6b6 	.word	0x0800c6b6
 800ae04:	0800c7bc 	.word	0x0800c7bc

0800ae08 <_Bfree>:
 800ae08:	b570      	push	{r4, r5, r6, lr}
 800ae0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae0c:	4605      	mov	r5, r0
 800ae0e:	460c      	mov	r4, r1
 800ae10:	b976      	cbnz	r6, 800ae30 <_Bfree+0x28>
 800ae12:	2010      	movs	r0, #16
 800ae14:	f7ff ff84 	bl	800ad20 <malloc>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	6268      	str	r0, [r5, #36]	; 0x24
 800ae1c:	b920      	cbnz	r0, 800ae28 <_Bfree+0x20>
 800ae1e:	218a      	movs	r1, #138	; 0x8a
 800ae20:	4b08      	ldr	r3, [pc, #32]	; (800ae44 <_Bfree+0x3c>)
 800ae22:	4809      	ldr	r0, [pc, #36]	; (800ae48 <_Bfree+0x40>)
 800ae24:	f000 fe56 	bl	800bad4 <__assert_func>
 800ae28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae2c:	6006      	str	r6, [r0, #0]
 800ae2e:	60c6      	str	r6, [r0, #12]
 800ae30:	b13c      	cbz	r4, 800ae42 <_Bfree+0x3a>
 800ae32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae34:	6862      	ldr	r2, [r4, #4]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae3c:	6021      	str	r1, [r4, #0]
 800ae3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae42:	bd70      	pop	{r4, r5, r6, pc}
 800ae44:	0800c6b6 	.word	0x0800c6b6
 800ae48:	0800c7bc 	.word	0x0800c7bc

0800ae4c <__multadd>:
 800ae4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae50:	4698      	mov	r8, r3
 800ae52:	460c      	mov	r4, r1
 800ae54:	2300      	movs	r3, #0
 800ae56:	690e      	ldr	r6, [r1, #16]
 800ae58:	4607      	mov	r7, r0
 800ae5a:	f101 0014 	add.w	r0, r1, #20
 800ae5e:	6805      	ldr	r5, [r0, #0]
 800ae60:	3301      	adds	r3, #1
 800ae62:	b2a9      	uxth	r1, r5
 800ae64:	fb02 8101 	mla	r1, r2, r1, r8
 800ae68:	0c2d      	lsrs	r5, r5, #16
 800ae6a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ae6e:	fb02 c505 	mla	r5, r2, r5, ip
 800ae72:	b289      	uxth	r1, r1
 800ae74:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ae78:	429e      	cmp	r6, r3
 800ae7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ae7e:	f840 1b04 	str.w	r1, [r0], #4
 800ae82:	dcec      	bgt.n	800ae5e <__multadd+0x12>
 800ae84:	f1b8 0f00 	cmp.w	r8, #0
 800ae88:	d022      	beq.n	800aed0 <__multadd+0x84>
 800ae8a:	68a3      	ldr	r3, [r4, #8]
 800ae8c:	42b3      	cmp	r3, r6
 800ae8e:	dc19      	bgt.n	800aec4 <__multadd+0x78>
 800ae90:	6861      	ldr	r1, [r4, #4]
 800ae92:	4638      	mov	r0, r7
 800ae94:	3101      	adds	r1, #1
 800ae96:	f7ff ff77 	bl	800ad88 <_Balloc>
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	b928      	cbnz	r0, 800aeaa <__multadd+0x5e>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	21b5      	movs	r1, #181	; 0xb5
 800aea2:	4b0d      	ldr	r3, [pc, #52]	; (800aed8 <__multadd+0x8c>)
 800aea4:	480d      	ldr	r0, [pc, #52]	; (800aedc <__multadd+0x90>)
 800aea6:	f000 fe15 	bl	800bad4 <__assert_func>
 800aeaa:	6922      	ldr	r2, [r4, #16]
 800aeac:	f104 010c 	add.w	r1, r4, #12
 800aeb0:	3202      	adds	r2, #2
 800aeb2:	0092      	lsls	r2, r2, #2
 800aeb4:	300c      	adds	r0, #12
 800aeb6:	f7fc fdec 	bl	8007a92 <memcpy>
 800aeba:	4621      	mov	r1, r4
 800aebc:	4638      	mov	r0, r7
 800aebe:	f7ff ffa3 	bl	800ae08 <_Bfree>
 800aec2:	462c      	mov	r4, r5
 800aec4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800aec8:	3601      	adds	r6, #1
 800aeca:	f8c3 8014 	str.w	r8, [r3, #20]
 800aece:	6126      	str	r6, [r4, #16]
 800aed0:	4620      	mov	r0, r4
 800aed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed6:	bf00      	nop
 800aed8:	0800c72c 	.word	0x0800c72c
 800aedc:	0800c7bc 	.word	0x0800c7bc

0800aee0 <__s2b>:
 800aee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee4:	4615      	mov	r5, r2
 800aee6:	2209      	movs	r2, #9
 800aee8:	461f      	mov	r7, r3
 800aeea:	3308      	adds	r3, #8
 800aeec:	460c      	mov	r4, r1
 800aeee:	fb93 f3f2 	sdiv	r3, r3, r2
 800aef2:	4606      	mov	r6, r0
 800aef4:	2201      	movs	r2, #1
 800aef6:	2100      	movs	r1, #0
 800aef8:	429a      	cmp	r2, r3
 800aefa:	db09      	blt.n	800af10 <__s2b+0x30>
 800aefc:	4630      	mov	r0, r6
 800aefe:	f7ff ff43 	bl	800ad88 <_Balloc>
 800af02:	b940      	cbnz	r0, 800af16 <__s2b+0x36>
 800af04:	4602      	mov	r2, r0
 800af06:	21ce      	movs	r1, #206	; 0xce
 800af08:	4b18      	ldr	r3, [pc, #96]	; (800af6c <__s2b+0x8c>)
 800af0a:	4819      	ldr	r0, [pc, #100]	; (800af70 <__s2b+0x90>)
 800af0c:	f000 fde2 	bl	800bad4 <__assert_func>
 800af10:	0052      	lsls	r2, r2, #1
 800af12:	3101      	adds	r1, #1
 800af14:	e7f0      	b.n	800aef8 <__s2b+0x18>
 800af16:	9b08      	ldr	r3, [sp, #32]
 800af18:	2d09      	cmp	r5, #9
 800af1a:	6143      	str	r3, [r0, #20]
 800af1c:	f04f 0301 	mov.w	r3, #1
 800af20:	6103      	str	r3, [r0, #16]
 800af22:	dd16      	ble.n	800af52 <__s2b+0x72>
 800af24:	f104 0909 	add.w	r9, r4, #9
 800af28:	46c8      	mov	r8, r9
 800af2a:	442c      	add	r4, r5
 800af2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af30:	4601      	mov	r1, r0
 800af32:	220a      	movs	r2, #10
 800af34:	4630      	mov	r0, r6
 800af36:	3b30      	subs	r3, #48	; 0x30
 800af38:	f7ff ff88 	bl	800ae4c <__multadd>
 800af3c:	45a0      	cmp	r8, r4
 800af3e:	d1f5      	bne.n	800af2c <__s2b+0x4c>
 800af40:	f1a5 0408 	sub.w	r4, r5, #8
 800af44:	444c      	add	r4, r9
 800af46:	1b2d      	subs	r5, r5, r4
 800af48:	1963      	adds	r3, r4, r5
 800af4a:	42bb      	cmp	r3, r7
 800af4c:	db04      	blt.n	800af58 <__s2b+0x78>
 800af4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af52:	2509      	movs	r5, #9
 800af54:	340a      	adds	r4, #10
 800af56:	e7f6      	b.n	800af46 <__s2b+0x66>
 800af58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af5c:	4601      	mov	r1, r0
 800af5e:	220a      	movs	r2, #10
 800af60:	4630      	mov	r0, r6
 800af62:	3b30      	subs	r3, #48	; 0x30
 800af64:	f7ff ff72 	bl	800ae4c <__multadd>
 800af68:	e7ee      	b.n	800af48 <__s2b+0x68>
 800af6a:	bf00      	nop
 800af6c:	0800c72c 	.word	0x0800c72c
 800af70:	0800c7bc 	.word	0x0800c7bc

0800af74 <__hi0bits>:
 800af74:	0c02      	lsrs	r2, r0, #16
 800af76:	0412      	lsls	r2, r2, #16
 800af78:	4603      	mov	r3, r0
 800af7a:	b9ca      	cbnz	r2, 800afb0 <__hi0bits+0x3c>
 800af7c:	0403      	lsls	r3, r0, #16
 800af7e:	2010      	movs	r0, #16
 800af80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800af84:	bf04      	itt	eq
 800af86:	021b      	lsleq	r3, r3, #8
 800af88:	3008      	addeq	r0, #8
 800af8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800af8e:	bf04      	itt	eq
 800af90:	011b      	lsleq	r3, r3, #4
 800af92:	3004      	addeq	r0, #4
 800af94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800af98:	bf04      	itt	eq
 800af9a:	009b      	lsleq	r3, r3, #2
 800af9c:	3002      	addeq	r0, #2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	db05      	blt.n	800afae <__hi0bits+0x3a>
 800afa2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800afa6:	f100 0001 	add.w	r0, r0, #1
 800afaa:	bf08      	it	eq
 800afac:	2020      	moveq	r0, #32
 800afae:	4770      	bx	lr
 800afb0:	2000      	movs	r0, #0
 800afb2:	e7e5      	b.n	800af80 <__hi0bits+0xc>

0800afb4 <__lo0bits>:
 800afb4:	6803      	ldr	r3, [r0, #0]
 800afb6:	4602      	mov	r2, r0
 800afb8:	f013 0007 	ands.w	r0, r3, #7
 800afbc:	d00b      	beq.n	800afd6 <__lo0bits+0x22>
 800afbe:	07d9      	lsls	r1, r3, #31
 800afc0:	d422      	bmi.n	800b008 <__lo0bits+0x54>
 800afc2:	0798      	lsls	r0, r3, #30
 800afc4:	bf49      	itett	mi
 800afc6:	085b      	lsrmi	r3, r3, #1
 800afc8:	089b      	lsrpl	r3, r3, #2
 800afca:	2001      	movmi	r0, #1
 800afcc:	6013      	strmi	r3, [r2, #0]
 800afce:	bf5c      	itt	pl
 800afd0:	2002      	movpl	r0, #2
 800afd2:	6013      	strpl	r3, [r2, #0]
 800afd4:	4770      	bx	lr
 800afd6:	b299      	uxth	r1, r3
 800afd8:	b909      	cbnz	r1, 800afde <__lo0bits+0x2a>
 800afda:	2010      	movs	r0, #16
 800afdc:	0c1b      	lsrs	r3, r3, #16
 800afde:	f013 0fff 	tst.w	r3, #255	; 0xff
 800afe2:	bf04      	itt	eq
 800afe4:	0a1b      	lsreq	r3, r3, #8
 800afe6:	3008      	addeq	r0, #8
 800afe8:	0719      	lsls	r1, r3, #28
 800afea:	bf04      	itt	eq
 800afec:	091b      	lsreq	r3, r3, #4
 800afee:	3004      	addeq	r0, #4
 800aff0:	0799      	lsls	r1, r3, #30
 800aff2:	bf04      	itt	eq
 800aff4:	089b      	lsreq	r3, r3, #2
 800aff6:	3002      	addeq	r0, #2
 800aff8:	07d9      	lsls	r1, r3, #31
 800affa:	d403      	bmi.n	800b004 <__lo0bits+0x50>
 800affc:	085b      	lsrs	r3, r3, #1
 800affe:	f100 0001 	add.w	r0, r0, #1
 800b002:	d003      	beq.n	800b00c <__lo0bits+0x58>
 800b004:	6013      	str	r3, [r2, #0]
 800b006:	4770      	bx	lr
 800b008:	2000      	movs	r0, #0
 800b00a:	4770      	bx	lr
 800b00c:	2020      	movs	r0, #32
 800b00e:	4770      	bx	lr

0800b010 <__i2b>:
 800b010:	b510      	push	{r4, lr}
 800b012:	460c      	mov	r4, r1
 800b014:	2101      	movs	r1, #1
 800b016:	f7ff feb7 	bl	800ad88 <_Balloc>
 800b01a:	4602      	mov	r2, r0
 800b01c:	b928      	cbnz	r0, 800b02a <__i2b+0x1a>
 800b01e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b022:	4b04      	ldr	r3, [pc, #16]	; (800b034 <__i2b+0x24>)
 800b024:	4804      	ldr	r0, [pc, #16]	; (800b038 <__i2b+0x28>)
 800b026:	f000 fd55 	bl	800bad4 <__assert_func>
 800b02a:	2301      	movs	r3, #1
 800b02c:	6144      	str	r4, [r0, #20]
 800b02e:	6103      	str	r3, [r0, #16]
 800b030:	bd10      	pop	{r4, pc}
 800b032:	bf00      	nop
 800b034:	0800c72c 	.word	0x0800c72c
 800b038:	0800c7bc 	.word	0x0800c7bc

0800b03c <__multiply>:
 800b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b040:	4614      	mov	r4, r2
 800b042:	690a      	ldr	r2, [r1, #16]
 800b044:	6923      	ldr	r3, [r4, #16]
 800b046:	460d      	mov	r5, r1
 800b048:	429a      	cmp	r2, r3
 800b04a:	bfbe      	ittt	lt
 800b04c:	460b      	movlt	r3, r1
 800b04e:	4625      	movlt	r5, r4
 800b050:	461c      	movlt	r4, r3
 800b052:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b056:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b05a:	68ab      	ldr	r3, [r5, #8]
 800b05c:	6869      	ldr	r1, [r5, #4]
 800b05e:	eb0a 0709 	add.w	r7, sl, r9
 800b062:	42bb      	cmp	r3, r7
 800b064:	b085      	sub	sp, #20
 800b066:	bfb8      	it	lt
 800b068:	3101      	addlt	r1, #1
 800b06a:	f7ff fe8d 	bl	800ad88 <_Balloc>
 800b06e:	b930      	cbnz	r0, 800b07e <__multiply+0x42>
 800b070:	4602      	mov	r2, r0
 800b072:	f240 115d 	movw	r1, #349	; 0x15d
 800b076:	4b41      	ldr	r3, [pc, #260]	; (800b17c <__multiply+0x140>)
 800b078:	4841      	ldr	r0, [pc, #260]	; (800b180 <__multiply+0x144>)
 800b07a:	f000 fd2b 	bl	800bad4 <__assert_func>
 800b07e:	f100 0614 	add.w	r6, r0, #20
 800b082:	4633      	mov	r3, r6
 800b084:	2200      	movs	r2, #0
 800b086:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b08a:	4543      	cmp	r3, r8
 800b08c:	d31e      	bcc.n	800b0cc <__multiply+0x90>
 800b08e:	f105 0c14 	add.w	ip, r5, #20
 800b092:	f104 0314 	add.w	r3, r4, #20
 800b096:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b09a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b09e:	9202      	str	r2, [sp, #8]
 800b0a0:	ebac 0205 	sub.w	r2, ip, r5
 800b0a4:	3a15      	subs	r2, #21
 800b0a6:	f022 0203 	bic.w	r2, r2, #3
 800b0aa:	3204      	adds	r2, #4
 800b0ac:	f105 0115 	add.w	r1, r5, #21
 800b0b0:	458c      	cmp	ip, r1
 800b0b2:	bf38      	it	cc
 800b0b4:	2204      	movcc	r2, #4
 800b0b6:	9201      	str	r2, [sp, #4]
 800b0b8:	9a02      	ldr	r2, [sp, #8]
 800b0ba:	9303      	str	r3, [sp, #12]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d808      	bhi.n	800b0d2 <__multiply+0x96>
 800b0c0:	2f00      	cmp	r7, #0
 800b0c2:	dc55      	bgt.n	800b170 <__multiply+0x134>
 800b0c4:	6107      	str	r7, [r0, #16]
 800b0c6:	b005      	add	sp, #20
 800b0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	f843 2b04 	str.w	r2, [r3], #4
 800b0d0:	e7db      	b.n	800b08a <__multiply+0x4e>
 800b0d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0d6:	f1ba 0f00 	cmp.w	sl, #0
 800b0da:	d020      	beq.n	800b11e <__multiply+0xe2>
 800b0dc:	46b1      	mov	r9, r6
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f105 0e14 	add.w	lr, r5, #20
 800b0e4:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b0e8:	f8d9 b000 	ldr.w	fp, [r9]
 800b0ec:	b2a1      	uxth	r1, r4
 800b0ee:	fa1f fb8b 	uxth.w	fp, fp
 800b0f2:	fb0a b101 	mla	r1, sl, r1, fp
 800b0f6:	4411      	add	r1, r2
 800b0f8:	f8d9 2000 	ldr.w	r2, [r9]
 800b0fc:	0c24      	lsrs	r4, r4, #16
 800b0fe:	0c12      	lsrs	r2, r2, #16
 800b100:	fb0a 2404 	mla	r4, sl, r4, r2
 800b104:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b108:	b289      	uxth	r1, r1
 800b10a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b10e:	45f4      	cmp	ip, lr
 800b110:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b114:	f849 1b04 	str.w	r1, [r9], #4
 800b118:	d8e4      	bhi.n	800b0e4 <__multiply+0xa8>
 800b11a:	9901      	ldr	r1, [sp, #4]
 800b11c:	5072      	str	r2, [r6, r1]
 800b11e:	9a03      	ldr	r2, [sp, #12]
 800b120:	3304      	adds	r3, #4
 800b122:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b126:	f1b9 0f00 	cmp.w	r9, #0
 800b12a:	d01f      	beq.n	800b16c <__multiply+0x130>
 800b12c:	46b6      	mov	lr, r6
 800b12e:	f04f 0a00 	mov.w	sl, #0
 800b132:	6834      	ldr	r4, [r6, #0]
 800b134:	f105 0114 	add.w	r1, r5, #20
 800b138:	880a      	ldrh	r2, [r1, #0]
 800b13a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b13e:	b2a4      	uxth	r4, r4
 800b140:	fb09 b202 	mla	r2, r9, r2, fp
 800b144:	4492      	add	sl, r2
 800b146:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b14a:	f84e 4b04 	str.w	r4, [lr], #4
 800b14e:	f851 4b04 	ldr.w	r4, [r1], #4
 800b152:	f8be 2000 	ldrh.w	r2, [lr]
 800b156:	0c24      	lsrs	r4, r4, #16
 800b158:	fb09 2404 	mla	r4, r9, r4, r2
 800b15c:	458c      	cmp	ip, r1
 800b15e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b162:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b166:	d8e7      	bhi.n	800b138 <__multiply+0xfc>
 800b168:	9a01      	ldr	r2, [sp, #4]
 800b16a:	50b4      	str	r4, [r6, r2]
 800b16c:	3604      	adds	r6, #4
 800b16e:	e7a3      	b.n	800b0b8 <__multiply+0x7c>
 800b170:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1a5      	bne.n	800b0c4 <__multiply+0x88>
 800b178:	3f01      	subs	r7, #1
 800b17a:	e7a1      	b.n	800b0c0 <__multiply+0x84>
 800b17c:	0800c72c 	.word	0x0800c72c
 800b180:	0800c7bc 	.word	0x0800c7bc

0800b184 <__pow5mult>:
 800b184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b188:	4615      	mov	r5, r2
 800b18a:	f012 0203 	ands.w	r2, r2, #3
 800b18e:	4606      	mov	r6, r0
 800b190:	460f      	mov	r7, r1
 800b192:	d007      	beq.n	800b1a4 <__pow5mult+0x20>
 800b194:	4c25      	ldr	r4, [pc, #148]	; (800b22c <__pow5mult+0xa8>)
 800b196:	3a01      	subs	r2, #1
 800b198:	2300      	movs	r3, #0
 800b19a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b19e:	f7ff fe55 	bl	800ae4c <__multadd>
 800b1a2:	4607      	mov	r7, r0
 800b1a4:	10ad      	asrs	r5, r5, #2
 800b1a6:	d03d      	beq.n	800b224 <__pow5mult+0xa0>
 800b1a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1aa:	b97c      	cbnz	r4, 800b1cc <__pow5mult+0x48>
 800b1ac:	2010      	movs	r0, #16
 800b1ae:	f7ff fdb7 	bl	800ad20 <malloc>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	6270      	str	r0, [r6, #36]	; 0x24
 800b1b6:	b928      	cbnz	r0, 800b1c4 <__pow5mult+0x40>
 800b1b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1bc:	4b1c      	ldr	r3, [pc, #112]	; (800b230 <__pow5mult+0xac>)
 800b1be:	481d      	ldr	r0, [pc, #116]	; (800b234 <__pow5mult+0xb0>)
 800b1c0:	f000 fc88 	bl	800bad4 <__assert_func>
 800b1c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1c8:	6004      	str	r4, [r0, #0]
 800b1ca:	60c4      	str	r4, [r0, #12]
 800b1cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1d4:	b94c      	cbnz	r4, 800b1ea <__pow5mult+0x66>
 800b1d6:	f240 2171 	movw	r1, #625	; 0x271
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f7ff ff18 	bl	800b010 <__i2b>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1e8:	6003      	str	r3, [r0, #0]
 800b1ea:	f04f 0900 	mov.w	r9, #0
 800b1ee:	07eb      	lsls	r3, r5, #31
 800b1f0:	d50a      	bpl.n	800b208 <__pow5mult+0x84>
 800b1f2:	4639      	mov	r1, r7
 800b1f4:	4622      	mov	r2, r4
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f7ff ff20 	bl	800b03c <__multiply>
 800b1fc:	4680      	mov	r8, r0
 800b1fe:	4639      	mov	r1, r7
 800b200:	4630      	mov	r0, r6
 800b202:	f7ff fe01 	bl	800ae08 <_Bfree>
 800b206:	4647      	mov	r7, r8
 800b208:	106d      	asrs	r5, r5, #1
 800b20a:	d00b      	beq.n	800b224 <__pow5mult+0xa0>
 800b20c:	6820      	ldr	r0, [r4, #0]
 800b20e:	b938      	cbnz	r0, 800b220 <__pow5mult+0x9c>
 800b210:	4622      	mov	r2, r4
 800b212:	4621      	mov	r1, r4
 800b214:	4630      	mov	r0, r6
 800b216:	f7ff ff11 	bl	800b03c <__multiply>
 800b21a:	6020      	str	r0, [r4, #0]
 800b21c:	f8c0 9000 	str.w	r9, [r0]
 800b220:	4604      	mov	r4, r0
 800b222:	e7e4      	b.n	800b1ee <__pow5mult+0x6a>
 800b224:	4638      	mov	r0, r7
 800b226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b22a:	bf00      	nop
 800b22c:	0800c910 	.word	0x0800c910
 800b230:	0800c6b6 	.word	0x0800c6b6
 800b234:	0800c7bc 	.word	0x0800c7bc

0800b238 <__lshift>:
 800b238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b23c:	460c      	mov	r4, r1
 800b23e:	4607      	mov	r7, r0
 800b240:	4691      	mov	r9, r2
 800b242:	6923      	ldr	r3, [r4, #16]
 800b244:	6849      	ldr	r1, [r1, #4]
 800b246:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b24a:	68a3      	ldr	r3, [r4, #8]
 800b24c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b250:	f108 0601 	add.w	r6, r8, #1
 800b254:	42b3      	cmp	r3, r6
 800b256:	db0b      	blt.n	800b270 <__lshift+0x38>
 800b258:	4638      	mov	r0, r7
 800b25a:	f7ff fd95 	bl	800ad88 <_Balloc>
 800b25e:	4605      	mov	r5, r0
 800b260:	b948      	cbnz	r0, 800b276 <__lshift+0x3e>
 800b262:	4602      	mov	r2, r0
 800b264:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b268:	4b27      	ldr	r3, [pc, #156]	; (800b308 <__lshift+0xd0>)
 800b26a:	4828      	ldr	r0, [pc, #160]	; (800b30c <__lshift+0xd4>)
 800b26c:	f000 fc32 	bl	800bad4 <__assert_func>
 800b270:	3101      	adds	r1, #1
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	e7ee      	b.n	800b254 <__lshift+0x1c>
 800b276:	2300      	movs	r3, #0
 800b278:	f100 0114 	add.w	r1, r0, #20
 800b27c:	f100 0210 	add.w	r2, r0, #16
 800b280:	4618      	mov	r0, r3
 800b282:	4553      	cmp	r3, sl
 800b284:	db33      	blt.n	800b2ee <__lshift+0xb6>
 800b286:	6920      	ldr	r0, [r4, #16]
 800b288:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b28c:	f104 0314 	add.w	r3, r4, #20
 800b290:	f019 091f 	ands.w	r9, r9, #31
 800b294:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b298:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b29c:	d02b      	beq.n	800b2f6 <__lshift+0xbe>
 800b29e:	468a      	mov	sl, r1
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f1c9 0e20 	rsb	lr, r9, #32
 800b2a6:	6818      	ldr	r0, [r3, #0]
 800b2a8:	fa00 f009 	lsl.w	r0, r0, r9
 800b2ac:	4302      	orrs	r2, r0
 800b2ae:	f84a 2b04 	str.w	r2, [sl], #4
 800b2b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2b6:	459c      	cmp	ip, r3
 800b2b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2bc:	d8f3      	bhi.n	800b2a6 <__lshift+0x6e>
 800b2be:	ebac 0304 	sub.w	r3, ip, r4
 800b2c2:	3b15      	subs	r3, #21
 800b2c4:	f023 0303 	bic.w	r3, r3, #3
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	f104 0015 	add.w	r0, r4, #21
 800b2ce:	4584      	cmp	ip, r0
 800b2d0:	bf38      	it	cc
 800b2d2:	2304      	movcc	r3, #4
 800b2d4:	50ca      	str	r2, [r1, r3]
 800b2d6:	b10a      	cbz	r2, 800b2dc <__lshift+0xa4>
 800b2d8:	f108 0602 	add.w	r6, r8, #2
 800b2dc:	3e01      	subs	r6, #1
 800b2de:	4638      	mov	r0, r7
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	612e      	str	r6, [r5, #16]
 800b2e4:	f7ff fd90 	bl	800ae08 <_Bfree>
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	e7c5      	b.n	800b282 <__lshift+0x4a>
 800b2f6:	3904      	subs	r1, #4
 800b2f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2fc:	459c      	cmp	ip, r3
 800b2fe:	f841 2f04 	str.w	r2, [r1, #4]!
 800b302:	d8f9      	bhi.n	800b2f8 <__lshift+0xc0>
 800b304:	e7ea      	b.n	800b2dc <__lshift+0xa4>
 800b306:	bf00      	nop
 800b308:	0800c72c 	.word	0x0800c72c
 800b30c:	0800c7bc 	.word	0x0800c7bc

0800b310 <__mcmp>:
 800b310:	4603      	mov	r3, r0
 800b312:	690a      	ldr	r2, [r1, #16]
 800b314:	6900      	ldr	r0, [r0, #16]
 800b316:	b530      	push	{r4, r5, lr}
 800b318:	1a80      	subs	r0, r0, r2
 800b31a:	d10d      	bne.n	800b338 <__mcmp+0x28>
 800b31c:	3314      	adds	r3, #20
 800b31e:	3114      	adds	r1, #20
 800b320:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b324:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b328:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b32c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b330:	4295      	cmp	r5, r2
 800b332:	d002      	beq.n	800b33a <__mcmp+0x2a>
 800b334:	d304      	bcc.n	800b340 <__mcmp+0x30>
 800b336:	2001      	movs	r0, #1
 800b338:	bd30      	pop	{r4, r5, pc}
 800b33a:	42a3      	cmp	r3, r4
 800b33c:	d3f4      	bcc.n	800b328 <__mcmp+0x18>
 800b33e:	e7fb      	b.n	800b338 <__mcmp+0x28>
 800b340:	f04f 30ff 	mov.w	r0, #4294967295
 800b344:	e7f8      	b.n	800b338 <__mcmp+0x28>
	...

0800b348 <__mdiff>:
 800b348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b34c:	460c      	mov	r4, r1
 800b34e:	4606      	mov	r6, r0
 800b350:	4611      	mov	r1, r2
 800b352:	4620      	mov	r0, r4
 800b354:	4692      	mov	sl, r2
 800b356:	f7ff ffdb 	bl	800b310 <__mcmp>
 800b35a:	1e05      	subs	r5, r0, #0
 800b35c:	d111      	bne.n	800b382 <__mdiff+0x3a>
 800b35e:	4629      	mov	r1, r5
 800b360:	4630      	mov	r0, r6
 800b362:	f7ff fd11 	bl	800ad88 <_Balloc>
 800b366:	4602      	mov	r2, r0
 800b368:	b928      	cbnz	r0, 800b376 <__mdiff+0x2e>
 800b36a:	f240 2132 	movw	r1, #562	; 0x232
 800b36e:	4b3c      	ldr	r3, [pc, #240]	; (800b460 <__mdiff+0x118>)
 800b370:	483c      	ldr	r0, [pc, #240]	; (800b464 <__mdiff+0x11c>)
 800b372:	f000 fbaf 	bl	800bad4 <__assert_func>
 800b376:	2301      	movs	r3, #1
 800b378:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b37c:	4610      	mov	r0, r2
 800b37e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b382:	bfa4      	itt	ge
 800b384:	4653      	movge	r3, sl
 800b386:	46a2      	movge	sl, r4
 800b388:	4630      	mov	r0, r6
 800b38a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b38e:	bfa6      	itte	ge
 800b390:	461c      	movge	r4, r3
 800b392:	2500      	movge	r5, #0
 800b394:	2501      	movlt	r5, #1
 800b396:	f7ff fcf7 	bl	800ad88 <_Balloc>
 800b39a:	4602      	mov	r2, r0
 800b39c:	b918      	cbnz	r0, 800b3a6 <__mdiff+0x5e>
 800b39e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3a2:	4b2f      	ldr	r3, [pc, #188]	; (800b460 <__mdiff+0x118>)
 800b3a4:	e7e4      	b.n	800b370 <__mdiff+0x28>
 800b3a6:	f100 0814 	add.w	r8, r0, #20
 800b3aa:	f8da 7010 	ldr.w	r7, [sl, #16]
 800b3ae:	60c5      	str	r5, [r0, #12]
 800b3b0:	f04f 0c00 	mov.w	ip, #0
 800b3b4:	f10a 0514 	add.w	r5, sl, #20
 800b3b8:	f10a 0010 	add.w	r0, sl, #16
 800b3bc:	46c2      	mov	sl, r8
 800b3be:	6926      	ldr	r6, [r4, #16]
 800b3c0:	f104 0914 	add.w	r9, r4, #20
 800b3c4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800b3c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b3cc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800b3d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3d4:	fa1f f18b 	uxth.w	r1, fp
 800b3d8:	4461      	add	r1, ip
 800b3da:	fa1f fc83 	uxth.w	ip, r3
 800b3de:	0c1b      	lsrs	r3, r3, #16
 800b3e0:	eba1 010c 	sub.w	r1, r1, ip
 800b3e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3e8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b3ec:	b289      	uxth	r1, r1
 800b3ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b3f2:	454e      	cmp	r6, r9
 800b3f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b3f8:	f84a 3b04 	str.w	r3, [sl], #4
 800b3fc:	d8e6      	bhi.n	800b3cc <__mdiff+0x84>
 800b3fe:	1b33      	subs	r3, r6, r4
 800b400:	3b15      	subs	r3, #21
 800b402:	f023 0303 	bic.w	r3, r3, #3
 800b406:	3415      	adds	r4, #21
 800b408:	3304      	adds	r3, #4
 800b40a:	42a6      	cmp	r6, r4
 800b40c:	bf38      	it	cc
 800b40e:	2304      	movcc	r3, #4
 800b410:	441d      	add	r5, r3
 800b412:	4443      	add	r3, r8
 800b414:	461e      	mov	r6, r3
 800b416:	462c      	mov	r4, r5
 800b418:	4574      	cmp	r4, lr
 800b41a:	d30e      	bcc.n	800b43a <__mdiff+0xf2>
 800b41c:	f10e 0103 	add.w	r1, lr, #3
 800b420:	1b49      	subs	r1, r1, r5
 800b422:	f021 0103 	bic.w	r1, r1, #3
 800b426:	3d03      	subs	r5, #3
 800b428:	45ae      	cmp	lr, r5
 800b42a:	bf38      	it	cc
 800b42c:	2100      	movcc	r1, #0
 800b42e:	4419      	add	r1, r3
 800b430:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b434:	b18b      	cbz	r3, 800b45a <__mdiff+0x112>
 800b436:	6117      	str	r7, [r2, #16]
 800b438:	e7a0      	b.n	800b37c <__mdiff+0x34>
 800b43a:	f854 8b04 	ldr.w	r8, [r4], #4
 800b43e:	fa1f f188 	uxth.w	r1, r8
 800b442:	4461      	add	r1, ip
 800b444:	1408      	asrs	r0, r1, #16
 800b446:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800b44a:	b289      	uxth	r1, r1
 800b44c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b450:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b454:	f846 1b04 	str.w	r1, [r6], #4
 800b458:	e7de      	b.n	800b418 <__mdiff+0xd0>
 800b45a:	3f01      	subs	r7, #1
 800b45c:	e7e8      	b.n	800b430 <__mdiff+0xe8>
 800b45e:	bf00      	nop
 800b460:	0800c72c 	.word	0x0800c72c
 800b464:	0800c7bc 	.word	0x0800c7bc

0800b468 <__ulp>:
 800b468:	4b11      	ldr	r3, [pc, #68]	; (800b4b0 <__ulp+0x48>)
 800b46a:	400b      	ands	r3, r1
 800b46c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b470:	2b00      	cmp	r3, #0
 800b472:	dd02      	ble.n	800b47a <__ulp+0x12>
 800b474:	2000      	movs	r0, #0
 800b476:	4619      	mov	r1, r3
 800b478:	4770      	bx	lr
 800b47a:	425b      	negs	r3, r3
 800b47c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b480:	f04f 0000 	mov.w	r0, #0
 800b484:	f04f 0100 	mov.w	r1, #0
 800b488:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b48c:	da04      	bge.n	800b498 <__ulp+0x30>
 800b48e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b492:	fa43 f102 	asr.w	r1, r3, r2
 800b496:	4770      	bx	lr
 800b498:	f1a2 0314 	sub.w	r3, r2, #20
 800b49c:	2b1e      	cmp	r3, #30
 800b49e:	bfd6      	itet	le
 800b4a0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b4a4:	2301      	movgt	r3, #1
 800b4a6:	fa22 f303 	lsrle.w	r3, r2, r3
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	7ff00000 	.word	0x7ff00000

0800b4b4 <__b2d>:
 800b4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b8:	6907      	ldr	r7, [r0, #16]
 800b4ba:	f100 0914 	add.w	r9, r0, #20
 800b4be:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b4c2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b4c6:	f1a7 0804 	sub.w	r8, r7, #4
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	f7ff fd52 	bl	800af74 <__hi0bits>
 800b4d0:	f1c0 0320 	rsb	r3, r0, #32
 800b4d4:	280a      	cmp	r0, #10
 800b4d6:	600b      	str	r3, [r1, #0]
 800b4d8:	491f      	ldr	r1, [pc, #124]	; (800b558 <__b2d+0xa4>)
 800b4da:	dc17      	bgt.n	800b50c <__b2d+0x58>
 800b4dc:	45c1      	cmp	r9, r8
 800b4de:	bf28      	it	cs
 800b4e0:	2200      	movcs	r2, #0
 800b4e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b4e6:	fa26 f30c 	lsr.w	r3, r6, ip
 800b4ea:	bf38      	it	cc
 800b4ec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b4f0:	ea43 0501 	orr.w	r5, r3, r1
 800b4f4:	f100 0315 	add.w	r3, r0, #21
 800b4f8:	fa06 f303 	lsl.w	r3, r6, r3
 800b4fc:	fa22 f20c 	lsr.w	r2, r2, ip
 800b500:	ea43 0402 	orr.w	r4, r3, r2
 800b504:	4620      	mov	r0, r4
 800b506:	4629      	mov	r1, r5
 800b508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b50c:	45c1      	cmp	r9, r8
 800b50e:	bf2e      	itee	cs
 800b510:	2200      	movcs	r2, #0
 800b512:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b516:	f1a7 0808 	subcc.w	r8, r7, #8
 800b51a:	f1b0 030b 	subs.w	r3, r0, #11
 800b51e:	d016      	beq.n	800b54e <__b2d+0x9a>
 800b520:	f1c3 0720 	rsb	r7, r3, #32
 800b524:	fa22 f107 	lsr.w	r1, r2, r7
 800b528:	45c8      	cmp	r8, r9
 800b52a:	fa06 f603 	lsl.w	r6, r6, r3
 800b52e:	ea46 0601 	orr.w	r6, r6, r1
 800b532:	bf94      	ite	ls
 800b534:	2100      	movls	r1, #0
 800b536:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b53a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b53e:	fa02 f003 	lsl.w	r0, r2, r3
 800b542:	40f9      	lsrs	r1, r7
 800b544:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b548:	ea40 0401 	orr.w	r4, r0, r1
 800b54c:	e7da      	b.n	800b504 <__b2d+0x50>
 800b54e:	4614      	mov	r4, r2
 800b550:	ea46 0501 	orr.w	r5, r6, r1
 800b554:	e7d6      	b.n	800b504 <__b2d+0x50>
 800b556:	bf00      	nop
 800b558:	3ff00000 	.word	0x3ff00000

0800b55c <__d2b>:
 800b55c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b560:	2101      	movs	r1, #1
 800b562:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b566:	4690      	mov	r8, r2
 800b568:	461d      	mov	r5, r3
 800b56a:	f7ff fc0d 	bl	800ad88 <_Balloc>
 800b56e:	4604      	mov	r4, r0
 800b570:	b930      	cbnz	r0, 800b580 <__d2b+0x24>
 800b572:	4602      	mov	r2, r0
 800b574:	f240 310a 	movw	r1, #778	; 0x30a
 800b578:	4b24      	ldr	r3, [pc, #144]	; (800b60c <__d2b+0xb0>)
 800b57a:	4825      	ldr	r0, [pc, #148]	; (800b610 <__d2b+0xb4>)
 800b57c:	f000 faaa 	bl	800bad4 <__assert_func>
 800b580:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b584:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b588:	bb2d      	cbnz	r5, 800b5d6 <__d2b+0x7a>
 800b58a:	9301      	str	r3, [sp, #4]
 800b58c:	f1b8 0300 	subs.w	r3, r8, #0
 800b590:	d026      	beq.n	800b5e0 <__d2b+0x84>
 800b592:	4668      	mov	r0, sp
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	f7ff fd0d 	bl	800afb4 <__lo0bits>
 800b59a:	9900      	ldr	r1, [sp, #0]
 800b59c:	b1f0      	cbz	r0, 800b5dc <__d2b+0x80>
 800b59e:	9a01      	ldr	r2, [sp, #4]
 800b5a0:	f1c0 0320 	rsb	r3, r0, #32
 800b5a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a8:	430b      	orrs	r3, r1
 800b5aa:	40c2      	lsrs	r2, r0
 800b5ac:	6163      	str	r3, [r4, #20]
 800b5ae:	9201      	str	r2, [sp, #4]
 800b5b0:	9b01      	ldr	r3, [sp, #4]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	bf14      	ite	ne
 800b5b6:	2102      	movne	r1, #2
 800b5b8:	2101      	moveq	r1, #1
 800b5ba:	61a3      	str	r3, [r4, #24]
 800b5bc:	6121      	str	r1, [r4, #16]
 800b5be:	b1c5      	cbz	r5, 800b5f2 <__d2b+0x96>
 800b5c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5c4:	4405      	add	r5, r0
 800b5c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5ca:	603d      	str	r5, [r7, #0]
 800b5cc:	6030      	str	r0, [r6, #0]
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	b002      	add	sp, #8
 800b5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5da:	e7d6      	b.n	800b58a <__d2b+0x2e>
 800b5dc:	6161      	str	r1, [r4, #20]
 800b5de:	e7e7      	b.n	800b5b0 <__d2b+0x54>
 800b5e0:	a801      	add	r0, sp, #4
 800b5e2:	f7ff fce7 	bl	800afb4 <__lo0bits>
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	9b01      	ldr	r3, [sp, #4]
 800b5ea:	6121      	str	r1, [r4, #16]
 800b5ec:	6163      	str	r3, [r4, #20]
 800b5ee:	3020      	adds	r0, #32
 800b5f0:	e7e5      	b.n	800b5be <__d2b+0x62>
 800b5f2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b5f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5fa:	6038      	str	r0, [r7, #0]
 800b5fc:	6918      	ldr	r0, [r3, #16]
 800b5fe:	f7ff fcb9 	bl	800af74 <__hi0bits>
 800b602:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b606:	6031      	str	r1, [r6, #0]
 800b608:	e7e1      	b.n	800b5ce <__d2b+0x72>
 800b60a:	bf00      	nop
 800b60c:	0800c72c 	.word	0x0800c72c
 800b610:	0800c7bc 	.word	0x0800c7bc

0800b614 <__ratio>:
 800b614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b618:	4688      	mov	r8, r1
 800b61a:	4669      	mov	r1, sp
 800b61c:	4681      	mov	r9, r0
 800b61e:	f7ff ff49 	bl	800b4b4 <__b2d>
 800b622:	460f      	mov	r7, r1
 800b624:	4604      	mov	r4, r0
 800b626:	460d      	mov	r5, r1
 800b628:	4640      	mov	r0, r8
 800b62a:	a901      	add	r1, sp, #4
 800b62c:	f7ff ff42 	bl	800b4b4 <__b2d>
 800b630:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b634:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b638:	468b      	mov	fp, r1
 800b63a:	eba3 0c02 	sub.w	ip, r3, r2
 800b63e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b642:	1a9b      	subs	r3, r3, r2
 800b644:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b648:	2b00      	cmp	r3, #0
 800b64a:	bfd5      	itete	le
 800b64c:	460a      	movle	r2, r1
 800b64e:	462a      	movgt	r2, r5
 800b650:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b654:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b658:	bfd8      	it	le
 800b65a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b65e:	465b      	mov	r3, fp
 800b660:	4602      	mov	r2, r0
 800b662:	4639      	mov	r1, r7
 800b664:	4620      	mov	r0, r4
 800b666:	f7f5 f86b 	bl	8000740 <__aeabi_ddiv>
 800b66a:	b003      	add	sp, #12
 800b66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b670 <__copybits>:
 800b670:	3901      	subs	r1, #1
 800b672:	b570      	push	{r4, r5, r6, lr}
 800b674:	1149      	asrs	r1, r1, #5
 800b676:	6914      	ldr	r4, [r2, #16]
 800b678:	3101      	adds	r1, #1
 800b67a:	f102 0314 	add.w	r3, r2, #20
 800b67e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b682:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b686:	1f05      	subs	r5, r0, #4
 800b688:	42a3      	cmp	r3, r4
 800b68a:	d30c      	bcc.n	800b6a6 <__copybits+0x36>
 800b68c:	1aa3      	subs	r3, r4, r2
 800b68e:	3b11      	subs	r3, #17
 800b690:	f023 0303 	bic.w	r3, r3, #3
 800b694:	3211      	adds	r2, #17
 800b696:	42a2      	cmp	r2, r4
 800b698:	bf88      	it	hi
 800b69a:	2300      	movhi	r3, #0
 800b69c:	4418      	add	r0, r3
 800b69e:	2300      	movs	r3, #0
 800b6a0:	4288      	cmp	r0, r1
 800b6a2:	d305      	bcc.n	800b6b0 <__copybits+0x40>
 800b6a4:	bd70      	pop	{r4, r5, r6, pc}
 800b6a6:	f853 6b04 	ldr.w	r6, [r3], #4
 800b6aa:	f845 6f04 	str.w	r6, [r5, #4]!
 800b6ae:	e7eb      	b.n	800b688 <__copybits+0x18>
 800b6b0:	f840 3b04 	str.w	r3, [r0], #4
 800b6b4:	e7f4      	b.n	800b6a0 <__copybits+0x30>

0800b6b6 <__any_on>:
 800b6b6:	f100 0214 	add.w	r2, r0, #20
 800b6ba:	6900      	ldr	r0, [r0, #16]
 800b6bc:	114b      	asrs	r3, r1, #5
 800b6be:	4298      	cmp	r0, r3
 800b6c0:	b510      	push	{r4, lr}
 800b6c2:	db11      	blt.n	800b6e8 <__any_on+0x32>
 800b6c4:	dd0a      	ble.n	800b6dc <__any_on+0x26>
 800b6c6:	f011 011f 	ands.w	r1, r1, #31
 800b6ca:	d007      	beq.n	800b6dc <__any_on+0x26>
 800b6cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b6d0:	fa24 f001 	lsr.w	r0, r4, r1
 800b6d4:	fa00 f101 	lsl.w	r1, r0, r1
 800b6d8:	428c      	cmp	r4, r1
 800b6da:	d10b      	bne.n	800b6f4 <__any_on+0x3e>
 800b6dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d803      	bhi.n	800b6ec <__any_on+0x36>
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	bd10      	pop	{r4, pc}
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	e7f7      	b.n	800b6dc <__any_on+0x26>
 800b6ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b6f0:	2900      	cmp	r1, #0
 800b6f2:	d0f5      	beq.n	800b6e0 <__any_on+0x2a>
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	e7f6      	b.n	800b6e6 <__any_on+0x30>

0800b6f8 <_calloc_r>:
 800b6f8:	b538      	push	{r3, r4, r5, lr}
 800b6fa:	fb02 f501 	mul.w	r5, r2, r1
 800b6fe:	4629      	mov	r1, r5
 800b700:	f7fc f9de 	bl	8007ac0 <_malloc_r>
 800b704:	4604      	mov	r4, r0
 800b706:	b118      	cbz	r0, 800b710 <_calloc_r+0x18>
 800b708:	462a      	mov	r2, r5
 800b70a:	2100      	movs	r1, #0
 800b70c:	f7fc f9cf 	bl	8007aae <memset>
 800b710:	4620      	mov	r0, r4
 800b712:	bd38      	pop	{r3, r4, r5, pc}

0800b714 <_free_r>:
 800b714:	b538      	push	{r3, r4, r5, lr}
 800b716:	4605      	mov	r5, r0
 800b718:	2900      	cmp	r1, #0
 800b71a:	d043      	beq.n	800b7a4 <_free_r+0x90>
 800b71c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b720:	1f0c      	subs	r4, r1, #4
 800b722:	2b00      	cmp	r3, #0
 800b724:	bfb8      	it	lt
 800b726:	18e4      	addlt	r4, r4, r3
 800b728:	f7ff fb22 	bl	800ad70 <__malloc_lock>
 800b72c:	4a1e      	ldr	r2, [pc, #120]	; (800b7a8 <_free_r+0x94>)
 800b72e:	6813      	ldr	r3, [r2, #0]
 800b730:	4610      	mov	r0, r2
 800b732:	b933      	cbnz	r3, 800b742 <_free_r+0x2e>
 800b734:	6063      	str	r3, [r4, #4]
 800b736:	6014      	str	r4, [r2, #0]
 800b738:	4628      	mov	r0, r5
 800b73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b73e:	f7ff bb1d 	b.w	800ad7c <__malloc_unlock>
 800b742:	42a3      	cmp	r3, r4
 800b744:	d90a      	bls.n	800b75c <_free_r+0x48>
 800b746:	6821      	ldr	r1, [r4, #0]
 800b748:	1862      	adds	r2, r4, r1
 800b74a:	4293      	cmp	r3, r2
 800b74c:	bf01      	itttt	eq
 800b74e:	681a      	ldreq	r2, [r3, #0]
 800b750:	685b      	ldreq	r3, [r3, #4]
 800b752:	1852      	addeq	r2, r2, r1
 800b754:	6022      	streq	r2, [r4, #0]
 800b756:	6063      	str	r3, [r4, #4]
 800b758:	6004      	str	r4, [r0, #0]
 800b75a:	e7ed      	b.n	800b738 <_free_r+0x24>
 800b75c:	461a      	mov	r2, r3
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	b10b      	cbz	r3, 800b766 <_free_r+0x52>
 800b762:	42a3      	cmp	r3, r4
 800b764:	d9fa      	bls.n	800b75c <_free_r+0x48>
 800b766:	6811      	ldr	r1, [r2, #0]
 800b768:	1850      	adds	r0, r2, r1
 800b76a:	42a0      	cmp	r0, r4
 800b76c:	d10b      	bne.n	800b786 <_free_r+0x72>
 800b76e:	6820      	ldr	r0, [r4, #0]
 800b770:	4401      	add	r1, r0
 800b772:	1850      	adds	r0, r2, r1
 800b774:	4283      	cmp	r3, r0
 800b776:	6011      	str	r1, [r2, #0]
 800b778:	d1de      	bne.n	800b738 <_free_r+0x24>
 800b77a:	6818      	ldr	r0, [r3, #0]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	4401      	add	r1, r0
 800b780:	6011      	str	r1, [r2, #0]
 800b782:	6053      	str	r3, [r2, #4]
 800b784:	e7d8      	b.n	800b738 <_free_r+0x24>
 800b786:	d902      	bls.n	800b78e <_free_r+0x7a>
 800b788:	230c      	movs	r3, #12
 800b78a:	602b      	str	r3, [r5, #0]
 800b78c:	e7d4      	b.n	800b738 <_free_r+0x24>
 800b78e:	6820      	ldr	r0, [r4, #0]
 800b790:	1821      	adds	r1, r4, r0
 800b792:	428b      	cmp	r3, r1
 800b794:	bf01      	itttt	eq
 800b796:	6819      	ldreq	r1, [r3, #0]
 800b798:	685b      	ldreq	r3, [r3, #4]
 800b79a:	1809      	addeq	r1, r1, r0
 800b79c:	6021      	streq	r1, [r4, #0]
 800b79e:	6063      	str	r3, [r4, #4]
 800b7a0:	6054      	str	r4, [r2, #4]
 800b7a2:	e7c9      	b.n	800b738 <_free_r+0x24>
 800b7a4:	bd38      	pop	{r3, r4, r5, pc}
 800b7a6:	bf00      	nop
 800b7a8:	200036dc 	.word	0x200036dc

0800b7ac <__ssputs_r>:
 800b7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b0:	688e      	ldr	r6, [r1, #8]
 800b7b2:	4682      	mov	sl, r0
 800b7b4:	429e      	cmp	r6, r3
 800b7b6:	460c      	mov	r4, r1
 800b7b8:	4690      	mov	r8, r2
 800b7ba:	461f      	mov	r7, r3
 800b7bc:	d838      	bhi.n	800b830 <__ssputs_r+0x84>
 800b7be:	898a      	ldrh	r2, [r1, #12]
 800b7c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7c4:	d032      	beq.n	800b82c <__ssputs_r+0x80>
 800b7c6:	6825      	ldr	r5, [r4, #0]
 800b7c8:	6909      	ldr	r1, [r1, #16]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	eba5 0901 	sub.w	r9, r5, r1
 800b7d0:	6965      	ldr	r5, [r4, #20]
 800b7d2:	444b      	add	r3, r9
 800b7d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7dc:	106d      	asrs	r5, r5, #1
 800b7de:	429d      	cmp	r5, r3
 800b7e0:	bf38      	it	cc
 800b7e2:	461d      	movcc	r5, r3
 800b7e4:	0553      	lsls	r3, r2, #21
 800b7e6:	d531      	bpl.n	800b84c <__ssputs_r+0xa0>
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	f7fc f969 	bl	8007ac0 <_malloc_r>
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	b950      	cbnz	r0, 800b808 <__ssputs_r+0x5c>
 800b7f2:	230c      	movs	r3, #12
 800b7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f8:	f8ca 3000 	str.w	r3, [sl]
 800b7fc:	89a3      	ldrh	r3, [r4, #12]
 800b7fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b802:	81a3      	strh	r3, [r4, #12]
 800b804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b808:	464a      	mov	r2, r9
 800b80a:	6921      	ldr	r1, [r4, #16]
 800b80c:	f7fc f941 	bl	8007a92 <memcpy>
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b81a:	81a3      	strh	r3, [r4, #12]
 800b81c:	6126      	str	r6, [r4, #16]
 800b81e:	444e      	add	r6, r9
 800b820:	6026      	str	r6, [r4, #0]
 800b822:	463e      	mov	r6, r7
 800b824:	6165      	str	r5, [r4, #20]
 800b826:	eba5 0509 	sub.w	r5, r5, r9
 800b82a:	60a5      	str	r5, [r4, #8]
 800b82c:	42be      	cmp	r6, r7
 800b82e:	d900      	bls.n	800b832 <__ssputs_r+0x86>
 800b830:	463e      	mov	r6, r7
 800b832:	4632      	mov	r2, r6
 800b834:	4641      	mov	r1, r8
 800b836:	6820      	ldr	r0, [r4, #0]
 800b838:	f000 f97c 	bl	800bb34 <memmove>
 800b83c:	68a3      	ldr	r3, [r4, #8]
 800b83e:	6822      	ldr	r2, [r4, #0]
 800b840:	1b9b      	subs	r3, r3, r6
 800b842:	4432      	add	r2, r6
 800b844:	2000      	movs	r0, #0
 800b846:	60a3      	str	r3, [r4, #8]
 800b848:	6022      	str	r2, [r4, #0]
 800b84a:	e7db      	b.n	800b804 <__ssputs_r+0x58>
 800b84c:	462a      	mov	r2, r5
 800b84e:	f000 f98b 	bl	800bb68 <_realloc_r>
 800b852:	4606      	mov	r6, r0
 800b854:	2800      	cmp	r0, #0
 800b856:	d1e1      	bne.n	800b81c <__ssputs_r+0x70>
 800b858:	4650      	mov	r0, sl
 800b85a:	6921      	ldr	r1, [r4, #16]
 800b85c:	f7ff ff5a 	bl	800b714 <_free_r>
 800b860:	e7c7      	b.n	800b7f2 <__ssputs_r+0x46>
	...

0800b864 <_svfiprintf_r>:
 800b864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b868:	4698      	mov	r8, r3
 800b86a:	898b      	ldrh	r3, [r1, #12]
 800b86c:	4607      	mov	r7, r0
 800b86e:	061b      	lsls	r3, r3, #24
 800b870:	460d      	mov	r5, r1
 800b872:	4614      	mov	r4, r2
 800b874:	b09d      	sub	sp, #116	; 0x74
 800b876:	d50e      	bpl.n	800b896 <_svfiprintf_r+0x32>
 800b878:	690b      	ldr	r3, [r1, #16]
 800b87a:	b963      	cbnz	r3, 800b896 <_svfiprintf_r+0x32>
 800b87c:	2140      	movs	r1, #64	; 0x40
 800b87e:	f7fc f91f 	bl	8007ac0 <_malloc_r>
 800b882:	6028      	str	r0, [r5, #0]
 800b884:	6128      	str	r0, [r5, #16]
 800b886:	b920      	cbnz	r0, 800b892 <_svfiprintf_r+0x2e>
 800b888:	230c      	movs	r3, #12
 800b88a:	603b      	str	r3, [r7, #0]
 800b88c:	f04f 30ff 	mov.w	r0, #4294967295
 800b890:	e0d1      	b.n	800ba36 <_svfiprintf_r+0x1d2>
 800b892:	2340      	movs	r3, #64	; 0x40
 800b894:	616b      	str	r3, [r5, #20]
 800b896:	2300      	movs	r3, #0
 800b898:	9309      	str	r3, [sp, #36]	; 0x24
 800b89a:	2320      	movs	r3, #32
 800b89c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8a0:	2330      	movs	r3, #48	; 0x30
 800b8a2:	f04f 0901 	mov.w	r9, #1
 800b8a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ba50 <_svfiprintf_r+0x1ec>
 800b8ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8b2:	4623      	mov	r3, r4
 800b8b4:	469a      	mov	sl, r3
 800b8b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8ba:	b10a      	cbz	r2, 800b8c0 <_svfiprintf_r+0x5c>
 800b8bc:	2a25      	cmp	r2, #37	; 0x25
 800b8be:	d1f9      	bne.n	800b8b4 <_svfiprintf_r+0x50>
 800b8c0:	ebba 0b04 	subs.w	fp, sl, r4
 800b8c4:	d00b      	beq.n	800b8de <_svfiprintf_r+0x7a>
 800b8c6:	465b      	mov	r3, fp
 800b8c8:	4622      	mov	r2, r4
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	f7ff ff6d 	bl	800b7ac <__ssputs_r>
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	f000 80aa 	beq.w	800ba2c <_svfiprintf_r+0x1c8>
 800b8d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8da:	445a      	add	r2, fp
 800b8dc:	9209      	str	r2, [sp, #36]	; 0x24
 800b8de:	f89a 3000 	ldrb.w	r3, [sl]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f000 80a2 	beq.w	800ba2c <_svfiprintf_r+0x1c8>
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8f2:	f10a 0a01 	add.w	sl, sl, #1
 800b8f6:	9304      	str	r3, [sp, #16]
 800b8f8:	9307      	str	r3, [sp, #28]
 800b8fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8fe:	931a      	str	r3, [sp, #104]	; 0x68
 800b900:	4654      	mov	r4, sl
 800b902:	2205      	movs	r2, #5
 800b904:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b908:	4851      	ldr	r0, [pc, #324]	; (800ba50 <_svfiprintf_r+0x1ec>)
 800b90a:	f7ff fa23 	bl	800ad54 <memchr>
 800b90e:	9a04      	ldr	r2, [sp, #16]
 800b910:	b9d8      	cbnz	r0, 800b94a <_svfiprintf_r+0xe6>
 800b912:	06d0      	lsls	r0, r2, #27
 800b914:	bf44      	itt	mi
 800b916:	2320      	movmi	r3, #32
 800b918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b91c:	0711      	lsls	r1, r2, #28
 800b91e:	bf44      	itt	mi
 800b920:	232b      	movmi	r3, #43	; 0x2b
 800b922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b926:	f89a 3000 	ldrb.w	r3, [sl]
 800b92a:	2b2a      	cmp	r3, #42	; 0x2a
 800b92c:	d015      	beq.n	800b95a <_svfiprintf_r+0xf6>
 800b92e:	4654      	mov	r4, sl
 800b930:	2000      	movs	r0, #0
 800b932:	f04f 0c0a 	mov.w	ip, #10
 800b936:	9a07      	ldr	r2, [sp, #28]
 800b938:	4621      	mov	r1, r4
 800b93a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b93e:	3b30      	subs	r3, #48	; 0x30
 800b940:	2b09      	cmp	r3, #9
 800b942:	d94e      	bls.n	800b9e2 <_svfiprintf_r+0x17e>
 800b944:	b1b0      	cbz	r0, 800b974 <_svfiprintf_r+0x110>
 800b946:	9207      	str	r2, [sp, #28]
 800b948:	e014      	b.n	800b974 <_svfiprintf_r+0x110>
 800b94a:	eba0 0308 	sub.w	r3, r0, r8
 800b94e:	fa09 f303 	lsl.w	r3, r9, r3
 800b952:	4313      	orrs	r3, r2
 800b954:	46a2      	mov	sl, r4
 800b956:	9304      	str	r3, [sp, #16]
 800b958:	e7d2      	b.n	800b900 <_svfiprintf_r+0x9c>
 800b95a:	9b03      	ldr	r3, [sp, #12]
 800b95c:	1d19      	adds	r1, r3, #4
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	9103      	str	r1, [sp, #12]
 800b962:	2b00      	cmp	r3, #0
 800b964:	bfbb      	ittet	lt
 800b966:	425b      	neglt	r3, r3
 800b968:	f042 0202 	orrlt.w	r2, r2, #2
 800b96c:	9307      	strge	r3, [sp, #28]
 800b96e:	9307      	strlt	r3, [sp, #28]
 800b970:	bfb8      	it	lt
 800b972:	9204      	strlt	r2, [sp, #16]
 800b974:	7823      	ldrb	r3, [r4, #0]
 800b976:	2b2e      	cmp	r3, #46	; 0x2e
 800b978:	d10c      	bne.n	800b994 <_svfiprintf_r+0x130>
 800b97a:	7863      	ldrb	r3, [r4, #1]
 800b97c:	2b2a      	cmp	r3, #42	; 0x2a
 800b97e:	d135      	bne.n	800b9ec <_svfiprintf_r+0x188>
 800b980:	9b03      	ldr	r3, [sp, #12]
 800b982:	3402      	adds	r4, #2
 800b984:	1d1a      	adds	r2, r3, #4
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	9203      	str	r2, [sp, #12]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	bfb8      	it	lt
 800b98e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b992:	9305      	str	r3, [sp, #20]
 800b994:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba60 <_svfiprintf_r+0x1fc>
 800b998:	2203      	movs	r2, #3
 800b99a:	4650      	mov	r0, sl
 800b99c:	7821      	ldrb	r1, [r4, #0]
 800b99e:	f7ff f9d9 	bl	800ad54 <memchr>
 800b9a2:	b140      	cbz	r0, 800b9b6 <_svfiprintf_r+0x152>
 800b9a4:	2340      	movs	r3, #64	; 0x40
 800b9a6:	eba0 000a 	sub.w	r0, r0, sl
 800b9aa:	fa03 f000 	lsl.w	r0, r3, r0
 800b9ae:	9b04      	ldr	r3, [sp, #16]
 800b9b0:	3401      	adds	r4, #1
 800b9b2:	4303      	orrs	r3, r0
 800b9b4:	9304      	str	r3, [sp, #16]
 800b9b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ba:	2206      	movs	r2, #6
 800b9bc:	4825      	ldr	r0, [pc, #148]	; (800ba54 <_svfiprintf_r+0x1f0>)
 800b9be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9c2:	f7ff f9c7 	bl	800ad54 <memchr>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	d038      	beq.n	800ba3c <_svfiprintf_r+0x1d8>
 800b9ca:	4b23      	ldr	r3, [pc, #140]	; (800ba58 <_svfiprintf_r+0x1f4>)
 800b9cc:	bb1b      	cbnz	r3, 800ba16 <_svfiprintf_r+0x1b2>
 800b9ce:	9b03      	ldr	r3, [sp, #12]
 800b9d0:	3307      	adds	r3, #7
 800b9d2:	f023 0307 	bic.w	r3, r3, #7
 800b9d6:	3308      	adds	r3, #8
 800b9d8:	9303      	str	r3, [sp, #12]
 800b9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9dc:	4433      	add	r3, r6
 800b9de:	9309      	str	r3, [sp, #36]	; 0x24
 800b9e0:	e767      	b.n	800b8b2 <_svfiprintf_r+0x4e>
 800b9e2:	460c      	mov	r4, r1
 800b9e4:	2001      	movs	r0, #1
 800b9e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9ea:	e7a5      	b.n	800b938 <_svfiprintf_r+0xd4>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f04f 0c0a 	mov.w	ip, #10
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	3401      	adds	r4, #1
 800b9f6:	9305      	str	r3, [sp, #20]
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9fe:	3a30      	subs	r2, #48	; 0x30
 800ba00:	2a09      	cmp	r2, #9
 800ba02:	d903      	bls.n	800ba0c <_svfiprintf_r+0x1a8>
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d0c5      	beq.n	800b994 <_svfiprintf_r+0x130>
 800ba08:	9105      	str	r1, [sp, #20]
 800ba0a:	e7c3      	b.n	800b994 <_svfiprintf_r+0x130>
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	2301      	movs	r3, #1
 800ba10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba14:	e7f0      	b.n	800b9f8 <_svfiprintf_r+0x194>
 800ba16:	ab03      	add	r3, sp, #12
 800ba18:	9300      	str	r3, [sp, #0]
 800ba1a:	462a      	mov	r2, r5
 800ba1c:	4638      	mov	r0, r7
 800ba1e:	4b0f      	ldr	r3, [pc, #60]	; (800ba5c <_svfiprintf_r+0x1f8>)
 800ba20:	a904      	add	r1, sp, #16
 800ba22:	f7fc f945 	bl	8007cb0 <_printf_float>
 800ba26:	1c42      	adds	r2, r0, #1
 800ba28:	4606      	mov	r6, r0
 800ba2a:	d1d6      	bne.n	800b9da <_svfiprintf_r+0x176>
 800ba2c:	89ab      	ldrh	r3, [r5, #12]
 800ba2e:	065b      	lsls	r3, r3, #25
 800ba30:	f53f af2c 	bmi.w	800b88c <_svfiprintf_r+0x28>
 800ba34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba36:	b01d      	add	sp, #116	; 0x74
 800ba38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba3c:	ab03      	add	r3, sp, #12
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	462a      	mov	r2, r5
 800ba42:	4638      	mov	r0, r7
 800ba44:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <_svfiprintf_r+0x1f8>)
 800ba46:	a904      	add	r1, sp, #16
 800ba48:	f7fc fbce 	bl	80081e8 <_printf_i>
 800ba4c:	e7eb      	b.n	800ba26 <_svfiprintf_r+0x1c2>
 800ba4e:	bf00      	nop
 800ba50:	0800c91c 	.word	0x0800c91c
 800ba54:	0800c926 	.word	0x0800c926
 800ba58:	08007cb1 	.word	0x08007cb1
 800ba5c:	0800b7ad 	.word	0x0800b7ad
 800ba60:	0800c922 	.word	0x0800c922

0800ba64 <_read_r>:
 800ba64:	b538      	push	{r3, r4, r5, lr}
 800ba66:	4604      	mov	r4, r0
 800ba68:	4608      	mov	r0, r1
 800ba6a:	4611      	mov	r1, r2
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	4d05      	ldr	r5, [pc, #20]	; (800ba84 <_read_r+0x20>)
 800ba70:	602a      	str	r2, [r5, #0]
 800ba72:	461a      	mov	r2, r3
 800ba74:	f7f5 fd67 	bl	8001546 <_read>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d102      	bne.n	800ba82 <_read_r+0x1e>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	b103      	cbz	r3, 800ba82 <_read_r+0x1e>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	20003adc 	.word	0x20003adc

0800ba88 <nan>:
 800ba88:	2000      	movs	r0, #0
 800ba8a:	4901      	ldr	r1, [pc, #4]	; (800ba90 <nan+0x8>)
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	7ff80000 	.word	0x7ff80000

0800ba94 <strncmp>:
 800ba94:	b510      	push	{r4, lr}
 800ba96:	b16a      	cbz	r2, 800bab4 <strncmp+0x20>
 800ba98:	3901      	subs	r1, #1
 800ba9a:	1884      	adds	r4, r0, r2
 800ba9c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800baa0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d103      	bne.n	800bab0 <strncmp+0x1c>
 800baa8:	42a0      	cmp	r0, r4
 800baaa:	d001      	beq.n	800bab0 <strncmp+0x1c>
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1f5      	bne.n	800ba9c <strncmp+0x8>
 800bab0:	1a98      	subs	r0, r3, r2
 800bab2:	bd10      	pop	{r4, pc}
 800bab4:	4610      	mov	r0, r2
 800bab6:	e7fc      	b.n	800bab2 <strncmp+0x1e>

0800bab8 <__ascii_wctomb>:
 800bab8:	4603      	mov	r3, r0
 800baba:	4608      	mov	r0, r1
 800babc:	b141      	cbz	r1, 800bad0 <__ascii_wctomb+0x18>
 800babe:	2aff      	cmp	r2, #255	; 0xff
 800bac0:	d904      	bls.n	800bacc <__ascii_wctomb+0x14>
 800bac2:	228a      	movs	r2, #138	; 0x8a
 800bac4:	f04f 30ff 	mov.w	r0, #4294967295
 800bac8:	601a      	str	r2, [r3, #0]
 800baca:	4770      	bx	lr
 800bacc:	2001      	movs	r0, #1
 800bace:	700a      	strb	r2, [r1, #0]
 800bad0:	4770      	bx	lr
	...

0800bad4 <__assert_func>:
 800bad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bad6:	4614      	mov	r4, r2
 800bad8:	461a      	mov	r2, r3
 800bada:	4b09      	ldr	r3, [pc, #36]	; (800bb00 <__assert_func+0x2c>)
 800badc:	4605      	mov	r5, r0
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	68d8      	ldr	r0, [r3, #12]
 800bae2:	b14c      	cbz	r4, 800baf8 <__assert_func+0x24>
 800bae4:	4b07      	ldr	r3, [pc, #28]	; (800bb04 <__assert_func+0x30>)
 800bae6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800baea:	9100      	str	r1, [sp, #0]
 800baec:	462b      	mov	r3, r5
 800baee:	4906      	ldr	r1, [pc, #24]	; (800bb08 <__assert_func+0x34>)
 800baf0:	f000 f80e 	bl	800bb10 <fiprintf>
 800baf4:	f000 fa76 	bl	800bfe4 <abort>
 800baf8:	4b04      	ldr	r3, [pc, #16]	; (800bb0c <__assert_func+0x38>)
 800bafa:	461c      	mov	r4, r3
 800bafc:	e7f3      	b.n	800bae6 <__assert_func+0x12>
 800bafe:	bf00      	nop
 800bb00:	20000010 	.word	0x20000010
 800bb04:	0800c92d 	.word	0x0800c92d
 800bb08:	0800c93a 	.word	0x0800c93a
 800bb0c:	0800c968 	.word	0x0800c968

0800bb10 <fiprintf>:
 800bb10:	b40e      	push	{r1, r2, r3}
 800bb12:	b503      	push	{r0, r1, lr}
 800bb14:	4601      	mov	r1, r0
 800bb16:	ab03      	add	r3, sp, #12
 800bb18:	4805      	ldr	r0, [pc, #20]	; (800bb30 <fiprintf+0x20>)
 800bb1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb1e:	6800      	ldr	r0, [r0, #0]
 800bb20:	9301      	str	r3, [sp, #4]
 800bb22:	f000 f86f 	bl	800bc04 <_vfiprintf_r>
 800bb26:	b002      	add	sp, #8
 800bb28:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb2c:	b003      	add	sp, #12
 800bb2e:	4770      	bx	lr
 800bb30:	20000010 	.word	0x20000010

0800bb34 <memmove>:
 800bb34:	4288      	cmp	r0, r1
 800bb36:	b510      	push	{r4, lr}
 800bb38:	eb01 0402 	add.w	r4, r1, r2
 800bb3c:	d902      	bls.n	800bb44 <memmove+0x10>
 800bb3e:	4284      	cmp	r4, r0
 800bb40:	4623      	mov	r3, r4
 800bb42:	d807      	bhi.n	800bb54 <memmove+0x20>
 800bb44:	1e43      	subs	r3, r0, #1
 800bb46:	42a1      	cmp	r1, r4
 800bb48:	d008      	beq.n	800bb5c <memmove+0x28>
 800bb4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb52:	e7f8      	b.n	800bb46 <memmove+0x12>
 800bb54:	4601      	mov	r1, r0
 800bb56:	4402      	add	r2, r0
 800bb58:	428a      	cmp	r2, r1
 800bb5a:	d100      	bne.n	800bb5e <memmove+0x2a>
 800bb5c:	bd10      	pop	{r4, pc}
 800bb5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb66:	e7f7      	b.n	800bb58 <memmove+0x24>

0800bb68 <_realloc_r>:
 800bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6a:	4607      	mov	r7, r0
 800bb6c:	4614      	mov	r4, r2
 800bb6e:	460e      	mov	r6, r1
 800bb70:	b921      	cbnz	r1, 800bb7c <_realloc_r+0x14>
 800bb72:	4611      	mov	r1, r2
 800bb74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb78:	f7fb bfa2 	b.w	8007ac0 <_malloc_r>
 800bb7c:	b922      	cbnz	r2, 800bb88 <_realloc_r+0x20>
 800bb7e:	f7ff fdc9 	bl	800b714 <_free_r>
 800bb82:	4625      	mov	r5, r4
 800bb84:	4628      	mov	r0, r5
 800bb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb88:	f000 fa98 	bl	800c0bc <_malloc_usable_size_r>
 800bb8c:	42a0      	cmp	r0, r4
 800bb8e:	d20f      	bcs.n	800bbb0 <_realloc_r+0x48>
 800bb90:	4621      	mov	r1, r4
 800bb92:	4638      	mov	r0, r7
 800bb94:	f7fb ff94 	bl	8007ac0 <_malloc_r>
 800bb98:	4605      	mov	r5, r0
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	d0f2      	beq.n	800bb84 <_realloc_r+0x1c>
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4622      	mov	r2, r4
 800bba2:	f7fb ff76 	bl	8007a92 <memcpy>
 800bba6:	4631      	mov	r1, r6
 800bba8:	4638      	mov	r0, r7
 800bbaa:	f7ff fdb3 	bl	800b714 <_free_r>
 800bbae:	e7e9      	b.n	800bb84 <_realloc_r+0x1c>
 800bbb0:	4635      	mov	r5, r6
 800bbb2:	e7e7      	b.n	800bb84 <_realloc_r+0x1c>

0800bbb4 <__sfputc_r>:
 800bbb4:	6893      	ldr	r3, [r2, #8]
 800bbb6:	b410      	push	{r4}
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	6093      	str	r3, [r2, #8]
 800bbbe:	da07      	bge.n	800bbd0 <__sfputc_r+0x1c>
 800bbc0:	6994      	ldr	r4, [r2, #24]
 800bbc2:	42a3      	cmp	r3, r4
 800bbc4:	db01      	blt.n	800bbca <__sfputc_r+0x16>
 800bbc6:	290a      	cmp	r1, #10
 800bbc8:	d102      	bne.n	800bbd0 <__sfputc_r+0x1c>
 800bbca:	bc10      	pop	{r4}
 800bbcc:	f000 b94a 	b.w	800be64 <__swbuf_r>
 800bbd0:	6813      	ldr	r3, [r2, #0]
 800bbd2:	1c58      	adds	r0, r3, #1
 800bbd4:	6010      	str	r0, [r2, #0]
 800bbd6:	7019      	strb	r1, [r3, #0]
 800bbd8:	4608      	mov	r0, r1
 800bbda:	bc10      	pop	{r4}
 800bbdc:	4770      	bx	lr

0800bbde <__sfputs_r>:
 800bbde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	460f      	mov	r7, r1
 800bbe4:	4614      	mov	r4, r2
 800bbe6:	18d5      	adds	r5, r2, r3
 800bbe8:	42ac      	cmp	r4, r5
 800bbea:	d101      	bne.n	800bbf0 <__sfputs_r+0x12>
 800bbec:	2000      	movs	r0, #0
 800bbee:	e007      	b.n	800bc00 <__sfputs_r+0x22>
 800bbf0:	463a      	mov	r2, r7
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf8:	f7ff ffdc 	bl	800bbb4 <__sfputc_r>
 800bbfc:	1c43      	adds	r3, r0, #1
 800bbfe:	d1f3      	bne.n	800bbe8 <__sfputs_r+0xa>
 800bc00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc04 <_vfiprintf_r>:
 800bc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc08:	460d      	mov	r5, r1
 800bc0a:	4614      	mov	r4, r2
 800bc0c:	4698      	mov	r8, r3
 800bc0e:	4606      	mov	r6, r0
 800bc10:	b09d      	sub	sp, #116	; 0x74
 800bc12:	b118      	cbz	r0, 800bc1c <_vfiprintf_r+0x18>
 800bc14:	6983      	ldr	r3, [r0, #24]
 800bc16:	b90b      	cbnz	r3, 800bc1c <_vfiprintf_r+0x18>
 800bc18:	f7fb fe76 	bl	8007908 <__sinit>
 800bc1c:	4b89      	ldr	r3, [pc, #548]	; (800be44 <_vfiprintf_r+0x240>)
 800bc1e:	429d      	cmp	r5, r3
 800bc20:	d11b      	bne.n	800bc5a <_vfiprintf_r+0x56>
 800bc22:	6875      	ldr	r5, [r6, #4]
 800bc24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc26:	07d9      	lsls	r1, r3, #31
 800bc28:	d405      	bmi.n	800bc36 <_vfiprintf_r+0x32>
 800bc2a:	89ab      	ldrh	r3, [r5, #12]
 800bc2c:	059a      	lsls	r2, r3, #22
 800bc2e:	d402      	bmi.n	800bc36 <_vfiprintf_r+0x32>
 800bc30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc32:	f7fb ff2c 	bl	8007a8e <__retarget_lock_acquire_recursive>
 800bc36:	89ab      	ldrh	r3, [r5, #12]
 800bc38:	071b      	lsls	r3, r3, #28
 800bc3a:	d501      	bpl.n	800bc40 <_vfiprintf_r+0x3c>
 800bc3c:	692b      	ldr	r3, [r5, #16]
 800bc3e:	b9eb      	cbnz	r3, 800bc7c <_vfiprintf_r+0x78>
 800bc40:	4629      	mov	r1, r5
 800bc42:	4630      	mov	r0, r6
 800bc44:	f000 f960 	bl	800bf08 <__swsetup_r>
 800bc48:	b1c0      	cbz	r0, 800bc7c <_vfiprintf_r+0x78>
 800bc4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc4c:	07dc      	lsls	r4, r3, #31
 800bc4e:	d50e      	bpl.n	800bc6e <_vfiprintf_r+0x6a>
 800bc50:	f04f 30ff 	mov.w	r0, #4294967295
 800bc54:	b01d      	add	sp, #116	; 0x74
 800bc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5a:	4b7b      	ldr	r3, [pc, #492]	; (800be48 <_vfiprintf_r+0x244>)
 800bc5c:	429d      	cmp	r5, r3
 800bc5e:	d101      	bne.n	800bc64 <_vfiprintf_r+0x60>
 800bc60:	68b5      	ldr	r5, [r6, #8]
 800bc62:	e7df      	b.n	800bc24 <_vfiprintf_r+0x20>
 800bc64:	4b79      	ldr	r3, [pc, #484]	; (800be4c <_vfiprintf_r+0x248>)
 800bc66:	429d      	cmp	r5, r3
 800bc68:	bf08      	it	eq
 800bc6a:	68f5      	ldreq	r5, [r6, #12]
 800bc6c:	e7da      	b.n	800bc24 <_vfiprintf_r+0x20>
 800bc6e:	89ab      	ldrh	r3, [r5, #12]
 800bc70:	0598      	lsls	r0, r3, #22
 800bc72:	d4ed      	bmi.n	800bc50 <_vfiprintf_r+0x4c>
 800bc74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc76:	f7fb ff0b 	bl	8007a90 <__retarget_lock_release_recursive>
 800bc7a:	e7e9      	b.n	800bc50 <_vfiprintf_r+0x4c>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc80:	2320      	movs	r3, #32
 800bc82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc86:	2330      	movs	r3, #48	; 0x30
 800bc88:	f04f 0901 	mov.w	r9, #1
 800bc8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc90:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800be50 <_vfiprintf_r+0x24c>
 800bc94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc98:	4623      	mov	r3, r4
 800bc9a:	469a      	mov	sl, r3
 800bc9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bca0:	b10a      	cbz	r2, 800bca6 <_vfiprintf_r+0xa2>
 800bca2:	2a25      	cmp	r2, #37	; 0x25
 800bca4:	d1f9      	bne.n	800bc9a <_vfiprintf_r+0x96>
 800bca6:	ebba 0b04 	subs.w	fp, sl, r4
 800bcaa:	d00b      	beq.n	800bcc4 <_vfiprintf_r+0xc0>
 800bcac:	465b      	mov	r3, fp
 800bcae:	4622      	mov	r2, r4
 800bcb0:	4629      	mov	r1, r5
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	f7ff ff93 	bl	800bbde <__sfputs_r>
 800bcb8:	3001      	adds	r0, #1
 800bcba:	f000 80aa 	beq.w	800be12 <_vfiprintf_r+0x20e>
 800bcbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcc0:	445a      	add	r2, fp
 800bcc2:	9209      	str	r2, [sp, #36]	; 0x24
 800bcc4:	f89a 3000 	ldrb.w	r3, [sl]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f000 80a2 	beq.w	800be12 <_vfiprintf_r+0x20e>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcd8:	f10a 0a01 	add.w	sl, sl, #1
 800bcdc:	9304      	str	r3, [sp, #16]
 800bcde:	9307      	str	r3, [sp, #28]
 800bce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bce4:	931a      	str	r3, [sp, #104]	; 0x68
 800bce6:	4654      	mov	r4, sl
 800bce8:	2205      	movs	r2, #5
 800bcea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcee:	4858      	ldr	r0, [pc, #352]	; (800be50 <_vfiprintf_r+0x24c>)
 800bcf0:	f7ff f830 	bl	800ad54 <memchr>
 800bcf4:	9a04      	ldr	r2, [sp, #16]
 800bcf6:	b9d8      	cbnz	r0, 800bd30 <_vfiprintf_r+0x12c>
 800bcf8:	06d1      	lsls	r1, r2, #27
 800bcfa:	bf44      	itt	mi
 800bcfc:	2320      	movmi	r3, #32
 800bcfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd02:	0713      	lsls	r3, r2, #28
 800bd04:	bf44      	itt	mi
 800bd06:	232b      	movmi	r3, #43	; 0x2b
 800bd08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd0c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd10:	2b2a      	cmp	r3, #42	; 0x2a
 800bd12:	d015      	beq.n	800bd40 <_vfiprintf_r+0x13c>
 800bd14:	4654      	mov	r4, sl
 800bd16:	2000      	movs	r0, #0
 800bd18:	f04f 0c0a 	mov.w	ip, #10
 800bd1c:	9a07      	ldr	r2, [sp, #28]
 800bd1e:	4621      	mov	r1, r4
 800bd20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd24:	3b30      	subs	r3, #48	; 0x30
 800bd26:	2b09      	cmp	r3, #9
 800bd28:	d94e      	bls.n	800bdc8 <_vfiprintf_r+0x1c4>
 800bd2a:	b1b0      	cbz	r0, 800bd5a <_vfiprintf_r+0x156>
 800bd2c:	9207      	str	r2, [sp, #28]
 800bd2e:	e014      	b.n	800bd5a <_vfiprintf_r+0x156>
 800bd30:	eba0 0308 	sub.w	r3, r0, r8
 800bd34:	fa09 f303 	lsl.w	r3, r9, r3
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	46a2      	mov	sl, r4
 800bd3c:	9304      	str	r3, [sp, #16]
 800bd3e:	e7d2      	b.n	800bce6 <_vfiprintf_r+0xe2>
 800bd40:	9b03      	ldr	r3, [sp, #12]
 800bd42:	1d19      	adds	r1, r3, #4
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	9103      	str	r1, [sp, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	bfbb      	ittet	lt
 800bd4c:	425b      	neglt	r3, r3
 800bd4e:	f042 0202 	orrlt.w	r2, r2, #2
 800bd52:	9307      	strge	r3, [sp, #28]
 800bd54:	9307      	strlt	r3, [sp, #28]
 800bd56:	bfb8      	it	lt
 800bd58:	9204      	strlt	r2, [sp, #16]
 800bd5a:	7823      	ldrb	r3, [r4, #0]
 800bd5c:	2b2e      	cmp	r3, #46	; 0x2e
 800bd5e:	d10c      	bne.n	800bd7a <_vfiprintf_r+0x176>
 800bd60:	7863      	ldrb	r3, [r4, #1]
 800bd62:	2b2a      	cmp	r3, #42	; 0x2a
 800bd64:	d135      	bne.n	800bdd2 <_vfiprintf_r+0x1ce>
 800bd66:	9b03      	ldr	r3, [sp, #12]
 800bd68:	3402      	adds	r4, #2
 800bd6a:	1d1a      	adds	r2, r3, #4
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	9203      	str	r2, [sp, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	bfb8      	it	lt
 800bd74:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd78:	9305      	str	r3, [sp, #20]
 800bd7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be60 <_vfiprintf_r+0x25c>
 800bd7e:	2203      	movs	r2, #3
 800bd80:	4650      	mov	r0, sl
 800bd82:	7821      	ldrb	r1, [r4, #0]
 800bd84:	f7fe ffe6 	bl	800ad54 <memchr>
 800bd88:	b140      	cbz	r0, 800bd9c <_vfiprintf_r+0x198>
 800bd8a:	2340      	movs	r3, #64	; 0x40
 800bd8c:	eba0 000a 	sub.w	r0, r0, sl
 800bd90:	fa03 f000 	lsl.w	r0, r3, r0
 800bd94:	9b04      	ldr	r3, [sp, #16]
 800bd96:	3401      	adds	r4, #1
 800bd98:	4303      	orrs	r3, r0
 800bd9a:	9304      	str	r3, [sp, #16]
 800bd9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda0:	2206      	movs	r2, #6
 800bda2:	482c      	ldr	r0, [pc, #176]	; (800be54 <_vfiprintf_r+0x250>)
 800bda4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bda8:	f7fe ffd4 	bl	800ad54 <memchr>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d03f      	beq.n	800be30 <_vfiprintf_r+0x22c>
 800bdb0:	4b29      	ldr	r3, [pc, #164]	; (800be58 <_vfiprintf_r+0x254>)
 800bdb2:	bb1b      	cbnz	r3, 800bdfc <_vfiprintf_r+0x1f8>
 800bdb4:	9b03      	ldr	r3, [sp, #12]
 800bdb6:	3307      	adds	r3, #7
 800bdb8:	f023 0307 	bic.w	r3, r3, #7
 800bdbc:	3308      	adds	r3, #8
 800bdbe:	9303      	str	r3, [sp, #12]
 800bdc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc2:	443b      	add	r3, r7
 800bdc4:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc6:	e767      	b.n	800bc98 <_vfiprintf_r+0x94>
 800bdc8:	460c      	mov	r4, r1
 800bdca:	2001      	movs	r0, #1
 800bdcc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdd0:	e7a5      	b.n	800bd1e <_vfiprintf_r+0x11a>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f04f 0c0a 	mov.w	ip, #10
 800bdd8:	4619      	mov	r1, r3
 800bdda:	3401      	adds	r4, #1
 800bddc:	9305      	str	r3, [sp, #20]
 800bdde:	4620      	mov	r0, r4
 800bde0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bde4:	3a30      	subs	r2, #48	; 0x30
 800bde6:	2a09      	cmp	r2, #9
 800bde8:	d903      	bls.n	800bdf2 <_vfiprintf_r+0x1ee>
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d0c5      	beq.n	800bd7a <_vfiprintf_r+0x176>
 800bdee:	9105      	str	r1, [sp, #20]
 800bdf0:	e7c3      	b.n	800bd7a <_vfiprintf_r+0x176>
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdfa:	e7f0      	b.n	800bdde <_vfiprintf_r+0x1da>
 800bdfc:	ab03      	add	r3, sp, #12
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	462a      	mov	r2, r5
 800be02:	4630      	mov	r0, r6
 800be04:	4b15      	ldr	r3, [pc, #84]	; (800be5c <_vfiprintf_r+0x258>)
 800be06:	a904      	add	r1, sp, #16
 800be08:	f7fb ff52 	bl	8007cb0 <_printf_float>
 800be0c:	4607      	mov	r7, r0
 800be0e:	1c78      	adds	r0, r7, #1
 800be10:	d1d6      	bne.n	800bdc0 <_vfiprintf_r+0x1bc>
 800be12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be14:	07d9      	lsls	r1, r3, #31
 800be16:	d405      	bmi.n	800be24 <_vfiprintf_r+0x220>
 800be18:	89ab      	ldrh	r3, [r5, #12]
 800be1a:	059a      	lsls	r2, r3, #22
 800be1c:	d402      	bmi.n	800be24 <_vfiprintf_r+0x220>
 800be1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be20:	f7fb fe36 	bl	8007a90 <__retarget_lock_release_recursive>
 800be24:	89ab      	ldrh	r3, [r5, #12]
 800be26:	065b      	lsls	r3, r3, #25
 800be28:	f53f af12 	bmi.w	800bc50 <_vfiprintf_r+0x4c>
 800be2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be2e:	e711      	b.n	800bc54 <_vfiprintf_r+0x50>
 800be30:	ab03      	add	r3, sp, #12
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	462a      	mov	r2, r5
 800be36:	4630      	mov	r0, r6
 800be38:	4b08      	ldr	r3, [pc, #32]	; (800be5c <_vfiprintf_r+0x258>)
 800be3a:	a904      	add	r1, sp, #16
 800be3c:	f7fc f9d4 	bl	80081e8 <_printf_i>
 800be40:	e7e4      	b.n	800be0c <_vfiprintf_r+0x208>
 800be42:	bf00      	nop
 800be44:	0800c4d4 	.word	0x0800c4d4
 800be48:	0800c4f4 	.word	0x0800c4f4
 800be4c:	0800c4b4 	.word	0x0800c4b4
 800be50:	0800c91c 	.word	0x0800c91c
 800be54:	0800c926 	.word	0x0800c926
 800be58:	08007cb1 	.word	0x08007cb1
 800be5c:	0800bbdf 	.word	0x0800bbdf
 800be60:	0800c922 	.word	0x0800c922

0800be64 <__swbuf_r>:
 800be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be66:	460e      	mov	r6, r1
 800be68:	4614      	mov	r4, r2
 800be6a:	4605      	mov	r5, r0
 800be6c:	b118      	cbz	r0, 800be76 <__swbuf_r+0x12>
 800be6e:	6983      	ldr	r3, [r0, #24]
 800be70:	b90b      	cbnz	r3, 800be76 <__swbuf_r+0x12>
 800be72:	f7fb fd49 	bl	8007908 <__sinit>
 800be76:	4b21      	ldr	r3, [pc, #132]	; (800befc <__swbuf_r+0x98>)
 800be78:	429c      	cmp	r4, r3
 800be7a:	d12b      	bne.n	800bed4 <__swbuf_r+0x70>
 800be7c:	686c      	ldr	r4, [r5, #4]
 800be7e:	69a3      	ldr	r3, [r4, #24]
 800be80:	60a3      	str	r3, [r4, #8]
 800be82:	89a3      	ldrh	r3, [r4, #12]
 800be84:	071a      	lsls	r2, r3, #28
 800be86:	d52f      	bpl.n	800bee8 <__swbuf_r+0x84>
 800be88:	6923      	ldr	r3, [r4, #16]
 800be8a:	b36b      	cbz	r3, 800bee8 <__swbuf_r+0x84>
 800be8c:	6923      	ldr	r3, [r4, #16]
 800be8e:	6820      	ldr	r0, [r4, #0]
 800be90:	b2f6      	uxtb	r6, r6
 800be92:	1ac0      	subs	r0, r0, r3
 800be94:	6963      	ldr	r3, [r4, #20]
 800be96:	4637      	mov	r7, r6
 800be98:	4283      	cmp	r3, r0
 800be9a:	dc04      	bgt.n	800bea6 <__swbuf_r+0x42>
 800be9c:	4621      	mov	r1, r4
 800be9e:	4628      	mov	r0, r5
 800bea0:	f7fe fb86 	bl	800a5b0 <_fflush_r>
 800bea4:	bb30      	cbnz	r0, 800bef4 <__swbuf_r+0x90>
 800bea6:	68a3      	ldr	r3, [r4, #8]
 800bea8:	3001      	adds	r0, #1
 800beaa:	3b01      	subs	r3, #1
 800beac:	60a3      	str	r3, [r4, #8]
 800beae:	6823      	ldr	r3, [r4, #0]
 800beb0:	1c5a      	adds	r2, r3, #1
 800beb2:	6022      	str	r2, [r4, #0]
 800beb4:	701e      	strb	r6, [r3, #0]
 800beb6:	6963      	ldr	r3, [r4, #20]
 800beb8:	4283      	cmp	r3, r0
 800beba:	d004      	beq.n	800bec6 <__swbuf_r+0x62>
 800bebc:	89a3      	ldrh	r3, [r4, #12]
 800bebe:	07db      	lsls	r3, r3, #31
 800bec0:	d506      	bpl.n	800bed0 <__swbuf_r+0x6c>
 800bec2:	2e0a      	cmp	r6, #10
 800bec4:	d104      	bne.n	800bed0 <__swbuf_r+0x6c>
 800bec6:	4621      	mov	r1, r4
 800bec8:	4628      	mov	r0, r5
 800beca:	f7fe fb71 	bl	800a5b0 <_fflush_r>
 800bece:	b988      	cbnz	r0, 800bef4 <__swbuf_r+0x90>
 800bed0:	4638      	mov	r0, r7
 800bed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bed4:	4b0a      	ldr	r3, [pc, #40]	; (800bf00 <__swbuf_r+0x9c>)
 800bed6:	429c      	cmp	r4, r3
 800bed8:	d101      	bne.n	800bede <__swbuf_r+0x7a>
 800beda:	68ac      	ldr	r4, [r5, #8]
 800bedc:	e7cf      	b.n	800be7e <__swbuf_r+0x1a>
 800bede:	4b09      	ldr	r3, [pc, #36]	; (800bf04 <__swbuf_r+0xa0>)
 800bee0:	429c      	cmp	r4, r3
 800bee2:	bf08      	it	eq
 800bee4:	68ec      	ldreq	r4, [r5, #12]
 800bee6:	e7ca      	b.n	800be7e <__swbuf_r+0x1a>
 800bee8:	4621      	mov	r1, r4
 800beea:	4628      	mov	r0, r5
 800beec:	f000 f80c 	bl	800bf08 <__swsetup_r>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d0cb      	beq.n	800be8c <__swbuf_r+0x28>
 800bef4:	f04f 37ff 	mov.w	r7, #4294967295
 800bef8:	e7ea      	b.n	800bed0 <__swbuf_r+0x6c>
 800befa:	bf00      	nop
 800befc:	0800c4d4 	.word	0x0800c4d4
 800bf00:	0800c4f4 	.word	0x0800c4f4
 800bf04:	0800c4b4 	.word	0x0800c4b4

0800bf08 <__swsetup_r>:
 800bf08:	4b32      	ldr	r3, [pc, #200]	; (800bfd4 <__swsetup_r+0xcc>)
 800bf0a:	b570      	push	{r4, r5, r6, lr}
 800bf0c:	681d      	ldr	r5, [r3, #0]
 800bf0e:	4606      	mov	r6, r0
 800bf10:	460c      	mov	r4, r1
 800bf12:	b125      	cbz	r5, 800bf1e <__swsetup_r+0x16>
 800bf14:	69ab      	ldr	r3, [r5, #24]
 800bf16:	b913      	cbnz	r3, 800bf1e <__swsetup_r+0x16>
 800bf18:	4628      	mov	r0, r5
 800bf1a:	f7fb fcf5 	bl	8007908 <__sinit>
 800bf1e:	4b2e      	ldr	r3, [pc, #184]	; (800bfd8 <__swsetup_r+0xd0>)
 800bf20:	429c      	cmp	r4, r3
 800bf22:	d10f      	bne.n	800bf44 <__swsetup_r+0x3c>
 800bf24:	686c      	ldr	r4, [r5, #4]
 800bf26:	89a3      	ldrh	r3, [r4, #12]
 800bf28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf2c:	0719      	lsls	r1, r3, #28
 800bf2e:	d42c      	bmi.n	800bf8a <__swsetup_r+0x82>
 800bf30:	06dd      	lsls	r5, r3, #27
 800bf32:	d411      	bmi.n	800bf58 <__swsetup_r+0x50>
 800bf34:	2309      	movs	r3, #9
 800bf36:	6033      	str	r3, [r6, #0]
 800bf38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf40:	81a3      	strh	r3, [r4, #12]
 800bf42:	e03e      	b.n	800bfc2 <__swsetup_r+0xba>
 800bf44:	4b25      	ldr	r3, [pc, #148]	; (800bfdc <__swsetup_r+0xd4>)
 800bf46:	429c      	cmp	r4, r3
 800bf48:	d101      	bne.n	800bf4e <__swsetup_r+0x46>
 800bf4a:	68ac      	ldr	r4, [r5, #8]
 800bf4c:	e7eb      	b.n	800bf26 <__swsetup_r+0x1e>
 800bf4e:	4b24      	ldr	r3, [pc, #144]	; (800bfe0 <__swsetup_r+0xd8>)
 800bf50:	429c      	cmp	r4, r3
 800bf52:	bf08      	it	eq
 800bf54:	68ec      	ldreq	r4, [r5, #12]
 800bf56:	e7e6      	b.n	800bf26 <__swsetup_r+0x1e>
 800bf58:	0758      	lsls	r0, r3, #29
 800bf5a:	d512      	bpl.n	800bf82 <__swsetup_r+0x7a>
 800bf5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf5e:	b141      	cbz	r1, 800bf72 <__swsetup_r+0x6a>
 800bf60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf64:	4299      	cmp	r1, r3
 800bf66:	d002      	beq.n	800bf6e <__swsetup_r+0x66>
 800bf68:	4630      	mov	r0, r6
 800bf6a:	f7ff fbd3 	bl	800b714 <_free_r>
 800bf6e:	2300      	movs	r3, #0
 800bf70:	6363      	str	r3, [r4, #52]	; 0x34
 800bf72:	89a3      	ldrh	r3, [r4, #12]
 800bf74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf78:	81a3      	strh	r3, [r4, #12]
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	6063      	str	r3, [r4, #4]
 800bf7e:	6923      	ldr	r3, [r4, #16]
 800bf80:	6023      	str	r3, [r4, #0]
 800bf82:	89a3      	ldrh	r3, [r4, #12]
 800bf84:	f043 0308 	orr.w	r3, r3, #8
 800bf88:	81a3      	strh	r3, [r4, #12]
 800bf8a:	6923      	ldr	r3, [r4, #16]
 800bf8c:	b94b      	cbnz	r3, 800bfa2 <__swsetup_r+0x9a>
 800bf8e:	89a3      	ldrh	r3, [r4, #12]
 800bf90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf98:	d003      	beq.n	800bfa2 <__swsetup_r+0x9a>
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	f000 f84d 	bl	800c03c <__smakebuf_r>
 800bfa2:	89a0      	ldrh	r0, [r4, #12]
 800bfa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfa8:	f010 0301 	ands.w	r3, r0, #1
 800bfac:	d00a      	beq.n	800bfc4 <__swsetup_r+0xbc>
 800bfae:	2300      	movs	r3, #0
 800bfb0:	60a3      	str	r3, [r4, #8]
 800bfb2:	6963      	ldr	r3, [r4, #20]
 800bfb4:	425b      	negs	r3, r3
 800bfb6:	61a3      	str	r3, [r4, #24]
 800bfb8:	6923      	ldr	r3, [r4, #16]
 800bfba:	b943      	cbnz	r3, 800bfce <__swsetup_r+0xc6>
 800bfbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfc0:	d1ba      	bne.n	800bf38 <__swsetup_r+0x30>
 800bfc2:	bd70      	pop	{r4, r5, r6, pc}
 800bfc4:	0781      	lsls	r1, r0, #30
 800bfc6:	bf58      	it	pl
 800bfc8:	6963      	ldrpl	r3, [r4, #20]
 800bfca:	60a3      	str	r3, [r4, #8]
 800bfcc:	e7f4      	b.n	800bfb8 <__swsetup_r+0xb0>
 800bfce:	2000      	movs	r0, #0
 800bfd0:	e7f7      	b.n	800bfc2 <__swsetup_r+0xba>
 800bfd2:	bf00      	nop
 800bfd4:	20000010 	.word	0x20000010
 800bfd8:	0800c4d4 	.word	0x0800c4d4
 800bfdc:	0800c4f4 	.word	0x0800c4f4
 800bfe0:	0800c4b4 	.word	0x0800c4b4

0800bfe4 <abort>:
 800bfe4:	2006      	movs	r0, #6
 800bfe6:	b508      	push	{r3, lr}
 800bfe8:	f000 f898 	bl	800c11c <raise>
 800bfec:	2001      	movs	r0, #1
 800bfee:	f7f5 faa0 	bl	8001532 <_exit>

0800bff2 <__swhatbuf_r>:
 800bff2:	b570      	push	{r4, r5, r6, lr}
 800bff4:	460e      	mov	r6, r1
 800bff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bffa:	4614      	mov	r4, r2
 800bffc:	2900      	cmp	r1, #0
 800bffe:	461d      	mov	r5, r3
 800c000:	b096      	sub	sp, #88	; 0x58
 800c002:	da07      	bge.n	800c014 <__swhatbuf_r+0x22>
 800c004:	2300      	movs	r3, #0
 800c006:	602b      	str	r3, [r5, #0]
 800c008:	89b3      	ldrh	r3, [r6, #12]
 800c00a:	061a      	lsls	r2, r3, #24
 800c00c:	d410      	bmi.n	800c030 <__swhatbuf_r+0x3e>
 800c00e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c012:	e00e      	b.n	800c032 <__swhatbuf_r+0x40>
 800c014:	466a      	mov	r2, sp
 800c016:	f000 f89d 	bl	800c154 <_fstat_r>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	dbf2      	blt.n	800c004 <__swhatbuf_r+0x12>
 800c01e:	9a01      	ldr	r2, [sp, #4]
 800c020:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c024:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c028:	425a      	negs	r2, r3
 800c02a:	415a      	adcs	r2, r3
 800c02c:	602a      	str	r2, [r5, #0]
 800c02e:	e7ee      	b.n	800c00e <__swhatbuf_r+0x1c>
 800c030:	2340      	movs	r3, #64	; 0x40
 800c032:	2000      	movs	r0, #0
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	b016      	add	sp, #88	; 0x58
 800c038:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c03c <__smakebuf_r>:
 800c03c:	898b      	ldrh	r3, [r1, #12]
 800c03e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c040:	079d      	lsls	r5, r3, #30
 800c042:	4606      	mov	r6, r0
 800c044:	460c      	mov	r4, r1
 800c046:	d507      	bpl.n	800c058 <__smakebuf_r+0x1c>
 800c048:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c04c:	6023      	str	r3, [r4, #0]
 800c04e:	6123      	str	r3, [r4, #16]
 800c050:	2301      	movs	r3, #1
 800c052:	6163      	str	r3, [r4, #20]
 800c054:	b002      	add	sp, #8
 800c056:	bd70      	pop	{r4, r5, r6, pc}
 800c058:	466a      	mov	r2, sp
 800c05a:	ab01      	add	r3, sp, #4
 800c05c:	f7ff ffc9 	bl	800bff2 <__swhatbuf_r>
 800c060:	9900      	ldr	r1, [sp, #0]
 800c062:	4605      	mov	r5, r0
 800c064:	4630      	mov	r0, r6
 800c066:	f7fb fd2b 	bl	8007ac0 <_malloc_r>
 800c06a:	b948      	cbnz	r0, 800c080 <__smakebuf_r+0x44>
 800c06c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c070:	059a      	lsls	r2, r3, #22
 800c072:	d4ef      	bmi.n	800c054 <__smakebuf_r+0x18>
 800c074:	f023 0303 	bic.w	r3, r3, #3
 800c078:	f043 0302 	orr.w	r3, r3, #2
 800c07c:	81a3      	strh	r3, [r4, #12]
 800c07e:	e7e3      	b.n	800c048 <__smakebuf_r+0xc>
 800c080:	4b0d      	ldr	r3, [pc, #52]	; (800c0b8 <__smakebuf_r+0x7c>)
 800c082:	62b3      	str	r3, [r6, #40]	; 0x28
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	6020      	str	r0, [r4, #0]
 800c088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c08c:	81a3      	strh	r3, [r4, #12]
 800c08e:	9b00      	ldr	r3, [sp, #0]
 800c090:	6120      	str	r0, [r4, #16]
 800c092:	6163      	str	r3, [r4, #20]
 800c094:	9b01      	ldr	r3, [sp, #4]
 800c096:	b15b      	cbz	r3, 800c0b0 <__smakebuf_r+0x74>
 800c098:	4630      	mov	r0, r6
 800c09a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c09e:	f000 f86b 	bl	800c178 <_isatty_r>
 800c0a2:	b128      	cbz	r0, 800c0b0 <__smakebuf_r+0x74>
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	f023 0303 	bic.w	r3, r3, #3
 800c0aa:	f043 0301 	orr.w	r3, r3, #1
 800c0ae:	81a3      	strh	r3, [r4, #12]
 800c0b0:	89a0      	ldrh	r0, [r4, #12]
 800c0b2:	4305      	orrs	r5, r0
 800c0b4:	81a5      	strh	r5, [r4, #12]
 800c0b6:	e7cd      	b.n	800c054 <__smakebuf_r+0x18>
 800c0b8:	080078a1 	.word	0x080078a1

0800c0bc <_malloc_usable_size_r>:
 800c0bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0c0:	1f18      	subs	r0, r3, #4
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	bfbc      	itt	lt
 800c0c6:	580b      	ldrlt	r3, [r1, r0]
 800c0c8:	18c0      	addlt	r0, r0, r3
 800c0ca:	4770      	bx	lr

0800c0cc <_raise_r>:
 800c0cc:	291f      	cmp	r1, #31
 800c0ce:	b538      	push	{r3, r4, r5, lr}
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	460d      	mov	r5, r1
 800c0d4:	d904      	bls.n	800c0e0 <_raise_r+0x14>
 800c0d6:	2316      	movs	r3, #22
 800c0d8:	6003      	str	r3, [r0, #0]
 800c0da:	f04f 30ff 	mov.w	r0, #4294967295
 800c0de:	bd38      	pop	{r3, r4, r5, pc}
 800c0e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0e2:	b112      	cbz	r2, 800c0ea <_raise_r+0x1e>
 800c0e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0e8:	b94b      	cbnz	r3, 800c0fe <_raise_r+0x32>
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f000 f830 	bl	800c150 <_getpid_r>
 800c0f0:	462a      	mov	r2, r5
 800c0f2:	4601      	mov	r1, r0
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0fa:	f000 b817 	b.w	800c12c <_kill_r>
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d00a      	beq.n	800c118 <_raise_r+0x4c>
 800c102:	1c59      	adds	r1, r3, #1
 800c104:	d103      	bne.n	800c10e <_raise_r+0x42>
 800c106:	2316      	movs	r3, #22
 800c108:	6003      	str	r3, [r0, #0]
 800c10a:	2001      	movs	r0, #1
 800c10c:	e7e7      	b.n	800c0de <_raise_r+0x12>
 800c10e:	2400      	movs	r4, #0
 800c110:	4628      	mov	r0, r5
 800c112:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c116:	4798      	blx	r3
 800c118:	2000      	movs	r0, #0
 800c11a:	e7e0      	b.n	800c0de <_raise_r+0x12>

0800c11c <raise>:
 800c11c:	4b02      	ldr	r3, [pc, #8]	; (800c128 <raise+0xc>)
 800c11e:	4601      	mov	r1, r0
 800c120:	6818      	ldr	r0, [r3, #0]
 800c122:	f7ff bfd3 	b.w	800c0cc <_raise_r>
 800c126:	bf00      	nop
 800c128:	20000010 	.word	0x20000010

0800c12c <_kill_r>:
 800c12c:	b538      	push	{r3, r4, r5, lr}
 800c12e:	2300      	movs	r3, #0
 800c130:	4d06      	ldr	r5, [pc, #24]	; (800c14c <_kill_r+0x20>)
 800c132:	4604      	mov	r4, r0
 800c134:	4608      	mov	r0, r1
 800c136:	4611      	mov	r1, r2
 800c138:	602b      	str	r3, [r5, #0]
 800c13a:	f7f5 f9ea 	bl	8001512 <_kill>
 800c13e:	1c43      	adds	r3, r0, #1
 800c140:	d102      	bne.n	800c148 <_kill_r+0x1c>
 800c142:	682b      	ldr	r3, [r5, #0]
 800c144:	b103      	cbz	r3, 800c148 <_kill_r+0x1c>
 800c146:	6023      	str	r3, [r4, #0]
 800c148:	bd38      	pop	{r3, r4, r5, pc}
 800c14a:	bf00      	nop
 800c14c:	20003adc 	.word	0x20003adc

0800c150 <_getpid_r>:
 800c150:	f7f5 b9d8 	b.w	8001504 <_getpid>

0800c154 <_fstat_r>:
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	2300      	movs	r3, #0
 800c158:	4d06      	ldr	r5, [pc, #24]	; (800c174 <_fstat_r+0x20>)
 800c15a:	4604      	mov	r4, r0
 800c15c:	4608      	mov	r0, r1
 800c15e:	4611      	mov	r1, r2
 800c160:	602b      	str	r3, [r5, #0]
 800c162:	f7f5 fa34 	bl	80015ce <_fstat>
 800c166:	1c43      	adds	r3, r0, #1
 800c168:	d102      	bne.n	800c170 <_fstat_r+0x1c>
 800c16a:	682b      	ldr	r3, [r5, #0]
 800c16c:	b103      	cbz	r3, 800c170 <_fstat_r+0x1c>
 800c16e:	6023      	str	r3, [r4, #0]
 800c170:	bd38      	pop	{r3, r4, r5, pc}
 800c172:	bf00      	nop
 800c174:	20003adc 	.word	0x20003adc

0800c178 <_isatty_r>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	2300      	movs	r3, #0
 800c17c:	4d05      	ldr	r5, [pc, #20]	; (800c194 <_isatty_r+0x1c>)
 800c17e:	4604      	mov	r4, r0
 800c180:	4608      	mov	r0, r1
 800c182:	602b      	str	r3, [r5, #0]
 800c184:	f7f5 fa32 	bl	80015ec <_isatty>
 800c188:	1c43      	adds	r3, r0, #1
 800c18a:	d102      	bne.n	800c192 <_isatty_r+0x1a>
 800c18c:	682b      	ldr	r3, [r5, #0]
 800c18e:	b103      	cbz	r3, 800c192 <_isatty_r+0x1a>
 800c190:	6023      	str	r3, [r4, #0]
 800c192:	bd38      	pop	{r3, r4, r5, pc}
 800c194:	20003adc 	.word	0x20003adc

0800c198 <_init>:
 800c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19a:	bf00      	nop
 800c19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c19e:	bc08      	pop	{r3}
 800c1a0:	469e      	mov	lr, r3
 800c1a2:	4770      	bx	lr

0800c1a4 <_fini>:
 800c1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a6:	bf00      	nop
 800c1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1aa:	bc08      	pop	{r3}
 800c1ac:	469e      	mov	lr, r3
 800c1ae:	4770      	bx	lr
