
ESP-01_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df3c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800e050  0800e050  0001e050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e790  0800e790  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e790  0800e790  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e790  0800e790  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e790  0800e790  0001e790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e794  0800e794  0001e794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000039d0  200001e0  0800e978  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003bb0  0800e978  00023bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ef1  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bf5  00000000  00000000  000430fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  00047cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001608  00000000  00000000  000494f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000154ca  00000000  00000000  0004aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00007b28  00000000  00000000  0005ffc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00067aea  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000078f0  00000000  00000000  00067b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e034 	.word	0x0800e034

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800e034 	.word	0x0800e034

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2lz>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	460c      	mov	r4, r1
 8001068:	4605      	mov	r5, r0
 800106a:	4621      	mov	r1, r4
 800106c:	4628      	mov	r0, r5
 800106e:	2200      	movs	r2, #0
 8001070:	2300      	movs	r3, #0
 8001072:	f7ff fca3 	bl	80009bc <__aeabi_dcmplt>
 8001076:	b928      	cbnz	r0, 8001084 <__aeabi_d2lz+0x20>
 8001078:	4628      	mov	r0, r5
 800107a:	4621      	mov	r1, r4
 800107c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001080:	f000 b80a 	b.w	8001098 <__aeabi_d2ulz>
 8001084:	4628      	mov	r0, r5
 8001086:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800108a:	f000 f805 	bl	8001098 <__aeabi_d2ulz>
 800108e:	4240      	negs	r0, r0
 8001090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001094:	bd38      	pop	{r3, r4, r5, pc}
 8001096:	bf00      	nop

08001098 <__aeabi_d2ulz>:
 8001098:	b5d0      	push	{r4, r6, r7, lr}
 800109a:	2200      	movs	r2, #0
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <__aeabi_d2ulz+0x34>)
 800109e:	4606      	mov	r6, r0
 80010a0:	460f      	mov	r7, r1
 80010a2:	f7ff fa19 	bl	80004d8 <__aeabi_dmul>
 80010a6:	f7ff fcef 	bl	8000a88 <__aeabi_d2uiz>
 80010aa:	4604      	mov	r4, r0
 80010ac:	f7ff f99a 	bl	80003e4 <__aeabi_ui2d>
 80010b0:	2200      	movs	r2, #0
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <__aeabi_d2ulz+0x38>)
 80010b4:	f7ff fa10 	bl	80004d8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4630      	mov	r0, r6
 80010be:	4639      	mov	r1, r7
 80010c0:	f7ff f852 	bl	8000168 <__aeabi_dsub>
 80010c4:	f7ff fce0 	bl	8000a88 <__aeabi_d2uiz>
 80010c8:	4621      	mov	r1, r4
 80010ca:	bdd0      	pop	{r4, r6, r7, pc}
 80010cc:	3df00000 	.word	0x3df00000
 80010d0:	41f00000 	.word	0x41f00000

080010d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_ADC1_Init+0x7c>)
 80010e6:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <MX_ADC1_Init+0x80>)
 80010e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_ADC1_Init+0x7c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_ADC1_Init+0x7c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_ADC1_Init+0x7c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_ADC1_Init+0x7c>)
 80010fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001102:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_ADC1_Init+0x7c>)
 8001106:	2200      	movs	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_ADC1_Init+0x7c>)
 800110c:	2201      	movs	r2, #1
 800110e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001110:	480f      	ldr	r0, [pc, #60]	; (8001150 <MX_ADC1_Init+0x7c>)
 8001112:	f001 ff4f 	bl	8002fb4 <HAL_ADC_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800111c:	f000 fe55 	bl	8001dca <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001120:	2304      	movs	r3, #4
 8001122:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001124:	2301      	movs	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	4619      	mov	r1, r3
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <MX_ADC1_Init+0x7c>)
 8001132:	f002 f9d3 	bl	80034dc <HAL_ADC_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800113c:	f000 fe45 	bl	8001dca <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
	//Выполняет автоматическую самокалибровку АЦП. Функция должна вызываться при отключенном АЦП.
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <MX_ADC1_Init+0x7c>)
 8001142:	f002 fb5f 	bl	8003804 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20003718 	.word	0x20003718
 8001154:	40012400 	.word	0x40012400

08001158 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_ADC_MspInit+0x7c>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d129      	bne.n	80011cc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011a8:	2310      	movs	r3, #16
 80011aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ac:	2303      	movs	r3, #3
 80011ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4619      	mov	r1, r3
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <HAL_ADC_MspInit+0x84>)
 80011b8:	f002 fee4 	bl	8003f84 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2105      	movs	r1, #5
 80011c0:	2012      	movs	r0, #18
 80011c2:	f002 fca0 	bl	8003b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011c6:	2012      	movs	r0, #18
 80011c8:	f002 fcb9 	bl	8003b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40012400 	.word	0x40012400
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010800 	.word	0x40010800

080011e0 <resetGlobalState>:
 */
struct GlobalStateStruct globalState;
struct GlobalStateStruct pauseState;
bool globalStopFlag = false;
bool globalPauseFlag = false;
void resetGlobalState(){
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	globalStopFlag = false;
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <resetGlobalState+0x9c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
	globalPauseFlag = false;
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <resetGlobalState+0xa0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
	globalState.isExistActiveAction = false;
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <resetGlobalState+0xa4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	globalState.typeStruct.subType[0] = '0';
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <resetGlobalState+0xa4>)
 80011fa:	2230      	movs	r2, #48	; 0x30
 80011fc:	709a      	strb	r2, [r3, #2]
	globalState.typeStruct.subType[1] = '0';
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <resetGlobalState+0xa4>)
 8001200:	2230      	movs	r2, #48	; 0x30
 8001202:	70da      	strb	r2, [r3, #3]
	globalState.typeStruct.type[0] = '0';
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <resetGlobalState+0xa4>)
 8001206:	2230      	movs	r2, #48	; 0x30
 8001208:	701a      	strb	r2, [r3, #0]
	globalState.typeStruct.type[1] = '0';
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <resetGlobalState+0xa4>)
 800120c:	2230      	movs	r2, #48	; 0x30
 800120e:	705a      	strb	r2, [r3, #1]

	globalState.changePositionStruct.dir = false;
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <resetGlobalState+0xa4>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	globalState.changePositionStruct.id = 0;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <resetGlobalState+0xa4>)
 800121a:	2200      	movs	r2, #0
 800121c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	globalState.changePositionStruct.way = 0;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <resetGlobalState+0xa4>)
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	64da      	str	r2, [r3, #76]	; 0x4c

	globalState.detectAmperageRangeStruct.id = 0;
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <resetGlobalState+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	869a      	strh	r2, [r3, #52]	; 0x34
	globalState.detectAmperageRangeStruct.dir = false;
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <resetGlobalState+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	globalState.detectAmperageRangeStruct.way = 0;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <resetGlobalState+0xa4>)
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	639a      	str	r2, [r3, #56]	; 0x38
	globalState.detectAmperageRangeStruct.step = 0;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <resetGlobalState+0xa4>)
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	63da      	str	r2, [r3, #60]	; 0x3c
	globalState.detectAmperageRangeStruct.count = 0;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <resetGlobalState+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	globalState.detectAmperageRangeStruct.cur = 0;
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <resetGlobalState+0xa4>)
 8001250:	2200      	movs	r2, #0
 8001252:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	globalState.detectAmperageRangeStruct.speed = 0;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <resetGlobalState+0xa4>)
 8001258:	2200      	movs	r2, #0
 800125a:	645a      	str	r2, [r3, #68]	; 0x44

	globalState.detectAmperageTimeStruct.id = 0;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <resetGlobalState+0xa4>)
 800125e:	2200      	movs	r2, #0
 8001260:	849a      	strh	r2, [r3, #36]	; 0x24
	globalState.detectAmperageTimeStruct.count = 0;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <resetGlobalState+0xa4>)
 8001264:	2200      	movs	r2, #0
 8001266:	859a      	strh	r2, [r3, #44]	; 0x2c
	globalState.detectAmperageTimeStruct.pointCount = 0;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <resetGlobalState+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
	globalState.detectAmperageTimeStruct.freq = 0;
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <resetGlobalState+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	200001fc 	.word	0x200001fc
 8001280:	200001fd 	.word	0x200001fd
 8001284:	20003748 	.word	0x20003748

08001288 <copyGlobalStateToPause>:

void copyGlobalStateToPause(struct GlobalStateStruct from){
 8001288:	b084      	sub	sp, #16
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
 800128e:	f107 0c08 	add.w	ip, r7, #8
 8001292:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	pauseState = from;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <copyGlobalStateToPause+0x2c>)
 8001298:	4618      	mov	r0, r3
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	2254      	movs	r2, #84	; 0x54
 80012a0:	4619      	mov	r1, r3
 80012a2:	f008 fa7a 	bl	800979a <memcpy>
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012ae:	b004      	add	sp, #16
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000388c 	.word	0x2000388c

080012b8 <copyGlobalStateFromPause>:

void copyGlobalStateFromPause(struct GlobalStateStruct from){
 80012b8:	b084      	sub	sp, #16
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
 80012be:	f107 0c08 	add.w	ip, r7, #8
 80012c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	globalState = from;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <copyGlobalStateFromPause+0x34>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	2254      	movs	r2, #84	; 0x54
 80012d0:	4619      	mov	r1, r3
 80012d2:	f008 fa62 	bl	800979a <memcpy>
	globalState.isExistActiveAction = false;
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <copyGlobalStateFromPause+0x34>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012e6:	b004      	add	sp, #16
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20003748 	.word	0x20003748

080012f0 <vApplicationStackOverflowHook>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

	myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8001308:	4a18      	ldr	r2, [pc, #96]	; (800136c <MX_FREERTOS_Init+0x68>)
 800130a:	2101      	movs	r1, #1
 800130c:	2001      	movs	r0, #1
 800130e:	f005 fb1b 	bl	8006948 <osSemaphoreNew>
 8001312:	4603      	mov	r3, r0
 8001314:	4a16      	ldr	r2, [pc, #88]	; (8001370 <MX_FREERTOS_Init+0x6c>)
 8001316:	6013      	str	r3, [r2, #0]

	myQueue01Handle = osMessageQueueNew(16, sizeof(uint8_t),&myQueue01_attributes);
 8001318:	4a16      	ldr	r2, [pc, #88]	; (8001374 <MX_FREERTOS_Init+0x70>)
 800131a:	2101      	movs	r1, #1
 800131c:	2010      	movs	r0, #16
 800131e:	f005 fbaf 	bl	8006a80 <osMessageQueueNew>
 8001322:	4603      	mov	r3, r0
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <MX_FREERTOS_Init+0x74>)
 8001326:	6013      	str	r3, [r2, #0]
	myQueue02Handle = osMessageQueueNew(16, sizeof(uint8_t),&myQueue02_attributes);
 8001328:	4a14      	ldr	r2, [pc, #80]	; (800137c <MX_FREERTOS_Init+0x78>)
 800132a:	2101      	movs	r1, #1
 800132c:	2010      	movs	r0, #16
 800132e:	f005 fba7 	bl	8006a80 <osMessageQueueNew>
 8001332:	4603      	mov	r3, r0
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <MX_FREERTOS_Init+0x7c>)
 8001336:	6013      	str	r3, [r2, #0]

	myTaskUARTHandle = osThreadNew(StartTaskUART, NULL, &myTaskUART_attributes);
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <MX_FREERTOS_Init+0x80>)
 800133a:	2100      	movs	r1, #0
 800133c:	4812      	ldr	r0, [pc, #72]	; (8001388 <MX_FREERTOS_Init+0x84>)
 800133e:	f005 fa2b 	bl	8006798 <osThreadNew>
 8001342:	4603      	mov	r3, r0
 8001344:	4a11      	ldr	r2, [pc, #68]	; (800138c <MX_FREERTOS_Init+0x88>)
 8001346:	6013      	str	r3, [r2, #0]
	myTaskMotorHandle = osThreadNew(StartTaskMOTOR, NULL, &myTaskMotor_attributes);
 8001348:	4a11      	ldr	r2, [pc, #68]	; (8001390 <MX_FREERTOS_Init+0x8c>)
 800134a:	2100      	movs	r1, #0
 800134c:	4811      	ldr	r0, [pc, #68]	; (8001394 <MX_FREERTOS_Init+0x90>)
 800134e:	f005 fa23 	bl	8006798 <osThreadNew>
 8001352:	4603      	mov	r3, r0
 8001354:	4a10      	ldr	r2, [pc, #64]	; (8001398 <MX_FREERTOS_Init+0x94>)
 8001356:	6013      	str	r3, [r2, #0]
	myTaskPMTHandle = osThreadNew(StartTaskPMT, NULL, &myTaskPMT_attributes);
 8001358:	4a10      	ldr	r2, [pc, #64]	; (800139c <MX_FREERTOS_Init+0x98>)
 800135a:	2100      	movs	r1, #0
 800135c:	4810      	ldr	r0, [pc, #64]	; (80013a0 <MX_FREERTOS_Init+0x9c>)
 800135e:	f005 fa1b 	bl	8006798 <osThreadNew>
 8001362:	4603      	mov	r3, r0
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <MX_FREERTOS_Init+0xa0>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	0800e254 	.word	0x0800e254
 8001370:	200038e0 	.word	0x200038e0
 8001374:	0800e224 	.word	0x0800e224
 8001378:	200038e4 	.word	0x200038e4
 800137c:	0800e23c 	.word	0x0800e23c
 8001380:	200038e8 	.word	0x200038e8
 8001384:	0800e1b8 	.word	0x0800e1b8
 8001388:	080013a9 	.word	0x080013a9
 800138c:	200037a4 	.word	0x200037a4
 8001390:	0800e1dc 	.word	0x0800e1dc
 8001394:	080014ed 	.word	0x080014ed
 8001398:	2000379c 	.word	0x2000379c
 800139c:	0800e200 	.word	0x0800e200
 80013a0:	0800161d 	.word	0x0800161d
 80013a4:	200037a8 	.word	0x200037a8

080013a8 <StartTaskUART>:


/*
 * Задача для чтения сообщения из UART
 */
void StartTaskUART(void *argument) {
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b0dd      	sub	sp, #372	; 0x174
 80013ac:	af12      	add	r7, sp, #72	; 0x48
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	6018      	str	r0, [r3, #0]
	for (;;) {
		// 1 - получили символ и проверии, что это стартовый
		bool isStartReadUart = receiveSymbol() == OK && checkStartOfMessage() == OK;
 80013b2:	f001 f9e5 	bl	8002780 <receiveSymbol>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d106      	bne.n	80013ca <StartTaskUART+0x22>
 80013bc:	f001 f9f6 	bl	80027ac <checkStartOfMessage>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <StartTaskUART+0x22>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <StartTaskUART+0x24>
 80013ca:	2300      	movs	r3, #0
 80013cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 80013d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if (!isStartReadUart) {
 80013dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80013e0:	f083 0301 	eor.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <StartTaskUART+0x4c>
			SentError((uint8_t*) __FILE__, __LINE__);
 80013ea:	217b      	movs	r1, #123	; 0x7b
 80013ec:	4839      	ldr	r0, [pc, #228]	; (80014d4 <StartTaskUART+0x12c>)
 80013ee:	f005 f821 	bl	8006434 <SentError>
			continue;
 80013f2:	e06d      	b.n	80014d0 <StartTaskUART+0x128>
		}

		// 2 - читаем остальную часть строки в receiveMessageText
		char receiveMessageText[200];
		bool receiveMessageResult = receiveMessage(receiveMessageText) == OK;
 80013f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 f9e7 	bl	80027cc <receiveMessage>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	bf0c      	ite	eq
 8001404:	2301      	moveq	r3, #1
 8001406:	2300      	movne	r3, #0
 8001408:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		if (!receiveMessageResult) {
 800140c:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8001410:	f083 0301 	eor.w	r3, r3, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d004      	beq.n	8001424 <StartTaskUART+0x7c>
			SentError((uint8_t*) __FILE__, __LINE__);
 800141a:	2183      	movs	r1, #131	; 0x83
 800141c:	482d      	ldr	r0, [pc, #180]	; (80014d4 <StartTaskUART+0x12c>)
 800141e:	f005 f809 	bl	8006434 <SentError>
			continue;
 8001422:	e055      	b.n	80014d0 <StartTaskUART+0x128>
		}

		// 3 - записываем новое глобальное состояние систему
		struct GlobalStateStruct parseMessageResult = getNewGlobalState(receiveMessageText);
 8001424:	f107 0308 	add.w	r3, r7, #8
 8001428:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f001 f9f4 	bl	800281c <getNewGlobalState>
		clean(receiveMessageText);
 8001434:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001438:	4618      	mov	r0, r3
 800143a:	f001 faff 	bl	8002a3c <clean>

		// 4 - если это проверка состояния сразу отвечае
		if (isCheckState(parseMessageResult.typeStruct))
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	f001 f8a9 	bl	800259a <isCheckState>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <StartTaskUART+0xb6>
		{
			SentResultActionResponse(parseMessageResult.typeStruct, "", 1);
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	2201      	movs	r2, #1
 8001454:	4920      	ldr	r1, [pc, #128]	; (80014d8 <StartTaskUART+0x130>)
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	f005 f826 	bl	80064a8 <SentResultActionResponse>
			continue;
 800145c:	e038      	b.n	80014d0 <StartTaskUART+0x128>
		}

		// 5 - если это команда стоп
		if (isStopMeasure(parseMessageResult.typeStruct))
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	f001 f971 	bl	800274a <isStopMeasure>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <StartTaskUART+0xce>
		{
			globalStopFlag = true;
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <StartTaskUART+0x134>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
			continue;
 8001474:	e02c      	b.n	80014d0 <StartTaskUART+0x128>
		}

		// 6 - если это команда паузы
		if (isPauseMeasure(parseMessageResult.typeStruct))
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	f001 f94a 	bl	8002714 <isPauseMeasure>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <StartTaskUART+0xe6>
		{
			globalPauseFlag = true;
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <StartTaskUART+0x138>)
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
			continue;
 800148c:	e020      	b.n	80014d0 <StartTaskUART+0x128>
		}

		// 6 - если это команда продолжения после паузы
		if (isContinueMeasure(parseMessageResult.typeStruct))
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	f001 f923 	bl	80026de <isContinueMeasure>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00c      	beq.n	80014b8 <StartTaskUART+0x110>
		{
			copyGlobalStateFromPause(pauseState);
 800149e:	4c11      	ldr	r4, [pc, #68]	; (80014e4 <StartTaskUART+0x13c>)
 80014a0:	4668      	mov	r0, sp
 80014a2:	f104 0310 	add.w	r3, r4, #16
 80014a6:	2244      	movs	r2, #68	; 0x44
 80014a8:	4619      	mov	r1, r3
 80014aa:	f008 f976 	bl	800979a <memcpy>
 80014ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014b2:	f7ff ff01 	bl	80012b8 <copyGlobalStateFromPause>
			continue;
 80014b6:	e00b      	b.n	80014d0 <StartTaskUART+0x128>
		}

		globalState = parseMessageResult;
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <StartTaskUART+0x140>)
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	2354      	movs	r3, #84	; 0x54
 80014c4:	461a      	mov	r2, r3
 80014c6:	f008 f968 	bl	800979a <memcpy>

		osDelay(1);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f005 fa0e 	bl	80068ec <osDelay>
	for (;;) {
 80014d0:	e76f      	b.n	80013b2 <StartTaskUART+0xa>
 80014d2:	bf00      	nop
 80014d4:	0800e09c 	.word	0x0800e09c
 80014d8:	0800e0b4 	.word	0x0800e0b4
 80014dc:	200001fc 	.word	0x200001fc
 80014e0:	200001fd 	.word	0x200001fd
 80014e4:	2000388c 	.word	0x2000388c
 80014e8:	20003748 	.word	0x20003748

080014ec <StartTaskMOTOR>:
 * @brief Function implementing the myTaskMotor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskMOTOR */
void StartTaskMOTOR(void *argument) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	for (;;) {
		// 1 - дожидаемся пока придем команда для изменения положения шагового двигателя
		if(isChangePosition(globalState.typeStruct) && !globalState.isExistActiveAction){
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <StartTaskMOTOR+0xb0>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	f001 f86a 	bl	80025d0 <isChangePosition>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d047      	beq.n	8001592 <StartTaskMOTOR+0xa6>
 8001502:	4b26      	ldr	r3, [pc, #152]	; (800159c <StartTaskMOTOR+0xb0>)
 8001504:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001508:	f083 0301 	eor.w	r3, r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d03f      	beq.n	8001592 <StartTaskMOTOR+0xa6>
			speedChangeFactor = 0;
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <StartTaskMOTOR+0xb4>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
			speedDownChangeFactor = 0;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <StartTaskMOTOR+0xb8>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
			isSetMotorPin = false;
 800151e:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <StartTaskMOTOR+0xbc>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
			totalRate = 0;
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <StartTaskMOTOR+0xc0>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
			currentRate = 0;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <StartTaskMOTOR+0xc4>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
			globalState.isExistActiveAction = true;
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <StartTaskMOTOR+0xb0>)
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			// 2 - устанавливаем вращение
			// true - часовая / false - против часовой
			if(globalState.changePositionStruct.dir){
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <StartTaskMOTOR+0xb0>)
 800153a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <StartTaskMOTOR+0x62>
				HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2101      	movs	r1, #1
 8001546:	481b      	ldr	r0, [pc, #108]	; (80015b4 <StartTaskMOTOR+0xc8>)
 8001548:	f002 fea0 	bl	800428c <HAL_GPIO_WritePin>
 800154c:	e004      	b.n	8001558 <StartTaskMOTOR+0x6c>
			} else {
				HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	2101      	movs	r1, #1
 8001552:	4818      	ldr	r0, [pc, #96]	; (80015b4 <StartTaskMOTOR+0xc8>)
 8001554:	f002 fe9a 	bl	800428c <HAL_GPIO_WritePin>
			}

			// 3 - определяем кол-во шим сигналов для вращения
			totalRate = globalState.changePositionStruct.way * 1000;
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <StartTaskMOTOR+0xb0>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155c:	4916      	ldr	r1, [pc, #88]	; (80015b8 <StartTaskMOTOR+0xcc>)
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fc10 	bl	8000d84 <__aeabi_fmul>
 8001564:	4603      	mov	r3, r0
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fd5c 	bl	8001024 <__aeabi_f2uiz>
 800156c:	4603      	mov	r3, r0
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <StartTaskMOTOR+0xc0>)
 8001570:	6013      	str	r3, [r2, #0]
			currentRate = globalState.changePositionStruct.way * 1000;
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <StartTaskMOTOR+0xb0>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	4910      	ldr	r1, [pc, #64]	; (80015b8 <StartTaskMOTOR+0xcc>)
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fc03 	bl	8000d84 <__aeabi_fmul>
 800157e:	4603      	mov	r3, r0
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fd4f 	bl	8001024 <__aeabi_f2uiz>
 8001586:	4603      	mov	r3, r0
 8001588:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <StartTaskMOTOR+0xc4>)
 800158a:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 800158c:	480b      	ldr	r0, [pc, #44]	; (80015bc <StartTaskMOTOR+0xd0>)
 800158e:	f003 fcf3 	bl	8004f78 <HAL_TIM_Base_Start_IT>
		}

		osDelay(1);
 8001592:	2001      	movs	r0, #1
 8001594:	f005 f9aa 	bl	80068ec <osDelay>
		if(isChangePosition(globalState.typeStruct) && !globalState.isExistActiveAction){
 8001598:	e7ac      	b.n	80014f4 <StartTaskMOTOR+0x8>
 800159a:	bf00      	nop
 800159c:	20003748 	.word	0x20003748
 80015a0:	20000209 	.word	0x20000209
 80015a4:	2000020a 	.word	0x2000020a
 80015a8:	20000208 	.word	0x20000208
 80015ac:	20000200 	.word	0x20000200
 80015b0:	20000204 	.word	0x20000204
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	447a0000 	.word	0x447a0000
 80015bc:	20003a44 	.word	0x20003a44

080015c0 <measureAmperageRangeItem>:
	}
}

// логика измерения с усреднением
uint32_t measureAmperageRangeItem(uint16_t count){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
	uint32_t ADC_value = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Start(&hadc1);
 80015ce:	4812      	ldr	r0, [pc, #72]	; (8001618 <measureAmperageRangeItem+0x58>)
 80015d0:	f001 fdc8 	bl	8003164 <HAL_ADC_Start>
	//HAL_ADC_PollForConversion(&hadc1, 100);
	for (int i = 0; i < count; i++) {
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	e012      	b.n	8001600 <measureAmperageRangeItem+0x40>

		if(ADC_value == 0){
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d104      	bne.n	80015ea <measureAmperageRangeItem+0x2a>
			ADC_value = HAL_ADC_GetValue(&hadc1);
 80015e0:	480d      	ldr	r0, [pc, #52]	; (8001618 <measureAmperageRangeItem+0x58>)
 80015e2:	f001 fe99 	bl	8003318 <HAL_ADC_GetValue>
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	e007      	b.n	80015fa <measureAmperageRangeItem+0x3a>
	    }else {
			ADC_value = (HAL_ADC_GetValue(&hadc1) + ADC_value) / 2;
 80015ea:	480b      	ldr	r0, [pc, #44]	; (8001618 <measureAmperageRangeItem+0x58>)
 80015ec:	f001 fe94 	bl	8003318 <HAL_ADC_GetValue>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	085b      	lsrs	r3, r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < count; i++) {
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3301      	adds	r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	429a      	cmp	r2, r3
 8001606:	dbe8      	blt.n	80015da <measureAmperageRangeItem+0x1a>
		}
	}
	HAL_ADC_Stop(&hadc1);
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <measureAmperageRangeItem+0x58>)
 800160a:	f001 fe59 	bl	80032c0 <HAL_ADC_Stop>
	return ADC_value;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20003718 	.word	0x20003718

0800161c <StartTaskPMT>:
 * @brief Function implementing the myTaskPMT thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskPMT */
void StartTaskPMT(void *argument) {
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b09a      	sub	sp, #104	; 0x68
 8001620:	af12      	add	r7, sp, #72	; 0x48
 8001622:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskPMT */

	/* Infinite loop */
	for (;;) {
		if(globalState.isExistActiveAction){
 8001624:	4bb0      	ldr	r3, [pc, #704]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001626:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800162a:	2b00      	cmp	r3, #0
 800162c:	f040 81b4 	bne.w	8001998 <StartTaskPMT+0x37c>
			continue;
		}

		//ток на промежутке
		if (isDetectAmperageRange(globalState.typeStruct))
 8001630:	4bad      	ldr	r3, [pc, #692]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	f000 ffe7 	bl	8002606 <isDetectAmperageRange>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80f8 	beq.w	8001830 <StartTaskPMT+0x214>
		{
			// 0 - отправляем команду о начале измерения
			SentResultActionResponse(globalState.typeStruct, "", 1);
 8001640:	4ba9      	ldr	r3, [pc, #676]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001642:	2201      	movs	r2, #1
 8001644:	49a9      	ldr	r1, [pc, #676]	; (80018ec <StartTaskPMT+0x2d0>)
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	f004 ff2e 	bl	80064a8 <SentResultActionResponse>

			globalState.isExistActiveAction = true;
 800164c:	4ba6      	ldr	r3, [pc, #664]	; (80018e8 <StartTaskPMT+0x2cc>)
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			// 1 - выполняем измерение в 1 точке
			SendResponseMeasure(
 8001654:	4ba4      	ldr	r3, [pc, #656]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001656:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
 8001658:	4ba3      	ldr	r3, [pc, #652]	; (80018e8 <StartTaskPMT+0x2cc>)
 800165a:	f8b3 5042 	ldrh.w	r5, [r3, #66]	; 0x42
 800165e:	4ba2      	ldr	r3, [pc, #648]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ffab 	bl	80015c0 <measureAmperageRangeItem>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	4629      	mov	r1, r5
 8001670:	4620      	mov	r0, r4
 8001672:	f004 ff7f 	bl	8006574 <SendResponseMeasure>
					globalState.detectAmperageRangeStruct.id,
					globalState.detectAmperageRangeStruct.cur,
					measureAmperageRangeItem(globalState.detectAmperageRangeStruct.count));

			// 2 - задаем направление последующих измерений
			if(globalState.detectAmperageRangeStruct.dir){
 8001676:	4b9c      	ldr	r3, [pc, #624]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001678:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <StartTaskPMT+0x70>
				HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2101      	movs	r1, #1
 8001684:	489a      	ldr	r0, [pc, #616]	; (80018f0 <StartTaskPMT+0x2d4>)
 8001686:	f002 fe01 	bl	800428c <HAL_GPIO_WritePin>
 800168a:	e004      	b.n	8001696 <StartTaskPMT+0x7a>
			} else {
				HAL_GPIO_WritePin(MOTOR_Port, DIR_Pin, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	2101      	movs	r1, #1
 8001690:	4897      	ldr	r0, [pc, #604]	; (80018f0 <StartTaskPMT+0x2d4>)
 8001692:	f002 fdfb 	bl	800428c <HAL_GPIO_WritePin>
			}

			// 3 - высчитываем сколько шагов надо совершить
			uint32_t totalMeasureWay =  globalState.detectAmperageRangeStruct.way * 1000;
 8001696:	4b94      	ldr	r3, [pc, #592]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169a:	4996      	ldr	r1, [pc, #600]	; (80018f4 <StartTaskPMT+0x2d8>)
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb71 	bl	8000d84 <__aeabi_fmul>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fcbd 	bl	8001024 <__aeabi_f2uiz>
 80016aa:	4603      	mov	r3, r0
 80016ac:	613b      	str	r3, [r7, #16]

			// 4 - определяем на каком кол-ве сигналов надо снять измерение
			uint32_t stepCount = globalState.detectAmperageRangeStruct.step * 1000;
 80016ae:	4b8e      	ldr	r3, [pc, #568]	; (80018e8 <StartTaskPMT+0x2cc>)
 80016b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b2:	4990      	ldr	r1, [pc, #576]	; (80018f4 <StartTaskPMT+0x2d8>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fb65 	bl	8000d84 <__aeabi_fmul>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fcb1 	bl	8001024 <__aeabi_f2uiz>
 80016c2:	4603      	mov	r3, r0
 80016c4:	60fb      	str	r3, [r7, #12]

			// 5 - задаем текущий счетчик
			uint32_t currentCount = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]

			// 6 - запускам процесс преодаления промежутка
			for (uint32_t i = 0; i < totalMeasureWay; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	e087      	b.n	80017e0 <StartTaskPMT+0x1c4>
				// если пришла команда на закончить, то завершаем все действия
				if(globalStopFlag){
 80016d0:	4b89      	ldr	r3, [pc, #548]	; (80018f8 <StartTaskPMT+0x2dc>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <StartTaskPMT+0xc4>
					i = totalMeasureWay + 1;
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	3301      	adds	r3, #1
 80016dc:	61bb      	str	r3, [r7, #24]
					continue;
 80016de:	e07c      	b.n	80017da <StartTaskPMT+0x1be>
				}
				// если пришла команда на паузу, то заканчиваем все, но сохраняем предыдушее состояние
				if(globalPauseFlag){
 80016e0:	4b86      	ldr	r3, [pc, #536]	; (80018fc <StartTaskPMT+0x2e0>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d042      	beq.n	800176e <StartTaskPMT+0x152>
					if(globalState.detectAmperageRangeStruct.dir){
 80016e8:	4b7f      	ldr	r3, [pc, #508]	; (80018e8 <StartTaskPMT+0x2cc>)
 80016ea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00e      	beq.n	8001710 <StartTaskPMT+0xf4>
						globalState.detectAmperageRangeStruct.cur = globalState.detectAmperageRangeStruct.cur + (i / 10);
 80016f2:	4b7d      	ldr	r3, [pc, #500]	; (80018e8 <StartTaskPMT+0x2cc>)
 80016f4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	4981      	ldr	r1, [pc, #516]	; (8001900 <StartTaskPMT+0x2e4>)
 80016fc:	fba1 1303 	umull	r1, r3, r1, r3
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	b29b      	uxth	r3, r3
 8001704:	4413      	add	r3, r2
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <StartTaskPMT+0x2cc>)
 800170a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800170e:	e00d      	b.n	800172c <StartTaskPMT+0x110>
					} else {
						globalState.detectAmperageRangeStruct.cur = globalState.detectAmperageRangeStruct.cur - (i / 10);
 8001710:	4b75      	ldr	r3, [pc, #468]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001712:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	4979      	ldr	r1, [pc, #484]	; (8001900 <StartTaskPMT+0x2e4>)
 800171a:	fba1 1303 	umull	r1, r3, r1, r3
 800171e:	08db      	lsrs	r3, r3, #3
 8001720:	b29b      	uxth	r3, r3
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	b29a      	uxth	r2, r3
 8001726:	4b70      	ldr	r3, [pc, #448]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001728:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
					}

					globalState.detectAmperageRangeStruct.way = (totalMeasureWay - i + (stepCount - currentCount)) / 1000;
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	1ad2      	subs	r2, r2, r3
 8001732:	68f9      	ldr	r1, [r7, #12]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	1acb      	subs	r3, r1, r3
 8001738:	4413      	add	r3, r2
 800173a:	4a72      	ldr	r2, [pc, #456]	; (8001904 <StartTaskPMT+0x2e8>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	099b      	lsrs	r3, r3, #6
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fac6 	bl	8000cd4 <__aeabi_ui2f>
 8001748:	4603      	mov	r3, r0
 800174a:	4a67      	ldr	r2, [pc, #412]	; (80018e8 <StartTaskPMT+0x2cc>)
 800174c:	6393      	str	r3, [r2, #56]	; 0x38
					copyGlobalStateToPause(globalState);
 800174e:	4c66      	ldr	r4, [pc, #408]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001750:	4668      	mov	r0, sp
 8001752:	f104 0310 	add.w	r3, r4, #16
 8001756:	2244      	movs	r2, #68	; 0x44
 8001758:	4619      	mov	r1, r3
 800175a:	f008 f81e 	bl	800979a <memcpy>
 800175e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001762:	f7ff fd91 	bl	8001288 <copyGlobalStateToPause>
					i = totalMeasureWay + 1;
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	3301      	adds	r3, #1
 800176a:	61bb      	str	r3, [r7, #24]
					continue;
 800176c:	e035      	b.n	80017da <StartTaskPMT+0x1be>
				}
				HAL_GPIO_WritePin(MOTOR_Port, STEP_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	2102      	movs	r1, #2
 8001772:	485f      	ldr	r0, [pc, #380]	; (80018f0 <StartTaskPMT+0x2d4>)
 8001774:	f002 fd8a 	bl	800428c <HAL_GPIO_WritePin>
                osDelay(globalState.detectAmperageRangeStruct.speed);
 8001778:	4b5b      	ldr	r3, [pc, #364]	; (80018e8 <StartTaskPMT+0x2cc>)
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177c:	4618      	mov	r0, r3
 800177e:	f005 f8b5 	bl	80068ec <osDelay>
                HAL_GPIO_WritePin(MOTOR_Port, STEP_Pin, GPIO_PIN_SET);
 8001782:	2201      	movs	r2, #1
 8001784:	2102      	movs	r1, #2
 8001786:	485a      	ldr	r0, [pc, #360]	; (80018f0 <StartTaskPMT+0x2d4>)
 8001788:	f002 fd80 	bl	800428c <HAL_GPIO_WritePin>
                osDelay(globalState.detectAmperageRangeStruct.speed);
 800178c:	4b56      	ldr	r3, [pc, #344]	; (80018e8 <StartTaskPMT+0x2cc>)
 800178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001790:	4618      	mov	r0, r3
 8001792:	f005 f8ab 	bl	80068ec <osDelay>

                if(currentCount == stepCount){
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	429a      	cmp	r2, r3
 800179c:	d11a      	bne.n	80017d4 <StartTaskPMT+0x1b8>
                	SendResponseMeasureIT(
 800179e:	4b52      	ldr	r3, [pc, #328]	; (80018e8 <StartTaskPMT+0x2cc>)
 80017a0:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
                			globalState.detectAmperageRangeStruct.id,
							globalState.detectAmperageRangeStruct.cur + (i / 10),
 80017a2:	4b51      	ldr	r3, [pc, #324]	; (80018e8 <StartTaskPMT+0x2cc>)
 80017a4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	4955      	ldr	r1, [pc, #340]	; (8001900 <StartTaskPMT+0x2e4>)
 80017ac:	fba1 1303 	umull	r1, r3, r1, r3
 80017b0:	08db      	lsrs	r3, r3, #3
                	SendResponseMeasureIT(
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	b29d      	uxth	r5, r3
 80017b8:	4b4b      	ldr	r3, [pc, #300]	; (80018e8 <StartTaskPMT+0x2cc>)
 80017ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fefe 	bl	80015c0 <measureAmperageRangeItem>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	4629      	mov	r1, r5
 80017ca:	4620      	mov	r0, r4
 80017cc:	f004 ff00 	bl	80065d0 <SendResponseMeasureIT>
							measureAmperageRangeItem(globalState.detectAmperageRangeStruct.count)
							);
                	currentCount = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
                	// нм --- шаги --- ответ по x
                	// 0,01   10       1
                	// 1      1000     100
                	// 10     10000    1000
                }
                currentCount += 1;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	3301      	adds	r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
			for (uint32_t i = 0; i < totalMeasureWay; i++) {
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	3301      	adds	r3, #1
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f4ff af73 	bcc.w	80016d0 <StartTaskPMT+0xb4>
			}


			if(globalPauseFlag == false){
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <StartTaskPMT+0x2e0>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	f083 0301 	eor.w	r3, r3, #1
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d019      	beq.n	800182c <StartTaskPMT+0x210>
				// финальный замер
				SendResponseMeasure(
 80017f8:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <StartTaskPMT+0x2cc>)
 80017fa:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
					globalState.detectAmperageRangeStruct.id,
					globalState.detectAmperageRangeStruct.cur + totalMeasureWay,
 80017fc:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <StartTaskPMT+0x2cc>)
 80017fe:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
				SendResponseMeasure(
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	b29b      	uxth	r3, r3
 8001806:	4413      	add	r3, r2
 8001808:	b29d      	uxth	r5, r3
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <StartTaskPMT+0x2cc>)
 800180c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fed5 	bl	80015c0 <measureAmperageRangeItem>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	4629      	mov	r1, r5
 800181c:	4620      	mov	r0, r4
 800181e:	f004 fea9 	bl	8006574 <SendResponseMeasure>
					measureAmperageRangeItem(globalState.detectAmperageRangeStruct.count)
				);

				// 7 - сообщяем об окончании процесса измерения
				SendResponseStop(globalState.detectAmperageRangeStruct.id);
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001824:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001826:	4618      	mov	r0, r3
 8001828:	f004 fef8 	bl	800661c <SendResponseStop>
			}

			// 8 - сбрасываем состояния в конце измерения
			resetGlobalState();
 800182c:	f7ff fcd8 	bl	80011e0 <resetGlobalState>
		}

		// ток в точке от времени
		if (isDetectAmperageTime(globalState.typeStruct))
 8001830:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	f000 ff02 	bl	800263c <isDetectAmperageTime>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8082 	beq.w	8001944 <StartTaskPMT+0x328>
		{
			// 0 - отправляем команду о начале измерения
			SentResultActionResponse(globalState.typeStruct, "", 1);
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001842:	2201      	movs	r2, #1
 8001844:	4929      	ldr	r1, [pc, #164]	; (80018ec <StartTaskPMT+0x2d0>)
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	f004 fe2e 	bl	80064a8 <SentResultActionResponse>

			globalState.isExistActiveAction = true;
 800184c:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <StartTaskPMT+0x2cc>)
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			// 1 - выполняем измерение в 1 точке
			SendResponseMeasure(
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001856:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
					globalState.detectAmperageTimeStruct.id,
					0,
					measureAmperageRangeItem(globalState.detectAmperageTimeStruct.count)
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <StartTaskPMT+0x2cc>)
 800185a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
			SendResponseMeasure(
 800185e:	b29b      	uxth	r3, r3
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fead 	bl	80015c0 <measureAmperageRangeItem>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	2100      	movs	r1, #0
 800186c:	4620      	mov	r0, r4
 800186e:	f004 fe81 	bl	8006574 <SendResponseMeasure>
			);

			// 6 - запускам процесс преодаления промежутка
			for (uint32_t i = 0; i < globalState.detectAmperageTimeStruct.pointCount; i++) {
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	e031      	b.n	80018dc <StartTaskPMT+0x2c0>
				// если пришла команда на закончить, то завершаем все действия
				if(globalStopFlag){
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <StartTaskPMT+0x2dc>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d143      	bne.n	8001908 <StartTaskPMT+0x2ec>
					break;
				}

				// если пришла команда на паузу, то заканчиваем все, но сохраняем предыдушее состояние
				if(globalPauseFlag){
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <StartTaskPMT+0x2e0>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d012      	beq.n	80018ae <StartTaskPMT+0x292>
					globalState.detectAmperageTimeStruct.pointCount -= i;
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <StartTaskPMT+0x2cc>)
 800188a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	4a15      	ldr	r2, [pc, #84]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001892:	6293      	str	r3, [r2, #40]	; 0x28
					copyGlobalStateToPause(globalState);
 8001894:	4c14      	ldr	r4, [pc, #80]	; (80018e8 <StartTaskPMT+0x2cc>)
 8001896:	4668      	mov	r0, sp
 8001898:	f104 0310 	add.w	r3, r4, #16
 800189c:	2244      	movs	r2, #68	; 0x44
 800189e:	4619      	mov	r1, r3
 80018a0:	f007 ff7b 	bl	800979a <memcpy>
 80018a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018a8:	f7ff fcee 	bl	8001288 <copyGlobalStateToPause>
					break;
 80018ac:	e02d      	b.n	800190a <StartTaskPMT+0x2ee>
				}

			    osDelay(globalState.detectAmperageTimeStruct.freq);
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <StartTaskPMT+0x2cc>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4618      	mov	r0, r3
 80018b4:	f005 f81a 	bl	80068ec <osDelay>

			    SendResponseMeasure(
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <StartTaskPMT+0x2cc>)
 80018ba:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
			    	globalState.detectAmperageTimeStruct.id,
			    	0,
			    	measureAmperageRangeItem(globalState.detectAmperageTimeStruct.count)
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <StartTaskPMT+0x2cc>)
 80018be:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
			    SendResponseMeasure(
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fe7b 	bl	80015c0 <measureAmperageRangeItem>
 80018ca:	4603      	mov	r3, r0
 80018cc:	461a      	mov	r2, r3
 80018ce:	2100      	movs	r1, #0
 80018d0:	4620      	mov	r0, r4
 80018d2:	f004 fe4f 	bl	8006574 <SendResponseMeasure>
			for (uint32_t i = 0; i < globalState.detectAmperageTimeStruct.pointCount; i++) {
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3301      	adds	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	4b02      	ldr	r3, [pc, #8]	; (80018e8 <StartTaskPMT+0x2cc>)
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d3c8      	bcc.n	8001878 <StartTaskPMT+0x25c>
 80018e6:	e010      	b.n	800190a <StartTaskPMT+0x2ee>
 80018e8:	20003748 	.word	0x20003748
 80018ec:	0800e0b4 	.word	0x0800e0b4
 80018f0:	40010c00 	.word	0x40010c00
 80018f4:	447a0000 	.word	0x447a0000
 80018f8:	200001fc 	.word	0x200001fc
 80018fc:	200001fd 	.word	0x200001fd
 8001900:	cccccccd 	.word	0xcccccccd
 8001904:	10624dd3 	.word	0x10624dd3
					break;
 8001908:	bf00      	nop
			    );
			}

			if(globalPauseFlag == false){
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <StartTaskPMT+0x380>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	f083 0301 	eor.w	r3, r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <StartTaskPMT+0x324>
				// финальный замер
				SendResponseMeasure(
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <StartTaskPMT+0x384>)
 800191a:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
					globalState.detectAmperageTimeStruct.id,
					0,
					measureAmperageRangeItem(globalState.detectAmperageTimeStruct.count)
 800191c:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <StartTaskPMT+0x384>)
 800191e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
				SendResponseMeasure(
 8001922:	b29b      	uxth	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fe4b 	bl	80015c0 <measureAmperageRangeItem>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	2100      	movs	r1, #0
 8001930:	4620      	mov	r0, r4
 8001932:	f004 fe1f 	bl	8006574 <SendResponseMeasure>
				);

				// 7 - сообщяем об окончании процесса измерения
				SendResponseStop(globalState.detectAmperageTimeStruct.id);
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <StartTaskPMT+0x384>)
 8001938:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800193a:	4618      	mov	r0, r3
 800193c:	f004 fe6e 	bl	800661c <SendResponseStop>
			}

			// 8 - сбрасываем состояния в конце измерения
			resetGlobalState();
 8001940:	f7ff fc4e 	bl	80011e0 <resetGlobalState>
		}

		// счет на промежутке
		if (isDetectTickRange(globalState.typeStruct))
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <StartTaskPMT+0x384>)
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	f000 fe93 	bl	8002672 <isDetectTickRange>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d01a      	beq.n	8001988 <StartTaskPMT+0x36c>
		{
			HAL_TIM_Base_Start(&htim2);
 8001952:	4814      	ldr	r0, [pc, #80]	; (80019a4 <StartTaskPMT+0x388>)
 8001954:	f003 fac6 	bl	8004ee4 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start(&htim3);
 8001958:	4813      	ldr	r0, [pc, #76]	; (80019a8 <StartTaskPMT+0x38c>)
 800195a:	f003 fac3 	bl	8004ee4 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim1);
 800195e:	4813      	ldr	r0, [pc, #76]	; (80019ac <StartTaskPMT+0x390>)
 8001960:	f003 fb0a 	bl	8004f78 <HAL_TIM_Base_Start_IT>
			sprintf(PMT_State_, "PMT_TIM=%d%c", freq_, '\0');
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <StartTaskPMT+0x394>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2300      	movs	r3, #0
 800196a:	4912      	ldr	r1, [pc, #72]	; (80019b4 <StartTaskPMT+0x398>)
 800196c:	4812      	ldr	r0, [pc, #72]	; (80019b8 <StartTaskPMT+0x39c>)
 800196e:	f008 fea9 	bl	800a6c4 <siprintf>
			if (HAL_UART_Transmit(&huart1, (uint8_t *)&PMT_State_, strlen(PMT_State_), 1000) == HAL_OK)
 8001972:	4811      	ldr	r0, [pc, #68]	; (80019b8 <StartTaskPMT+0x39c>)
 8001974:	f7fe fbec 	bl	8000150 <strlen>
 8001978:	4603      	mov	r3, r0
 800197a:	b29a      	uxth	r2, r3
 800197c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001980:	490d      	ldr	r1, [pc, #52]	; (80019b8 <StartTaskPMT+0x39c>)
 8001982:	480e      	ldr	r0, [pc, #56]	; (80019bc <StartTaskPMT+0x3a0>)
 8001984:	f003 ffed 	bl	8005962 <HAL_UART_Transmit>
			{
			}
		}

		// счет в точке от времени
		if (isDetectTickTime(globalState.typeStruct))
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <StartTaskPMT+0x384>)
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	f000 fe8c 	bl	80026a8 <isDetectTickTime>
		{
		}

		osDelay(1);
 8001990:	2001      	movs	r0, #1
 8001992:	f004 ffab 	bl	80068ec <osDelay>
 8001996:	e645      	b.n	8001624 <StartTaskPMT+0x8>
			continue;
 8001998:	bf00      	nop
		if(globalState.isExistActiveAction){
 800199a:	e643      	b.n	8001624 <StartTaskPMT+0x8>
 800199c:	200001fd 	.word	0x200001fd
 80019a0:	20003748 	.word	0x20003748
 80019a4:	20003a8c 	.word	0x20003a8c
 80019a8:	200039fc 	.word	0x200039fc
 80019ac:	20003a44 	.word	0x20003a44
 80019b0:	20003874 	.word	0x20003874
 80019b4:	0800e0b8 	.word	0x0800e0b8
 80019b8:	20003878 	.word	0x20003878
 80019bc:	20003b18 	.word	0x20003b18

080019c0 <HAL_TIM_PeriodElapsedCallback>:
const uint8_t speedChangeStep = 100;
// шаг изменения скорости по сигналу
const uint8_t speedChangeStepCount = 130;
//Функция-обработчик прерываний таймеров
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	 /* USER CODE BEGIN Callback 0 */
	// логика вращения шаговым двигателем
    if (htim->Instance == TIM1) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a6f      	ldr	r2, [pc, #444]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	f040 80b6 	bne.w	8001b40 <HAL_TIM_PeriodElapsedCallback+0x180>
    	// если прошли путь или получили глобальную команду на остановку
    	if(currentRate == 0 || globalStopFlag){
 80019d4:	4b6e      	ldr	r3, [pc, #440]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_TIM_PeriodElapsedCallback+0x24>
 80019dc:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01c      	beq.n	8001a1e <HAL_TIM_PeriodElapsedCallback+0x5e>
    		HAL_TIM_Base_Stop_IT(&htim1);
 80019e4:	486c      	ldr	r0, [pc, #432]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80019e6:	f003 fb19 	bl	800501c <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_PRESCALER(&htim1, currentSpeed);
 80019ea:	4b6b      	ldr	r3, [pc, #428]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80019f2:	629a      	str	r2, [r3, #40]	; 0x28

    		// 5 - отправляем состояние ответа по UART---------------
    		SentResultActionResponse(globalState.typeStruct, "", 1);
 80019f4:	4b69      	ldr	r3, [pc, #420]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	4969      	ldr	r1, [pc, #420]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	f004 fd54 	bl	80064a8 <SentResultActionResponse>

    		// ------------------------------------------------------

    		// 6 - сбрасываем команду -------------------------------
    		resetGlobalState();
 8001a00:	f7ff fbee 	bl	80011e0 <resetGlobalState>
    		// ------------------------------------------------------
    		speedChangeFactor = 0;
 8001a04:	4b67      	ldr	r3, [pc, #412]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
    		speedDownChangeFactor = 0;
 8001a0a:	4b67      	ldr	r3, [pc, #412]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
    		totalRate = 0;
 8001a10:	4b66      	ldr	r3, [pc, #408]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
    		currentRate = 0;
 8001a16:	4b5e      	ldr	r3, [pc, #376]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
    		return;
 8001a1c:	e0b2      	b.n	8001b84 <HAL_TIM_PeriodElapsedCallback+0x1c4>
    	}

    	if(isSetMotorPin){
 8001a1e:	4b64      	ldr	r3, [pc, #400]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00e      	beq.n	8001a44 <HAL_TIM_PeriodElapsedCallback+0x84>
    		HAL_GPIO_WritePin(MOTOR_Port, STEP_Pin, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2102      	movs	r1, #2
 8001a2a:	4862      	ldr	r0, [pc, #392]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001a2c:	f002 fc2e 	bl	800428c <HAL_GPIO_WritePin>
    		isSetMotorPin = false;
 8001a30:	4b5f      	ldr	r3, [pc, #380]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
    		countSetPin += 1;
 8001a36:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	e00d      	b.n	8001a60 <HAL_TIM_PeriodElapsedCallback+0xa0>
    	} else {
    		HAL_GPIO_WritePin(MOTOR_Port, STEP_Pin, GPIO_PIN_SET);
 8001a44:	2201      	movs	r2, #1
 8001a46:	2102      	movs	r1, #2
 8001a48:	485a      	ldr	r0, [pc, #360]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001a4a:	f002 fc1f 	bl	800428c <HAL_GPIO_WritePin>
    		isSetMotorPin = true;
 8001a4e:	4b58      	ldr	r3, [pc, #352]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
    		countSetPin += 1;
 8001a54:	4b58      	ldr	r3, [pc, #352]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b56      	ldr	r3, [pc, #344]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a5e:	701a      	strb	r2, [r3, #0]
    	}

    	if(countSetPin == 2){
 8001a60:	4b55      	ldr	r3, [pc, #340]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d107      	bne.n	8001a78 <HAL_TIM_PeriodElapsedCallback+0xb8>
    		currentRate -= 1;
 8001a68:	4b49      	ldr	r3, [pc, #292]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	4a48      	ldr	r2, [pc, #288]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001a70:	6013      	str	r3, [r2, #0]
    		countSetPin = 0;
 8001a72:	4b51      	ldr	r3, [pc, #324]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
    	}

    	if(totalRate > (changeSpeedLine * 2 + 100)){
 8001a78:	f241 7370 	movw	r3, #6000	; 0x1770
 8001a7c:	3332      	adds	r3, #50	; 0x32
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b4a      	ldr	r3, [pc, #296]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d279      	bcs.n	8001b7e <HAL_TIM_PeriodElapsedCallback+0x1be>
    		if(currentRate == (totalRate - (speedChangeStep * speedChangeFactor)) && currentRate >= totalRate - changeSpeedLine){
 8001a8a:	4b48      	ldr	r3, [pc, #288]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2264      	movs	r2, #100	; 0x64
 8001a90:	4611      	mov	r1, r2
 8001a92:	4a44      	ldr	r2, [pc, #272]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a94:	7812      	ldrb	r2, [r2, #0]
 8001a96:	fb02 f201 	mul.w	r2, r2, r1
 8001a9a:	1a9a      	subs	r2, r3, r2
 8001a9c:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d11e      	bne.n	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x122>
 8001aa4:	4b41      	ldr	r3, [pc, #260]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f241 7270 	movw	r2, #6000	; 0x1770
 8001aac:	1a9a      	subs	r2, r3, r2
 8001aae:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d815      	bhi.n	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x122>
    			__HAL_TIM_SET_PRESCALER(&htim1, currentSpeed - speedChangeStepCount - (speedChangeStepCount * speedChangeFactor));
 8001ab6:	f242 7310 	movw	r3, #10000	; 0x2710
 8001aba:	2282      	movs	r2, #130	; 0x82
 8001abc:	1a9a      	subs	r2, r3, r2
 8001abe:	2382      	movs	r3, #130	; 0x82
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	fb03 f301 	mul.w	r3, r3, r1
 8001aca:	4619      	mov	r1, r3
 8001acc:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	1a52      	subs	r2, r2, r1
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
    		    speedChangeFactor += 1;
 8001ad4:	4b33      	ldr	r3, [pc, #204]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001ade:	701a      	strb	r2, [r3, #0]
    		    return;
 8001ae0:	e050      	b.n	8001b84 <HAL_TIM_PeriodElapsedCallback+0x1c4>
    		}

    		 if(currentRate == (changeSpeedLine - (speedChangeStep * speedDownChangeFactor)) && currentRate <= changeSpeedLine){
 8001ae2:	f241 7370 	movw	r3, #6000	; 0x1770
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2364      	movs	r3, #100	; 0x64
 8001aea:	4619      	mov	r1, r3
 8001aec:	4b2e      	ldr	r3, [pc, #184]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	fb03 f301 	mul.w	r3, r3, r1
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d141      	bne.n	8001b82 <HAL_TIM_PeriodElapsedCallback+0x1c2>
 8001afe:	f241 7370 	movw	r3, #6000	; 0x1770
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d33a      	bcc.n	8001b82 <HAL_TIM_PeriodElapsedCallback+0x1c2>
    			speedChangeFactor -= 1;
 8001b0c:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001b16:	701a      	strb	r2, [r3, #0]
    			__HAL_TIM_SET_PRESCALER(&htim1, currentSpeed - (speedChangeStepCount * speedChangeFactor));
 8001b18:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b1c:	2382      	movs	r3, #130	; 0x82
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	fb03 f301 	mul.w	r3, r3, r1
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	1a52      	subs	r2, r2, r1
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
    		    speedDownChangeFactor += 1;
 8001b32:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001b3c:	701a      	strb	r2, [r3, #0]
    		    return;
 8001b3e:	e021      	b.n	8001b84 <HAL_TIM_PeriodElapsedCallback+0x1c4>
    	}

		return;
    }

	if (htim == &htim1) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d11d      	bne.n	8001b84 <HAL_TIM_PeriodElapsedCallback+0x1c4>
		uint16_t TIM2_count = __HAL_TIM_GET_COUNTER(&htim2);
 8001b48:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	81fb      	strh	r3, [r7, #14]
		//Значение счетчика таймера TIM2
		//(Количество последних подсчитанных
		//импульсов к моменту прерывания)
		uint16_t TIM2_overflows = __HAL_TIM_GET_COUNTER(&htim3);
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	81bb      	strh	r3, [r7, #12]
		//Значение счетчика таймера TIM3
		freq_ = TIM2_count + (TIM2_overflows * 65535) + TIM2_overflows;
 8001b58:	89f9      	ldrh	r1, [r7, #14]
 8001b5a:	89ba      	ldrh	r2, [r7, #12]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	041b      	lsls	r3, r3, #16
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	18ca      	adds	r2, r1, r3
 8001b64:	89bb      	ldrh	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a16      	ldr	r2, [pc, #88]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001b6a:	6013      	str	r3, [r2, #0]
        //Вычисление частоты
        //Установка флага окончания измерения частоты
		__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24
        //Обнуление счетчиков таймеров 2 и 3
		__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24
 8001b7c:	e002      	b.n	8001b84 <HAL_TIM_PeriodElapsedCallback+0x1c4>
		return;
 8001b7e:	bf00      	nop
 8001b80:	e000      	b.n	8001b84 <HAL_TIM_PeriodElapsedCallback+0x1c4>
    		return;
 8001b82:	bf00      	nop
	}
}
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40012c00 	.word	0x40012c00
 8001b90:	20000204 	.word	0x20000204
 8001b94:	200001fc 	.word	0x200001fc
 8001b98:	20003a44 	.word	0x20003a44
 8001b9c:	20003748 	.word	0x20003748
 8001ba0:	0800e0b4 	.word	0x0800e0b4
 8001ba4:	20000209 	.word	0x20000209
 8001ba8:	2000020a 	.word	0x2000020a
 8001bac:	20000200 	.word	0x20000200
 8001bb0:	20000208 	.word	0x20000208
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	2000020b 	.word	0x2000020b
 8001bbc:	20003a8c 	.word	0x20003a8c
 8001bc0:	200039fc 	.word	0x200039fc
 8001bc4:	20003874 	.word	0x20003874

08001bc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bdc:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <MX_GPIO_Init+0xf4>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a36      	ldr	r2, [pc, #216]	; (8001cbc <MX_GPIO_Init+0xf4>)
 8001be2:	f043 0310 	orr.w	r3, r3, #16
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <MX_GPIO_Init+0xf4>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf4:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <MX_GPIO_Init+0xf4>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a30      	ldr	r2, [pc, #192]	; (8001cbc <MX_GPIO_Init+0xf4>)
 8001bfa:	f043 0320 	orr.w	r3, r3, #32
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <MX_GPIO_Init+0xf4>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <MX_GPIO_Init+0xf4>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a2a      	ldr	r2, [pc, #168]	; (8001cbc <MX_GPIO_Init+0xf4>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <MX_GPIO_Init+0xf4>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <MX_GPIO_Init+0xf4>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a24      	ldr	r2, [pc, #144]	; (8001cbc <MX_GPIO_Init+0xf4>)
 8001c2a:	f043 0308 	orr.w	r3, r3, #8
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <MX_GPIO_Init+0xf4>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c42:	481f      	ldr	r0, [pc, #124]	; (8001cc0 <MX_GPIO_Init+0xf8>)
 8001c44:	f002 fb22 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|Relay_OUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2164      	movs	r1, #100	; 0x64
 8001c4c:	481d      	ldr	r0, [pc, #116]	; (8001cc4 <MX_GPIO_Init+0xfc>)
 8001c4e:	f002 fb1d 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2103      	movs	r1, #3
 8001c56:	481c      	ldr	r0, [pc, #112]	; (8001cc8 <MX_GPIO_Init+0x100>)
 8001c58:	f002 fb18 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	4619      	mov	r1, r3
 8001c74:	4812      	ldr	r0, [pc, #72]	; (8001cc0 <MX_GPIO_Init+0xf8>)
 8001c76:	f002 f985 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|Relay_OUT_Pin|LED2_Pin;
 8001c7a:	2364      	movs	r3, #100	; 0x64
 8001c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c82:	2302      	movs	r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2302      	movs	r3, #2
 8001c88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <MX_GPIO_Init+0xfc>)
 8001c92:	f002 f977 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin;
 8001c96:	2303      	movs	r3, #3
 8001c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca6:	f107 0310 	add.w	r3, r7, #16
 8001caa:	4619      	mov	r1, r3
 8001cac:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <MX_GPIO_Init+0x100>)
 8001cae:	f002 f969 	bl	8003f84 <HAL_GPIO_Init>

}
 8001cb2:	bf00      	nop
 8001cb4:	3720      	adds	r7, #32
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40011000 	.word	0x40011000
 8001cc4:	40010800 	.word	0x40010800
 8001cc8:	40010c00 	.word	0x40010c00

08001ccc <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

int main(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  HAL_Init();
 8001cd0:	f001 f950 	bl	8002f74 <HAL_Init>
  SystemClock_Config();
 8001cd4:	f000 f815 	bl	8001d02 <SystemClock_Config>
  MX_GPIO_Init();
 8001cd8:	f7ff ff76 	bl	8001bc8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001cdc:	f000 fb8e 	bl	80023fc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001ce0:	f7ff f9f8 	bl	80010d4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001ce4:	f000 fa14 	bl	8002110 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ce8:	f000 fa62 	bl	80021b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001cec:	f000 faca 	bl	8002284 <MX_TIM3_Init>

  osKernelInitialize();
 8001cf0:	f004 fcec 	bl	80066cc <osKernelInitialize>
  // инициализация FreeTos
  MX_FREERTOS_Init();
 8001cf4:	f7ff fb06 	bl	8001304 <MX_FREERTOS_Init>
  osKernelStart();
 8001cf8:	f004 fd1a 	bl	8006730 <osKernelStart>
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b094      	sub	sp, #80	; 0x50
 8001d06:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d0c:	2228      	movs	r2, #40	; 0x28
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f007 fd50 	bl	80097b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d32:	2301      	movs	r3, #1
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d40:	2301      	movs	r3, #1
 8001d42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d44:	2302      	movs	r3, #2
 8001d46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d4e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 faaf 	bl	80042bc <HAL_RCC_OscConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d64:	f000 f831 	bl	8001dca <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d68:	230f      	movs	r3, #15
 8001d6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d78:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	2102      	movs	r1, #2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 fd19 	bl	80047bc <HAL_RCC_ClockConfig>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d90:	f000 f81b 	bl	8001dca <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d94:	2302      	movs	r3, #2
 8001d96:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d9c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 fed5 	bl	8004b50 <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001dac:	f000 f80d 	bl	8001dca <Error_Handler>
  }
}
 8001db0:	bf00      	nop
 8001db2:	3750      	adds	r7, #80	; 0x50
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
          if(huart == &huart1)
          {
                  // можно установить какой-то флаг, сообщающий об окончании отправки
          }
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <Error_Handler>:

void Error_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dce:	b672      	cpsid	i
}
 8001dd0:	bf00      	nop
  __disable_irq();
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <Error_Handler+0x8>

08001dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dda:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <HAL_MspInit+0x68>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	4a17      	ldr	r2, [pc, #92]	; (8001e3c <HAL_MspInit+0x68>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6193      	str	r3, [r2, #24]
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_MspInit+0x68>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_MspInit+0x68>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <HAL_MspInit+0x68>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	61d3      	str	r3, [r2, #28]
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_MspInit+0x68>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	210f      	movs	r1, #15
 8001e0e:	f06f 0001 	mvn.w	r0, #1
 8001e12:	f001 fe78 	bl	8003b06 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_MspInit+0x6c>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <HAL_MspInit+0x6c>)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010000 	.word	0x40010000

08001e44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08c      	sub	sp, #48	; 0x30
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	201e      	movs	r0, #30
 8001e5a:	f001 fe54 	bl	8003b06 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e5e:	201e      	movs	r0, #30
 8001e60:	f001 fe6d 	bl	8003b3e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e64:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <HAL_InitTick+0xa0>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <HAL_InitTick+0xa0>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	61d3      	str	r3, [r2, #28]
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <HAL_InitTick+0xa0>)
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e7c:	f107 0210 	add.w	r2, r7, #16
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 fe14 	bl	8004ab4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e8c:	f002 fdea 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 8001e90:	4603      	mov	r3, r0
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e98:	4a13      	ldr	r2, [pc, #76]	; (8001ee8 <HAL_InitTick+0xa4>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0c9b      	lsrs	r3, r3, #18
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_InitTick+0xa8>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <HAL_InitTick+0xac>)
 8001ea8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_InitTick+0xa8>)
 8001eac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eb0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001eb2:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_InitTick+0xa8>)
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <HAL_InitTick+0xa8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_InitTick+0xa8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001ec4:	4809      	ldr	r0, [pc, #36]	; (8001eec <HAL_InitTick+0xa8>)
 8001ec6:	f002 ffbd 	bl	8004e44 <HAL_TIM_Base_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d104      	bne.n	8001eda <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001ed0:	4806      	ldr	r0, [pc, #24]	; (8001eec <HAL_InitTick+0xa8>)
 8001ed2:	f003 f851 	bl	8004f78 <HAL_TIM_Base_Start_IT>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3730      	adds	r7, #48	; 0x30
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	431bde83 	.word	0x431bde83
 8001eec:	200039b4 	.word	0x200039b4
 8001ef0:	40000800 	.word	0x40000800

08001ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <NMI_Handler+0x4>

08001efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <HardFault_Handler+0x4>

08001f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <MemManage_Handler+0x4>

08001f06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
	...

08001f20 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <DMA1_Channel4_IRQHandler+0x10>)
 8001f26:	f001 ff27 	bl	8003d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20003ad4 	.word	0x20003ad4

08001f34 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <ADC1_2_IRQHandler+0x10>)
 8001f3a:	f001 f9f9 	bl	8003330 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20003718 	.word	0x20003718

08001f48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <TIM1_UP_IRQHandler+0x10>)
 8001f4e:	f003 f893 	bl	8005078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20003a44 	.word	0x20003a44

08001f5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <TIM4_IRQHandler+0x10>)
 8001f62:	f003 f889 	bl	8005078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200039b4 	.word	0x200039b4

08001f70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <USART1_IRQHandler+0x10>)
 8001f76:	f003 fe6d 	bl	8005c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20003b18 	.word	0x20003b18

08001f84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
	return 1;
 8001f88:	2301      	movs	r3, #1
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <_kill>:

int _kill(int pid, int sig)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f9c:	f007 fada 	bl	8009554 <__errno>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2216      	movs	r2, #22
 8001fa4:	601a      	str	r2, [r3, #0]
	return -1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_exit>:

void _exit (int status)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fba:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ffe7 	bl	8001f92 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fc4:	e7fe      	b.n	8001fc4 <_exit+0x12>

08001fc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e00a      	b.n	8001fee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fd8:	f3af 8000 	nop.w
 8001fdc:	4601      	mov	r1, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	60ba      	str	r2, [r7, #8]
 8001fe4:	b2ca      	uxtb	r2, r1
 8001fe6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	dbf0      	blt.n	8001fd8 <_read+0x12>
	}

return len;
 8001ff6:	687b      	ldr	r3, [r7, #4]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	e009      	b.n	8002026 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	60ba      	str	r2, [r7, #8]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3301      	adds	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	429a      	cmp	r2, r3
 800202c:	dbf1      	blt.n	8002012 <_write+0x12>
	}
	return len;
 800202e:	687b      	ldr	r3, [r7, #4]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <_close>:

int _close(int file)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	return -1;
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800205e:	605a      	str	r2, [r3, #4]
	return 0;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <_isatty>:

int _isatty(int file)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
	return 0;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a0:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <_sbrk+0x5c>)
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <_sbrk+0x60>)
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <_sbrk+0x64>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <_sbrk+0x68>)
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d207      	bcs.n	80020d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c8:	f007 fa44 	bl	8009554 <__errno>
 80020cc:	4603      	mov	r3, r0
 80020ce:	220c      	movs	r2, #12
 80020d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e009      	b.n	80020ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <_sbrk+0x64>)
 80020e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20005000 	.word	0x20005000
 80020f8:	00000400 	.word	0x00000400
 80020fc:	2000020c 	.word	0x2000020c
 8002100:	20003bb0 	.word	0x20003bb0

08002104 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002124:	463b      	mov	r3, r7
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800212c:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <MX_TIM1_Init+0x98>)
 800212e:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <MX_TIM1_Init+0x9c>)
 8002130:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <MX_TIM1_Init+0x98>)
 8002134:	f242 7210 	movw	r2, #10000	; 0x2710
 8002138:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <MX_TIM1_Init+0x98>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <MX_TIM1_Init+0x98>)
 8002142:	2201      	movs	r2, #1
 8002144:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <MX_TIM1_Init+0x98>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <MX_TIM1_Init+0x98>)
 800214e:	2200      	movs	r2, #0
 8002150:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <MX_TIM1_Init+0x98>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002158:	4813      	ldr	r0, [pc, #76]	; (80021a8 <MX_TIM1_Init+0x98>)
 800215a:	f002 fe73 	bl	8004e44 <HAL_TIM_Base_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002164:	f7ff fe31 	bl	8001dca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800216e:	f107 0308 	add.w	r3, r7, #8
 8002172:	4619      	mov	r1, r3
 8002174:	480c      	ldr	r0, [pc, #48]	; (80021a8 <MX_TIM1_Init+0x98>)
 8002176:	f003 f887 	bl	8005288 <HAL_TIM_ConfigClockSource>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002180:	f7ff fe23 	bl	8001dca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002184:	2310      	movs	r3, #16
 8002186:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800218c:	463b      	mov	r3, r7
 800218e:	4619      	mov	r1, r3
 8002190:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_TIM1_Init+0x98>)
 8002192:	f003 fb29 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800219c:	f7ff fe15 	bl	8001dca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20003a44 	.word	0x20003a44
 80021ac:	40012c00 	.word	0x40012c00

080021b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	; 0x30
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b6:	f107 0320 	add.w	r3, r7, #32
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021dc:	4b28      	ldr	r3, [pc, #160]	; (8002280 <MX_TIM2_Init+0xd0>)
 80021de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021e4:	4b26      	ldr	r3, [pc, #152]	; (8002280 <MX_TIM2_Init+0xd0>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <MX_TIM2_Init+0xd0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <MX_TIM2_Init+0xd0>)
 80021f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f8:	4b21      	ldr	r3, [pc, #132]	; (8002280 <MX_TIM2_Init+0xd0>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <MX_TIM2_Init+0xd0>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002204:	481e      	ldr	r0, [pc, #120]	; (8002280 <MX_TIM2_Init+0xd0>)
 8002206:	f002 fe1d 	bl	8004e44 <HAL_TIM_Base_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002210:	f7ff fddb 	bl	8001dca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002218:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800221e:	2300      	movs	r3, #0
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002226:	f107 0320 	add.w	r3, r7, #32
 800222a:	4619      	mov	r1, r3
 800222c:	4814      	ldr	r0, [pc, #80]	; (8002280 <MX_TIM2_Init+0xd0>)
 800222e:	f003 f82b 	bl	8005288 <HAL_TIM_ConfigClockSource>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002238:	f7ff fdc7 	bl	8001dca <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800223c:	2305      	movs	r3, #5
 800223e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	4619      	mov	r1, r3
 800224a:	480d      	ldr	r0, [pc, #52]	; (8002280 <MX_TIM2_Init+0xd0>)
 800224c:	f003 f8e0 	bl	8005410 <HAL_TIM_SlaveConfigSynchro>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002256:	f7ff fdb8 	bl	8001dca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800225a:	2320      	movs	r3, #32
 800225c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4806      	ldr	r0, [pc, #24]	; (8002280 <MX_TIM2_Init+0xd0>)
 8002268:	f003 fabe 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002272:	f7ff fdaa 	bl	8001dca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	3730      	adds	r7, #48	; 0x30
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20003a8c 	.word	0x20003a8c

08002284 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800228a:	f107 030c 	add.w	r3, r7, #12
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
 8002298:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <MX_TIM3_Init+0x98>)
 80022a4:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <MX_TIM3_Init+0x9c>)
 80022a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <MX_TIM3_Init+0x98>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <MX_TIM3_Init+0x98>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <MX_TIM3_Init+0x98>)
 80022b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <MX_TIM3_Init+0x98>)
 80022be:	2200      	movs	r2, #0
 80022c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c2:	4b16      	ldr	r3, [pc, #88]	; (800231c <MX_TIM3_Init+0x98>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022c8:	4814      	ldr	r0, [pc, #80]	; (800231c <MX_TIM3_Init+0x98>)
 80022ca:	f002 fdbb 	bl	8004e44 <HAL_TIM_Base_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80022d4:	f7ff fd79 	bl	8001dca <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80022d8:	2307      	movs	r3, #7
 80022da:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80022dc:	2310      	movs	r3, #16
 80022de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4619      	mov	r1, r3
 80022e6:	480d      	ldr	r0, [pc, #52]	; (800231c <MX_TIM3_Init+0x98>)
 80022e8:	f003 f892 	bl	8005410 <HAL_TIM_SlaveConfigSynchro>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80022f2:	f7ff fd6a 	bl	8001dca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	4619      	mov	r1, r3
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <MX_TIM3_Init+0x98>)
 8002304:	f003 fa70 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800230e:	f7ff fd5c 	bl	8001dca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	3720      	adds	r7, #32
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200039fc 	.word	0x200039fc
 8002320:	40000400 	.word	0x40000400

08002324 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0318 	add.w	r3, r7, #24
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <HAL_TIM_Base_MspInit+0xc8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d114      	bne.n	800236e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_TIM_Base_MspInit+0xcc>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a29      	ldr	r2, [pc, #164]	; (80023f0 <HAL_TIM_Base_MspInit+0xcc>)
 800234a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_TIM_Base_MspInit+0xcc>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2105      	movs	r1, #5
 8002360:	2019      	movs	r0, #25
 8002362:	f001 fbd0 	bl	8003b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002366:	2019      	movs	r0, #25
 8002368:	f001 fbe9 	bl	8003b3e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800236c:	e03a      	b.n	80023e4 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM2)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002376:	d124      	bne.n	80023c2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002378:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_TIM_Base_MspInit+0xcc>)
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <HAL_TIM_Base_MspInit+0xcc>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	61d3      	str	r3, [r2, #28]
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_TIM_Base_MspInit+0xcc>)
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_TIM_Base_MspInit+0xcc>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a16      	ldr	r2, [pc, #88]	; (80023f0 <HAL_TIM_Base_MspInit+0xcc>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_TIM_Base_MspInit+0xcc>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023a8:	2301      	movs	r3, #1
 80023aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b4:	f107 0318 	add.w	r3, r7, #24
 80023b8:	4619      	mov	r1, r3
 80023ba:	480e      	ldr	r0, [pc, #56]	; (80023f4 <HAL_TIM_Base_MspInit+0xd0>)
 80023bc:	f001 fde2 	bl	8003f84 <HAL_GPIO_Init>
}
 80023c0:	e010      	b.n	80023e4 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM3)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <HAL_TIM_Base_MspInit+0xd4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d10b      	bne.n	80023e4 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_TIM_Base_MspInit+0xcc>)
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <HAL_TIM_Base_MspInit+0xcc>)
 80023d2:	f043 0302 	orr.w	r3, r3, #2
 80023d6:	61d3      	str	r3, [r2, #28]
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_TIM_Base_MspInit+0xcc>)
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
}
 80023e4:	bf00      	nop
 80023e6:	3728      	adds	r7, #40	; 0x28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40012c00 	.word	0x40012c00
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40010800 	.word	0x40010800
 80023f8:	40000400 	.word	0x40000400

080023fc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <MX_USART1_UART_Init+0x4c>)
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <MX_USART1_UART_Init+0x50>)
 8002404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <MX_USART1_UART_Init+0x4c>)
 8002408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800240c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <MX_USART1_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <MX_USART1_UART_Init+0x4c>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <MX_USART1_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <MX_USART1_UART_Init+0x4c>)
 8002422:	220c      	movs	r2, #12
 8002424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <MX_USART1_UART_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <MX_USART1_UART_Init+0x4c>)
 800242e:	2200      	movs	r2, #0
 8002430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <MX_USART1_UART_Init+0x4c>)
 8002434:	f003 fa48 	bl	80058c8 <HAL_UART_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800243e:	f7ff fcc4 	bl	8001dca <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20003b18 	.word	0x20003b18
 800244c:	40013800 	.word	0x40013800

08002450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 0310 	add.w	r3, r7, #16
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a34      	ldr	r2, [pc, #208]	; (800253c <HAL_UART_MspInit+0xec>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d160      	bne.n	8002532 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002470:	4b33      	ldr	r3, [pc, #204]	; (8002540 <HAL_UART_MspInit+0xf0>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4a32      	ldr	r2, [pc, #200]	; (8002540 <HAL_UART_MspInit+0xf0>)
 8002476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800247a:	6193      	str	r3, [r2, #24]
 800247c:	4b30      	ldr	r3, [pc, #192]	; (8002540 <HAL_UART_MspInit+0xf0>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002488:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <HAL_UART_MspInit+0xf0>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4a2c      	ldr	r2, [pc, #176]	; (8002540 <HAL_UART_MspInit+0xf0>)
 800248e:	f043 0304 	orr.w	r3, r3, #4
 8002492:	6193      	str	r3, [r2, #24]
 8002494:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <HAL_UART_MspInit+0xf0>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024aa:	2303      	movs	r3, #3
 80024ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	f107 0310 	add.w	r3, r7, #16
 80024b2:	4619      	mov	r1, r3
 80024b4:	4823      	ldr	r0, [pc, #140]	; (8002544 <HAL_UART_MspInit+0xf4>)
 80024b6:	f001 fd65 	bl	8003f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	4619      	mov	r1, r3
 80024ce:	481d      	ldr	r0, [pc, #116]	; (8002544 <HAL_UART_MspInit+0xf4>)
 80024d0:	f001 fd58 	bl	8003f84 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80024d4:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <HAL_UART_MspInit+0xf8>)
 80024d6:	4a1d      	ldr	r2, [pc, #116]	; (800254c <HAL_UART_MspInit+0xfc>)
 80024d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024da:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <HAL_UART_MspInit+0xf8>)
 80024dc:	2210      	movs	r2, #16
 80024de:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_UART_MspInit+0xf8>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_UART_MspInit+0xf8>)
 80024e8:	2280      	movs	r2, #128	; 0x80
 80024ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <HAL_UART_MspInit+0xf8>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_UART_MspInit+0xf8>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_UART_MspInit+0xf8>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_UART_MspInit+0xf8>)
 8002500:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002504:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002506:	4810      	ldr	r0, [pc, #64]	; (8002548 <HAL_UART_MspInit+0xf8>)
 8002508:	f001 fb2c 	bl	8003b64 <HAL_DMA_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002512:	f7ff fc5a 	bl	8001dca <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <HAL_UART_MspInit+0xf8>)
 800251a:	635a      	str	r2, [r3, #52]	; 0x34
 800251c:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <HAL_UART_MspInit+0xf8>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	2025      	movs	r0, #37	; 0x25
 8002528:	f001 faed 	bl	8003b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800252c:	2025      	movs	r0, #37	; 0x25
 800252e:	f001 fb06 	bl	8003b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002532:	bf00      	nop
 8002534:	3720      	adds	r7, #32
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40013800 	.word	0x40013800
 8002540:	40021000 	.word	0x40021000
 8002544:	40010800 	.word	0x40010800
 8002548:	20003ad4 	.word	0x20003ad4
 800254c:	40020044 	.word	0x40020044

08002550 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002552:	490d      	ldr	r1, [pc, #52]	; (8002588 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002554:	4a0d      	ldr	r2, [pc, #52]	; (800258c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002558:	e002      	b.n	8002560 <LoopCopyDataInit>

0800255a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800255c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255e:	3304      	adds	r3, #4

08002560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002564:	d3f9      	bcc.n	800255a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002568:	4c0a      	ldr	r4, [pc, #40]	; (8002594 <LoopFillZerobss+0x22>)
  movs r3, #0
 800256a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800256c:	e001      	b.n	8002572 <LoopFillZerobss>

0800256e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002570:	3204      	adds	r2, #4

08002572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002574:	d3fb      	bcc.n	800256e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002576:	f7ff fdc5 	bl	8002104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800257a:	f007 f8e7 	bl	800974c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800257e:	f7ff fba5 	bl	8001ccc <main>
  bx lr
 8002582:	4770      	bx	lr
  ldr r0, =_sdata
 8002584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002588:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800258c:	0800e798 	.word	0x0800e798
  ldr r2, =_sbss
 8002590:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002594:	20003bb0 	.word	0x20003bb0

08002598 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002598:	e7fe      	b.n	8002598 <CAN1_RX1_IRQHandler>

0800259a <isCheckState>:
#include "TypeStruct.h"

bool isCheckState(struct TypeStruct dto){
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '1' && dto.subType[0] == '0' && dto.subType[1] == '0';
 80025a2:	793b      	ldrb	r3, [r7, #4]
 80025a4:	2b30      	cmp	r3, #48	; 0x30
 80025a6:	d10a      	bne.n	80025be <isCheckState+0x24>
 80025a8:	797b      	ldrb	r3, [r7, #5]
 80025aa:	2b31      	cmp	r3, #49	; 0x31
 80025ac:	d107      	bne.n	80025be <isCheckState+0x24>
 80025ae:	79bb      	ldrb	r3, [r7, #6]
 80025b0:	2b30      	cmp	r3, #48	; 0x30
 80025b2:	d104      	bne.n	80025be <isCheckState+0x24>
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	2b30      	cmp	r3, #48	; 0x30
 80025b8:	d101      	bne.n	80025be <isCheckState+0x24>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <isCheckState+0x26>
 80025be:	2300      	movs	r3, #0
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	b2db      	uxtb	r3, r3
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <isChangePosition>:

bool isChangePosition(struct TypeStruct dto){
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '2' && dto.subType[0] == '0' && dto.subType[1] == '0';
 80025d8:	793b      	ldrb	r3, [r7, #4]
 80025da:	2b30      	cmp	r3, #48	; 0x30
 80025dc:	d10a      	bne.n	80025f4 <isChangePosition+0x24>
 80025de:	797b      	ldrb	r3, [r7, #5]
 80025e0:	2b32      	cmp	r3, #50	; 0x32
 80025e2:	d107      	bne.n	80025f4 <isChangePosition+0x24>
 80025e4:	79bb      	ldrb	r3, [r7, #6]
 80025e6:	2b30      	cmp	r3, #48	; 0x30
 80025e8:	d104      	bne.n	80025f4 <isChangePosition+0x24>
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	2b30      	cmp	r3, #48	; 0x30
 80025ee:	d101      	bne.n	80025f4 <isChangePosition+0x24>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <isChangePosition+0x26>
 80025f4:	2300      	movs	r3, #0
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <isDetectAmperageRange>:

bool isDetectAmperageRange(struct TypeStruct dto){
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '3' && dto.subType[0] == '0' && dto.subType[1] == '1';
 800260e:	793b      	ldrb	r3, [r7, #4]
 8002610:	2b30      	cmp	r3, #48	; 0x30
 8002612:	d10a      	bne.n	800262a <isDetectAmperageRange+0x24>
 8002614:	797b      	ldrb	r3, [r7, #5]
 8002616:	2b33      	cmp	r3, #51	; 0x33
 8002618:	d107      	bne.n	800262a <isDetectAmperageRange+0x24>
 800261a:	79bb      	ldrb	r3, [r7, #6]
 800261c:	2b30      	cmp	r3, #48	; 0x30
 800261e:	d104      	bne.n	800262a <isDetectAmperageRange+0x24>
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	2b31      	cmp	r3, #49	; 0x31
 8002624:	d101      	bne.n	800262a <isDetectAmperageRange+0x24>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <isDetectAmperageRange+0x26>
 800262a:	2300      	movs	r3, #0
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	b2db      	uxtb	r3, r3
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <isDetectAmperageTime>:

bool isDetectAmperageTime(struct TypeStruct dto){
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '3' && dto.subType[0] == '0' && dto.subType[1] == '2';
 8002644:	793b      	ldrb	r3, [r7, #4]
 8002646:	2b30      	cmp	r3, #48	; 0x30
 8002648:	d10a      	bne.n	8002660 <isDetectAmperageTime+0x24>
 800264a:	797b      	ldrb	r3, [r7, #5]
 800264c:	2b33      	cmp	r3, #51	; 0x33
 800264e:	d107      	bne.n	8002660 <isDetectAmperageTime+0x24>
 8002650:	79bb      	ldrb	r3, [r7, #6]
 8002652:	2b30      	cmp	r3, #48	; 0x30
 8002654:	d104      	bne.n	8002660 <isDetectAmperageTime+0x24>
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	2b32      	cmp	r3, #50	; 0x32
 800265a:	d101      	bne.n	8002660 <isDetectAmperageTime+0x24>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <isDetectAmperageTime+0x26>
 8002660:	2300      	movs	r3, #0
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	b2db      	uxtb	r3, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <isDetectTickRange>:

bool isDetectTickRange(struct TypeStruct dto){
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '4' && dto.subType[0] == '0' && dto.subType[1] == '1';
 800267a:	793b      	ldrb	r3, [r7, #4]
 800267c:	2b30      	cmp	r3, #48	; 0x30
 800267e:	d10a      	bne.n	8002696 <isDetectTickRange+0x24>
 8002680:	797b      	ldrb	r3, [r7, #5]
 8002682:	2b34      	cmp	r3, #52	; 0x34
 8002684:	d107      	bne.n	8002696 <isDetectTickRange+0x24>
 8002686:	79bb      	ldrb	r3, [r7, #6]
 8002688:	2b30      	cmp	r3, #48	; 0x30
 800268a:	d104      	bne.n	8002696 <isDetectTickRange+0x24>
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	2b31      	cmp	r3, #49	; 0x31
 8002690:	d101      	bne.n	8002696 <isDetectTickRange+0x24>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <isDetectTickRange+0x26>
 8002696:	2300      	movs	r3, #0
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	b2db      	uxtb	r3, r3
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <isDetectTickTime>:

bool isDetectTickTime(struct TypeStruct dto){
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '4' && dto.subType[0] == '0' && dto.subType[1] == '2';
 80026b0:	793b      	ldrb	r3, [r7, #4]
 80026b2:	2b30      	cmp	r3, #48	; 0x30
 80026b4:	d10a      	bne.n	80026cc <isDetectTickTime+0x24>
 80026b6:	797b      	ldrb	r3, [r7, #5]
 80026b8:	2b34      	cmp	r3, #52	; 0x34
 80026ba:	d107      	bne.n	80026cc <isDetectTickTime+0x24>
 80026bc:	79bb      	ldrb	r3, [r7, #6]
 80026be:	2b30      	cmp	r3, #48	; 0x30
 80026c0:	d104      	bne.n	80026cc <isDetectTickTime+0x24>
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	2b32      	cmp	r3, #50	; 0x32
 80026c6:	d101      	bne.n	80026cc <isDetectTickTime+0x24>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <isDetectTickTime+0x26>
 80026cc:	2300      	movs	r3, #0
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	b2db      	uxtb	r3, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <isContinueMeasure>:

bool isContinueMeasure(struct TypeStruct dto){
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '5' && dto.subType[0] == '0' && dto.subType[1] == '0';
 80026e6:	793b      	ldrb	r3, [r7, #4]
 80026e8:	2b30      	cmp	r3, #48	; 0x30
 80026ea:	d10a      	bne.n	8002702 <isContinueMeasure+0x24>
 80026ec:	797b      	ldrb	r3, [r7, #5]
 80026ee:	2b35      	cmp	r3, #53	; 0x35
 80026f0:	d107      	bne.n	8002702 <isContinueMeasure+0x24>
 80026f2:	79bb      	ldrb	r3, [r7, #6]
 80026f4:	2b30      	cmp	r3, #48	; 0x30
 80026f6:	d104      	bne.n	8002702 <isContinueMeasure+0x24>
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	2b30      	cmp	r3, #48	; 0x30
 80026fc:	d101      	bne.n	8002702 <isContinueMeasure+0x24>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <isContinueMeasure+0x26>
 8002702:	2300      	movs	r3, #0
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	b2db      	uxtb	r3, r3
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <isPauseMeasure>:

bool isPauseMeasure(struct TypeStruct dto){
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '6' && dto.subType[0] == '0' && dto.subType[1] == '0';
 800271c:	793b      	ldrb	r3, [r7, #4]
 800271e:	2b30      	cmp	r3, #48	; 0x30
 8002720:	d10a      	bne.n	8002738 <isPauseMeasure+0x24>
 8002722:	797b      	ldrb	r3, [r7, #5]
 8002724:	2b36      	cmp	r3, #54	; 0x36
 8002726:	d107      	bne.n	8002738 <isPauseMeasure+0x24>
 8002728:	79bb      	ldrb	r3, [r7, #6]
 800272a:	2b30      	cmp	r3, #48	; 0x30
 800272c:	d104      	bne.n	8002738 <isPauseMeasure+0x24>
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	2b30      	cmp	r3, #48	; 0x30
 8002732:	d101      	bne.n	8002738 <isPauseMeasure+0x24>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <isPauseMeasure+0x26>
 8002738:	2300      	movs	r3, #0
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	b2db      	uxtb	r3, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <isStopMeasure>:

bool isStopMeasure(struct TypeStruct dto){
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
    return dto.type[0] == '0' && dto.type[1] == '7' && dto.subType[0] == '0' && dto.subType[1] == '0';
 8002752:	793b      	ldrb	r3, [r7, #4]
 8002754:	2b30      	cmp	r3, #48	; 0x30
 8002756:	d10a      	bne.n	800276e <isStopMeasure+0x24>
 8002758:	797b      	ldrb	r3, [r7, #5]
 800275a:	2b37      	cmp	r3, #55	; 0x37
 800275c:	d107      	bne.n	800276e <isStopMeasure+0x24>
 800275e:	79bb      	ldrb	r3, [r7, #6]
 8002760:	2b30      	cmp	r3, #48	; 0x30
 8002762:	d104      	bne.n	800276e <isStopMeasure+0x24>
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	2b30      	cmp	r3, #48	; 0x30
 8002768:	d101      	bne.n	800276e <isStopMeasure+0x24>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <isStopMeasure+0x26>
 800276e:	2300      	movs	r3, #0
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	b2db      	uxtb	r3, r3
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <receiveSymbol>:
#include "CParser.h"

Status receiveSymbol() {
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive(&huart1, (uint8_t*) &receivedSymbol_, 1, HAL_MAX_DELAY) == HAL_OK)
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
 8002788:	2201      	movs	r2, #1
 800278a:	4906      	ldr	r1, [pc, #24]	; (80027a4 <receiveSymbol+0x24>)
 800278c:	4806      	ldr	r0, [pc, #24]	; (80027a8 <receiveSymbol+0x28>)
 800278e:	f003 f97a 	bl	8005a86 <HAL_UART_Receive>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <receiveSymbol+0x1c>
		return OK;
 8002798:	2300      	movs	r3, #0
 800279a:	e000      	b.n	800279e <receiveSymbol+0x1e>
	else
		return ERR;
 800279c:	2301      	movs	r3, #1
}
 800279e:	4618      	mov	r0, r3
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200037a0 	.word	0x200037a0
 80027a8:	20003b18 	.word	0x20003b18

080027ac <checkStartOfMessage>:

/*
 * Если принятый символ '$' (начало пакета), то возвращаем OK, иначе ERR
 */
Status checkStartOfMessage() {
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
	if (receivedSymbol_ == '$') {
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <checkStartOfMessage+0x1c>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b24      	cmp	r3, #36	; 0x24
 80027b6:	d101      	bne.n	80027bc <checkStartOfMessage+0x10>
		return OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e000      	b.n	80027be <checkStartOfMessage+0x12>
	} else
		return ERR;
 80027bc:	2301      	movs	r3, #1
}
 80027be:	4618      	mov	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	200037a0 	.word	0x200037a0

080027cc <receiveMessage>:
/*
 * Читаем символы из UART, пока не встретим ';' (конец пакета),
 * в конце ставим символ конца строки и возвращаем OK
 * Если произошла ошибка при чтении, возвращаем ERR
 */
Status receiveMessage(char* outMessage) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]
	do {
		if (receiveSymbol() == OK) {
 80027d8:	f7ff ffd2 	bl	8002780 <receiveSymbol>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <receiveMessage+0x2a>
			outMessage[i] = receivedSymbol_;
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a0b      	ldr	r2, [pc, #44]	; (8002818 <receiveMessage+0x4c>)
 80027ea:	7812      	ldrb	r2, [r2, #0]
 80027ec:	701a      	strb	r2, [r3, #0]
			i++;
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	3301      	adds	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	e001      	b.n	80027fa <receiveMessage+0x2e>
		} else
			return ERR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e009      	b.n	800280e <receiveMessage+0x42>
	} while (receivedSymbol_ != ';');
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <receiveMessage+0x4c>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b3b      	cmp	r3, #59	; 0x3b
 8002800:	d1ea      	bne.n	80027d8 <receiveMessage+0xc>
	outMessage[i] = '\0';
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
	return OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200037a0 	.word	0x200037a0

0800281c <getNewGlobalState>:
/*
 * Из полученного сообщения выхватываем дату, время
 * и управляющую команду, раскидываем данные по
 * соответствующим полям
 */
struct GlobalStateStruct getNewGlobalState(char receiveMessageText[200]) {
 800281c:	b5b0      	push	{r4, r5, r7, lr}
 800281e:	b0a0      	sub	sp, #128	; 0x80
 8002820:	af00      	add	r7, sp, #0
 8002822:	6278      	str	r0, [r7, #36]	; 0x24
 8002824:	6239      	str	r1, [r7, #32]
	struct GlobalStateStruct newGlobalState;

	newGlobalState.typeStruct = getTypeStruct(receiveMessageText);
 8002826:	6a38      	ldr	r0, [r7, #32]
 8002828:	f000 f924 	bl	8002a74 <getTypeStruct>
 800282c:	4603      	mov	r3, r0
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
	char* payload = getPayload(receiveMessageText);
 8002830:	6a38      	ldr	r0, [r7, #32]
 8002832:	f000 f98b 	bl	8002b4c <getPayload>
 8002836:	67f8      	str	r0, [r7, #124]	; 0x7c

	if (isCheckState(newGlobalState.typeStruct)){
 8002838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800283a:	f7ff feae 	bl	800259a <isCheckState>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <getNewGlobalState+0x3a>
	     return newGlobalState;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	4618      	mov	r0, r3
 8002848:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800284c:	2254      	movs	r2, #84	; 0x54
 800284e:	4619      	mov	r1, r3
 8002850:	f006 ffa3 	bl	800979a <memcpy>
 8002854:	e077      	b.n	8002946 <getNewGlobalState+0x12a>
	}

	if (isChangePosition(newGlobalState.typeStruct)){
 8002856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002858:	f7ff feba 	bl	80025d0 <isChangePosition>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <getNewGlobalState+0x74>
	     newGlobalState.changePositionStruct = getChangePositionStruct(payload);
 8002862:	f107 0318 	add.w	r3, r7, #24
 8002866:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002868:	4618      	mov	r0, r3
 800286a:	f000 f987 	bl	8002b7c <getChangePositionStruct>
 800286e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002872:	f107 0218 	add.w	r2, r7, #24
 8002876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800287a:	e883 0003 	stmia.w	r3, {r0, r1}
	     return newGlobalState;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	4618      	mov	r0, r3
 8002882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002886:	2254      	movs	r2, #84	; 0x54
 8002888:	4619      	mov	r1, r3
 800288a:	f006 ff86 	bl	800979a <memcpy>
 800288e:	e05a      	b.n	8002946 <getNewGlobalState+0x12a>
	}

	if (isDetectAmperageRange(newGlobalState.typeStruct)){
 8002890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002892:	f7ff feb8 	bl	8002606 <isDetectAmperageRange>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d014      	beq.n	80028c6 <getNewGlobalState+0xaa>
	     newGlobalState.detectAmperageRangeStruct = getDetectAmperageRangeStruct(payload);
 800289c:	463b      	mov	r3, r7
 800289e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 f9eb 	bl	8002c7c <getDetectAmperageRangeStruct>
 80028a6:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80028aa:	463d      	mov	r5, r7
 80028ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b0:	682b      	ldr	r3, [r5, #0]
 80028b2:	6023      	str	r3, [r4, #0]
	     return newGlobalState;
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	4618      	mov	r0, r3
 80028b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028bc:	2254      	movs	r2, #84	; 0x54
 80028be:	4619      	mov	r1, r3
 80028c0:	f006 ff6b 	bl	800979a <memcpy>
 80028c4:	e03f      	b.n	8002946 <getNewGlobalState+0x12a>
	}

	if (isDetectAmperageTime(newGlobalState.typeStruct)){
 80028c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c8:	f7ff feb8 	bl	800263c <isDetectAmperageTime>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d013      	beq.n	80028fa <getNewGlobalState+0xde>
		newGlobalState.detectAmperageTimeStruct = getDetectAmperageTimeStruct(payload);
 80028d2:	463b      	mov	r3, r7
 80028d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fabc 	bl	8002e54 <getDetectAmperageTimeStruct>
 80028dc:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80028e0:	463b      	mov	r3, r7
 80028e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    return newGlobalState;
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	4618      	mov	r0, r3
 80028ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028f0:	2254      	movs	r2, #84	; 0x54
 80028f2:	4619      	mov	r1, r3
 80028f4:	f006 ff51 	bl	800979a <memcpy>
 80028f8:	e025      	b.n	8002946 <getNewGlobalState+0x12a>
	}

	if (isDetectTickRange(newGlobalState.typeStruct)){
 80028fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028fc:	f7ff feb9 	bl	8002672 <isDetectTickRange>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <getNewGlobalState+0xfc>
	    return newGlobalState;
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	4618      	mov	r0, r3
 800290a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800290e:	2254      	movs	r2, #84	; 0x54
 8002910:	4619      	mov	r1, r3
 8002912:	f006 ff42 	bl	800979a <memcpy>
 8002916:	e016      	b.n	8002946 <getNewGlobalState+0x12a>
	}

	if (isDetectTickTime(newGlobalState.typeStruct)){
 8002918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800291a:	f7ff fec5 	bl	80026a8 <isDetectTickTime>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <getNewGlobalState+0x11a>
	   return newGlobalState;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	4618      	mov	r0, r3
 8002928:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800292c:	2254      	movs	r2, #84	; 0x54
 800292e:	4619      	mov	r1, r3
 8002930:	f006 ff33 	bl	800979a <memcpy>
 8002934:	e007      	b.n	8002946 <getNewGlobalState+0x12a>
	}

	return newGlobalState;
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	4618      	mov	r0, r3
 800293a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800293e:	2254      	movs	r2, #84	; 0x54
 8002940:	4619      	mov	r1, r3
 8002942:	f006 ff2a 	bl	800979a <memcpy>
}
 8002946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002948:	3780      	adds	r7, #128	; 0x80
 800294a:	46bd      	mov	sp, r7
 800294c:	bdb0      	pop	{r4, r5, r7, pc}

0800294e <str_to_uint16>:
#include "RequestResponseParser.h"

// char[] -> uint16_t
uint16_t str_to_uint16(const char *str) {
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
    char *end;
    long val = strtol(str, &end, 10);
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	220a      	movs	r2, #10
 800295c:	4619      	mov	r1, r3
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f008 fe44 	bl	800b5ec <strtol>
 8002964:	60f8      	str	r0, [r7, #12]
    return (uint16_t)val;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	b29b      	uxth	r3, r3
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <str_to_uint32>:

// char[] -> uint8_t
uint32_t str_to_uint32(const char *str) {
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
    char *end;
    long val = strtol(str, &end, 10);
 800297a:	f107 0308 	add.w	r3, r7, #8
 800297e:	220a      	movs	r2, #10
 8002980:	4619      	mov	r1, r3
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f008 fe32 	bl	800b5ec <strtol>
 8002988:	60f8      	str	r0, [r7, #12]
    return (uint32_t)val;
 800298a:	68fb      	ldr	r3, [r7, #12]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <stof>:

// char[] -> float
float stof(const char* s){
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
    float rez = 0, fact = 1;
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80029a6:	613b      	str	r3, [r7, #16]
    if (*s == '-'){
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b2d      	cmp	r3, #45	; 0x2d
 80029ae:	d104      	bne.n	80029ba <stof+0x26>
        s++;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3301      	adds	r3, #1
 80029b4:	607b      	str	r3, [r7, #4]
        fact = -1;
 80029b6:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <stof+0xa0>)
 80029b8:	613b      	str	r3, [r7, #16]
    };
    for (int point_seen = 0; *s; s++){
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	e02c      	b.n	8002a1a <stof+0x86>
        if (*s == '.'){
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b2e      	cmp	r3, #46	; 0x2e
 80029c6:	d102      	bne.n	80029ce <stof+0x3a>
            point_seen = 1;
 80029c8:	2301      	movs	r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
            continue;
 80029cc:	e022      	b.n	8002a14 <stof+0x80>
        };
        int d = *s - '0';
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	3b30      	subs	r3, #48	; 0x30
 80029d4:	60bb      	str	r3, [r7, #8]
        if (d >= 0 && d <= 9){
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	db1b      	blt.n	8002a14 <stof+0x80>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b09      	cmp	r3, #9
 80029e0:	dc18      	bgt.n	8002a14 <stof+0x80>
            if (point_seen) fact /= 10.0f;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <stof+0x60>
 80029e8:	4913      	ldr	r1, [pc, #76]	; (8002a38 <stof+0xa4>)
 80029ea:	6938      	ldr	r0, [r7, #16]
 80029ec:	f7fe fa7e 	bl	8000eec <__aeabi_fdiv>
 80029f0:	4603      	mov	r3, r0
 80029f2:	613b      	str	r3, [r7, #16]
            rez = rez * 10.0f + (float)d;
 80029f4:	4910      	ldr	r1, [pc, #64]	; (8002a38 <stof+0xa4>)
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f7fe f9c4 	bl	8000d84 <__aeabi_fmul>
 80029fc:	4603      	mov	r3, r0
 80029fe:	461c      	mov	r4, r3
 8002a00:	68b8      	ldr	r0, [r7, #8]
 8002a02:	f7fe f96b 	bl	8000cdc <__aeabi_i2f>
 8002a06:	4603      	mov	r3, r0
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	f7fe f8b2 	bl	8000b74 <__addsf3>
 8002a10:	4603      	mov	r3, r0
 8002a12:	617b      	str	r3, [r7, #20]
    for (int point_seen = 0; *s; s++){
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3301      	adds	r3, #1
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1ce      	bne.n	80029c0 <stof+0x2c>
        };
    };
    return rez * fact;
 8002a22:	6939      	ldr	r1, [r7, #16]
 8002a24:	6978      	ldr	r0, [r7, #20]
 8002a26:	f7fe f9ad 	bl	8000d84 <__aeabi_fmul>
 8002a2a:	4603      	mov	r3, r0
};
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd90      	pop	{r4, r7, pc}
 8002a34:	bf800000 	.word	0xbf800000
 8002a38:	41200000 	.word	0x41200000

08002a3c <clean>:

// зануление всех элементов char[]
void clean(char *var) {
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
    while(var[i] != '\0') {
 8002a48:	e007      	b.n	8002a5a <clean+0x1e>
        var[i] = '\0';
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
        i++;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3301      	adds	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
    while(var[i] != '\0') {
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f1      	bne.n	8002a4a <clean+0xe>
    }
}
 8002a66:	bf00      	nop
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
	...

08002a74 <getTypeStruct>:

struct TypeStruct getTypeStruct(char receiveBuf[200]){
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
    char type[2];
    uint8_t typeDataIndex = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	77fb      	strb	r3, [r7, #31]

    char subType[2];
    uint8_t payloadDataIndex = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	77bb      	strb	r3, [r7, #30]

    bool border = false;
 8002a84:	2300      	movs	r3, #0
 8002a86:	777b      	strb	r3, [r7, #29]
    // _0_0*
    // пропускаем первую _, поэтому начинаем с int i = 1,
    for (int i = 1; i < strlen(receiveBuf); i++) {
 8002a88:	2301      	movs	r3, #1
 8002a8a:	61bb      	str	r3, [r7, #24]
 8002a8c:	e034      	b.n	8002af8 <getTypeStruct+0x84>
        if (receiveBuf[i] == '*'){
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b2a      	cmp	r3, #42	; 0x2a
 8002a98:	d036      	beq.n	8002b08 <getTypeStruct+0x94>
            break;
        }

        if (receiveBuf[i] == '_'){
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b5f      	cmp	r3, #95	; 0x5f
 8002aa4:	d102      	bne.n	8002aac <getTypeStruct+0x38>
            border = true;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	777b      	strb	r3, [r7, #29]
            continue;
 8002aaa:	e022      	b.n	8002af2 <getTypeStruct+0x7e>
        }

        if (!border){
 8002aac:	7f7b      	ldrb	r3, [r7, #29]
 8002aae:	f083 0301 	eor.w	r3, r3, #1
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00c      	beq.n	8002ad2 <getTypeStruct+0x5e>
            type[typeDataIndex] = receiveBuf[i];
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	441a      	add	r2, r3
 8002abe:	7ffb      	ldrb	r3, [r7, #31]
 8002ac0:	7812      	ldrb	r2, [r2, #0]
 8002ac2:	f107 0120 	add.w	r1, r7, #32
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f803 2c10 	strb.w	r2, [r3, #-16]
            typeDataIndex += 1;
 8002acc:	7ffb      	ldrb	r3, [r7, #31]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	77fb      	strb	r3, [r7, #31]
        }

        if (border){
 8002ad2:	7f7b      	ldrb	r3, [r7, #29]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00c      	beq.n	8002af2 <getTypeStruct+0x7e>
            subType[payloadDataIndex] = receiveBuf[i];
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	441a      	add	r2, r3
 8002ade:	7fbb      	ldrb	r3, [r7, #30]
 8002ae0:	7812      	ldrb	r2, [r2, #0]
 8002ae2:	f107 0120 	add.w	r1, r7, #32
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f803 2c14 	strb.w	r2, [r3, #-20]
            payloadDataIndex += 1;
 8002aec:	7fbb      	ldrb	r3, [r7, #30]
 8002aee:	3301      	adds	r3, #1
 8002af0:	77bb      	strb	r3, [r7, #30]
    for (int i = 1; i < strlen(receiveBuf); i++) {
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7fd fb29 	bl	8000150 <strlen>
 8002afe:	4602      	mov	r2, r0
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d8c3      	bhi.n	8002a8e <getTypeStruct+0x1a>
 8002b06:	e000      	b.n	8002b0a <getTypeStruct+0x96>
            break;
 8002b08:	bf00      	nop
        }
    }

    struct TypeStruct tom = {"", ""};
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <getTypeStruct+0xd4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60bb      	str	r3, [r7, #8]
    tom.type[0] = type[0];
 8002b10:	7c3b      	ldrb	r3, [r7, #16]
 8002b12:	723b      	strb	r3, [r7, #8]
    tom.type[1] = type[1];
 8002b14:	7c7b      	ldrb	r3, [r7, #17]
 8002b16:	727b      	strb	r3, [r7, #9]
    tom.subType[0] = subType[0];
 8002b18:	7b3b      	ldrb	r3, [r7, #12]
 8002b1a:	72bb      	strb	r3, [r7, #10]
    tom.subType[1] = subType[1];
 8002b1c:	7b7b      	ldrb	r3, [r7, #13]
 8002b1e:	72fb      	strb	r3, [r7, #11]
    return tom;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	2300      	movs	r3, #0
 8002b26:	7d3a      	ldrb	r2, [r7, #20]
 8002b28:	f362 0307 	bfi	r3, r2, #0, #8
 8002b2c:	7d7a      	ldrb	r2, [r7, #21]
 8002b2e:	f362 230f 	bfi	r3, r2, #8, #8
 8002b32:	7dba      	ldrb	r2, [r7, #22]
 8002b34:	f362 4317 	bfi	r3, r2, #16, #8
 8002b38:	7dfa      	ldrb	r2, [r7, #23]
 8002b3a:	f362 631f 	bfi	r3, r2, #24, #8
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3720      	adds	r7, #32
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	0800e0c8 	.word	0x0800e0c8

08002b4c <getPayload>:

char* getPayload(char requestPayload[]){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    char * token = strtok(requestPayload, "*");
 8002b54:	4907      	ldr	r1, [pc, #28]	; (8002b74 <getPayload+0x28>)
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f008 fc64 	bl	800b424 <strtok>
 8002b5c:	60f8      	str	r0, [r7, #12]
    token = strtok(NULL, " ");
 8002b5e:	4906      	ldr	r1, [pc, #24]	; (8002b78 <getPayload+0x2c>)
 8002b60:	2000      	movs	r0, #0
 8002b62:	f008 fc5f 	bl	800b424 <strtok>
 8002b66:	60f8      	str	r0, [r7, #12]
    return token;
 8002b68:	68fb      	ldr	r3, [r7, #12]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	0800e0cc 	.word	0x0800e0cc
 8002b78:	0800e0d0 	.word	0x0800e0d0

08002b7c <getChangePositionStruct>:

/// DIR=1-WAY=111.1-ID={int}
struct ChangePositionStruct getChangePositionStruct(char requestPayload[]){
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
    struct ChangePositionStruct dima = { false, 0 };
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]

    /// DIR=1 WAY=111.1
    char * param = strtok(requestPayload, "-=");
 8002b90:	4936      	ldr	r1, [pc, #216]	; (8002c6c <getChangePositionStruct+0xf0>)
 8002b92:	6838      	ldr	r0, [r7, #0]
 8002b94:	f008 fc46 	bl	800b424 <strtok>
 8002b98:	6178      	str	r0, [r7, #20]
    while( param != NULL ) {
 8002b9a:	e057      	b.n	8002c4c <getChangePositionStruct+0xd0>

        if (strstr (param,"ID") != NULL){
 8002b9c:	4934      	ldr	r1, [pc, #208]	; (8002c70 <getChangePositionStruct+0xf4>)
 8002b9e:	6978      	ldr	r0, [r7, #20]
 8002ba0:	f007 fe00 	bl	800a7a4 <strstr>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00f      	beq.n	8002bca <getChangePositionStruct+0x4e>
            param = strtok(NULL, "-=");
 8002baa:	4930      	ldr	r1, [pc, #192]	; (8002c6c <getChangePositionStruct+0xf0>)
 8002bac:	2000      	movs	r0, #0
 8002bae:	f008 fc39 	bl	800b424 <strtok>
 8002bb2:	6178      	str	r0, [r7, #20]
            dima.id = str_to_uint16(param);
 8002bb4:	6978      	ldr	r0, [r7, #20]
 8002bb6:	f7ff feca 	bl	800294e <str_to_uint16>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	813b      	strh	r3, [r7, #8]
            param = strtok(NULL, "-=");
 8002bbe:	492b      	ldr	r1, [pc, #172]	; (8002c6c <getChangePositionStruct+0xf0>)
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f008 fc2f 	bl	800b424 <strtok>
 8002bc6:	6178      	str	r0, [r7, #20]
            continue;
 8002bc8:	e040      	b.n	8002c4c <getChangePositionStruct+0xd0>
        }

        if (strstr (param,"DIR") != NULL){
 8002bca:	492a      	ldr	r1, [pc, #168]	; (8002c74 <getChangePositionStruct+0xf8>)
 8002bcc:	6978      	ldr	r0, [r7, #20]
 8002bce:	f007 fde9 	bl	800a7a4 <strstr>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d015      	beq.n	8002c04 <getChangePositionStruct+0x88>
            param = strtok(NULL, "-=");
 8002bd8:	4924      	ldr	r1, [pc, #144]	; (8002c6c <getChangePositionStruct+0xf0>)
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f008 fc22 	bl	800b424 <strtok>
 8002be0:	6178      	str	r0, [r7, #20]
            dima.dir = strstr (param,"1") != NULL;
 8002be2:	2131      	movs	r1, #49	; 0x31
 8002be4:	6978      	ldr	r0, [r7, #20]
 8002be6:	f007 fdd0 	bl	800a78a <strchr>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	72bb      	strb	r3, [r7, #10]
            param = strtok(NULL, "-=");
 8002bf8:	491c      	ldr	r1, [pc, #112]	; (8002c6c <getChangePositionStruct+0xf0>)
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f008 fc12 	bl	800b424 <strtok>
 8002c00:	6178      	str	r0, [r7, #20]
            continue;
 8002c02:	e023      	b.n	8002c4c <getChangePositionStruct+0xd0>
        }

        if (strstr (param,"WAY") != NULL){
 8002c04:	491c      	ldr	r1, [pc, #112]	; (8002c78 <getChangePositionStruct+0xfc>)
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f007 fdcc 	bl	800a7a4 <strstr>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d017      	beq.n	8002c42 <getChangePositionStruct+0xc6>
            param = strtok(NULL, "-=");
 8002c12:	4916      	ldr	r1, [pc, #88]	; (8002c6c <getChangePositionStruct+0xf0>)
 8002c14:	2000      	movs	r0, #0
 8002c16:	f008 fc05 	bl	800b424 <strtok>
 8002c1a:	6178      	str	r0, [r7, #20]
            float ftemp = atof(param);
 8002c1c:	6978      	ldr	r0, [r7, #20]
 8002c1e:	f006 fc95 	bl	800954c <atof>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f7fd ff4d 	bl	8000ac8 <__aeabi_d2f>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	613b      	str	r3, [r7, #16]
            dima.way = ftemp;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	60fb      	str	r3, [r7, #12]
            param = strtok(NULL, "-=");
 8002c36:	490d      	ldr	r1, [pc, #52]	; (8002c6c <getChangePositionStruct+0xf0>)
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f008 fbf3 	bl	800b424 <strtok>
 8002c3e:	6178      	str	r0, [r7, #20]
            continue;
 8002c40:	e004      	b.n	8002c4c <getChangePositionStruct+0xd0>
        }

        param = strtok(NULL, "-=");
 8002c42:	490a      	ldr	r1, [pc, #40]	; (8002c6c <getChangePositionStruct+0xf0>)
 8002c44:	2000      	movs	r0, #0
 8002c46:	f008 fbed 	bl	800b424 <strtok>
 8002c4a:	6178      	str	r0, [r7, #20]
    while( param != NULL ) {
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1a4      	bne.n	8002b9c <getChangePositionStruct+0x20>
    }


    return dima;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	461a      	mov	r2, r3
 8002c56:	f107 0308 	add.w	r3, r7, #8
 8002c5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c5e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	0800e0d4 	.word	0x0800e0d4
 8002c70:	0800e0d8 	.word	0x0800e0d8
 8002c74:	0800e0dc 	.word	0x0800e0dc
 8002c78:	0800e0e0 	.word	0x0800e0e0

08002c7c <getDetectAmperageRangeStruct>:

/// 3_1*DIR={1-часовая/2-против}-WAY={нм}-STEP={нм}-COUNT={нм}-ID={int}-CUR={float}-SPE=2
struct DetectAmperageRangeStruct getDetectAmperageRangeStruct(char requestPayload[]){
 8002c7c:	b5b0      	push	{r4, r5, r7, lr}
 8002c7e:	b08c      	sub	sp, #48	; 0x30
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
    struct DetectAmperageRangeStruct dima = { false, 0,0,0 };
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	60da      	str	r2, [r3, #12]
 8002c94:	611a      	str	r2, [r3, #16]

    /// DIR=1 WAY=111.1
    char * param = strtok(requestPayload, "-=");
 8002c96:	4967      	ldr	r1, [pc, #412]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002c98:	6838      	ldr	r0, [r7, #0]
 8002c9a:	f008 fbc3 	bl	800b424 <strtok>
 8002c9e:	62f8      	str	r0, [r7, #44]	; 0x2c
    while( param != NULL ) {
 8002ca0:	e0b7      	b.n	8002e12 <getDetectAmperageRangeStruct+0x196>

        if (strstr (param,"ID") != NULL){
 8002ca2:	4965      	ldr	r1, [pc, #404]	; (8002e38 <getDetectAmperageRangeStruct+0x1bc>)
 8002ca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ca6:	f007 fd7d 	bl	800a7a4 <strstr>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00f      	beq.n	8002cd0 <getDetectAmperageRangeStruct+0x54>
            param = strtok(NULL, "-=");
 8002cb0:	4960      	ldr	r1, [pc, #384]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f008 fbb6 	bl	800b424 <strtok>
 8002cb8:	62f8      	str	r0, [r7, #44]	; 0x2c
            dima.id = str_to_uint16(param);
 8002cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cbc:	f7ff fe47 	bl	800294e <str_to_uint16>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	81bb      	strh	r3, [r7, #12]
            param = strtok(NULL, "-=");
 8002cc4:	495b      	ldr	r1, [pc, #364]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f008 fbac 	bl	800b424 <strtok>
 8002ccc:	62f8      	str	r0, [r7, #44]	; 0x2c
            continue;
 8002cce:	e0a0      	b.n	8002e12 <getDetectAmperageRangeStruct+0x196>
        }

        if (strstr (param,"DIR") != NULL){
 8002cd0:	495a      	ldr	r1, [pc, #360]	; (8002e3c <getDetectAmperageRangeStruct+0x1c0>)
 8002cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cd4:	f007 fd66 	bl	800a7a4 <strstr>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d015      	beq.n	8002d0a <getDetectAmperageRangeStruct+0x8e>
            param = strtok(NULL, "-=");
 8002cde:	4955      	ldr	r1, [pc, #340]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f008 fb9f 	bl	800b424 <strtok>
 8002ce6:	62f8      	str	r0, [r7, #44]	; 0x2c
            dima.dir = strstr (param,"1") != NULL;
 8002ce8:	2131      	movs	r1, #49	; 0x31
 8002cea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cec:	f007 fd4d 	bl	800a78a <strchr>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bf14      	ite	ne
 8002cf6:	2301      	movne	r3, #1
 8002cf8:	2300      	moveq	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	73bb      	strb	r3, [r7, #14]
            param = strtok(NULL, "-=");
 8002cfe:	494d      	ldr	r1, [pc, #308]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002d00:	2000      	movs	r0, #0
 8002d02:	f008 fb8f 	bl	800b424 <strtok>
 8002d06:	62f8      	str	r0, [r7, #44]	; 0x2c
            continue;
 8002d08:	e083      	b.n	8002e12 <getDetectAmperageRangeStruct+0x196>
        }

        if (strstr (param,"WAY") != NULL){
 8002d0a:	494d      	ldr	r1, [pc, #308]	; (8002e40 <getDetectAmperageRangeStruct+0x1c4>)
 8002d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d0e:	f007 fd49 	bl	800a7a4 <strstr>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d010      	beq.n	8002d3a <getDetectAmperageRangeStruct+0xbe>
            param = strtok(NULL, "-=");
 8002d18:	4946      	ldr	r1, [pc, #280]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f008 fb82 	bl	800b424 <strtok>
 8002d20:	62f8      	str	r0, [r7, #44]	; 0x2c
            float ftemp = stof(param);
 8002d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d24:	f7ff fe36 	bl	8002994 <stof>
 8002d28:	6238      	str	r0, [r7, #32]
            dima.way = ftemp;
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	613b      	str	r3, [r7, #16]
            param = strtok(NULL, "-=");
 8002d2e:	4941      	ldr	r1, [pc, #260]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002d30:	2000      	movs	r0, #0
 8002d32:	f008 fb77 	bl	800b424 <strtok>
 8002d36:	62f8      	str	r0, [r7, #44]	; 0x2c
            continue;
 8002d38:	e06b      	b.n	8002e12 <getDetectAmperageRangeStruct+0x196>
        }

        if (strstr (param,"STEP") != NULL){
 8002d3a:	4942      	ldr	r1, [pc, #264]	; (8002e44 <getDetectAmperageRangeStruct+0x1c8>)
 8002d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d3e:	f007 fd31 	bl	800a7a4 <strstr>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <getDetectAmperageRangeStruct+0xee>
            param = strtok(NULL, "-=");
 8002d48:	493a      	ldr	r1, [pc, #232]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f008 fb6a 	bl	800b424 <strtok>
 8002d50:	62f8      	str	r0, [r7, #44]	; 0x2c
            float ftemp = stof(param);
 8002d52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d54:	f7ff fe1e 	bl	8002994 <stof>
 8002d58:	6278      	str	r0, [r7, #36]	; 0x24
            dima.step = ftemp;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	617b      	str	r3, [r7, #20]
            param = strtok(NULL, "-=");
 8002d5e:	4935      	ldr	r1, [pc, #212]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002d60:	2000      	movs	r0, #0
 8002d62:	f008 fb5f 	bl	800b424 <strtok>
 8002d66:	62f8      	str	r0, [r7, #44]	; 0x2c
            continue;
 8002d68:	e053      	b.n	8002e12 <getDetectAmperageRangeStruct+0x196>
        }

        if (strstr (param,"CUR") != NULL){
 8002d6a:	4937      	ldr	r1, [pc, #220]	; (8002e48 <getDetectAmperageRangeStruct+0x1cc>)
 8002d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d6e:	f007 fd19 	bl	800a7a4 <strstr>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d019      	beq.n	8002dac <getDetectAmperageRangeStruct+0x130>
            param = strtok(NULL, "-=");
 8002d78:	492e      	ldr	r1, [pc, #184]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f008 fb52 	bl	800b424 <strtok>
 8002d80:	62f8      	str	r0, [r7, #44]	; 0x2c
            float ftemp = str_to_uint16(param);
 8002d82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d84:	f7ff fde3 	bl	800294e <str_to_uint16>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd ffa2 	bl	8000cd4 <__aeabi_ui2f>
 8002d90:	4603      	mov	r3, r0
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
            dima.cur = ftemp;
 8002d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d96:	f7fe f945 	bl	8001024 <__aeabi_f2uiz>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	837b      	strh	r3, [r7, #26]
            param = strtok(NULL, "-=");
 8002da0:	4924      	ldr	r1, [pc, #144]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002da2:	2000      	movs	r0, #0
 8002da4:	f008 fb3e 	bl	800b424 <strtok>
 8002da8:	62f8      	str	r0, [r7, #44]	; 0x2c
            continue;
 8002daa:	e032      	b.n	8002e12 <getDetectAmperageRangeStruct+0x196>
         }

        if (strstr (param,"COUNT") != NULL){
 8002dac:	4927      	ldr	r1, [pc, #156]	; (8002e4c <getDetectAmperageRangeStruct+0x1d0>)
 8002dae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002db0:	f007 fcf8 	bl	800a7a4 <strstr>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00f      	beq.n	8002dda <getDetectAmperageRangeStruct+0x15e>
            param = strtok(NULL, "-=");
 8002dba:	491e      	ldr	r1, [pc, #120]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f008 fb31 	bl	800b424 <strtok>
 8002dc2:	62f8      	str	r0, [r7, #44]	; 0x2c
            dima.count = str_to_uint16(param);
 8002dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dc6:	f7ff fdc2 	bl	800294e <str_to_uint16>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	833b      	strh	r3, [r7, #24]
            param = strtok(NULL, "-=");
 8002dce:	4919      	ldr	r1, [pc, #100]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f008 fb27 	bl	800b424 <strtok>
 8002dd6:	62f8      	str	r0, [r7, #44]	; 0x2c
            continue;
 8002dd8:	e01b      	b.n	8002e12 <getDetectAmperageRangeStruct+0x196>
        }

        if (strstr (param,"SPE") != NULL){
 8002dda:	491d      	ldr	r1, [pc, #116]	; (8002e50 <getDetectAmperageRangeStruct+0x1d4>)
 8002ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dde:	f007 fce1 	bl	800a7a4 <strstr>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00f      	beq.n	8002e08 <getDetectAmperageRangeStruct+0x18c>
            param = strtok(NULL, "-=");
 8002de8:	4912      	ldr	r1, [pc, #72]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002dea:	2000      	movs	r0, #0
 8002dec:	f008 fb1a 	bl	800b424 <strtok>
 8002df0:	62f8      	str	r0, [r7, #44]	; 0x2c
            dima.speed = str_to_uint32(param);
 8002df2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002df4:	f7ff fdbd 	bl	8002972 <str_to_uint32>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	61fb      	str	r3, [r7, #28]
            param = strtok(NULL, "-=");
 8002dfc:	490d      	ldr	r1, [pc, #52]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f008 fb10 	bl	800b424 <strtok>
 8002e04:	62f8      	str	r0, [r7, #44]	; 0x2c
            continue;
 8002e06:	e004      	b.n	8002e12 <getDetectAmperageRangeStruct+0x196>
        }

        param = strtok(NULL, "-=");
 8002e08:	490a      	ldr	r1, [pc, #40]	; (8002e34 <getDetectAmperageRangeStruct+0x1b8>)
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f008 fb0a 	bl	800b424 <strtok>
 8002e10:	62f8      	str	r0, [r7, #44]	; 0x2c
    while( param != NULL ) {
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f47f af44 	bne.w	8002ca2 <getDetectAmperageRangeStruct+0x26>
    }


    return dima;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	461d      	mov	r5, r3
 8002e1e:	f107 040c 	add.w	r4, r7, #12
 8002e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	602b      	str	r3, [r5, #0]
}
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	3730      	adds	r7, #48	; 0x30
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bdb0      	pop	{r4, r5, r7, pc}
 8002e32:	bf00      	nop
 8002e34:	0800e0d4 	.word	0x0800e0d4
 8002e38:	0800e0d8 	.word	0x0800e0d8
 8002e3c:	0800e0dc 	.word	0x0800e0dc
 8002e40:	0800e0e0 	.word	0x0800e0e0
 8002e44:	0800e0e4 	.word	0x0800e0e4
 8002e48:	0800e0ec 	.word	0x0800e0ec
 8002e4c:	0800e0f0 	.word	0x0800e0f0
 8002e50:	0800e0f8 	.word	0x0800e0f8

08002e54 <getDetectAmperageTimeStruct>:

/// _03_02*DELAY=10000-NUM=1-FREQ=1000-ID=1
struct DetectAmperageTimeStruct getDetectAmperageTimeStruct(char requestPayload[]){
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b089      	sub	sp, #36	; 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
    struct DetectAmperageTimeStruct dima = { 0, 0, 0, 0 };
 8002e5e:	f107 0308 	add.w	r3, r7, #8
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	60da      	str	r2, [r3, #12]

    char * param = strtok(requestPayload, "-=");
 8002e6c:	493c      	ldr	r1, [pc, #240]	; (8002f60 <getDetectAmperageTimeStruct+0x10c>)
 8002e6e:	6838      	ldr	r0, [r7, #0]
 8002e70:	f008 fad8 	bl	800b424 <strtok>
 8002e74:	61f8      	str	r0, [r7, #28]
    while( param != NULL ) {
 8002e76:	e065      	b.n	8002f44 <getDetectAmperageTimeStruct+0xf0>
        if (strstr (param,"ID") != NULL){
 8002e78:	493a      	ldr	r1, [pc, #232]	; (8002f64 <getDetectAmperageTimeStruct+0x110>)
 8002e7a:	69f8      	ldr	r0, [r7, #28]
 8002e7c:	f007 fc92 	bl	800a7a4 <strstr>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00f      	beq.n	8002ea6 <getDetectAmperageTimeStruct+0x52>
            param = strtok(NULL, "-=");
 8002e86:	4936      	ldr	r1, [pc, #216]	; (8002f60 <getDetectAmperageTimeStruct+0x10c>)
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f008 facb 	bl	800b424 <strtok>
 8002e8e:	61f8      	str	r0, [r7, #28]
            dima.id = str_to_uint16(param);
 8002e90:	69f8      	ldr	r0, [r7, #28]
 8002e92:	f7ff fd5c 	bl	800294e <str_to_uint16>
 8002e96:	4603      	mov	r3, r0
 8002e98:	813b      	strh	r3, [r7, #8]
            param = strtok(NULL, "-=");
 8002e9a:	4931      	ldr	r1, [pc, #196]	; (8002f60 <getDetectAmperageTimeStruct+0x10c>)
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f008 fac1 	bl	800b424 <strtok>
 8002ea2:	61f8      	str	r0, [r7, #28]
            continue;
 8002ea4:	e04e      	b.n	8002f44 <getDetectAmperageTimeStruct+0xf0>
        }

        if (strstr (param, "POINT") != NULL){
 8002ea6:	4930      	ldr	r1, [pc, #192]	; (8002f68 <getDetectAmperageTimeStruct+0x114>)
 8002ea8:	69f8      	ldr	r0, [r7, #28]
 8002eaa:	f007 fc7b 	bl	800a7a4 <strstr>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00f      	beq.n	8002ed4 <getDetectAmperageTimeStruct+0x80>
            param = strtok(NULL, "-=");
 8002eb4:	492a      	ldr	r1, [pc, #168]	; (8002f60 <getDetectAmperageTimeStruct+0x10c>)
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f008 fab4 	bl	800b424 <strtok>
 8002ebc:	61f8      	str	r0, [r7, #28]
            dima.pointCount = str_to_uint32(param);
 8002ebe:	69f8      	ldr	r0, [r7, #28]
 8002ec0:	f7ff fd57 	bl	8002972 <str_to_uint32>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	60fb      	str	r3, [r7, #12]
            param = strtok(NULL, "-=");
 8002ec8:	4925      	ldr	r1, [pc, #148]	; (8002f60 <getDetectAmperageTimeStruct+0x10c>)
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f008 faaa 	bl	800b424 <strtok>
 8002ed0:	61f8      	str	r0, [r7, #28]
            continue;
 8002ed2:	e037      	b.n	8002f44 <getDetectAmperageTimeStruct+0xf0>
        }

        if (strstr (param,"FREQ") != NULL){
 8002ed4:	4925      	ldr	r1, [pc, #148]	; (8002f6c <getDetectAmperageTimeStruct+0x118>)
 8002ed6:	69f8      	ldr	r0, [r7, #28]
 8002ed8:	f007 fc64 	bl	800a7a4 <strstr>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d013      	beq.n	8002f0a <getDetectAmperageTimeStruct+0xb6>
            param = strtok(NULL, "-=");
 8002ee2:	491f      	ldr	r1, [pc, #124]	; (8002f60 <getDetectAmperageTimeStruct+0x10c>)
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f008 fa9d 	bl	800b424 <strtok>
 8002eea:	61f8      	str	r0, [r7, #28]
            float ftemp = stof(param);
 8002eec:	69f8      	ldr	r0, [r7, #28]
 8002eee:	f7ff fd51 	bl	8002994 <stof>
 8002ef2:	61b8      	str	r0, [r7, #24]
            dima.freq = str_to_uint32(param);
 8002ef4:	69f8      	ldr	r0, [r7, #28]
 8002ef6:	f7ff fd3c 	bl	8002972 <str_to_uint32>
 8002efa:	4603      	mov	r3, r0
 8002efc:	617b      	str	r3, [r7, #20]
            param = strtok(NULL, "-=");
 8002efe:	4918      	ldr	r1, [pc, #96]	; (8002f60 <getDetectAmperageTimeStruct+0x10c>)
 8002f00:	2000      	movs	r0, #0
 8002f02:	f008 fa8f 	bl	800b424 <strtok>
 8002f06:	61f8      	str	r0, [r7, #28]
            continue;
 8002f08:	e01c      	b.n	8002f44 <getDetectAmperageTimeStruct+0xf0>
        }

        if (strstr (param,"COUNT") != NULL){
 8002f0a:	4919      	ldr	r1, [pc, #100]	; (8002f70 <getDetectAmperageTimeStruct+0x11c>)
 8002f0c:	69f8      	ldr	r0, [r7, #28]
 8002f0e:	f007 fc49 	bl	800a7a4 <strstr>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d010      	beq.n	8002f3a <getDetectAmperageTimeStruct+0xe6>
            param = strtok(NULL, "-=");
 8002f18:	4911      	ldr	r1, [pc, #68]	; (8002f60 <getDetectAmperageTimeStruct+0x10c>)
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f008 fa82 	bl	800b424 <strtok>
 8002f20:	61f8      	str	r0, [r7, #28]
            dima.count = str_to_uint16(param);
 8002f22:	69f8      	ldr	r0, [r7, #28]
 8002f24:	f7ff fd13 	bl	800294e <str_to_uint16>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	b21b      	sxth	r3, r3
 8002f2c:	823b      	strh	r3, [r7, #16]
            param = strtok(NULL, "-=");
 8002f2e:	490c      	ldr	r1, [pc, #48]	; (8002f60 <getDetectAmperageTimeStruct+0x10c>)
 8002f30:	2000      	movs	r0, #0
 8002f32:	f008 fa77 	bl	800b424 <strtok>
 8002f36:	61f8      	str	r0, [r7, #28]
            continue;
 8002f38:	e004      	b.n	8002f44 <getDetectAmperageTimeStruct+0xf0>
        }

        param = strtok(NULL, "-=");
 8002f3a:	4909      	ldr	r1, [pc, #36]	; (8002f60 <getDetectAmperageTimeStruct+0x10c>)
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f008 fa71 	bl	800b424 <strtok>
 8002f42:	61f8      	str	r0, [r7, #28]
    while( param != NULL ) {
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d196      	bne.n	8002e78 <getDetectAmperageTimeStruct+0x24>
    }


    return dima;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	461c      	mov	r4, r3
 8002f4e:	f107 0308 	add.w	r3, r7, #8
 8002f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	3724      	adds	r7, #36	; 0x24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd90      	pop	{r4, r7, pc}
 8002f60:	0800e0d4 	.word	0x0800e0d4
 8002f64:	0800e0d8 	.word	0x0800e0d8
 8002f68:	0800e0fc 	.word	0x0800e0fc
 8002f6c:	0800e104 	.word	0x0800e104
 8002f70:	0800e0f0 	.word	0x0800e0f0

08002f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <HAL_Init+0x28>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a07      	ldr	r2, [pc, #28]	; (8002f9c <HAL_Init+0x28>)
 8002f7e:	f043 0310 	orr.w	r3, r3, #16
 8002f82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f84:	2003      	movs	r0, #3
 8002f86:	f000 fdb3 	bl	8003af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f8a:	200f      	movs	r0, #15
 8002f8c:	f7fe ff5a 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f90:	f7fe ff20 	bl	8001dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40022000 	.word	0x40022000

08002fa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa4:	4b02      	ldr	r3, [pc, #8]	; (8002fb0 <HAL_GetTick+0x10>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	20003b5c 	.word	0x20003b5c

08002fb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0be      	b.n	8003154 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe f8b0 	bl	8001158 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fbc1 	bl	8003780 <ADC_ConversionStop_Disable>
 8002ffe:	4603      	mov	r3, r0
 8003000:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 8099 	bne.w	8003142 <HAL_ADC_Init+0x18e>
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 8095 	bne.w	8003142 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003020:	f023 0302 	bic.w	r3, r3, #2
 8003024:	f043 0202 	orr.w	r2, r3, #2
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003034:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7b1b      	ldrb	r3, [r3, #12]
 800303a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800303c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	4313      	orrs	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304c:	d003      	beq.n	8003056 <HAL_ADC_Init+0xa2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d102      	bne.n	800305c <HAL_ADC_Init+0xa8>
 8003056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800305a:	e000      	b.n	800305e <HAL_ADC_Init+0xaa>
 800305c:	2300      	movs	r3, #0
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	7d1b      	ldrb	r3, [r3, #20]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d119      	bne.n	80030a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7b1b      	ldrb	r3, [r3, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	3b01      	subs	r3, #1
 800307a:	035a      	lsls	r2, r3, #13
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	e00b      	b.n	80030a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f043 0220 	orr.w	r2, r3, #32
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	4b28      	ldr	r3, [pc, #160]	; (800315c <HAL_ADC_Init+0x1a8>)
 80030bc:	4013      	ands	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d0:	d003      	beq.n	80030da <HAL_ADC_Init+0x126>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d104      	bne.n	80030e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	3b01      	subs	r3, #1
 80030e0:	051b      	lsls	r3, r3, #20
 80030e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <HAL_ADC_Init+0x1ac>)
 8003100:	4013      	ands	r3, r2
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	429a      	cmp	r2, r3
 8003106:	d10b      	bne.n	8003120 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	f023 0303 	bic.w	r3, r3, #3
 8003116:	f043 0201 	orr.w	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800311e:	e018      	b.n	8003152 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	f023 0312 	bic.w	r3, r3, #18
 8003128:	f043 0210 	orr.w	r2, r3, #16
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	f043 0201 	orr.w	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003140:	e007      	b.n	8003152 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	f043 0210 	orr.w	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	ffe1f7fd 	.word	0xffe1f7fd
 8003160:	ff1f0efe 	.word	0xff1f0efe

08003164 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_ADC_Start+0x1a>
 800317a:	2302      	movs	r3, #2
 800317c:	e098      	b.n	80032b0 <HAL_ADC_Start+0x14c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 faa0 	bl	80036cc <ADC_Enable>
 800318c:	4603      	mov	r3, r0
 800318e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 8087 	bne.w	80032a6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a41      	ldr	r2, [pc, #260]	; (80032b8 <HAL_ADC_Start+0x154>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d105      	bne.n	80031c2 <HAL_ADC_Start+0x5e>
 80031b6:	4b41      	ldr	r3, [pc, #260]	; (80032bc <HAL_ADC_Start+0x158>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d115      	bne.n	80031ee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d026      	beq.n	800322a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031ec:	e01d      	b.n	800322a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a2f      	ldr	r2, [pc, #188]	; (80032bc <HAL_ADC_Start+0x158>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_ADC_Start+0xaa>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a2b      	ldr	r2, [pc, #172]	; (80032b8 <HAL_ADC_Start+0x154>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d10d      	bne.n	800322a <HAL_ADC_Start+0xc6>
 800320e:	4b2b      	ldr	r3, [pc, #172]	; (80032bc <HAL_ADC_Start+0x158>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003222:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d006      	beq.n	8003244 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	f023 0206 	bic.w	r2, r3, #6
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	62da      	str	r2, [r3, #44]	; 0x2c
 8003242:	e002      	b.n	800324a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f06f 0202 	mvn.w	r2, #2
 800325a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003266:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800326a:	d113      	bne.n	8003294 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003270:	4a11      	ldr	r2, [pc, #68]	; (80032b8 <HAL_ADC_Start+0x154>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d105      	bne.n	8003282 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_ADC_Start+0x158>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800327e:	2b00      	cmp	r3, #0
 8003280:	d108      	bne.n	8003294 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003290:	609a      	str	r2, [r3, #8]
 8003292:	e00c      	b.n	80032ae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	e003      	b.n	80032ae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40012800 	.word	0x40012800
 80032bc:	40012400 	.word	0x40012400

080032c0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_ADC_Stop+0x1a>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e01a      	b.n	8003310 <HAL_ADC_Stop+0x50>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fa4c 	bl	8003780 <ADC_ConversionStop_Disable>
 80032e8:	4603      	mov	r3, r0
 80032ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	f043 0201 	orr.w	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b20      	cmp	r3, #32
 8003344:	d140      	bne.n	80033c8 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b02      	cmp	r3, #2
 8003352:	d139      	bne.n	80033c8 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003376:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800337a:	d11d      	bne.n	80033b8 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003380:	2b00      	cmp	r3, #0
 8003382:	d119      	bne.n	80033b8 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0220 	bic.w	r2, r2, #32
 8003392:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d105      	bne.n	80033b8 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	f043 0201 	orr.w	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f87c 	bl	80034b6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f06f 0212 	mvn.w	r2, #18
 80033c6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b80      	cmp	r3, #128	; 0x80
 80033d4:	d14f      	bne.n	8003476 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d148      	bne.n	8003476 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003406:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800340a:	d012      	beq.n	8003432 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003416:	2b00      	cmp	r3, #0
 8003418:	d125      	bne.n	8003466 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003424:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003428:	d11d      	bne.n	8003466 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800342e:	2b00      	cmp	r3, #0
 8003430:	d119      	bne.n	8003466 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003440:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d105      	bne.n	8003466 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fa78 	bl	800395c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 020c 	mvn.w	r2, #12
 8003474:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003480:	2b40      	cmp	r3, #64	; 0x40
 8003482:	d114      	bne.n	80034ae <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10d      	bne.n	80034ae <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f812 	bl	80034c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0201 	mvn.w	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x20>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e0dc      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x1da>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b06      	cmp	r3, #6
 800350a:	d81c      	bhi.n	8003546 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	3b05      	subs	r3, #5
 800351e:	221f      	movs	r2, #31
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	4019      	ands	r1, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	3b05      	subs	r3, #5
 8003538:	fa00 f203 	lsl.w	r2, r0, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	635a      	str	r2, [r3, #52]	; 0x34
 8003544:	e03c      	b.n	80035c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b0c      	cmp	r3, #12
 800354c:	d81c      	bhi.n	8003588 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	3b23      	subs	r3, #35	; 0x23
 8003560:	221f      	movs	r2, #31
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	4019      	ands	r1, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	3b23      	subs	r3, #35	; 0x23
 800357a:	fa00 f203 	lsl.w	r2, r0, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
 8003586:	e01b      	b.n	80035c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	3b41      	subs	r3, #65	; 0x41
 800359a:	221f      	movs	r2, #31
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	4019      	ands	r1, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	3b41      	subs	r3, #65	; 0x41
 80035b4:	fa00 f203 	lsl.w	r2, r0, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b09      	cmp	r3, #9
 80035c6:	d91c      	bls.n	8003602 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68d9      	ldr	r1, [r3, #12]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	3b1e      	subs	r3, #30
 80035da:	2207      	movs	r2, #7
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	4019      	ands	r1, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	6898      	ldr	r0, [r3, #8]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4413      	add	r3, r2
 80035f2:	3b1e      	subs	r3, #30
 80035f4:	fa00 f203 	lsl.w	r2, r0, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	e019      	b.n	8003636 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6919      	ldr	r1, [r3, #16]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	2207      	movs	r2, #7
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	4019      	ands	r1, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6898      	ldr	r0, [r3, #8]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4613      	mov	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4413      	add	r3, r2
 800362a:	fa00 f203 	lsl.w	r2, r0, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b10      	cmp	r3, #16
 800363c:	d003      	beq.n	8003646 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003642:	2b11      	cmp	r3, #17
 8003644:	d132      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1d      	ldr	r2, [pc, #116]	; (80036c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d125      	bne.n	800369c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d126      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800366c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b10      	cmp	r3, #16
 8003674:	d11a      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	0c9a      	lsrs	r2, r3, #18
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800368c:	e002      	b.n	8003694 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3b01      	subs	r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f9      	bne.n	800368e <HAL_ADC_ConfigChannel+0x1b2>
 800369a:	e007      	b.n	80036ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	40012400 	.word	0x40012400
 80036c4:	20000000 	.word	0x20000000
 80036c8:	431bde83 	.word	0x431bde83

080036cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d040      	beq.n	800376c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036fa:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <ADC_Enable+0xac>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1f      	ldr	r2, [pc, #124]	; (800377c <ADC_Enable+0xb0>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	0c9b      	lsrs	r3, r3, #18
 8003706:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003708:	e002      	b.n	8003710 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	3b01      	subs	r3, #1
 800370e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f9      	bne.n	800370a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003716:	f7ff fc43 	bl	8002fa0 <HAL_GetTick>
 800371a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800371c:	e01f      	b.n	800375e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800371e:	f7ff fc3f 	bl	8002fa0 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d918      	bls.n	800375e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b01      	cmp	r3, #1
 8003738:	d011      	beq.n	800375e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	f043 0210 	orr.w	r2, r3, #16
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	f043 0201 	orr.w	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e007      	b.n	800376e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d1d8      	bne.n	800371e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000000 	.word	0x20000000
 800377c:	431bde83 	.word	0x431bde83

08003780 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d12e      	bne.n	80037f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037aa:	f7ff fbf9 	bl	8002fa0 <HAL_GetTick>
 80037ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80037b0:	e01b      	b.n	80037ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037b2:	f7ff fbf5 	bl	8002fa0 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d914      	bls.n	80037ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d10d      	bne.n	80037ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	f043 0210 	orr.w	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	f043 0201 	orr.w	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e007      	b.n	80037fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d0dc      	beq.n	80037b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_ADCEx_Calibration_Start+0x1e>
 800381e:	2302      	movs	r3, #2
 8003820:	e095      	b.n	800394e <HAL_ADCEx_Calibration_Start+0x14a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff ffa8 	bl	8003780 <ADC_ConversionStop_Disable>
 8003830:	4603      	mov	r3, r0
 8003832:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 8084 	bne.w	8003944 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003844:	f023 0302 	bic.w	r3, r3, #2
 8003848:	f043 0202 	orr.w	r2, r3, #2
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003850:	4b41      	ldr	r3, [pc, #260]	; (8003958 <HAL_ADCEx_Calibration_Start+0x154>)
 8003852:	681c      	ldr	r4, [r3, #0]
 8003854:	2002      	movs	r0, #2
 8003856:	f001 fa31 	bl	8004cbc <HAL_RCCEx_GetPeriphCLKFreq>
 800385a:	4603      	mov	r3, r0
 800385c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003860:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003862:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003864:	e002      	b.n	800386c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3b01      	subs	r3, #1
 800386a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f9      	bne.n	8003866 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ff2a 	bl	80036cc <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0208 	orr.w	r2, r2, #8
 8003886:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003888:	f7ff fb8a 	bl	8002fa0 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800388e:	e01b      	b.n	80038c8 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003890:	f7ff fb86 	bl	8002fa0 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b0a      	cmp	r3, #10
 800389c:	d914      	bls.n	80038c8 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00d      	beq.n	80038c8 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	f023 0312 	bic.w	r3, r3, #18
 80038b4:	f043 0210 	orr.w	r2, r3, #16
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e042      	b.n	800394e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1dc      	bne.n	8003890 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0204 	orr.w	r2, r2, #4
 80038e4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80038e6:	f7ff fb5b 	bl	8002fa0 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80038ec:	e01b      	b.n	8003926 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80038ee:	f7ff fb57 	bl	8002fa0 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b0a      	cmp	r3, #10
 80038fa:	d914      	bls.n	8003926 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00d      	beq.n	8003926 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	f023 0312 	bic.w	r3, r3, #18
 8003912:	f043 0210 	orr.w	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e013      	b.n	800394e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1dc      	bne.n	80038ee <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	f023 0303 	bic.w	r3, r3, #3
 800393c:	f043 0201 	orr.w	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800394c:	7dfb      	ldrb	r3, [r7, #23]
}
 800394e:	4618      	mov	r0, r3
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd90      	pop	{r4, r7, pc}
 8003956:	bf00      	nop
 8003958:	20000000 	.word	0x20000000

0800395c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr
	...

08003970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800398c:	4013      	ands	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800399c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a2:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	60d3      	str	r3, [r2, #12]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039bc:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <__NVIC_GetPriorityGrouping+0x18>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	f003 0307 	and.w	r3, r3, #7
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	db0b      	blt.n	80039fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	f003 021f 	and.w	r2, r3, #31
 80039ec:	4906      	ldr	r1, [pc, #24]	; (8003a08 <__NVIC_EnableIRQ+0x34>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	2001      	movs	r0, #1
 80039f6:	fa00 f202 	lsl.w	r2, r0, r2
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	e000e100 	.word	0xe000e100

08003a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	6039      	str	r1, [r7, #0]
 8003a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	db0a      	blt.n	8003a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	490c      	ldr	r1, [pc, #48]	; (8003a58 <__NVIC_SetPriority+0x4c>)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	0112      	lsls	r2, r2, #4
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	440b      	add	r3, r1
 8003a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a34:	e00a      	b.n	8003a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4908      	ldr	r1, [pc, #32]	; (8003a5c <__NVIC_SetPriority+0x50>)
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	3b04      	subs	r3, #4
 8003a44:	0112      	lsls	r2, r2, #4
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	440b      	add	r3, r1
 8003a4a:	761a      	strb	r2, [r3, #24]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	e000e100 	.word	0xe000e100
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b089      	sub	sp, #36	; 0x24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f1c3 0307 	rsb	r3, r3, #7
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	bf28      	it	cs
 8003a7e:	2304      	movcs	r3, #4
 8003a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3304      	adds	r3, #4
 8003a86:	2b06      	cmp	r3, #6
 8003a88:	d902      	bls.n	8003a90 <NVIC_EncodePriority+0x30>
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3b03      	subs	r3, #3
 8003a8e:	e000      	b.n	8003a92 <NVIC_EncodePriority+0x32>
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a94:	f04f 32ff 	mov.w	r2, #4294967295
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43da      	mvns	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab2:	43d9      	mvns	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab8:	4313      	orrs	r3, r2
         );
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3724      	adds	r7, #36	; 0x24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ac8:	f3bf 8f4f 	dsb	sy
}
 8003acc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <__NVIC_SystemReset+0x24>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003ad6:	4904      	ldr	r1, [pc, #16]	; (8003ae8 <__NVIC_SystemReset+0x24>)
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <__NVIC_SystemReset+0x28>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ade:	f3bf 8f4f 	dsb	sy
}
 8003ae2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003ae4:	bf00      	nop
 8003ae6:	e7fd      	b.n	8003ae4 <__NVIC_SystemReset+0x20>
 8003ae8:	e000ed00 	.word	0xe000ed00
 8003aec:	05fa0004 	.word	0x05fa0004

08003af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff39 	bl	8003970 <__NVIC_SetPriorityGrouping>
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b086      	sub	sp, #24
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b18:	f7ff ff4e 	bl	80039b8 <__NVIC_GetPriorityGrouping>
 8003b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	6978      	ldr	r0, [r7, #20]
 8003b24:	f7ff ff9c 	bl	8003a60 <NVIC_EncodePriority>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff6b 	bl	8003a0c <__NVIC_SetPriority>
}
 8003b36:	bf00      	nop
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	4603      	mov	r3, r0
 8003b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff41 	bl	80039d4 <__NVIC_EnableIRQ>
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003b5e:	f7ff ffb1 	bl	8003ac4 <__NVIC_SystemReset>
	...

08003b64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e043      	b.n	8003c02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4b22      	ldr	r3, [pc, #136]	; (8003c0c <HAL_DMA_Init+0xa8>)
 8003b82:	4413      	add	r3, r2
 8003b84:	4a22      	ldr	r2, [pc, #136]	; (8003c10 <HAL_DMA_Init+0xac>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	091b      	lsrs	r3, r3, #4
 8003b8c:	009a      	lsls	r2, r3, #2
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <HAL_DMA_Init+0xb0>)
 8003b96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003bae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003bb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	bffdfff8 	.word	0xbffdfff8
 8003c10:	cccccccd 	.word	0xcccccccd
 8003c14:	40020000 	.word	0x40020000

08003c18 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d008      	beq.n	8003c40 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2204      	movs	r2, #4
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e020      	b.n	8003c82 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 020e 	bic.w	r2, r2, #14
 8003c4e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	2101      	movs	r1, #1
 8003c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d005      	beq.n	8003cae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
 8003cac:	e051      	b.n	8003d52 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 020e 	bic.w	r2, r2, #14
 8003cbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0201 	bic.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a22      	ldr	r2, [pc, #136]	; (8003d5c <HAL_DMA_Abort_IT+0xd0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d029      	beq.n	8003d2c <HAL_DMA_Abort_IT+0xa0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a20      	ldr	r2, [pc, #128]	; (8003d60 <HAL_DMA_Abort_IT+0xd4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d022      	beq.n	8003d28 <HAL_DMA_Abort_IT+0x9c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1f      	ldr	r2, [pc, #124]	; (8003d64 <HAL_DMA_Abort_IT+0xd8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d01a      	beq.n	8003d22 <HAL_DMA_Abort_IT+0x96>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <HAL_DMA_Abort_IT+0xdc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d012      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x90>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1c      	ldr	r2, [pc, #112]	; (8003d6c <HAL_DMA_Abort_IT+0xe0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00a      	beq.n	8003d16 <HAL_DMA_Abort_IT+0x8a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1a      	ldr	r2, [pc, #104]	; (8003d70 <HAL_DMA_Abort_IT+0xe4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d102      	bne.n	8003d10 <HAL_DMA_Abort_IT+0x84>
 8003d0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d0e:	e00e      	b.n	8003d2e <HAL_DMA_Abort_IT+0xa2>
 8003d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d14:	e00b      	b.n	8003d2e <HAL_DMA_Abort_IT+0xa2>
 8003d16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d1a:	e008      	b.n	8003d2e <HAL_DMA_Abort_IT+0xa2>
 8003d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d20:	e005      	b.n	8003d2e <HAL_DMA_Abort_IT+0xa2>
 8003d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d26:	e002      	b.n	8003d2e <HAL_DMA_Abort_IT+0xa2>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	e000      	b.n	8003d2e <HAL_DMA_Abort_IT+0xa2>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	4a11      	ldr	r2, [pc, #68]	; (8003d74 <HAL_DMA_Abort_IT+0xe8>)
 8003d30:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
    } 
  }
  return status;
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40020008 	.word	0x40020008
 8003d60:	4002001c 	.word	0x4002001c
 8003d64:	40020030 	.word	0x40020030
 8003d68:	40020044 	.word	0x40020044
 8003d6c:	40020058 	.word	0x40020058
 8003d70:	4002006c 	.word	0x4002006c
 8003d74:	40020000 	.word	0x40020000

08003d78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	2204      	movs	r2, #4
 8003d96:	409a      	lsls	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d04f      	beq.n	8003e40 <HAL_DMA_IRQHandler+0xc8>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d04a      	beq.n	8003e40 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d107      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0204 	bic.w	r2, r2, #4
 8003dc6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a66      	ldr	r2, [pc, #408]	; (8003f68 <HAL_DMA_IRQHandler+0x1f0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d029      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xae>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a65      	ldr	r2, [pc, #404]	; (8003f6c <HAL_DMA_IRQHandler+0x1f4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d022      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xaa>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a63      	ldr	r2, [pc, #396]	; (8003f70 <HAL_DMA_IRQHandler+0x1f8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01a      	beq.n	8003e1c <HAL_DMA_IRQHandler+0xa4>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a62      	ldr	r2, [pc, #392]	; (8003f74 <HAL_DMA_IRQHandler+0x1fc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d012      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x9e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a60      	ldr	r2, [pc, #384]	; (8003f78 <HAL_DMA_IRQHandler+0x200>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00a      	beq.n	8003e10 <HAL_DMA_IRQHandler+0x98>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a5f      	ldr	r2, [pc, #380]	; (8003f7c <HAL_DMA_IRQHandler+0x204>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d102      	bne.n	8003e0a <HAL_DMA_IRQHandler+0x92>
 8003e04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e08:	e00e      	b.n	8003e28 <HAL_DMA_IRQHandler+0xb0>
 8003e0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e0e:	e00b      	b.n	8003e28 <HAL_DMA_IRQHandler+0xb0>
 8003e10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e14:	e008      	b.n	8003e28 <HAL_DMA_IRQHandler+0xb0>
 8003e16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e1a:	e005      	b.n	8003e28 <HAL_DMA_IRQHandler+0xb0>
 8003e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e20:	e002      	b.n	8003e28 <HAL_DMA_IRQHandler+0xb0>
 8003e22:	2340      	movs	r3, #64	; 0x40
 8003e24:	e000      	b.n	8003e28 <HAL_DMA_IRQHandler+0xb0>
 8003e26:	2304      	movs	r3, #4
 8003e28:	4a55      	ldr	r2, [pc, #340]	; (8003f80 <HAL_DMA_IRQHandler+0x208>)
 8003e2a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8094 	beq.w	8003f5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003e3e:	e08e      	b.n	8003f5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2202      	movs	r2, #2
 8003e46:	409a      	lsls	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d056      	beq.n	8003efe <HAL_DMA_IRQHandler+0x186>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d051      	beq.n	8003efe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10b      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 020a 	bic.w	r2, r2, #10
 8003e76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a38      	ldr	r2, [pc, #224]	; (8003f68 <HAL_DMA_IRQHandler+0x1f0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d029      	beq.n	8003ede <HAL_DMA_IRQHandler+0x166>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a37      	ldr	r2, [pc, #220]	; (8003f6c <HAL_DMA_IRQHandler+0x1f4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d022      	beq.n	8003eda <HAL_DMA_IRQHandler+0x162>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a35      	ldr	r2, [pc, #212]	; (8003f70 <HAL_DMA_IRQHandler+0x1f8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01a      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x15c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a34      	ldr	r2, [pc, #208]	; (8003f74 <HAL_DMA_IRQHandler+0x1fc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d012      	beq.n	8003ece <HAL_DMA_IRQHandler+0x156>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a32      	ldr	r2, [pc, #200]	; (8003f78 <HAL_DMA_IRQHandler+0x200>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x150>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a31      	ldr	r2, [pc, #196]	; (8003f7c <HAL_DMA_IRQHandler+0x204>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d102      	bne.n	8003ec2 <HAL_DMA_IRQHandler+0x14a>
 8003ebc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ec0:	e00e      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x168>
 8003ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ec6:	e00b      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x168>
 8003ec8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ecc:	e008      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x168>
 8003ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ed2:	e005      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x168>
 8003ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ed8:	e002      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x168>
 8003eda:	2320      	movs	r3, #32
 8003edc:	e000      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x168>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <HAL_DMA_IRQHandler+0x208>)
 8003ee2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d034      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003efc:	e02f      	b.n	8003f5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2208      	movs	r2, #8
 8003f04:	409a      	lsls	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d028      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x1e8>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d023      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 020e 	bic.w	r2, r2, #14
 8003f26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f30:	2101      	movs	r1, #1
 8003f32:	fa01 f202 	lsl.w	r2, r1, r2
 8003f36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d004      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
    }
  }
  return;
 8003f5e:	bf00      	nop
 8003f60:	bf00      	nop
}
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40020008 	.word	0x40020008
 8003f6c:	4002001c 	.word	0x4002001c
 8003f70:	40020030 	.word	0x40020030
 8003f74:	40020044 	.word	0x40020044
 8003f78:	40020058 	.word	0x40020058
 8003f7c:	4002006c 	.word	0x4002006c
 8003f80:	40020000 	.word	0x40020000

08003f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b08b      	sub	sp, #44	; 0x2c
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f92:	2300      	movs	r3, #0
 8003f94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f96:	e169      	b.n	800426c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f98:	2201      	movs	r2, #1
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	f040 8158 	bne.w	8004266 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4a9a      	ldr	r2, [pc, #616]	; (8004224 <HAL_GPIO_Init+0x2a0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d05e      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003fc0:	4a98      	ldr	r2, [pc, #608]	; (8004224 <HAL_GPIO_Init+0x2a0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d875      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003fc6:	4a98      	ldr	r2, [pc, #608]	; (8004228 <HAL_GPIO_Init+0x2a4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d058      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003fcc:	4a96      	ldr	r2, [pc, #600]	; (8004228 <HAL_GPIO_Init+0x2a4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d86f      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003fd2:	4a96      	ldr	r2, [pc, #600]	; (800422c <HAL_GPIO_Init+0x2a8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d052      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003fd8:	4a94      	ldr	r2, [pc, #592]	; (800422c <HAL_GPIO_Init+0x2a8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d869      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003fde:	4a94      	ldr	r2, [pc, #592]	; (8004230 <HAL_GPIO_Init+0x2ac>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d04c      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003fe4:	4a92      	ldr	r2, [pc, #584]	; (8004230 <HAL_GPIO_Init+0x2ac>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d863      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003fea:	4a92      	ldr	r2, [pc, #584]	; (8004234 <HAL_GPIO_Init+0x2b0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d046      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003ff0:	4a90      	ldr	r2, [pc, #576]	; (8004234 <HAL_GPIO_Init+0x2b0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d85d      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003ff6:	2b12      	cmp	r3, #18
 8003ff8:	d82a      	bhi.n	8004050 <HAL_GPIO_Init+0xcc>
 8003ffa:	2b12      	cmp	r3, #18
 8003ffc:	d859      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003ffe:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <HAL_GPIO_Init+0x80>)
 8004000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004004:	0800407f 	.word	0x0800407f
 8004008:	08004059 	.word	0x08004059
 800400c:	0800406b 	.word	0x0800406b
 8004010:	080040ad 	.word	0x080040ad
 8004014:	080040b3 	.word	0x080040b3
 8004018:	080040b3 	.word	0x080040b3
 800401c:	080040b3 	.word	0x080040b3
 8004020:	080040b3 	.word	0x080040b3
 8004024:	080040b3 	.word	0x080040b3
 8004028:	080040b3 	.word	0x080040b3
 800402c:	080040b3 	.word	0x080040b3
 8004030:	080040b3 	.word	0x080040b3
 8004034:	080040b3 	.word	0x080040b3
 8004038:	080040b3 	.word	0x080040b3
 800403c:	080040b3 	.word	0x080040b3
 8004040:	080040b3 	.word	0x080040b3
 8004044:	080040b3 	.word	0x080040b3
 8004048:	08004061 	.word	0x08004061
 800404c:	08004075 	.word	0x08004075
 8004050:	4a79      	ldr	r2, [pc, #484]	; (8004238 <HAL_GPIO_Init+0x2b4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004056:	e02c      	b.n	80040b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	623b      	str	r3, [r7, #32]
          break;
 800405e:	e029      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	3304      	adds	r3, #4
 8004066:	623b      	str	r3, [r7, #32]
          break;
 8004068:	e024      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	3308      	adds	r3, #8
 8004070:	623b      	str	r3, [r7, #32]
          break;
 8004072:	e01f      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	330c      	adds	r3, #12
 800407a:	623b      	str	r3, [r7, #32]
          break;
 800407c:	e01a      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d102      	bne.n	800408c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004086:	2304      	movs	r3, #4
 8004088:	623b      	str	r3, [r7, #32]
          break;
 800408a:	e013      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004094:	2308      	movs	r3, #8
 8004096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	611a      	str	r2, [r3, #16]
          break;
 800409e:	e009      	b.n	80040b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040a0:	2308      	movs	r3, #8
 80040a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	615a      	str	r2, [r3, #20]
          break;
 80040aa:	e003      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80040ac:	2300      	movs	r3, #0
 80040ae:	623b      	str	r3, [r7, #32]
          break;
 80040b0:	e000      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          break;
 80040b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2bff      	cmp	r3, #255	; 0xff
 80040b8:	d801      	bhi.n	80040be <HAL_GPIO_Init+0x13a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	e001      	b.n	80040c2 <HAL_GPIO_Init+0x13e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2bff      	cmp	r3, #255	; 0xff
 80040c8:	d802      	bhi.n	80040d0 <HAL_GPIO_Init+0x14c>
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	e002      	b.n	80040d6 <HAL_GPIO_Init+0x152>
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	3b08      	subs	r3, #8
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	210f      	movs	r1, #15
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	401a      	ands	r2, r3
 80040e8:	6a39      	ldr	r1, [r7, #32]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	fa01 f303 	lsl.w	r3, r1, r3
 80040f0:	431a      	orrs	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80b1 	beq.w	8004266 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004104:	4b4d      	ldr	r3, [pc, #308]	; (800423c <HAL_GPIO_Init+0x2b8>)
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	4a4c      	ldr	r2, [pc, #304]	; (800423c <HAL_GPIO_Init+0x2b8>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6193      	str	r3, [r2, #24]
 8004110:	4b4a      	ldr	r3, [pc, #296]	; (800423c <HAL_GPIO_Init+0x2b8>)
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800411c:	4a48      	ldr	r2, [pc, #288]	; (8004240 <HAL_GPIO_Init+0x2bc>)
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	3302      	adds	r3, #2
 8004124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004128:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	220f      	movs	r2, #15
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4013      	ands	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a40      	ldr	r2, [pc, #256]	; (8004244 <HAL_GPIO_Init+0x2c0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d013      	beq.n	8004170 <HAL_GPIO_Init+0x1ec>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a3f      	ldr	r2, [pc, #252]	; (8004248 <HAL_GPIO_Init+0x2c4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00d      	beq.n	800416c <HAL_GPIO_Init+0x1e8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a3e      	ldr	r2, [pc, #248]	; (800424c <HAL_GPIO_Init+0x2c8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d007      	beq.n	8004168 <HAL_GPIO_Init+0x1e4>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a3d      	ldr	r2, [pc, #244]	; (8004250 <HAL_GPIO_Init+0x2cc>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <HAL_GPIO_Init+0x1e0>
 8004160:	2303      	movs	r3, #3
 8004162:	e006      	b.n	8004172 <HAL_GPIO_Init+0x1ee>
 8004164:	2304      	movs	r3, #4
 8004166:	e004      	b.n	8004172 <HAL_GPIO_Init+0x1ee>
 8004168:	2302      	movs	r3, #2
 800416a:	e002      	b.n	8004172 <HAL_GPIO_Init+0x1ee>
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <HAL_GPIO_Init+0x1ee>
 8004170:	2300      	movs	r3, #0
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	f002 0203 	and.w	r2, r2, #3
 8004178:	0092      	lsls	r2, r2, #2
 800417a:	4093      	lsls	r3, r2
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004182:	492f      	ldr	r1, [pc, #188]	; (8004240 <HAL_GPIO_Init+0x2bc>)
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	3302      	adds	r3, #2
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d006      	beq.n	80041aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800419c:	4b2d      	ldr	r3, [pc, #180]	; (8004254 <HAL_GPIO_Init+0x2d0>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	492c      	ldr	r1, [pc, #176]	; (8004254 <HAL_GPIO_Init+0x2d0>)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	600b      	str	r3, [r1, #0]
 80041a8:	e006      	b.n	80041b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80041aa:	4b2a      	ldr	r3, [pc, #168]	; (8004254 <HAL_GPIO_Init+0x2d0>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	43db      	mvns	r3, r3
 80041b2:	4928      	ldr	r1, [pc, #160]	; (8004254 <HAL_GPIO_Init+0x2d0>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d006      	beq.n	80041d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80041c4:	4b23      	ldr	r3, [pc, #140]	; (8004254 <HAL_GPIO_Init+0x2d0>)
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	4922      	ldr	r1, [pc, #136]	; (8004254 <HAL_GPIO_Init+0x2d0>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	604b      	str	r3, [r1, #4]
 80041d0:	e006      	b.n	80041e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041d2:	4b20      	ldr	r3, [pc, #128]	; (8004254 <HAL_GPIO_Init+0x2d0>)
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	43db      	mvns	r3, r3
 80041da:	491e      	ldr	r1, [pc, #120]	; (8004254 <HAL_GPIO_Init+0x2d0>)
 80041dc:	4013      	ands	r3, r2
 80041de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d006      	beq.n	80041fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041ec:	4b19      	ldr	r3, [pc, #100]	; (8004254 <HAL_GPIO_Init+0x2d0>)
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	4918      	ldr	r1, [pc, #96]	; (8004254 <HAL_GPIO_Init+0x2d0>)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	608b      	str	r3, [r1, #8]
 80041f8:	e006      	b.n	8004208 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041fa:	4b16      	ldr	r3, [pc, #88]	; (8004254 <HAL_GPIO_Init+0x2d0>)
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	43db      	mvns	r3, r3
 8004202:	4914      	ldr	r1, [pc, #80]	; (8004254 <HAL_GPIO_Init+0x2d0>)
 8004204:	4013      	ands	r3, r2
 8004206:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d021      	beq.n	8004258 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <HAL_GPIO_Init+0x2d0>)
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	490e      	ldr	r1, [pc, #56]	; (8004254 <HAL_GPIO_Init+0x2d0>)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	60cb      	str	r3, [r1, #12]
 8004220:	e021      	b.n	8004266 <HAL_GPIO_Init+0x2e2>
 8004222:	bf00      	nop
 8004224:	10320000 	.word	0x10320000
 8004228:	10310000 	.word	0x10310000
 800422c:	10220000 	.word	0x10220000
 8004230:	10210000 	.word	0x10210000
 8004234:	10120000 	.word	0x10120000
 8004238:	10110000 	.word	0x10110000
 800423c:	40021000 	.word	0x40021000
 8004240:	40010000 	.word	0x40010000
 8004244:	40010800 	.word	0x40010800
 8004248:	40010c00 	.word	0x40010c00
 800424c:	40011000 	.word	0x40011000
 8004250:	40011400 	.word	0x40011400
 8004254:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_GPIO_Init+0x304>)
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	43db      	mvns	r3, r3
 8004260:	4909      	ldr	r1, [pc, #36]	; (8004288 <HAL_GPIO_Init+0x304>)
 8004262:	4013      	ands	r3, r2
 8004264:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	3301      	adds	r3, #1
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	fa22 f303 	lsr.w	r3, r2, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	f47f ae8e 	bne.w	8003f98 <HAL_GPIO_Init+0x14>
  }
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	372c      	adds	r7, #44	; 0x2c
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	40010400 	.word	0x40010400

0800428c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
 8004298:	4613      	mov	r3, r2
 800429a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800429c:	787b      	ldrb	r3, [r7, #1]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042a2:	887a      	ldrh	r2, [r7, #2]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80042a8:	e003      	b.n	80042b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042aa:	887b      	ldrh	r3, [r7, #2]
 80042ac:	041a      	lsls	r2, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	611a      	str	r2, [r3, #16]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e26c      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 8087 	beq.w	80043ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042dc:	4b92      	ldr	r3, [pc, #584]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 030c 	and.w	r3, r3, #12
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d00c      	beq.n	8004302 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042e8:	4b8f      	ldr	r3, [pc, #572]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 030c 	and.w	r3, r3, #12
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d112      	bne.n	800431a <HAL_RCC_OscConfig+0x5e>
 80042f4:	4b8c      	ldr	r3, [pc, #560]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d10b      	bne.n	800431a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004302:	4b89      	ldr	r3, [pc, #548]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d06c      	beq.n	80043e8 <HAL_RCC_OscConfig+0x12c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d168      	bne.n	80043e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e246      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004322:	d106      	bne.n	8004332 <HAL_RCC_OscConfig+0x76>
 8004324:	4b80      	ldr	r3, [pc, #512]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a7f      	ldr	r2, [pc, #508]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800432a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	e02e      	b.n	8004390 <HAL_RCC_OscConfig+0xd4>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x98>
 800433a:	4b7b      	ldr	r3, [pc, #492]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a7a      	ldr	r2, [pc, #488]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b78      	ldr	r3, [pc, #480]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a77      	ldr	r2, [pc, #476]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800434c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e01d      	b.n	8004390 <HAL_RCC_OscConfig+0xd4>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0xbc>
 800435e:	4b72      	ldr	r3, [pc, #456]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a71      	ldr	r2, [pc, #452]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	4b6f      	ldr	r3, [pc, #444]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6e      	ldr	r2, [pc, #440]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e00b      	b.n	8004390 <HAL_RCC_OscConfig+0xd4>
 8004378:	4b6b      	ldr	r3, [pc, #428]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a6a      	ldr	r2, [pc, #424]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800437e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4b68      	ldr	r3, [pc, #416]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a67      	ldr	r2, [pc, #412]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800438a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800438e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d013      	beq.n	80043c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fe fe02 	bl	8002fa0 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a0:	f7fe fdfe 	bl	8002fa0 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	; 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e1fa      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	4b5d      	ldr	r3, [pc, #372]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0xe4>
 80043be:	e014      	b.n	80043ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fe fdee 	bl	8002fa0 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fe fdea 	bl	8002fa0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e1e6      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043da:	4b53      	ldr	r3, [pc, #332]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x10c>
 80043e6:	e000      	b.n	80043ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d063      	beq.n	80044be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043f6:	4b4c      	ldr	r3, [pc, #304]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 030c 	and.w	r3, r3, #12
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004402:	4b49      	ldr	r3, [pc, #292]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b08      	cmp	r3, #8
 800440c:	d11c      	bne.n	8004448 <HAL_RCC_OscConfig+0x18c>
 800440e:	4b46      	ldr	r3, [pc, #280]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d116      	bne.n	8004448 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441a:	4b43      	ldr	r3, [pc, #268]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_RCC_OscConfig+0x176>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e1ba      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004432:	4b3d      	ldr	r3, [pc, #244]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4939      	ldr	r1, [pc, #228]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004446:	e03a      	b.n	80044be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d020      	beq.n	8004492 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004450:	4b36      	ldr	r3, [pc, #216]	; (800452c <HAL_RCC_OscConfig+0x270>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004456:	f7fe fda3 	bl	8002fa0 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445e:	f7fe fd9f 	bl	8002fa0 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e19b      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004470:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447c:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4927      	ldr	r1, [pc, #156]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]
 8004490:	e015      	b.n	80044be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004492:	4b26      	ldr	r3, [pc, #152]	; (800452c <HAL_RCC_OscConfig+0x270>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fe fd82 	bl	8002fa0 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a0:	f7fe fd7e 	bl	8002fa0 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e17a      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b2:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d03a      	beq.n	8004540 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d019      	beq.n	8004506 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d2:	4b17      	ldr	r3, [pc, #92]	; (8004530 <HAL_RCC_OscConfig+0x274>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d8:	f7fe fd62 	bl	8002fa0 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e0:	f7fe fd5e 	bl	8002fa0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e15a      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f2:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044fe:	2001      	movs	r0, #1
 8004500:	f000 fb08 	bl	8004b14 <RCC_Delay>
 8004504:	e01c      	b.n	8004540 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004506:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <HAL_RCC_OscConfig+0x274>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450c:	f7fe fd48 	bl	8002fa0 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004512:	e00f      	b.n	8004534 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004514:	f7fe fd44 	bl	8002fa0 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d908      	bls.n	8004534 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e140      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	42420000 	.word	0x42420000
 8004530:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004534:	4b9e      	ldr	r3, [pc, #632]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e9      	bne.n	8004514 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80a6 	beq.w	800469a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454e:	2300      	movs	r3, #0
 8004550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004552:	4b97      	ldr	r3, [pc, #604]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10d      	bne.n	800457a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455e:	4b94      	ldr	r3, [pc, #592]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	4a93      	ldr	r2, [pc, #588]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004568:	61d3      	str	r3, [r2, #28]
 800456a:	4b91      	ldr	r3, [pc, #580]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004576:	2301      	movs	r3, #1
 8004578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457a:	4b8e      	ldr	r3, [pc, #568]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d118      	bne.n	80045b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004586:	4b8b      	ldr	r3, [pc, #556]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a8a      	ldr	r2, [pc, #552]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800458c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004592:	f7fe fd05 	bl	8002fa0 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459a:	f7fe fd01 	bl	8002fa0 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b64      	cmp	r3, #100	; 0x64
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0fd      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ac:	4b81      	ldr	r3, [pc, #516]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d106      	bne.n	80045ce <HAL_RCC_OscConfig+0x312>
 80045c0:	4b7b      	ldr	r3, [pc, #492]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	4a7a      	ldr	r2, [pc, #488]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6213      	str	r3, [r2, #32]
 80045cc:	e02d      	b.n	800462a <HAL_RCC_OscConfig+0x36e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x334>
 80045d6:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	4a75      	ldr	r2, [pc, #468]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	6213      	str	r3, [r2, #32]
 80045e2:	4b73      	ldr	r3, [pc, #460]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	4a72      	ldr	r2, [pc, #456]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045e8:	f023 0304 	bic.w	r3, r3, #4
 80045ec:	6213      	str	r3, [r2, #32]
 80045ee:	e01c      	b.n	800462a <HAL_RCC_OscConfig+0x36e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	2b05      	cmp	r3, #5
 80045f6:	d10c      	bne.n	8004612 <HAL_RCC_OscConfig+0x356>
 80045f8:	4b6d      	ldr	r3, [pc, #436]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	4a6c      	ldr	r2, [pc, #432]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045fe:	f043 0304 	orr.w	r3, r3, #4
 8004602:	6213      	str	r3, [r2, #32]
 8004604:	4b6a      	ldr	r3, [pc, #424]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	4a69      	ldr	r2, [pc, #420]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	6213      	str	r3, [r2, #32]
 8004610:	e00b      	b.n	800462a <HAL_RCC_OscConfig+0x36e>
 8004612:	4b67      	ldr	r3, [pc, #412]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	4a66      	ldr	r2, [pc, #408]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	6213      	str	r3, [r2, #32]
 800461e:	4b64      	ldr	r3, [pc, #400]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	4a63      	ldr	r2, [pc, #396]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004624:	f023 0304 	bic.w	r3, r3, #4
 8004628:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d015      	beq.n	800465e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004632:	f7fe fcb5 	bl	8002fa0 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004638:	e00a      	b.n	8004650 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463a:	f7fe fcb1 	bl	8002fa0 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f241 3288 	movw	r2, #5000	; 0x1388
 8004648:	4293      	cmp	r3, r2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e0ab      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004650:	4b57      	ldr	r3, [pc, #348]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0ee      	beq.n	800463a <HAL_RCC_OscConfig+0x37e>
 800465c:	e014      	b.n	8004688 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465e:	f7fe fc9f 	bl	8002fa0 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004664:	e00a      	b.n	800467c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004666:	f7fe fc9b 	bl	8002fa0 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	f241 3288 	movw	r2, #5000	; 0x1388
 8004674:	4293      	cmp	r3, r2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e095      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467c:	4b4c      	ldr	r3, [pc, #304]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1ee      	bne.n	8004666 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004688:	7dfb      	ldrb	r3, [r7, #23]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d105      	bne.n	800469a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468e:	4b48      	ldr	r3, [pc, #288]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	4a47      	ldr	r2, [pc, #284]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004698:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8081 	beq.w	80047a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046a4:	4b42      	ldr	r3, [pc, #264]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 030c 	and.w	r3, r3, #12
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d061      	beq.n	8004774 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d146      	bne.n	8004746 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b8:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <HAL_RCC_OscConfig+0x4fc>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046be:	f7fe fc6f 	bl	8002fa0 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c6:	f7fe fc6b 	bl	8002fa0 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e067      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d8:	4b35      	ldr	r3, [pc, #212]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f0      	bne.n	80046c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ec:	d108      	bne.n	8004700 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046ee:	4b30      	ldr	r3, [pc, #192]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	492d      	ldr	r1, [pc, #180]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004700:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a19      	ldr	r1, [r3, #32]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	430b      	orrs	r3, r1
 8004712:	4927      	ldr	r1, [pc, #156]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004718:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <HAL_RCC_OscConfig+0x4fc>)
 800471a:	2201      	movs	r2, #1
 800471c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471e:	f7fe fc3f 	bl	8002fa0 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004726:	f7fe fc3b 	bl	8002fa0 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e037      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004738:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f0      	beq.n	8004726 <HAL_RCC_OscConfig+0x46a>
 8004744:	e02f      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004746:	4b1c      	ldr	r3, [pc, #112]	; (80047b8 <HAL_RCC_OscConfig+0x4fc>)
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fe fc28 	bl	8002fa0 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004754:	f7fe fc24 	bl	8002fa0 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e020      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004766:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x498>
 8004772:	e018      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e013      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	429a      	cmp	r2, r3
 8004792:	d106      	bne.n	80047a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479e:	429a      	cmp	r2, r3
 80047a0:	d001      	beq.n	80047a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40007000 	.word	0x40007000
 80047b8:	42420060 	.word	0x42420060

080047bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0d0      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d0:	4b6a      	ldr	r3, [pc, #424]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d910      	bls.n	8004800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b67      	ldr	r3, [pc, #412]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 0207 	bic.w	r2, r3, #7
 80047e6:	4965      	ldr	r1, [pc, #404]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b63      	ldr	r3, [pc, #396]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e0b8      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d020      	beq.n	800484e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004818:	4b59      	ldr	r3, [pc, #356]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a58      	ldr	r2, [pc, #352]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004822:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004830:	4b53      	ldr	r3, [pc, #332]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4a52      	ldr	r2, [pc, #328]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004836:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800483a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800483c:	4b50      	ldr	r3, [pc, #320]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	494d      	ldr	r1, [pc, #308]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800484a:	4313      	orrs	r3, r2
 800484c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d040      	beq.n	80048dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d107      	bne.n	8004872 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004862:	4b47      	ldr	r3, [pc, #284]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d115      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e07f      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d107      	bne.n	800488a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487a:	4b41      	ldr	r3, [pc, #260]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e073      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488a:	4b3d      	ldr	r3, [pc, #244]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e06b      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800489a:	4b39      	ldr	r3, [pc, #228]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f023 0203 	bic.w	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4936      	ldr	r1, [pc, #216]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048ac:	f7fe fb78 	bl	8002fa0 <HAL_GetTick>
 80048b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b4:	f7fe fb74 	bl	8002fa0 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e053      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ca:	4b2d      	ldr	r3, [pc, #180]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 020c 	and.w	r2, r3, #12
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	429a      	cmp	r2, r3
 80048da:	d1eb      	bne.n	80048b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048dc:	4b27      	ldr	r3, [pc, #156]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d210      	bcs.n	800490c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ea:	4b24      	ldr	r3, [pc, #144]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f023 0207 	bic.w	r2, r3, #7
 80048f2:	4922      	ldr	r1, [pc, #136]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fa:	4b20      	ldr	r3, [pc, #128]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e032      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004918:	4b19      	ldr	r3, [pc, #100]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4916      	ldr	r1, [pc, #88]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004926:	4313      	orrs	r3, r2
 8004928:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004936:	4b12      	ldr	r3, [pc, #72]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	490e      	ldr	r1, [pc, #56]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800494a:	f000 f821 	bl	8004990 <HAL_RCC_GetSysClockFreq>
 800494e:	4602      	mov	r2, r0
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	091b      	lsrs	r3, r3, #4
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	490a      	ldr	r1, [pc, #40]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 800495c:	5ccb      	ldrb	r3, [r1, r3]
 800495e:	fa22 f303 	lsr.w	r3, r2, r3
 8004962:	4a09      	ldr	r2, [pc, #36]	; (8004988 <HAL_RCC_ClockConfig+0x1cc>)
 8004964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004966:	4b09      	ldr	r3, [pc, #36]	; (800498c <HAL_RCC_ClockConfig+0x1d0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fd fa6a 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40022000 	.word	0x40022000
 8004980:	40021000 	.word	0x40021000
 8004984:	0800e264 	.word	0x0800e264
 8004988:	20000000 	.word	0x20000000
 800498c:	20000004 	.word	0x20000004

08004990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004990:	b490      	push	{r4, r7}
 8004992:	b08a      	sub	sp, #40	; 0x28
 8004994:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004996:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004998:	1d3c      	adds	r4, r7, #4
 800499a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800499c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049a0:	f240 2301 	movw	r3, #513	; 0x201
 80049a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	2300      	movs	r3, #0
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049ba:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d002      	beq.n	80049d0 <HAL_RCC_GetSysClockFreq+0x40>
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d003      	beq.n	80049d6 <HAL_RCC_GetSysClockFreq+0x46>
 80049ce:	e02d      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049d0:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049d2:	623b      	str	r3, [r7, #32]
      break;
 80049d4:	e02d      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	0c9b      	lsrs	r3, r3, #18
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049e2:	4413      	add	r3, r2
 80049e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d013      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049f4:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	0c5b      	lsrs	r3, r3, #17
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a02:	4413      	add	r3, r2
 8004a04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	4a0e      	ldr	r2, [pc, #56]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a0e:	fb02 f203 	mul.w	r2, r2, r3
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1a:	e004      	b.n	8004a26 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	4a0b      	ldr	r2, [pc, #44]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a20:	fb02 f303 	mul.w	r3, r2, r3
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	623b      	str	r3, [r7, #32]
      break;
 8004a2a:	e002      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a2e:	623b      	str	r3, [r7, #32]
      break;
 8004a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a32:	6a3b      	ldr	r3, [r7, #32]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3728      	adds	r7, #40	; 0x28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc90      	pop	{r4, r7}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	0800e10c 	.word	0x0800e10c
 8004a44:	40021000 	.word	0x40021000
 8004a48:	007a1200 	.word	0x007a1200
 8004a4c:	003d0900 	.word	0x003d0900

08004a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a54:	4b02      	ldr	r3, [pc, #8]	; (8004a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a56:	681b      	ldr	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr
 8004a60:	20000000 	.word	0x20000000

08004a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a68:	f7ff fff2 	bl	8004a50 <HAL_RCC_GetHCLKFreq>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	4903      	ldr	r1, [pc, #12]	; (8004a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a7a:	5ccb      	ldrb	r3, [r1, r3]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40021000 	.word	0x40021000
 8004a88:	0800e274 	.word	0x0800e274

08004a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a90:	f7ff ffde 	bl	8004a50 <HAL_RCC_GetHCLKFreq>
 8004a94:	4602      	mov	r2, r0
 8004a96:	4b05      	ldr	r3, [pc, #20]	; (8004aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	0adb      	lsrs	r3, r3, #11
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	4903      	ldr	r1, [pc, #12]	; (8004ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aa2:	5ccb      	ldrb	r3, [r1, r3]
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	0800e274 	.word	0x0800e274

08004ab4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	220f      	movs	r2, #15
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ac4:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <HAL_RCC_GetClockConfig+0x58>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 0203 	and.w	r2, r3, #3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ad0:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <HAL_RCC_GetClockConfig+0x58>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_RCC_GetClockConfig+0x58>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ae8:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <HAL_RCC_GetClockConfig+0x58>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	08db      	lsrs	r3, r3, #3
 8004aee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCC_GetClockConfig+0x5c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0207 	and.w	r2, r3, #7
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40022000 	.word	0x40022000

08004b14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <RCC_Delay+0x34>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <RCC_Delay+0x38>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	0a5b      	lsrs	r3, r3, #9
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b30:	bf00      	nop
  }
  while (Delay --);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1e5a      	subs	r2, r3, #1
 8004b36:	60fa      	str	r2, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f9      	bne.n	8004b30 <RCC_Delay+0x1c>
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr
 8004b48:	20000000 	.word	0x20000000
 8004b4c:	10624dd3 	.word	0x10624dd3

08004b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d07d      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b70:	4b4f      	ldr	r3, [pc, #316]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10d      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7c:	4b4c      	ldr	r3, [pc, #304]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	4a4b      	ldr	r2, [pc, #300]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b86:	61d3      	str	r3, [r2, #28]
 8004b88:	4b49      	ldr	r3, [pc, #292]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b94:	2301      	movs	r3, #1
 8004b96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b98:	4b46      	ldr	r3, [pc, #280]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d118      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ba4:	4b43      	ldr	r3, [pc, #268]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a42      	ldr	r2, [pc, #264]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb0:	f7fe f9f6 	bl	8002fa0 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb6:	e008      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb8:	f7fe f9f2 	bl	8002fa0 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	; 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e06d      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bca:	4b3a      	ldr	r3, [pc, #232]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bd6:	4b36      	ldr	r3, [pc, #216]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d02e      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d027      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bf4:	4b2e      	ldr	r3, [pc, #184]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bfe:	4b2e      	ldr	r3, [pc, #184]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c04:	4b2c      	ldr	r3, [pc, #176]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c0a:	4a29      	ldr	r2, [pc, #164]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d014      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1a:	f7fe f9c1 	bl	8002fa0 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c20:	e00a      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c22:	f7fe f9bd 	bl	8002fa0 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e036      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c38:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0ee      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c44:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	4917      	ldr	r1, [pc, #92]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5c:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	4a13      	ldr	r2, [pc, #76]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c74:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	490b      	ldr	r1, [pc, #44]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d008      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c92:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	4904      	ldr	r1, [pc, #16]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	40007000 	.word	0x40007000
 8004cb8:	42420440 	.word	0x42420440

08004cbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b08d      	sub	sp, #52	; 0x34
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004cc4:	4b5a      	ldr	r3, [pc, #360]	; (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004cc6:	f107 040c 	add.w	r4, r7, #12
 8004cca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004cd0:	f240 2301 	movw	r3, #513	; 0x201
 8004cd4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cda:	2300      	movs	r3, #0
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cde:	2300      	movs	r3, #0
 8004ce0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b10      	cmp	r3, #16
 8004cee:	d00a      	beq.n	8004d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	f200 8091 	bhi.w	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d04c      	beq.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d07c      	beq.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004d04:	e089      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8004d06:	4b4b      	ldr	r3, [pc, #300]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004d0c:	4b49      	ldr	r3, [pc, #292]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8082 	beq.w	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	0c9b      	lsrs	r3, r3, #18
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004d26:	4413      	add	r3, r2
 8004d28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004d2c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d018      	beq.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d38:	4b3e      	ldr	r3, [pc, #248]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	0c5b      	lsrs	r3, r3, #17
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004d46:	4413      	add	r3, r2
 8004d48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00d      	beq.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004d58:	4a37      	ldr	r2, [pc, #220]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d68:	e004      	b.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	4a33      	ldr	r2, [pc, #204]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004d74:	4b2f      	ldr	r3, [pc, #188]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d80:	d102      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004d86:	e04a      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	4a2c      	ldr	r2, [pc, #176]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004d96:	e042      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004d98:	4b26      	ldr	r3, [pc, #152]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da8:	d108      	bne.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004db4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dba:	e01f      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc6:	d109      	bne.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004dc8:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8004dd4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dda:	e00f      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de6:	d11c      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004de8:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d016      	beq.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8004df4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004dfa:	e012      	b.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004dfc:	e011      	b.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004dfe:	f7ff fe45 	bl	8004a8c <HAL_RCC_GetPCLK2Freq>
 8004e02:	4602      	mov	r2, r0
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	0b9b      	lsrs	r3, r3, #14
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	3301      	adds	r3, #1
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e18:	e004      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004e1a:	bf00      	nop
 8004e1c:	e002      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e000      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004e22:	bf00      	nop
    }
  }
  return (frequency);
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3734      	adds	r7, #52	; 0x34
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd90      	pop	{r4, r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	0800e11c 	.word	0x0800e11c
 8004e34:	40021000 	.word	0x40021000
 8004e38:	007a1200 	.word	0x007a1200
 8004e3c:	003d0900 	.word	0x003d0900
 8004e40:	aaaaaaab 	.word	0xaaaaaaab

08004e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e041      	b.n	8004eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fd fa5a 	bl	8002324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f000 fb2a 	bl	80054dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d001      	beq.n	8004efc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e032      	b.n	8004f62 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <HAL_TIM_Base_Start+0x88>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00e      	beq.n	8004f2c <HAL_TIM_Base_Start+0x48>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f16:	d009      	beq.n	8004f2c <HAL_TIM_Base_Start+0x48>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a14      	ldr	r2, [pc, #80]	; (8004f70 <HAL_TIM_Base_Start+0x8c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d004      	beq.n	8004f2c <HAL_TIM_Base_Start+0x48>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a13      	ldr	r2, [pc, #76]	; (8004f74 <HAL_TIM_Base_Start+0x90>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d111      	bne.n	8004f50 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b06      	cmp	r3, #6
 8004f3c:	d010      	beq.n	8004f60 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0201 	orr.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4e:	e007      	b.n	8004f60 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40000800 	.word	0x40000800

08004f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d001      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e03a      	b.n	8005006 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a18      	ldr	r2, [pc, #96]	; (8005010 <HAL_TIM_Base_Start_IT+0x98>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00e      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x58>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fba:	d009      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x58>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a14      	ldr	r2, [pc, #80]	; (8005014 <HAL_TIM_Base_Start_IT+0x9c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x58>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a13      	ldr	r2, [pc, #76]	; (8005018 <HAL_TIM_Base_Start_IT+0xa0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d111      	bne.n	8004ff4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b06      	cmp	r3, #6
 8004fe0:	d010      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0201 	orr.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff2:	e007      	b.n	8005004 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0201 	orr.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr
 8005010:	40012c00 	.word	0x40012c00
 8005014:	40000400 	.word	0x40000400
 8005018:	40000800 	.word	0x40000800

0800501c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0201 	bic.w	r2, r2, #1
 8005032:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6a1a      	ldr	r2, [r3, #32]
 800503a:	f241 1311 	movw	r3, #4369	; 0x1111
 800503e:	4013      	ands	r3, r2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10f      	bne.n	8005064 <HAL_TIM_Base_Stop_IT+0x48>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6a1a      	ldr	r2, [r3, #32]
 800504a:	f240 4344 	movw	r3, #1092	; 0x444
 800504e:	4013      	ands	r3, r2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d107      	bne.n	8005064 <HAL_TIM_Base_Stop_IT+0x48>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0201 	bic.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b02      	cmp	r3, #2
 800508c:	d122      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b02      	cmp	r3, #2
 800509a:	d11b      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0202 	mvn.w	r2, #2
 80050a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f9f3 	bl	80054a6 <HAL_TIM_IC_CaptureCallback>
 80050c0:	e005      	b.n	80050ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f9e6 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f9f5 	bl	80054b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d122      	bne.n	8005128 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d11b      	bne.n	8005128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0204 	mvn.w	r2, #4
 80050f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f9c9 	bl	80054a6 <HAL_TIM_IC_CaptureCallback>
 8005114:	e005      	b.n	8005122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f9bc 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f9cb 	bl	80054b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b08      	cmp	r3, #8
 8005134:	d122      	bne.n	800517c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b08      	cmp	r3, #8
 8005142:	d11b      	bne.n	800517c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0208 	mvn.w	r2, #8
 800514c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2204      	movs	r2, #4
 8005152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f99f 	bl	80054a6 <HAL_TIM_IC_CaptureCallback>
 8005168:	e005      	b.n	8005176 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f992 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f9a1 	bl	80054b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0310 	and.w	r3, r3, #16
 8005186:	2b10      	cmp	r3, #16
 8005188:	d122      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b10      	cmp	r3, #16
 8005196:	d11b      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0210 	mvn.w	r2, #16
 80051a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2208      	movs	r2, #8
 80051a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f975 	bl	80054a6 <HAL_TIM_IC_CaptureCallback>
 80051bc:	e005      	b.n	80051ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f968 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f977 	bl	80054b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d10e      	bne.n	80051fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d107      	bne.n	80051fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0201 	mvn.w	r2, #1
 80051f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fc fbe2 	bl	80019c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005206:	2b80      	cmp	r3, #128	; 0x80
 8005208:	d10e      	bne.n	8005228 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005214:	2b80      	cmp	r3, #128	; 0x80
 8005216:	d107      	bne.n	8005228 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fb47 	bl	80058b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d10e      	bne.n	8005254 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d107      	bne.n	8005254 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f93b 	bl	80054ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b20      	cmp	r3, #32
 8005260:	d10e      	bne.n	8005280 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b20      	cmp	r3, #32
 800526e:	d107      	bne.n	8005280 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0220 	mvn.w	r2, #32
 8005278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fb12 	bl	80058a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_TIM_ConfigClockSource+0x18>
 800529c:	2302      	movs	r3, #2
 800529e:	e0b3      	b.n	8005408 <HAL_TIM_ConfigClockSource+0x180>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d8:	d03e      	beq.n	8005358 <HAL_TIM_ConfigClockSource+0xd0>
 80052da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052de:	f200 8087 	bhi.w	80053f0 <HAL_TIM_ConfigClockSource+0x168>
 80052e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e6:	f000 8085 	beq.w	80053f4 <HAL_TIM_ConfigClockSource+0x16c>
 80052ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ee:	d87f      	bhi.n	80053f0 <HAL_TIM_ConfigClockSource+0x168>
 80052f0:	2b70      	cmp	r3, #112	; 0x70
 80052f2:	d01a      	beq.n	800532a <HAL_TIM_ConfigClockSource+0xa2>
 80052f4:	2b70      	cmp	r3, #112	; 0x70
 80052f6:	d87b      	bhi.n	80053f0 <HAL_TIM_ConfigClockSource+0x168>
 80052f8:	2b60      	cmp	r3, #96	; 0x60
 80052fa:	d050      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x116>
 80052fc:	2b60      	cmp	r3, #96	; 0x60
 80052fe:	d877      	bhi.n	80053f0 <HAL_TIM_ConfigClockSource+0x168>
 8005300:	2b50      	cmp	r3, #80	; 0x50
 8005302:	d03c      	beq.n	800537e <HAL_TIM_ConfigClockSource+0xf6>
 8005304:	2b50      	cmp	r3, #80	; 0x50
 8005306:	d873      	bhi.n	80053f0 <HAL_TIM_ConfigClockSource+0x168>
 8005308:	2b40      	cmp	r3, #64	; 0x40
 800530a:	d058      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x136>
 800530c:	2b40      	cmp	r3, #64	; 0x40
 800530e:	d86f      	bhi.n	80053f0 <HAL_TIM_ConfigClockSource+0x168>
 8005310:	2b30      	cmp	r3, #48	; 0x30
 8005312:	d064      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x156>
 8005314:	2b30      	cmp	r3, #48	; 0x30
 8005316:	d86b      	bhi.n	80053f0 <HAL_TIM_ConfigClockSource+0x168>
 8005318:	2b20      	cmp	r3, #32
 800531a:	d060      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x156>
 800531c:	2b20      	cmp	r3, #32
 800531e:	d867      	bhi.n	80053f0 <HAL_TIM_ConfigClockSource+0x168>
 8005320:	2b00      	cmp	r3, #0
 8005322:	d05c      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x156>
 8005324:	2b10      	cmp	r3, #16
 8005326:	d05a      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005328:	e062      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6899      	ldr	r1, [r3, #8]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f000 fa36 	bl	80057aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800534c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	609a      	str	r2, [r3, #8]
      break;
 8005356:	e04e      	b.n	80053f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	6899      	ldr	r1, [r3, #8]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f000 fa1f 	bl	80057aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800537a:	609a      	str	r2, [r3, #8]
      break;
 800537c:	e03b      	b.n	80053f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6859      	ldr	r1, [r3, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	461a      	mov	r2, r3
 800538c:	f000 f996 	bl	80056bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2150      	movs	r1, #80	; 0x50
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f9ed 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 800539c:	e02b      	b.n	80053f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6818      	ldr	r0, [r3, #0]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	6859      	ldr	r1, [r3, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f000 f9b4 	bl	8005718 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2160      	movs	r1, #96	; 0x60
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 f9dd 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 80053bc:	e01b      	b.n	80053f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6859      	ldr	r1, [r3, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	461a      	mov	r2, r3
 80053cc:	f000 f976 	bl	80056bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2140      	movs	r1, #64	; 0x40
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 f9cd 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 80053dc:	e00b      	b.n	80053f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4619      	mov	r1, r3
 80053e8:	4610      	mov	r0, r2
 80053ea:	f000 f9c4 	bl	8005776 <TIM_ITRx_SetConfig>
        break;
 80053ee:	e002      	b.n	80053f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053f0:	bf00      	nop
 80053f2:	e000      	b.n	80053f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005424:	2302      	movs	r3, #2
 8005426:	e031      	b.n	800548c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005438:	6839      	ldr	r1, [r7, #0]
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f8b0 	bl	80055a0 <TIM_SlaveTimer_SetConfig>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d009      	beq.n	800545a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e018      	b.n	800548c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005468:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005478:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr

080054a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr

080054ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr

080054dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a29      	ldr	r2, [pc, #164]	; (8005594 <TIM_Base_SetConfig+0xb8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00b      	beq.n	800550c <TIM_Base_SetConfig+0x30>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fa:	d007      	beq.n	800550c <TIM_Base_SetConfig+0x30>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a26      	ldr	r2, [pc, #152]	; (8005598 <TIM_Base_SetConfig+0xbc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d003      	beq.n	800550c <TIM_Base_SetConfig+0x30>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a25      	ldr	r2, [pc, #148]	; (800559c <TIM_Base_SetConfig+0xc0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d108      	bne.n	800551e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a1c      	ldr	r2, [pc, #112]	; (8005594 <TIM_Base_SetConfig+0xb8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00b      	beq.n	800553e <TIM_Base_SetConfig+0x62>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552c:	d007      	beq.n	800553e <TIM_Base_SetConfig+0x62>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a19      	ldr	r2, [pc, #100]	; (8005598 <TIM_Base_SetConfig+0xbc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <TIM_Base_SetConfig+0x62>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a18      	ldr	r2, [pc, #96]	; (800559c <TIM_Base_SetConfig+0xc0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d108      	bne.n	8005550 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a07      	ldr	r2, [pc, #28]	; (8005594 <TIM_Base_SetConfig+0xb8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d103      	bne.n	8005584 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	615a      	str	r2, [r3, #20]
}
 800558a:	bf00      	nop
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800

080055a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f023 0307 	bic.w	r3, r3, #7
 80055ca:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b70      	cmp	r3, #112	; 0x70
 80055e4:	d01a      	beq.n	800561c <TIM_SlaveTimer_SetConfig+0x7c>
 80055e6:	2b70      	cmp	r3, #112	; 0x70
 80055e8:	d860      	bhi.n	80056ac <TIM_SlaveTimer_SetConfig+0x10c>
 80055ea:	2b60      	cmp	r3, #96	; 0x60
 80055ec:	d054      	beq.n	8005698 <TIM_SlaveTimer_SetConfig+0xf8>
 80055ee:	2b60      	cmp	r3, #96	; 0x60
 80055f0:	d85c      	bhi.n	80056ac <TIM_SlaveTimer_SetConfig+0x10c>
 80055f2:	2b50      	cmp	r3, #80	; 0x50
 80055f4:	d046      	beq.n	8005684 <TIM_SlaveTimer_SetConfig+0xe4>
 80055f6:	2b50      	cmp	r3, #80	; 0x50
 80055f8:	d858      	bhi.n	80056ac <TIM_SlaveTimer_SetConfig+0x10c>
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d019      	beq.n	8005632 <TIM_SlaveTimer_SetConfig+0x92>
 80055fe:	2b40      	cmp	r3, #64	; 0x40
 8005600:	d854      	bhi.n	80056ac <TIM_SlaveTimer_SetConfig+0x10c>
 8005602:	2b30      	cmp	r3, #48	; 0x30
 8005604:	d054      	beq.n	80056b0 <TIM_SlaveTimer_SetConfig+0x110>
 8005606:	2b30      	cmp	r3, #48	; 0x30
 8005608:	d850      	bhi.n	80056ac <TIM_SlaveTimer_SetConfig+0x10c>
 800560a:	2b20      	cmp	r3, #32
 800560c:	d050      	beq.n	80056b0 <TIM_SlaveTimer_SetConfig+0x110>
 800560e:	2b20      	cmp	r3, #32
 8005610:	d84c      	bhi.n	80056ac <TIM_SlaveTimer_SetConfig+0x10c>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d04c      	beq.n	80056b0 <TIM_SlaveTimer_SetConfig+0x110>
 8005616:	2b10      	cmp	r3, #16
 8005618:	d04a      	beq.n	80056b0 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800561a:	e047      	b.n	80056ac <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	68d9      	ldr	r1, [r3, #12]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f000 f8bd 	bl	80057aa <TIM_ETR_SetConfig>
      break;
 8005630:	e03f      	b.n	80056b2 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b05      	cmp	r3, #5
 8005638:	d101      	bne.n	800563e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e03a      	b.n	80056b4 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6a1a      	ldr	r2, [r3, #32]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0201 	bic.w	r2, r2, #1
 8005654:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005664:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	621a      	str	r2, [r3, #32]
      break;
 8005682:	e016      	b.n	80056b2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	6899      	ldr	r1, [r3, #8]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	461a      	mov	r2, r3
 8005692:	f000 f813 	bl	80056bc <TIM_TI1_ConfigInputStage>
      break;
 8005696:	e00c      	b.n	80056b2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	6899      	ldr	r1, [r3, #8]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	461a      	mov	r2, r3
 80056a6:	f000 f837 	bl	8005718 <TIM_TI2_ConfigInputStage>
      break;
 80056aa:	e002      	b.n	80056b2 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80056ac:	bf00      	nop
 80056ae:	e000      	b.n	80056b2 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80056b0:	bf00      	nop
  }
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f023 0201 	bic.w	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 030a 	bic.w	r3, r3, #10
 80056f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f023 0210 	bic.w	r2, r3, #16
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005742:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	031b      	lsls	r3, r3, #12
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005754:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	621a      	str	r2, [r3, #32]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr

08005776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005776:	b480      	push	{r7}
 8005778:	b085      	sub	sp, #20
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	f043 0307 	orr.w	r3, r3, #7
 8005798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	609a      	str	r2, [r3, #8]
}
 80057a0:	bf00      	nop
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc80      	pop	{r7}
 80057a8:	4770      	bx	lr

080057aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b087      	sub	sp, #28
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	021a      	lsls	r2, r3, #8
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	431a      	orrs	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	609a      	str	r2, [r3, #8]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e046      	b.n	800588e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a16      	ldr	r2, [pc, #88]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00e      	beq.n	8005862 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584c:	d009      	beq.n	8005862 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a12      	ldr	r2, [pc, #72]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d004      	beq.n	8005862 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a10      	ldr	r2, [pc, #64]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d10c      	bne.n	800587c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	4313      	orrs	r3, r2
 8005872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800

080058a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr

080058b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e03f      	b.n	800595a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fc fdae 	bl	8002450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2224      	movs	r2, #36	; 0x24
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800590a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fd03 	bl	8006318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691a      	ldr	r2, [r3, #16]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	695a      	ldr	r2, [r3, #20]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b08a      	sub	sp, #40	; 0x28
 8005966:	af02      	add	r7, sp, #8
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	60b9      	str	r1, [r7, #8]
 800596c:	603b      	str	r3, [r7, #0]
 800596e:	4613      	mov	r3, r2
 8005970:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b20      	cmp	r3, #32
 8005980:	d17c      	bne.n	8005a7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <HAL_UART_Transmit+0x2c>
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e075      	b.n	8005a7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_UART_Transmit+0x3e>
 800599c:	2302      	movs	r3, #2
 800599e:	e06e      	b.n	8005a7e <HAL_UART_Transmit+0x11c>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2221      	movs	r2, #33	; 0x21
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059b6:	f7fd faf3 	bl	8002fa0 <HAL_GetTick>
 80059ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	88fa      	ldrh	r2, [r7, #6]
 80059c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d0:	d108      	bne.n	80059e4 <HAL_UART_Transmit+0x82>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d104      	bne.n	80059e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	e003      	b.n	80059ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80059f4:	e02a      	b.n	8005a4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2200      	movs	r2, #0
 80059fe:	2180      	movs	r1, #128	; 0x80
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 faee 	bl	8005fe2 <UART_WaitOnFlagUntilTimeout>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e036      	b.n	8005a7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10b      	bne.n	8005a2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	3302      	adds	r3, #2
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	e007      	b.n	8005a3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	781a      	ldrb	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1cf      	bne.n	80059f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2140      	movs	r1, #64	; 0x40
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fabe 	bl	8005fe2 <UART_WaitOnFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e006      	b.n	8005a7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	e000      	b.n	8005a7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a7c:	2302      	movs	r3, #2
  }
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3720      	adds	r7, #32
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b08a      	sub	sp, #40	; 0x28
 8005a8a:	af02      	add	r7, sp, #8
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	603b      	str	r3, [r7, #0]
 8005a92:	4613      	mov	r3, r2
 8005a94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	f040 808c 	bne.w	8005bc0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_UART_Receive+0x2e>
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e084      	b.n	8005bc2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d101      	bne.n	8005ac6 <HAL_UART_Receive+0x40>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e07d      	b.n	8005bc2 <HAL_UART_Receive+0x13c>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2222      	movs	r2, #34	; 0x22
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ae2:	f7fd fa5d 	bl	8002fa0 <HAL_GetTick>
 8005ae6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	88fa      	ldrh	r2, [r7, #6]
 8005aec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	88fa      	ldrh	r2, [r7, #6]
 8005af2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afc:	d108      	bne.n	8005b10 <HAL_UART_Receive+0x8a>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d104      	bne.n	8005b10 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	e003      	b.n	8005b18 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005b20:	e043      	b.n	8005baa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2120      	movs	r1, #32
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 fa58 	bl	8005fe2 <UART_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e042      	b.n	8005bc2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10c      	bne.n	8005b5c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	3302      	adds	r3, #2
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	e01f      	b.n	8005b9c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b64:	d007      	beq.n	8005b76 <HAL_UART_Receive+0xf0>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <HAL_UART_Receive+0xfe>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	e008      	b.n	8005b96 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1b6      	bne.n	8005b22 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e000      	b.n	8005bc2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005bc0:	2302      	movs	r3, #2
  }
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d130      	bne.n	8005c46 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_UART_Transmit_IT+0x26>
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e029      	b.n	8005c48 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_UART_Transmit_IT+0x38>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e022      	b.n	8005c48 <HAL_UART_Transmit_IT+0x7e>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	88fa      	ldrh	r2, [r7, #6]
 8005c14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	88fa      	ldrh	r2, [r7, #6]
 8005c1a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2221      	movs	r2, #33	; 0x21
 8005c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c40:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e000      	b.n	8005c48 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005c46:	2302      	movs	r3, #2
  }
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr
	...

08005c54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08a      	sub	sp, #40	; 0x28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10d      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d008      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x52>
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fa90 	bl	80061c4 <UART_Receive_IT>
      return;
 8005ca4:	e17b      	b.n	8005f9e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 80b1 	beq.w	8005e10 <HAL_UART_IRQHandler+0x1bc>
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d105      	bne.n	8005cc4 <HAL_UART_IRQHandler+0x70>
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 80a6 	beq.w	8005e10 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x90>
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	f043 0201 	orr.w	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HAL_UART_IRQHandler+0xb0>
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	f043 0202 	orr.w	r2, r3, #2
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_UART_IRQHandler+0xd0>
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	f043 0204 	orr.w	r2, r3, #4
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00f      	beq.n	8005d4e <HAL_UART_IRQHandler+0xfa>
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <HAL_UART_IRQHandler+0xee>
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f043 0208 	orr.w	r2, r3, #8
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 811e 	beq.w	8005f94 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <HAL_UART_IRQHandler+0x11e>
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fa29 	bl	80061c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	bf14      	ite	ne
 8005d80:	2301      	movne	r3, #1
 8005d82:	2300      	moveq	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <HAL_UART_IRQHandler+0x146>
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d031      	beq.n	8005dfe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f96b 	bl	8006076 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d023      	beq.n	8005df6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	695a      	ldr	r2, [r3, #20]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dbc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d013      	beq.n	8005dee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	4a76      	ldr	r2, [pc, #472]	; (8005fa4 <HAL_UART_IRQHandler+0x350>)
 8005dcc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fd ff5a 	bl	8003c8c <HAL_DMA_Abort_IT>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d016      	beq.n	8005e0c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005de8:	4610      	mov	r0, r2
 8005dea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dec:	e00e      	b.n	8005e0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f8e3 	bl	8005fba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df4:	e00a      	b.n	8005e0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f8df 	bl	8005fba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfc:	e006      	b.n	8005e0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f8db 	bl	8005fba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e0a:	e0c3      	b.n	8005f94 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	bf00      	nop
    return;
 8005e0e:	e0c1      	b.n	8005f94 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	f040 80a1 	bne.w	8005f5c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 809b 	beq.w	8005f5c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 8095 	beq.w	8005f5c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d04e      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005e60:	8a3b      	ldrh	r3, [r7, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 8098 	beq.w	8005f98 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e6c:	8a3a      	ldrh	r2, [r7, #16]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	f080 8092 	bcs.w	8005f98 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8a3a      	ldrh	r2, [r7, #16]
 8005e78:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d02b      	beq.n	8005edc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e92:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695a      	ldr	r2, [r3, #20]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0201 	bic.w	r2, r2, #1
 8005ea2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695a      	ldr	r2, [r3, #20]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0210 	bic.w	r2, r2, #16
 8005ed0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fd fe9e 	bl	8003c18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f86d 	bl	8005fcc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ef2:	e051      	b.n	8005f98 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d047      	beq.n	8005f9c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005f0c:	8a7b      	ldrh	r3, [r7, #18]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d044      	beq.n	8005f9c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f20:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695a      	ldr	r2, [r3, #20]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0201 	bic.w	r2, r2, #1
 8005f30:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0210 	bic.w	r2, r2, #16
 8005f4e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f50:	8a7b      	ldrh	r3, [r7, #18]
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f839 	bl	8005fcc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005f5a:	e01f      	b.n	8005f9c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d008      	beq.n	8005f78 <HAL_UART_IRQHandler+0x324>
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f8c0 	bl	80060f6 <UART_Transmit_IT>
    return;
 8005f76:	e012      	b.n	8005f9e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00d      	beq.n	8005f9e <HAL_UART_IRQHandler+0x34a>
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d008      	beq.n	8005f9e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f901 	bl	8006194 <UART_EndTransmit_IT>
    return;
 8005f92:	e004      	b.n	8005f9e <HAL_UART_IRQHandler+0x34a>
    return;
 8005f94:	bf00      	nop
 8005f96:	e002      	b.n	8005f9e <HAL_UART_IRQHandler+0x34a>
      return;
 8005f98:	bf00      	nop
 8005f9a:	e000      	b.n	8005f9e <HAL_UART_IRQHandler+0x34a>
      return;
 8005f9c:	bf00      	nop
  }
}
 8005f9e:	3728      	adds	r7, #40	; 0x28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	080060cf 	.word	0x080060cf

08005fa8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr

08005fba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr

08005fcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bc80      	pop	{r7}
 8005fe0:	4770      	bx	lr

08005fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff2:	e02c      	b.n	800604e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	d028      	beq.n	800604e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d007      	beq.n	8006012 <UART_WaitOnFlagUntilTimeout+0x30>
 8006002:	f7fc ffcd 	bl	8002fa0 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	429a      	cmp	r2, r3
 8006010:	d21d      	bcs.n	800604e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006020:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695a      	ldr	r2, [r3, #20]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0201 	bic.w	r2, r2, #1
 8006030:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e00f      	b.n	800606e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4013      	ands	r3, r2
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	429a      	cmp	r2, r3
 800605c:	bf0c      	ite	eq
 800605e:	2301      	moveq	r3, #1
 8006060:	2300      	movne	r3, #0
 8006062:	b2db      	uxtb	r3, r3
 8006064:	461a      	mov	r2, r3
 8006066:	79fb      	ldrb	r3, [r7, #7]
 8006068:	429a      	cmp	r2, r3
 800606a:	d0c3      	beq.n	8005ff4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800608c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695a      	ldr	r2, [r3, #20]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d107      	bne.n	80060b6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0210 	bic.w	r2, r2, #16
 80060b4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr

080060ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f7ff ff66 	bl	8005fba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ee:	bf00      	nop
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b085      	sub	sp, #20
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b21      	cmp	r3, #33	; 0x21
 8006108:	d13e      	bne.n	8006188 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006112:	d114      	bne.n	800613e <UART_Transmit_IT+0x48>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d110      	bne.n	800613e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006130:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	1c9a      	adds	r2, r3, #2
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	621a      	str	r2, [r3, #32]
 800613c:	e008      	b.n	8006150 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	1c59      	adds	r1, r3, #1
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6211      	str	r1, [r2, #32]
 8006148:	781a      	ldrb	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b01      	subs	r3, #1
 8006158:	b29b      	uxth	r3, r3
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4619      	mov	r1, r3
 800615e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10f      	bne.n	8006184 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006172:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006182:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	e000      	b.n	800618a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006188:	2302      	movs	r3, #2
  }
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr

08006194 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7fb fdff 	bl	8001db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b22      	cmp	r3, #34	; 0x22
 80061d6:	f040 8099 	bne.w	800630c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e2:	d117      	bne.n	8006214 <UART_Receive_IT+0x50>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d113      	bne.n	8006214 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006202:	b29a      	uxth	r2, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	1c9a      	adds	r2, r3, #2
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	629a      	str	r2, [r3, #40]	; 0x28
 8006212:	e026      	b.n	8006262 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006226:	d007      	beq.n	8006238 <UART_Receive_IT+0x74>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10a      	bne.n	8006246 <UART_Receive_IT+0x82>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d106      	bne.n	8006246 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	b2da      	uxtb	r2, r3
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e008      	b.n	8006258 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006252:	b2da      	uxtb	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006266:	b29b      	uxth	r3, r3
 8006268:	3b01      	subs	r3, #1
 800626a:	b29b      	uxth	r3, r3
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	4619      	mov	r1, r3
 8006270:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006272:	2b00      	cmp	r3, #0
 8006274:	d148      	bne.n	8006308 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0220 	bic.w	r2, r2, #32
 8006284:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006294:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695a      	ldr	r2, [r3, #20]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d123      	bne.n	80062fe <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0210 	bic.w	r2, r2, #16
 80062ca:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	2b10      	cmp	r3, #16
 80062d8:	d10a      	bne.n	80062f0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	60fb      	str	r3, [r7, #12]
 80062ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fe68 	bl	8005fcc <HAL_UARTEx_RxEventCallback>
 80062fc:	e002      	b.n	8006304 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff fe52 	bl	8005fa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	e002      	b.n	800630e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	e000      	b.n	800630e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800630c:	2302      	movs	r3, #2
  }
}
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	4313      	orrs	r3, r2
 8006346:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006352:	f023 030c 	bic.w	r3, r3, #12
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	430b      	orrs	r3, r1
 800635e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a2c      	ldr	r2, [pc, #176]	; (800642c <UART_SetConfig+0x114>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d103      	bne.n	8006388 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006380:	f7fe fb84 	bl	8004a8c <HAL_RCC_GetPCLK2Freq>
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	e002      	b.n	800638e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006388:	f7fe fb6c 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 800638c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	009a      	lsls	r2, r3, #2
 8006398:	441a      	add	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a4:	4a22      	ldr	r2, [pc, #136]	; (8006430 <UART_SetConfig+0x118>)
 80063a6:	fba2 2303 	umull	r2, r3, r2, r3
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	0119      	lsls	r1, r3, #4
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4613      	mov	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	009a      	lsls	r2, r3, #2
 80063b8:	441a      	add	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80063c4:	4b1a      	ldr	r3, [pc, #104]	; (8006430 <UART_SetConfig+0x118>)
 80063c6:	fba3 0302 	umull	r0, r3, r3, r2
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	2064      	movs	r0, #100	; 0x64
 80063ce:	fb00 f303 	mul.w	r3, r0, r3
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	3332      	adds	r3, #50	; 0x32
 80063d8:	4a15      	ldr	r2, [pc, #84]	; (8006430 <UART_SetConfig+0x118>)
 80063da:	fba2 2303 	umull	r2, r3, r2, r3
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063e4:	4419      	add	r1, r3
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009a      	lsls	r2, r3, #2
 80063f0:	441a      	add	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80063fc:	4b0c      	ldr	r3, [pc, #48]	; (8006430 <UART_SetConfig+0x118>)
 80063fe:	fba3 0302 	umull	r0, r3, r3, r2
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	2064      	movs	r0, #100	; 0x64
 8006406:	fb00 f303 	mul.w	r3, r0, r3
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	3332      	adds	r3, #50	; 0x32
 8006410:	4a07      	ldr	r2, [pc, #28]	; (8006430 <UART_SetConfig+0x118>)
 8006412:	fba2 2303 	umull	r2, r3, r2, r3
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	f003 020f 	and.w	r2, r3, #15
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	440a      	add	r2, r1
 8006422:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40013800 	.word	0x40013800
 8006430:	51eb851f 	.word	0x51eb851f

08006434 <SentError>:
/*
 * Эта функция нужна для отладки кода. При вызове
 * отправляет по UART сообщение об ошибке с путем к файлу
 * и номером строки, где данная функция была вызвана
 */
void SentError(uint8_t *file, uint32_t line) {
 8006434:	b590      	push	{r4, r7, lr}
 8006436:	b0b5      	sub	sp, #212	; 0xd4
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
	char buf[200] = { 0 };
 800643e:	2300      	movs	r3, #0
 8006440:	60bb      	str	r3, [r7, #8]
 8006442:	f107 030c 	add.w	r3, r7, #12
 8006446:	22c4      	movs	r2, #196	; 0xc4
 8006448:	2100      	movs	r1, #0
 800644a:	4618      	mov	r0, r3
 800644c:	f003 f9b3 	bl	80097b6 <memset>
	sprintf(buf, "\r Exception: Wrong parameters value: file %s on line %d\r\n", file, (int) line);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	f107 0008 	add.w	r0, r7, #8
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	4911      	ldr	r1, [pc, #68]	; (80064a0 <SentError+0x6c>)
 800645a:	f004 f933 	bl	800a6c4 <siprintf>
	while (HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf),10 * strlen(buf)) != HAL_OK);
 800645e:	bf00      	nop
 8006460:	f107 0308 	add.w	r3, r7, #8
 8006464:	4618      	mov	r0, r3
 8006466:	f7f9 fe73 	bl	8000150 <strlen>
 800646a:	4603      	mov	r3, r0
 800646c:	b29c      	uxth	r4, r3
 800646e:	f107 0308 	add.w	r3, r7, #8
 8006472:	4618      	mov	r0, r3
 8006474:	f7f9 fe6c 	bl	8000150 <strlen>
 8006478:	4602      	mov	r2, r0
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	f107 0108 	add.w	r1, r7, #8
 8006486:	4622      	mov	r2, r4
 8006488:	4806      	ldr	r0, [pc, #24]	; (80064a4 <SentError+0x70>)
 800648a:	f7ff fa6a 	bl	8005962 <HAL_UART_Transmit>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e5      	bne.n	8006460 <SentError+0x2c>
	HAL_NVIC_SystemReset();
 8006494:	f7fd fb61 	bl	8003b5a <HAL_NVIC_SystemReset>
}
 8006498:	bf00      	nop
 800649a:	37d4      	adds	r7, #212	; 0xd4
 800649c:	46bd      	mov	sp, r7
 800649e:	bd90      	pop	{r4, r7, pc}
 80064a0:	0800e12c 	.word	0x0800e12c
 80064a4:	20003b18 	.word	0x20003b18

080064a8 <SentResultActionResponse>:

void SentResultActionResponse(struct TypeStruct typeStruct, char err[255], bool stat) {
 80064a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064aa:	b08b      	sub	sp, #44	; 0x2c
 80064ac:	af04      	add	r7, sp, #16
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4613      	mov	r3, r2
 80064b4:	71fb      	strb	r3, [r7, #7]
 80064b6:	466b      	mov	r3, sp
 80064b8:	461e      	mov	r6, r3
	char resultState[19 + strlen(err)];
 80064ba:	68b8      	ldr	r0, [r7, #8]
 80064bc:	f7f9 fe48 	bl	8000150 <strlen>
 80064c0:	4603      	mov	r3, r0
 80064c2:	f103 0413 	add.w	r4, r3, #19
 80064c6:	4623      	mov	r3, r4
 80064c8:	3b01      	subs	r3, #1
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	4620      	mov	r0, r4
 80064ce:	f04f 0100 	mov.w	r1, #0
 80064d2:	f04f 0200 	mov.w	r2, #0
 80064d6:	f04f 0300 	mov.w	r3, #0
 80064da:	00cb      	lsls	r3, r1, #3
 80064dc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80064e0:	00c2      	lsls	r2, r0, #3
 80064e2:	4620      	mov	r0, r4
 80064e4:	f04f 0100 	mov.w	r1, #0
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	00cb      	lsls	r3, r1, #3
 80064f2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80064f6:	00c2      	lsls	r2, r0, #3
 80064f8:	1de3      	adds	r3, r4, #7
 80064fa:	08db      	lsrs	r3, r3, #3
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	ebad 0d03 	sub.w	sp, sp, r3
 8006502:	ab04      	add	r3, sp, #16
 8006504:	3300      	adds	r3, #0
 8006506:	613b      	str	r3, [r7, #16]

	sprintf(
 8006508:	6938      	ldr	r0, [r7, #16]
	        resultState,
	        "R_%c%c_%c%c*ERR=%s-STAT=%d",
	         typeStruct.type[0],
 800650a:	7b3b      	ldrb	r3, [r7, #12]
	sprintf(
 800650c:	461c      	mov	r4, r3
	         typeStruct.type[1],
 800650e:	7b7b      	ldrb	r3, [r7, #13]
	sprintf(
 8006510:	461d      	mov	r5, r3
	         typeStruct.subType[0],
 8006512:	7bbb      	ldrb	r3, [r7, #14]
	sprintf(
 8006514:	461a      	mov	r2, r3
	         typeStruct.subType[1],
 8006516:	7bfb      	ldrb	r3, [r7, #15]
	sprintf(
 8006518:	4619      	mov	r1, r3
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	9303      	str	r3, [sp, #12]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	9302      	str	r3, [sp, #8]
 8006522:	9101      	str	r1, [sp, #4]
 8006524:	9200      	str	r2, [sp, #0]
 8006526:	462b      	mov	r3, r5
 8006528:	4622      	mov	r2, r4
 800652a:	4910      	ldr	r1, [pc, #64]	; (800656c <SentResultActionResponse+0xc4>)
 800652c:	f004 f8ca 	bl	800a6c4 <siprintf>
	         err,
	         stat);

	while (
 8006530:	bf00      	nop
			HAL_UART_Transmit(&huart1, (uint8_t*) resultState, strlen(resultState), 10 * strlen(resultState)
 8006532:	693c      	ldr	r4, [r7, #16]
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	4618      	mov	r0, r3
 8006538:	f7f9 fe0a 	bl	8000150 <strlen>
 800653c:	4603      	mov	r3, r0
 800653e:	b29d      	uxth	r5, r3
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4618      	mov	r0, r3
 8006544:	f7f9 fe04 	bl	8000150 <strlen>
 8006548:	4602      	mov	r2, r0
 800654a:	4613      	mov	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	462a      	mov	r2, r5
 8006554:	4621      	mov	r1, r4
 8006556:	4806      	ldr	r0, [pc, #24]	; (8006570 <SentResultActionResponse+0xc8>)
 8006558:	f7ff fa03 	bl	8005962 <HAL_UART_Transmit>
 800655c:	4603      	mov	r3, r0
	while (
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e7      	bne.n	8006532 <SentResultActionResponse+0x8a>
 8006562:	46b5      	mov	sp, r6
	) != HAL_OK);
}
 8006564:	bf00      	nop
 8006566:	371c      	adds	r7, #28
 8006568:	46bd      	mov	sp, r7
 800656a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800656c:	0800e168 	.word	0x0800e168
 8006570:	20003b18 	.word	0x20003b18

08006574 <SendResponseMeasure>:

// отправляем команду об измерении
/// id - айди операции
/// x - измерения по х (длина волны/время)
/// y - измерения по y (счет/токовый сигнал)
void SendResponseMeasure(uint16_t id, uint16_t x, uint32_t y){
 8006574:	b590      	push	{r4, r7, lr}
 8006576:	b085      	sub	sp, #20
 8006578:	af02      	add	r7, sp, #8
 800657a:	4603      	mov	r3, r0
 800657c:	603a      	str	r2, [r7, #0]
 800657e:	80fb      	strh	r3, [r7, #6]
 8006580:	460b      	mov	r3, r1
 8006582:	80bb      	strh	r3, [r7, #4]
    static char measureResult[20];
    sprintf(measureResult, "M_%d-%d-%d", id, x, y);
 8006584:	88fa      	ldrh	r2, [r7, #6]
 8006586:	88b9      	ldrh	r1, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	460b      	mov	r3, r1
 800658e:	490d      	ldr	r1, [pc, #52]	; (80065c4 <SendResponseMeasure+0x50>)
 8006590:	480d      	ldr	r0, [pc, #52]	; (80065c8 <SendResponseMeasure+0x54>)
 8006592:	f004 f897 	bl	800a6c4 <siprintf>
    HAL_UART_Transmit(&huart1, measureResult, strlen(measureResult), strlen(measureResult) * 10);
 8006596:	480c      	ldr	r0, [pc, #48]	; (80065c8 <SendResponseMeasure+0x54>)
 8006598:	f7f9 fdda 	bl	8000150 <strlen>
 800659c:	4603      	mov	r3, r0
 800659e:	b29c      	uxth	r4, r3
 80065a0:	4809      	ldr	r0, [pc, #36]	; (80065c8 <SendResponseMeasure+0x54>)
 80065a2:	f7f9 fdd5 	bl	8000150 <strlen>
 80065a6:	4602      	mov	r2, r0
 80065a8:	4613      	mov	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	4622      	mov	r2, r4
 80065b2:	4905      	ldr	r1, [pc, #20]	; (80065c8 <SendResponseMeasure+0x54>)
 80065b4:	4805      	ldr	r0, [pc, #20]	; (80065cc <SendResponseMeasure+0x58>)
 80065b6:	f7ff f9d4 	bl	8005962 <HAL_UART_Transmit>
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd90      	pop	{r4, r7, pc}
 80065c2:	bf00      	nop
 80065c4:	0800e184 	.word	0x0800e184
 80065c8:	20000210 	.word	0x20000210
 80065cc:	20003b18 	.word	0x20003b18

080065d0 <SendResponseMeasureIT>:

// отправляем команду об измерении
/// id - айди операции
/// x - измерения по х (длина волны/время)
/// y - измерения по y (счет/токовый сигнал)
void SendResponseMeasureIT(uint16_t id, uint16_t x, uint32_t y){
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	4603      	mov	r3, r0
 80065d8:	603a      	str	r2, [r7, #0]
 80065da:	80fb      	strh	r3, [r7, #6]
 80065dc:	460b      	mov	r3, r1
 80065de:	80bb      	strh	r3, [r7, #4]
    static char measureResult[20];
    sprintf(measureResult, "M_%d-%d-%d", id, x, y);
 80065e0:	88fa      	ldrh	r2, [r7, #6]
 80065e2:	88b9      	ldrh	r1, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	460b      	mov	r3, r1
 80065ea:	4909      	ldr	r1, [pc, #36]	; (8006610 <SendResponseMeasureIT+0x40>)
 80065ec:	4809      	ldr	r0, [pc, #36]	; (8006614 <SendResponseMeasureIT+0x44>)
 80065ee:	f004 f869 	bl	800a6c4 <siprintf>
    HAL_UART_Transmit_IT(&huart1, measureResult, strlen(measureResult));
 80065f2:	4808      	ldr	r0, [pc, #32]	; (8006614 <SendResponseMeasureIT+0x44>)
 80065f4:	f7f9 fdac 	bl	8000150 <strlen>
 80065f8:	4603      	mov	r3, r0
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	4905      	ldr	r1, [pc, #20]	; (8006614 <SendResponseMeasureIT+0x44>)
 8006600:	4805      	ldr	r0, [pc, #20]	; (8006618 <SendResponseMeasureIT+0x48>)
 8006602:	f7ff fae2 	bl	8005bca <HAL_UART_Transmit_IT>
}
 8006606:	bf00      	nop
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	0800e184 	.word	0x0800e184
 8006614:	20000224 	.word	0x20000224
 8006618:	20003b18 	.word	0x20003b18

0800661c <SendResponseStop>:

// отправляем команду об остановке измерения окончательной
void SendResponseStop(uint16_t id){
 800661c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	80fb      	strh	r3, [r7, #6]
 8006626:	466b      	mov	r3, sp
 8006628:	461e      	mov	r6, r3

    char resultState[snprintf( NULL, 0, "%d", id ) + 7];
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	4a24      	ldr	r2, [pc, #144]	; (80066c0 <SendResponseStop+0xa4>)
 800662e:	2100      	movs	r1, #0
 8006630:	2000      	movs	r0, #0
 8006632:	f004 f813 	bl	800a65c <sniprintf>
 8006636:	4603      	mov	r3, r0
 8006638:	1ddc      	adds	r4, r3, #7
 800663a:	1e63      	subs	r3, r4, #1
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	4623      	mov	r3, r4
 8006640:	4618      	mov	r0, r3
 8006642:	f04f 0100 	mov.w	r1, #0
 8006646:	f04f 0200 	mov.w	r2, #0
 800664a:	f04f 0300 	mov.w	r3, #0
 800664e:	00cb      	lsls	r3, r1, #3
 8006650:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006654:	00c2      	lsls	r2, r0, #3
 8006656:	4623      	mov	r3, r4
 8006658:	4618      	mov	r0, r3
 800665a:	f04f 0100 	mov.w	r1, #0
 800665e:	f04f 0200 	mov.w	r2, #0
 8006662:	f04f 0300 	mov.w	r3, #0
 8006666:	00cb      	lsls	r3, r1, #3
 8006668:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800666c:	00c2      	lsls	r2, r0, #3
 800666e:	4623      	mov	r3, r4
 8006670:	3307      	adds	r3, #7
 8006672:	08db      	lsrs	r3, r3, #3
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	ebad 0d03 	sub.w	sp, sp, r3
 800667a:	466b      	mov	r3, sp
 800667c:	3300      	adds	r3, #0
 800667e:	60bb      	str	r3, [r7, #8]

    sprintf(resultState, "M_STOP_%d", id);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	88fa      	ldrh	r2, [r7, #6]
 8006684:	490f      	ldr	r1, [pc, #60]	; (80066c4 <SendResponseStop+0xa8>)
 8006686:	4618      	mov	r0, r3
 8006688:	f004 f81c 	bl	800a6c4 <siprintf>

    HAL_UART_Transmit(&huart1, (uint8_t*) resultState, strlen(resultState),10 * strlen(resultState));
 800668c:	68bc      	ldr	r4, [r7, #8]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	4618      	mov	r0, r3
 8006692:	f7f9 fd5d 	bl	8000150 <strlen>
 8006696:	4603      	mov	r3, r0
 8006698:	b29d      	uxth	r5, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	4618      	mov	r0, r3
 800669e:	f7f9 fd57 	bl	8000150 <strlen>
 80066a2:	4602      	mov	r2, r0
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	462a      	mov	r2, r5
 80066ae:	4621      	mov	r1, r4
 80066b0:	4805      	ldr	r0, [pc, #20]	; (80066c8 <SendResponseStop+0xac>)
 80066b2:	f7ff f956 	bl	8005962 <HAL_UART_Transmit>
 80066b6:	46b5      	mov	sp, r6
}
 80066b8:	bf00      	nop
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c0:	0800e190 	.word	0x0800e190
 80066c4:	0800e194 	.word	0x0800e194
 80066c8:	20003b18 	.word	0x20003b18

080066cc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066d2:	f3ef 8305 	mrs	r3, IPSR
 80066d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80066d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10f      	bne.n	80066fe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066de:	f3ef 8310 	mrs	r3, PRIMASK
 80066e2:	607b      	str	r3, [r7, #4]
  return(result);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d109      	bne.n	80066fe <osKernelInitialize+0x32>
 80066ea:	4b10      	ldr	r3, [pc, #64]	; (800672c <osKernelInitialize+0x60>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d109      	bne.n	8006706 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066f2:	f3ef 8311 	mrs	r3, BASEPRI
 80066f6:	603b      	str	r3, [r7, #0]
  return(result);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80066fe:	f06f 0305 	mvn.w	r3, #5
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	e00c      	b.n	8006720 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006706:	4b09      	ldr	r3, [pc, #36]	; (800672c <osKernelInitialize+0x60>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d105      	bne.n	800671a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800670e:	4b07      	ldr	r3, [pc, #28]	; (800672c <osKernelInitialize+0x60>)
 8006710:	2201      	movs	r2, #1
 8006712:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	e002      	b.n	8006720 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800671a:	f04f 33ff 	mov.w	r3, #4294967295
 800671e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006720:	68fb      	ldr	r3, [r7, #12]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr
 800672c:	20000238 	.word	0x20000238

08006730 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006736:	f3ef 8305 	mrs	r3, IPSR
 800673a:	60bb      	str	r3, [r7, #8]
  return(result);
 800673c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10f      	bne.n	8006762 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006742:	f3ef 8310 	mrs	r3, PRIMASK
 8006746:	607b      	str	r3, [r7, #4]
  return(result);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <osKernelStart+0x32>
 800674e:	4b11      	ldr	r3, [pc, #68]	; (8006794 <osKernelStart+0x64>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d109      	bne.n	800676a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006756:	f3ef 8311 	mrs	r3, BASEPRI
 800675a:	603b      	str	r3, [r7, #0]
  return(result);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006762:	f06f 0305 	mvn.w	r3, #5
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	e00e      	b.n	8006788 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800676a:	4b0a      	ldr	r3, [pc, #40]	; (8006794 <osKernelStart+0x64>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d107      	bne.n	8006782 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006772:	4b08      	ldr	r3, [pc, #32]	; (8006794 <osKernelStart+0x64>)
 8006774:	2202      	movs	r2, #2
 8006776:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006778:	f001 faa8 	bl	8007ccc <vTaskStartScheduler>
      stat = osOK;
 800677c:	2300      	movs	r3, #0
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	e002      	b.n	8006788 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006782:	f04f 33ff 	mov.w	r3, #4294967295
 8006786:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006788:	68fb      	ldr	r3, [r7, #12]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20000238 	.word	0x20000238

08006798 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006798:	b580      	push	{r7, lr}
 800679a:	b092      	sub	sp, #72	; 0x48
 800679c:	af04      	add	r7, sp, #16
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80067a4:	2300      	movs	r3, #0
 80067a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067a8:	f3ef 8305 	mrs	r3, IPSR
 80067ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f040 8094 	bne.w	80068de <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067b6:	f3ef 8310 	mrs	r3, PRIMASK
 80067ba:	623b      	str	r3, [r7, #32]
  return(result);
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f040 808d 	bne.w	80068de <osThreadNew+0x146>
 80067c4:	4b48      	ldr	r3, [pc, #288]	; (80068e8 <osThreadNew+0x150>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d106      	bne.n	80067da <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067cc:	f3ef 8311 	mrs	r3, BASEPRI
 80067d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f040 8082 	bne.w	80068de <osThreadNew+0x146>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d07e      	beq.n	80068de <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80067e0:	2380      	movs	r3, #128	; 0x80
 80067e2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80067e4:	2318      	movs	r3, #24
 80067e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80067e8:	2300      	movs	r3, #0
 80067ea:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80067ec:	f107 031b 	add.w	r3, r7, #27
 80067f0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295
 80067f6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d045      	beq.n	800688a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <osThreadNew+0x74>
        name = attr->name;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <osThreadNew+0x9a>
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	2b38      	cmp	r3, #56	; 0x38
 8006824:	d805      	bhi.n	8006832 <osThreadNew+0x9a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <osThreadNew+0x9e>
        return (NULL);
 8006832:	2300      	movs	r3, #0
 8006834:	e054      	b.n	80068e0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	089b      	lsrs	r3, r3, #2
 8006844:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00e      	beq.n	800686c <osThreadNew+0xd4>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	2bbb      	cmp	r3, #187	; 0xbb
 8006854:	d90a      	bls.n	800686c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800685a:	2b00      	cmp	r3, #0
 800685c:	d006      	beq.n	800686c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <osThreadNew+0xd4>
        mem = 1;
 8006866:	2301      	movs	r3, #1
 8006868:	62bb      	str	r3, [r7, #40]	; 0x28
 800686a:	e010      	b.n	800688e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10c      	bne.n	800688e <osThreadNew+0xf6>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d108      	bne.n	800688e <osThreadNew+0xf6>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d104      	bne.n	800688e <osThreadNew+0xf6>
          mem = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28
 8006888:	e001      	b.n	800688e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	2b01      	cmp	r3, #1
 8006892:	d110      	bne.n	80068b6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800689c:	9202      	str	r2, [sp, #8]
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f001 f82a 	bl	8007904 <xTaskCreateStatic>
 80068b0:	4603      	mov	r3, r0
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	e013      	b.n	80068de <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d110      	bne.n	80068de <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	b29a      	uxth	r2, r3
 80068c0:	f107 0314 	add.w	r3, r7, #20
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f001 f874 	bl	80079bc <xTaskCreate>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d001      	beq.n	80068de <osThreadNew+0x146>
          hTask = NULL;
 80068da:	2300      	movs	r3, #0
 80068dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80068de:	697b      	ldr	r3, [r7, #20]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3738      	adds	r7, #56	; 0x38
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20000238 	.word	0x20000238

080068ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068f4:	f3ef 8305 	mrs	r3, IPSR
 80068f8:	613b      	str	r3, [r7, #16]
  return(result);
 80068fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10f      	bne.n	8006920 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006900:	f3ef 8310 	mrs	r3, PRIMASK
 8006904:	60fb      	str	r3, [r7, #12]
  return(result);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d109      	bne.n	8006920 <osDelay+0x34>
 800690c:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <osDelay+0x58>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d109      	bne.n	8006928 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006914:	f3ef 8311 	mrs	r3, BASEPRI
 8006918:	60bb      	str	r3, [r7, #8]
  return(result);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <osDelay+0x3c>
    stat = osErrorISR;
 8006920:	f06f 0305 	mvn.w	r3, #5
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	e007      	b.n	8006938 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f001 f996 	bl	8007c64 <vTaskDelay>
    }
  }

  return (stat);
 8006938:	697b      	ldr	r3, [r7, #20]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000238 	.word	0x20000238

08006948 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b08c      	sub	sp, #48	; 0x30
 800694c:	af02      	add	r7, sp, #8
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006954:	2300      	movs	r3, #0
 8006956:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006958:	f3ef 8305 	mrs	r3, IPSR
 800695c:	61bb      	str	r3, [r7, #24]
  return(result);
 800695e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006960:	2b00      	cmp	r3, #0
 8006962:	f040 8086 	bne.w	8006a72 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006966:	f3ef 8310 	mrs	r3, PRIMASK
 800696a:	617b      	str	r3, [r7, #20]
  return(result);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d17f      	bne.n	8006a72 <osSemaphoreNew+0x12a>
 8006972:	4b42      	ldr	r3, [pc, #264]	; (8006a7c <osSemaphoreNew+0x134>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b02      	cmp	r3, #2
 8006978:	d105      	bne.n	8006986 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800697a:	f3ef 8311 	mrs	r3, BASEPRI
 800697e:	613b      	str	r3, [r7, #16]
  return(result);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d175      	bne.n	8006a72 <osSemaphoreNew+0x12a>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d072      	beq.n	8006a72 <osSemaphoreNew+0x12a>
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	429a      	cmp	r2, r3
 8006992:	d86e      	bhi.n	8006a72 <osSemaphoreNew+0x12a>
    mem = -1;
 8006994:	f04f 33ff 	mov.w	r3, #4294967295
 8006998:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d015      	beq.n	80069cc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d006      	beq.n	80069b6 <osSemaphoreNew+0x6e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	2b4f      	cmp	r3, #79	; 0x4f
 80069ae:	d902      	bls.n	80069b6 <osSemaphoreNew+0x6e>
        mem = 1;
 80069b0:	2301      	movs	r3, #1
 80069b2:	623b      	str	r3, [r7, #32]
 80069b4:	e00c      	b.n	80069d0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d108      	bne.n	80069d0 <osSemaphoreNew+0x88>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <osSemaphoreNew+0x88>
          mem = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	623b      	str	r3, [r7, #32]
 80069ca:	e001      	b.n	80069d0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d6:	d04c      	beq.n	8006a72 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d128      	bne.n	8006a30 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d10a      	bne.n	80069fa <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2203      	movs	r2, #3
 80069ea:	9200      	str	r2, [sp, #0]
 80069ec:	2200      	movs	r2, #0
 80069ee:	2100      	movs	r1, #0
 80069f0:	2001      	movs	r0, #1
 80069f2:	f000 fa15 	bl	8006e20 <xQueueGenericCreateStatic>
 80069f6:	6278      	str	r0, [r7, #36]	; 0x24
 80069f8:	e005      	b.n	8006a06 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80069fa:	2203      	movs	r2, #3
 80069fc:	2100      	movs	r1, #0
 80069fe:	2001      	movs	r0, #1
 8006a00:	f000 fa85 	bl	8006f0e <xQueueGenericCreate>
 8006a04:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d022      	beq.n	8006a52 <osSemaphoreNew+0x10a>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01f      	beq.n	8006a52 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006a12:	2300      	movs	r3, #0
 8006a14:	2200      	movs	r2, #0
 8006a16:	2100      	movs	r1, #0
 8006a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a1a:	f000 fb43 	bl	80070a4 <xQueueGenericSend>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d016      	beq.n	8006a52 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a26:	f000 fdb3 	bl	8007590 <vQueueDelete>
            hSemaphore = NULL;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2e:	e010      	b.n	8006a52 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d108      	bne.n	8006a48 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 fac6 	bl	8006fd0 <xQueueCreateCountingSemaphoreStatic>
 8006a44:	6278      	str	r0, [r7, #36]	; 0x24
 8006a46:	e004      	b.n	8006a52 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006a48:	68b9      	ldr	r1, [r7, #8]
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 faf7 	bl	800703e <xQueueCreateCountingSemaphore>
 8006a50:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00c      	beq.n	8006a72 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <osSemaphoreNew+0x11e>
          name = attr->name;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	e001      	b.n	8006a6a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006a6a:	69f9      	ldr	r1, [r7, #28]
 8006a6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a6e:	f000 fec3 	bl	80077f8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3728      	adds	r7, #40	; 0x28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20000238 	.word	0x20000238

08006a80 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08c      	sub	sp, #48	; 0x30
 8006a84:	af02      	add	r7, sp, #8
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a90:	f3ef 8305 	mrs	r3, IPSR
 8006a94:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a96:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d16f      	bne.n	8006b7c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa0:	617b      	str	r3, [r7, #20]
  return(result);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d169      	bne.n	8006b7c <osMessageQueueNew+0xfc>
 8006aa8:	4b37      	ldr	r3, [pc, #220]	; (8006b88 <osMessageQueueNew+0x108>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d105      	bne.n	8006abc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ab0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ab4:	613b      	str	r3, [r7, #16]
  return(result);
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d15f      	bne.n	8006b7c <osMessageQueueNew+0xfc>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d05c      	beq.n	8006b7c <osMessageQueueNew+0xfc>
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d059      	beq.n	8006b7c <osMessageQueueNew+0xfc>
    mem = -1;
 8006ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8006acc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d029      	beq.n	8006b28 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d012      	beq.n	8006b02 <osMessageQueueNew+0x82>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	2b4f      	cmp	r3, #79	; 0x4f
 8006ae2:	d90e      	bls.n	8006b02 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	695a      	ldr	r2, [r3, #20]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	68b9      	ldr	r1, [r7, #8]
 8006af4:	fb01 f303 	mul.w	r3, r1, r3
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d302      	bcc.n	8006b02 <osMessageQueueNew+0x82>
        mem = 1;
 8006afc:	2301      	movs	r3, #1
 8006afe:	623b      	str	r3, [r7, #32]
 8006b00:	e014      	b.n	8006b2c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d110      	bne.n	8006b2c <osMessageQueueNew+0xac>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10c      	bne.n	8006b2c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d108      	bne.n	8006b2c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d104      	bne.n	8006b2c <osMessageQueueNew+0xac>
          mem = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	623b      	str	r3, [r7, #32]
 8006b26:	e001      	b.n	8006b2c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d10b      	bne.n	8006b4a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	9100      	str	r1, [sp, #0]
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 f96d 	bl	8006e20 <xQueueGenericCreateStatic>
 8006b46:	6278      	str	r0, [r7, #36]	; 0x24
 8006b48:	e008      	b.n	8006b5c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d105      	bne.n	8006b5c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006b50:	2200      	movs	r2, #0
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f9da 	bl	8006f0e <xQueueGenericCreate>
 8006b5a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00c      	beq.n	8006b7c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	61fb      	str	r3, [r7, #28]
 8006b6e:	e001      	b.n	8006b74 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006b74:	69f9      	ldr	r1, [r7, #28]
 8006b76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b78:	f000 fe3e 	bl	80077f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3728      	adds	r7, #40	; 0x28
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000238 	.word	0x20000238

08006b8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4a06      	ldr	r2, [pc, #24]	; (8006bb4 <vApplicationGetIdleTaskMemory+0x28>)
 8006b9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	4a05      	ldr	r2, [pc, #20]	; (8006bb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006ba2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2280      	movs	r2, #128	; 0x80
 8006ba8:	601a      	str	r2, [r3, #0]
}
 8006baa:	bf00      	nop
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bc80      	pop	{r7}
 8006bb2:	4770      	bx	lr
 8006bb4:	2000023c 	.word	0x2000023c
 8006bb8:	200002f8 	.word	0x200002f8

08006bbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4a07      	ldr	r2, [pc, #28]	; (8006be8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006bcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	4a06      	ldr	r2, [pc, #24]	; (8006bec <vApplicationGetTimerTaskMemory+0x30>)
 8006bd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bda:	601a      	str	r2, [r3, #0]
}
 8006bdc:	bf00      	nop
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	200004f8 	.word	0x200004f8
 8006bec:	200005b4 	.word	0x200005b4

08006bf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f103 0208 	add.w	r2, r3, #8
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f04f 32ff 	mov.w	r2, #4294967295
 8006c08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f103 0208 	add.w	r2, r3, #8
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f103 0208 	add.w	r2, r3, #8
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr

08006c2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr

08006c46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c46:	b480      	push	{r7}
 8006c48:	b085      	sub	sp, #20
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	601a      	str	r2, [r3, #0]
}
 8006c82:	bf00      	nop
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bc80      	pop	{r7}
 8006c8a:	4770      	bx	lr

08006c8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca2:	d103      	bne.n	8006cac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	e00c      	b.n	8006cc6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	3308      	adds	r3, #8
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	e002      	b.n	8006cba <vListInsert+0x2e>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d2f6      	bcs.n	8006cb4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	601a      	str	r2, [r3, #0]
}
 8006cf2:	bf00      	nop
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr

08006cfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	6892      	ldr	r2, [r2, #8]
 8006d12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6852      	ldr	r2, [r2, #4]
 8006d1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d103      	bne.n	8006d30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	1e5a      	subs	r2, r3, #1
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bc80      	pop	{r7}
 8006d4c:	4770      	bx	lr
	...

08006d50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006d7a:	f002 f90f 	bl	8008f9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d86:	68f9      	ldr	r1, [r7, #12]
 8006d88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d8a:	fb01 f303 	mul.w	r3, r1, r3
 8006d8e:	441a      	add	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006daa:	3b01      	subs	r3, #1
 8006dac:	68f9      	ldr	r1, [r7, #12]
 8006dae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006db0:	fb01 f303 	mul.w	r3, r1, r3
 8006db4:	441a      	add	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	22ff      	movs	r2, #255	; 0xff
 8006dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	22ff      	movs	r2, #255	; 0xff
 8006dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d114      	bne.n	8006dfa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01a      	beq.n	8006e0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3310      	adds	r3, #16
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f001 fa37 	bl	8008250 <xTaskRemoveFromEventList>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d012      	beq.n	8006e0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006de8:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <xQueueGenericReset+0xcc>)
 8006dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	e009      	b.n	8006e0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3310      	adds	r3, #16
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff fef6 	bl	8006bf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	3324      	adds	r3, #36	; 0x24
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff fef1 	bl	8006bf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e0e:	f002 f8f5 	bl	8008ffc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e12:	2301      	movs	r3, #1
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	e000ed04 	.word	0xe000ed04

08006e20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b08e      	sub	sp, #56	; 0x38
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e62:	bf00      	nop
 8006e64:	e7fe      	b.n	8006e64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <xQueueGenericCreateStatic+0x52>
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <xQueueGenericCreateStatic+0x56>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e000      	b.n	8006e78 <xQueueGenericCreateStatic+0x58>
 8006e76:	2300      	movs	r3, #0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	623b      	str	r3, [r7, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	e7fe      	b.n	8006e90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <xQueueGenericCreateStatic+0x7e>
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <xQueueGenericCreateStatic+0x82>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <xQueueGenericCreateStatic+0x84>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	61fb      	str	r3, [r7, #28]
}
 8006eba:	bf00      	nop
 8006ebc:	e7fe      	b.n	8006ebc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ebe:	2350      	movs	r3, #80	; 0x50
 8006ec0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b50      	cmp	r3, #80	; 0x50
 8006ec6:	d00a      	beq.n	8006ede <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	61bb      	str	r3, [r7, #24]
}
 8006eda:	bf00      	nop
 8006edc:	e7fe      	b.n	8006edc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00d      	beq.n	8006f04 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ef0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 f843 	bl	8006f8a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3730      	adds	r7, #48	; 0x30
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b08a      	sub	sp, #40	; 0x28
 8006f12:	af02      	add	r7, sp, #8
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10a      	bne.n	8006f38 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	613b      	str	r3, [r7, #16]
}
 8006f34:	bf00      	nop
 8006f36:	e7fe      	b.n	8006f36 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d102      	bne.n	8006f44 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	61fb      	str	r3, [r7, #28]
 8006f42:	e004      	b.n	8006f4e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	fb02 f303 	mul.w	r3, r2, r3
 8006f4c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	3350      	adds	r3, #80	; 0x50
 8006f52:	4618      	mov	r0, r3
 8006f54:	f002 f922 	bl	800919c <pvPortMalloc>
 8006f58:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00f      	beq.n	8006f80 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	3350      	adds	r3, #80	; 0x50
 8006f64:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f6e:	79fa      	ldrb	r2, [r7, #7]
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	4613      	mov	r3, r2
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	68b9      	ldr	r1, [r7, #8]
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 f805 	bl	8006f8a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006f80:	69bb      	ldr	r3, [r7, #24]
	}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3720      	adds	r7, #32
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	60f8      	str	r0, [r7, #12]
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	607a      	str	r2, [r7, #4]
 8006f96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d103      	bne.n	8006fa6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	e002      	b.n	8006fac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006fb8:	2101      	movs	r1, #1
 8006fba:	69b8      	ldr	r0, [r7, #24]
 8006fbc:	f7ff fec8 	bl	8006d50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	78fa      	ldrb	r2, [r7, #3]
 8006fc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006fc8:	bf00      	nop
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08a      	sub	sp, #40	; 0x28
 8006fd4:	af02      	add	r7, sp, #8
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10a      	bne.n	8006ff8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	61bb      	str	r3, [r7, #24]
}
 8006ff4:	bf00      	nop
 8006ff6:	e7fe      	b.n	8006ff6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d90a      	bls.n	8007016 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	617b      	str	r3, [r7, #20]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007016:	2302      	movs	r3, #2
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	2100      	movs	r1, #0
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f7ff fefd 	bl	8006e20 <xQueueGenericCreateStatic>
 8007026:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007034:	69fb      	ldr	r3, [r7, #28]
	}
 8007036:	4618      	mov	r0, r3
 8007038:	3720      	adds	r7, #32
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800703e:	b580      	push	{r7, lr}
 8007040:	b086      	sub	sp, #24
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	613b      	str	r3, [r7, #16]
}
 8007060:	bf00      	nop
 8007062:	e7fe      	b.n	8007062 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	429a      	cmp	r2, r3
 800706a:	d90a      	bls.n	8007082 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	60fb      	str	r3, [r7, #12]
}
 800707e:	bf00      	nop
 8007080:	e7fe      	b.n	8007080 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007082:	2202      	movs	r2, #2
 8007084:	2100      	movs	r1, #0
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff ff41 	bl	8006f0e <xQueueGenericCreate>
 800708c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800709a:	697b      	ldr	r3, [r7, #20]
	}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08e      	sub	sp, #56	; 0x38
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070b2:	2300      	movs	r3, #0
 80070b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <xQueueGenericSend+0x32>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d103      	bne.n	80070e4 <xQueueGenericSend+0x40>
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <xQueueGenericSend+0x44>
 80070e4:	2301      	movs	r3, #1
 80070e6:	e000      	b.n	80070ea <xQueueGenericSend+0x46>
 80070e8:	2300      	movs	r3, #0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10a      	bne.n	8007104 <xQueueGenericSend+0x60>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007100:	bf00      	nop
 8007102:	e7fe      	b.n	8007102 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b02      	cmp	r3, #2
 8007108:	d103      	bne.n	8007112 <xQueueGenericSend+0x6e>
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710e:	2b01      	cmp	r3, #1
 8007110:	d101      	bne.n	8007116 <xQueueGenericSend+0x72>
 8007112:	2301      	movs	r3, #1
 8007114:	e000      	b.n	8007118 <xQueueGenericSend+0x74>
 8007116:	2300      	movs	r3, #0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <xQueueGenericSend+0x8e>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	623b      	str	r3, [r7, #32]
}
 800712e:	bf00      	nop
 8007130:	e7fe      	b.n	8007130 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007132:	f001 fa53 	bl	80085dc <xTaskGetSchedulerState>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <xQueueGenericSend+0x9e>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <xQueueGenericSend+0xa2>
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <xQueueGenericSend+0xa4>
 8007146:	2300      	movs	r3, #0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <xQueueGenericSend+0xbe>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	61fb      	str	r3, [r7, #28]
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007162:	f001 ff1b 	bl	8008f9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716e:	429a      	cmp	r2, r3
 8007170:	d302      	bcc.n	8007178 <xQueueGenericSend+0xd4>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b02      	cmp	r3, #2
 8007176:	d129      	bne.n	80071cc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800717e:	f000 fa2a 	bl	80075d6 <prvCopyDataToQueue>
 8007182:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	d010      	beq.n	80071ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	3324      	adds	r3, #36	; 0x24
 8007190:	4618      	mov	r0, r3
 8007192:	f001 f85d 	bl	8008250 <xTaskRemoveFromEventList>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d013      	beq.n	80071c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800719c:	4b3f      	ldr	r3, [pc, #252]	; (800729c <xQueueGenericSend+0x1f8>)
 800719e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	e00a      	b.n	80071c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d007      	beq.n	80071c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071b4:	4b39      	ldr	r3, [pc, #228]	; (800729c <xQueueGenericSend+0x1f8>)
 80071b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071c4:	f001 ff1a 	bl	8008ffc <vPortExitCritical>
				return pdPASS;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e063      	b.n	8007294 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d103      	bne.n	80071da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071d2:	f001 ff13 	bl	8008ffc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e05c      	b.n	8007294 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d106      	bne.n	80071ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071e0:	f107 0314 	add.w	r3, r7, #20
 80071e4:	4618      	mov	r0, r3
 80071e6:	f001 f897 	bl	8008318 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071ea:	2301      	movs	r3, #1
 80071ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071ee:	f001 ff05 	bl	8008ffc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071f2:	f000 fddb 	bl	8007dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071f6:	f001 fed1 	bl	8008f9c <vPortEnterCritical>
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007200:	b25b      	sxtb	r3, r3
 8007202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007206:	d103      	bne.n	8007210 <xQueueGenericSend+0x16c>
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007216:	b25b      	sxtb	r3, r3
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d103      	bne.n	8007226 <xQueueGenericSend+0x182>
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007226:	f001 fee9 	bl	8008ffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800722a:	1d3a      	adds	r2, r7, #4
 800722c:	f107 0314 	add.w	r3, r7, #20
 8007230:	4611      	mov	r1, r2
 8007232:	4618      	mov	r0, r3
 8007234:	f001 f886 	bl	8008344 <xTaskCheckForTimeOut>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d124      	bne.n	8007288 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800723e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007240:	f000 fac1 	bl	80077c6 <prvIsQueueFull>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d018      	beq.n	800727c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	3310      	adds	r3, #16
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	4611      	mov	r1, r2
 8007252:	4618      	mov	r0, r3
 8007254:	f000 ffac 	bl	80081b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800725a:	f000 fa4c 	bl	80076f6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800725e:	f000 fdb3 	bl	8007dc8 <xTaskResumeAll>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	f47f af7c 	bne.w	8007162 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800726a:	4b0c      	ldr	r3, [pc, #48]	; (800729c <xQueueGenericSend+0x1f8>)
 800726c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	e772      	b.n	8007162 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800727c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800727e:	f000 fa3a 	bl	80076f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007282:	f000 fda1 	bl	8007dc8 <xTaskResumeAll>
 8007286:	e76c      	b.n	8007162 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800728a:	f000 fa34 	bl	80076f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800728e:	f000 fd9b 	bl	8007dc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007292:	2300      	movs	r3, #0
		}
	}
}
 8007294:	4618      	mov	r0, r3
 8007296:	3738      	adds	r7, #56	; 0x38
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	e000ed04 	.word	0xe000ed04

080072a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b08e      	sub	sp, #56	; 0x38
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10a      	bne.n	80072ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072ca:	bf00      	nop
 80072cc:	e7fe      	b.n	80072cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d103      	bne.n	80072dc <xQueueGenericSendFromISR+0x3c>
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <xQueueGenericSendFromISR+0x40>
 80072dc:	2301      	movs	r3, #1
 80072de:	e000      	b.n	80072e2 <xQueueGenericSendFromISR+0x42>
 80072e0:	2300      	movs	r3, #0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80072e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	623b      	str	r3, [r7, #32]
}
 80072f8:	bf00      	nop
 80072fa:	e7fe      	b.n	80072fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d103      	bne.n	800730a <xQueueGenericSendFromISR+0x6a>
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007306:	2b01      	cmp	r3, #1
 8007308:	d101      	bne.n	800730e <xQueueGenericSendFromISR+0x6e>
 800730a:	2301      	movs	r3, #1
 800730c:	e000      	b.n	8007310 <xQueueGenericSendFromISR+0x70>
 800730e:	2300      	movs	r3, #0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10a      	bne.n	800732a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	61fb      	str	r3, [r7, #28]
}
 8007326:	bf00      	nop
 8007328:	e7fe      	b.n	8007328 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800732a:	f001 fef9 	bl	8009120 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800732e:	f3ef 8211 	mrs	r2, BASEPRI
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	61ba      	str	r2, [r7, #24]
 8007344:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007346:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007348:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007352:	429a      	cmp	r2, r3
 8007354:	d302      	bcc.n	800735c <xQueueGenericSendFromISR+0xbc>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b02      	cmp	r3, #2
 800735a:	d12c      	bne.n	80073b6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	68b9      	ldr	r1, [r7, #8]
 800736a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800736c:	f000 f933 	bl	80075d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007370:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007378:	d112      	bne.n	80073a0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	2b00      	cmp	r3, #0
 8007380:	d016      	beq.n	80073b0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	3324      	adds	r3, #36	; 0x24
 8007386:	4618      	mov	r0, r3
 8007388:	f000 ff62 	bl	8008250 <xTaskRemoveFromEventList>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00e      	beq.n	80073b0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00b      	beq.n	80073b0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	e007      	b.n	80073b0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073a4:	3301      	adds	r3, #1
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	b25a      	sxtb	r2, r3
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073b0:	2301      	movs	r3, #1
 80073b2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80073b4:	e001      	b.n	80073ba <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	637b      	str	r3, [r7, #52]	; 0x34
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3738      	adds	r7, #56	; 0x38
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08c      	sub	sp, #48	; 0x30
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073dc:	2300      	movs	r3, #0
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <xQueueReceive+0x30>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	623b      	str	r3, [r7, #32]
}
 80073fc:	bf00      	nop
 80073fe:	e7fe      	b.n	80073fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d103      	bne.n	800740e <xQueueReceive+0x3e>
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <xQueueReceive+0x42>
 800740e:	2301      	movs	r3, #1
 8007410:	e000      	b.n	8007414 <xQueueReceive+0x44>
 8007412:	2300      	movs	r3, #0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <xQueueReceive+0x5e>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	61fb      	str	r3, [r7, #28]
}
 800742a:	bf00      	nop
 800742c:	e7fe      	b.n	800742c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800742e:	f001 f8d5 	bl	80085dc <xTaskGetSchedulerState>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <xQueueReceive+0x6e>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <xQueueReceive+0x72>
 800743e:	2301      	movs	r3, #1
 8007440:	e000      	b.n	8007444 <xQueueReceive+0x74>
 8007442:	2300      	movs	r3, #0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <xQueueReceive+0x8e>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	61bb      	str	r3, [r7, #24]
}
 800745a:	bf00      	nop
 800745c:	e7fe      	b.n	800745c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800745e:	f001 fd9d 	bl	8008f9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007466:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	2b00      	cmp	r3, #0
 800746c:	d01f      	beq.n	80074ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800746e:	68b9      	ldr	r1, [r7, #8]
 8007470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007472:	f000 f91a 	bl	80076aa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	1e5a      	subs	r2, r3, #1
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00f      	beq.n	80074a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007488:	3310      	adds	r3, #16
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fee0 	bl	8008250 <xTaskRemoveFromEventList>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007496:	4b3d      	ldr	r3, [pc, #244]	; (800758c <xQueueReceive+0x1bc>)
 8007498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074a6:	f001 fda9 	bl	8008ffc <vPortExitCritical>
				return pdPASS;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e069      	b.n	8007582 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d103      	bne.n	80074bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074b4:	f001 fda2 	bl	8008ffc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e062      	b.n	8007582 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d106      	bne.n	80074d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074c2:	f107 0310 	add.w	r3, r7, #16
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 ff26 	bl	8008318 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074cc:	2301      	movs	r3, #1
 80074ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074d0:	f001 fd94 	bl	8008ffc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074d4:	f000 fc6a 	bl	8007dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074d8:	f001 fd60 	bl	8008f9c <vPortEnterCritical>
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074e2:	b25b      	sxtb	r3, r3
 80074e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e8:	d103      	bne.n	80074f2 <xQueueReceive+0x122>
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074f8:	b25b      	sxtb	r3, r3
 80074fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fe:	d103      	bne.n	8007508 <xQueueReceive+0x138>
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007508:	f001 fd78 	bl	8008ffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800750c:	1d3a      	adds	r2, r7, #4
 800750e:	f107 0310 	add.w	r3, r7, #16
 8007512:	4611      	mov	r1, r2
 8007514:	4618      	mov	r0, r3
 8007516:	f000 ff15 	bl	8008344 <xTaskCheckForTimeOut>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d123      	bne.n	8007568 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007522:	f000 f93a 	bl	800779a <prvIsQueueEmpty>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d017      	beq.n	800755c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	3324      	adds	r3, #36	; 0x24
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	4611      	mov	r1, r2
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fe3b 	bl	80081b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800753a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800753c:	f000 f8db 	bl	80076f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007540:	f000 fc42 	bl	8007dc8 <xTaskResumeAll>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d189      	bne.n	800745e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800754a:	4b10      	ldr	r3, [pc, #64]	; (800758c <xQueueReceive+0x1bc>)
 800754c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	e780      	b.n	800745e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800755c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800755e:	f000 f8ca 	bl	80076f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007562:	f000 fc31 	bl	8007dc8 <xTaskResumeAll>
 8007566:	e77a      	b.n	800745e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800756a:	f000 f8c4 	bl	80076f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800756e:	f000 fc2b 	bl	8007dc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007574:	f000 f911 	bl	800779a <prvIsQueueEmpty>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	f43f af6f 	beq.w	800745e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007580:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007582:	4618      	mov	r0, r3
 8007584:	3730      	adds	r7, #48	; 0x30
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	e000ed04 	.word	0xe000ed04

08007590 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10a      	bne.n	80075b8 <vQueueDelete+0x28>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	60bb      	str	r3, [r7, #8]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f945 	bl	8007848 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f001 feab 	bl	8009324 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80075ce:	bf00      	nop
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b086      	sub	sp, #24
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10d      	bne.n	8007610 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d14d      	bne.n	8007698 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	4618      	mov	r0, r3
 8007602:	f001 f809 	bl	8008618 <xTaskPriorityDisinherit>
 8007606:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	e043      	b.n	8007698 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d119      	bne.n	800764a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6898      	ldr	r0, [r3, #8]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	461a      	mov	r2, r3
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	f002 f8ba 	bl	800979a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	441a      	add	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	429a      	cmp	r2, r3
 800763e:	d32b      	bcc.n	8007698 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	609a      	str	r2, [r3, #8]
 8007648:	e026      	b.n	8007698 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	68d8      	ldr	r0, [r3, #12]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	461a      	mov	r2, r3
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	f002 f8a0 	bl	800979a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	425b      	negs	r3, r3
 8007664:	441a      	add	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d207      	bcs.n	8007686 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	425b      	negs	r3, r3
 8007680:	441a      	add	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d105      	bne.n	8007698 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	3b01      	subs	r3, #1
 8007696:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80076a0:	697b      	ldr	r3, [r7, #20]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3718      	adds	r7, #24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d018      	beq.n	80076ee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68da      	ldr	r2, [r3, #12]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c4:	441a      	add	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d303      	bcc.n	80076de <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68d9      	ldr	r1, [r3, #12]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	461a      	mov	r2, r3
 80076e8:	6838      	ldr	r0, [r7, #0]
 80076ea:	f002 f856 	bl	800979a <memcpy>
	}
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076fe:	f001 fc4d 	bl	8008f9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007708:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800770a:	e011      	b.n	8007730 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	d012      	beq.n	800773a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3324      	adds	r3, #36	; 0x24
 8007718:	4618      	mov	r0, r3
 800771a:	f000 fd99 	bl	8008250 <xTaskRemoveFromEventList>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007724:	f000 fe70 	bl	8008408 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	3b01      	subs	r3, #1
 800772c:	b2db      	uxtb	r3, r3
 800772e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007734:	2b00      	cmp	r3, #0
 8007736:	dce9      	bgt.n	800770c <prvUnlockQueue+0x16>
 8007738:	e000      	b.n	800773c <prvUnlockQueue+0x46>
					break;
 800773a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	22ff      	movs	r2, #255	; 0xff
 8007740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007744:	f001 fc5a 	bl	8008ffc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007748:	f001 fc28 	bl	8008f9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007752:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007754:	e011      	b.n	800777a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d012      	beq.n	8007784 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3310      	adds	r3, #16
 8007762:	4618      	mov	r0, r3
 8007764:	f000 fd74 	bl	8008250 <xTaskRemoveFromEventList>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800776e:	f000 fe4b 	bl	8008408 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	3b01      	subs	r3, #1
 8007776:	b2db      	uxtb	r3, r3
 8007778:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800777a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800777e:	2b00      	cmp	r3, #0
 8007780:	dce9      	bgt.n	8007756 <prvUnlockQueue+0x60>
 8007782:	e000      	b.n	8007786 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007784:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	22ff      	movs	r2, #255	; 0xff
 800778a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800778e:	f001 fc35 	bl	8008ffc <vPortExitCritical>
}
 8007792:	bf00      	nop
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077a2:	f001 fbfb 	bl	8008f9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d102      	bne.n	80077b4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80077ae:	2301      	movs	r3, #1
 80077b0:	60fb      	str	r3, [r7, #12]
 80077b2:	e001      	b.n	80077b8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80077b4:	2300      	movs	r3, #0
 80077b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077b8:	f001 fc20 	bl	8008ffc <vPortExitCritical>

	return xReturn;
 80077bc:	68fb      	ldr	r3, [r7, #12]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077ce:	f001 fbe5 	bl	8008f9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077da:	429a      	cmp	r2, r3
 80077dc:	d102      	bne.n	80077e4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077de:	2301      	movs	r3, #1
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	e001      	b.n	80077e8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077e8:	f001 fc08 	bl	8008ffc <vPortExitCritical>

	return xReturn;
 80077ec:	68fb      	ldr	r3, [r7, #12]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	e014      	b.n	8007832 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007808:	4a0e      	ldr	r2, [pc, #56]	; (8007844 <vQueueAddToRegistry+0x4c>)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10b      	bne.n	800782c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007814:	490b      	ldr	r1, [pc, #44]	; (8007844 <vQueueAddToRegistry+0x4c>)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800781e:	4a09      	ldr	r2, [pc, #36]	; (8007844 <vQueueAddToRegistry+0x4c>)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	00db      	lsls	r3, r3, #3
 8007824:	4413      	add	r3, r2
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800782a:	e006      	b.n	800783a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3301      	adds	r3, #1
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b07      	cmp	r3, #7
 8007836:	d9e7      	bls.n	8007808 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007838:	bf00      	nop
 800783a:	bf00      	nop
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	bc80      	pop	{r7}
 8007842:	4770      	bx	lr
 8007844:	20003b60 	.word	0x20003b60

08007848 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	e016      	b.n	8007884 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007856:	4a10      	ldr	r2, [pc, #64]	; (8007898 <vQueueUnregisterQueue+0x50>)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	4413      	add	r3, r2
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	429a      	cmp	r2, r3
 8007864:	d10b      	bne.n	800787e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007866:	4a0c      	ldr	r2, [pc, #48]	; (8007898 <vQueueUnregisterQueue+0x50>)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2100      	movs	r1, #0
 800786c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007870:	4a09      	ldr	r2, [pc, #36]	; (8007898 <vQueueUnregisterQueue+0x50>)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	00db      	lsls	r3, r3, #3
 8007876:	4413      	add	r3, r2
 8007878:	2200      	movs	r2, #0
 800787a:	605a      	str	r2, [r3, #4]
				break;
 800787c:	e006      	b.n	800788c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3301      	adds	r3, #1
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2b07      	cmp	r3, #7
 8007888:	d9e5      	bls.n	8007856 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800788a:	bf00      	nop
 800788c:	bf00      	nop
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	bc80      	pop	{r7}
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	20003b60 	.word	0x20003b60

0800789c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078ac:	f001 fb76 	bl	8008f9c <vPortEnterCritical>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078b6:	b25b      	sxtb	r3, r3
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078bc:	d103      	bne.n	80078c6 <vQueueWaitForMessageRestricted+0x2a>
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078cc:	b25b      	sxtb	r3, r3
 80078ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d2:	d103      	bne.n	80078dc <vQueueWaitForMessageRestricted+0x40>
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078dc:	f001 fb8e 	bl	8008ffc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d106      	bne.n	80078f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	3324      	adds	r3, #36	; 0x24
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 fc81 	bl	80081f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078f6:	6978      	ldr	r0, [r7, #20]
 80078f8:	f7ff fefd 	bl	80076f6 <prvUnlockQueue>
	}
 80078fc:	bf00      	nop
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08e      	sub	sp, #56	; 0x38
 8007908:	af04      	add	r7, sp, #16
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10a      	bne.n	800792e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	623b      	str	r3, [r7, #32]
}
 800792a:	bf00      	nop
 800792c:	e7fe      	b.n	800792c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800792e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <xTaskCreateStatic+0x46>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	61fb      	str	r3, [r7, #28]
}
 8007946:	bf00      	nop
 8007948:	e7fe      	b.n	8007948 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800794a:	23bc      	movs	r3, #188	; 0xbc
 800794c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	2bbc      	cmp	r3, #188	; 0xbc
 8007952:	d00a      	beq.n	800796a <xTaskCreateStatic+0x66>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	61bb      	str	r3, [r7, #24]
}
 8007966:	bf00      	nop
 8007968:	e7fe      	b.n	8007968 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01e      	beq.n	80079ae <xTaskCreateStatic+0xaa>
 8007970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007972:	2b00      	cmp	r3, #0
 8007974:	d01b      	beq.n	80079ae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800797e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	2202      	movs	r2, #2
 8007984:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007988:	2300      	movs	r3, #0
 800798a:	9303      	str	r3, [sp, #12]
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	9302      	str	r3, [sp, #8]
 8007990:	f107 0314 	add.w	r3, r7, #20
 8007994:	9301      	str	r3, [sp, #4]
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	68b9      	ldr	r1, [r7, #8]
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 f851 	bl	8007a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079a8:	f000 f8ec 	bl	8007b84 <prvAddNewTaskToReadyList>
 80079ac:	e001      	b.n	80079b2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079b2:	697b      	ldr	r3, [r7, #20]
	}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3728      	adds	r7, #40	; 0x28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08c      	sub	sp, #48	; 0x30
 80079c0:	af04      	add	r7, sp, #16
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	4613      	mov	r3, r2
 80079ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079cc:	88fb      	ldrh	r3, [r7, #6]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4618      	mov	r0, r3
 80079d2:	f001 fbe3 	bl	800919c <pvPortMalloc>
 80079d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00e      	beq.n	80079fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80079de:	20bc      	movs	r0, #188	; 0xbc
 80079e0:	f001 fbdc 	bl	800919c <pvPortMalloc>
 80079e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	631a      	str	r2, [r3, #48]	; 0x30
 80079f2:	e005      	b.n	8007a00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079f4:	6978      	ldr	r0, [r7, #20]
 80079f6:	f001 fc95 	bl	8009324 <vPortFree>
 80079fa:	e001      	b.n	8007a00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d017      	beq.n	8007a36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a0e:	88fa      	ldrh	r2, [r7, #6]
 8007a10:	2300      	movs	r3, #0
 8007a12:	9303      	str	r3, [sp, #12]
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	9302      	str	r3, [sp, #8]
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	68b9      	ldr	r1, [r7, #8]
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f80f 	bl	8007a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a2a:	69f8      	ldr	r0, [r7, #28]
 8007a2c:	f000 f8aa 	bl	8007b84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a30:	2301      	movs	r3, #1
 8007a32:	61bb      	str	r3, [r7, #24]
 8007a34:	e002      	b.n	8007a3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a36:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a3c:	69bb      	ldr	r3, [r7, #24]
	}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3720      	adds	r7, #32
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b088      	sub	sp, #32
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	461a      	mov	r2, r3
 8007a60:	21a5      	movs	r1, #165	; 0xa5
 8007a62:	f001 fea8 	bl	80097b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a70:	3b01      	subs	r3, #1
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	f023 0307 	bic.w	r3, r3, #7
 8007a7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	617b      	str	r3, [r7, #20]
}
 8007a9c:	bf00      	nop
 8007a9e:	e7fe      	b.n	8007a9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	61fb      	str	r3, [r7, #28]
 8007aa4:	e012      	b.n	8007acc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	4413      	add	r3, r2
 8007aac:	7819      	ldrb	r1, [r3, #0]
 8007aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3334      	adds	r3, #52	; 0x34
 8007ab6:	460a      	mov	r2, r1
 8007ab8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	4413      	add	r3, r2
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d006      	beq.n	8007ad4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	61fb      	str	r3, [r7, #28]
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	2b0f      	cmp	r3, #15
 8007ad0:	d9e9      	bls.n	8007aa6 <prvInitialiseNewTask+0x5e>
 8007ad2:	e000      	b.n	8007ad6 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007ad4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	2b37      	cmp	r3, #55	; 0x37
 8007ae2:	d901      	bls.n	8007ae8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ae4:	2337      	movs	r3, #55	; 0x37
 8007ae6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007af2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	2200      	movs	r2, #0
 8007af8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	3304      	adds	r3, #4
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff f895 	bl	8006c2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	3318      	adds	r3, #24
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff f890 	bl	8006c2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	2200      	movs	r2, #0
 8007b28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	3354      	adds	r3, #84	; 0x54
 8007b38:	2260      	movs	r2, #96	; 0x60
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f001 fe3a 	bl	80097b6 <memset>
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	4a0c      	ldr	r2, [pc, #48]	; (8007b78 <prvInitialiseNewTask+0x130>)
 8007b46:	659a      	str	r2, [r3, #88]	; 0x58
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	4a0c      	ldr	r2, [pc, #48]	; (8007b7c <prvInitialiseNewTask+0x134>)
 8007b4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	4a0b      	ldr	r2, [pc, #44]	; (8007b80 <prvInitialiseNewTask+0x138>)
 8007b52:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	68f9      	ldr	r1, [r7, #12]
 8007b58:	69b8      	ldr	r0, [r7, #24]
 8007b5a:	f001 f931 	bl	8008dc0 <pxPortInitialiseStack>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b62:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b70:	bf00      	nop
 8007b72:	3720      	adds	r7, #32
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	0800e29c 	.word	0x0800e29c
 8007b7c:	0800e2bc 	.word	0x0800e2bc
 8007b80:	0800e27c 	.word	0x0800e27c

08007b84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b8c:	f001 fa06 	bl	8008f9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b90:	4b2d      	ldr	r3, [pc, #180]	; (8007c48 <prvAddNewTaskToReadyList+0xc4>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3301      	adds	r3, #1
 8007b96:	4a2c      	ldr	r2, [pc, #176]	; (8007c48 <prvAddNewTaskToReadyList+0xc4>)
 8007b98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b9a:	4b2c      	ldr	r3, [pc, #176]	; (8007c4c <prvAddNewTaskToReadyList+0xc8>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d109      	bne.n	8007bb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ba2:	4a2a      	ldr	r2, [pc, #168]	; (8007c4c <prvAddNewTaskToReadyList+0xc8>)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ba8:	4b27      	ldr	r3, [pc, #156]	; (8007c48 <prvAddNewTaskToReadyList+0xc4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d110      	bne.n	8007bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007bb0:	f000 fc4e 	bl	8008450 <prvInitialiseTaskLists>
 8007bb4:	e00d      	b.n	8007bd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007bb6:	4b26      	ldr	r3, [pc, #152]	; (8007c50 <prvAddNewTaskToReadyList+0xcc>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d109      	bne.n	8007bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bbe:	4b23      	ldr	r3, [pc, #140]	; (8007c4c <prvAddNewTaskToReadyList+0xc8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d802      	bhi.n	8007bd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007bcc:	4a1f      	ldr	r2, [pc, #124]	; (8007c4c <prvAddNewTaskToReadyList+0xc8>)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007bd2:	4b20      	ldr	r3, [pc, #128]	; (8007c54 <prvAddNewTaskToReadyList+0xd0>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	4a1e      	ldr	r2, [pc, #120]	; (8007c54 <prvAddNewTaskToReadyList+0xd0>)
 8007bda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007bdc:	4b1d      	ldr	r3, [pc, #116]	; (8007c54 <prvAddNewTaskToReadyList+0xd0>)
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be8:	4b1b      	ldr	r3, [pc, #108]	; (8007c58 <prvAddNewTaskToReadyList+0xd4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d903      	bls.n	8007bf8 <prvAddNewTaskToReadyList+0x74>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf4:	4a18      	ldr	r2, [pc, #96]	; (8007c58 <prvAddNewTaskToReadyList+0xd4>)
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4a15      	ldr	r2, [pc, #84]	; (8007c5c <prvAddNewTaskToReadyList+0xd8>)
 8007c06:	441a      	add	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4610      	mov	r0, r2
 8007c10:	f7ff f819 	bl	8006c46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c14:	f001 f9f2 	bl	8008ffc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c18:	4b0d      	ldr	r3, [pc, #52]	; (8007c50 <prvAddNewTaskToReadyList+0xcc>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00e      	beq.n	8007c3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c20:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <prvAddNewTaskToReadyList+0xc8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d207      	bcs.n	8007c3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <prvAddNewTaskToReadyList+0xdc>)
 8007c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20000e88 	.word	0x20000e88
 8007c4c:	200009b4 	.word	0x200009b4
 8007c50:	20000e94 	.word	0x20000e94
 8007c54:	20000ea4 	.word	0x20000ea4
 8007c58:	20000e90 	.word	0x20000e90
 8007c5c:	200009b8 	.word	0x200009b8
 8007c60:	e000ed04 	.word	0xe000ed04

08007c64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d017      	beq.n	8007ca6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c76:	4b13      	ldr	r3, [pc, #76]	; (8007cc4 <vTaskDelay+0x60>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <vTaskDelay+0x30>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	60bb      	str	r3, [r7, #8]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c94:	f000 f88a 	bl	8007dac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c98:	2100      	movs	r1, #0
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fd2a 	bl	80086f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ca0:	f000 f892 	bl	8007dc8 <xTaskResumeAll>
 8007ca4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d107      	bne.n	8007cbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007cac:	4b06      	ldr	r3, [pc, #24]	; (8007cc8 <vTaskDelay+0x64>)
 8007cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cbc:	bf00      	nop
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	20000eb0 	.word	0x20000eb0
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08a      	sub	sp, #40	; 0x28
 8007cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007cda:	463a      	mov	r2, r7
 8007cdc:	1d39      	adds	r1, r7, #4
 8007cde:	f107 0308 	add.w	r3, r7, #8
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe ff52 	bl	8006b8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	9202      	str	r2, [sp, #8]
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	460a      	mov	r2, r1
 8007cfa:	4924      	ldr	r1, [pc, #144]	; (8007d8c <vTaskStartScheduler+0xc0>)
 8007cfc:	4824      	ldr	r0, [pc, #144]	; (8007d90 <vTaskStartScheduler+0xc4>)
 8007cfe:	f7ff fe01 	bl	8007904 <xTaskCreateStatic>
 8007d02:	4603      	mov	r3, r0
 8007d04:	4a23      	ldr	r2, [pc, #140]	; (8007d94 <vTaskStartScheduler+0xc8>)
 8007d06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d08:	4b22      	ldr	r3, [pc, #136]	; (8007d94 <vTaskStartScheduler+0xc8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d10:	2301      	movs	r3, #1
 8007d12:	617b      	str	r3, [r7, #20]
 8007d14:	e001      	b.n	8007d1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d102      	bne.n	8007d26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d20:	f000 fd3c 	bl	800879c <xTimerCreateTimerTask>
 8007d24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d11b      	bne.n	8007d64 <vTaskStartScheduler+0x98>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	613b      	str	r3, [r7, #16]
}
 8007d3e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d40:	4b15      	ldr	r3, [pc, #84]	; (8007d98 <vTaskStartScheduler+0xcc>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3354      	adds	r3, #84	; 0x54
 8007d46:	4a15      	ldr	r2, [pc, #84]	; (8007d9c <vTaskStartScheduler+0xd0>)
 8007d48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d4a:	4b15      	ldr	r3, [pc, #84]	; (8007da0 <vTaskStartScheduler+0xd4>)
 8007d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d52:	4b14      	ldr	r3, [pc, #80]	; (8007da4 <vTaskStartScheduler+0xd8>)
 8007d54:	2201      	movs	r2, #1
 8007d56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007d58:	4b13      	ldr	r3, [pc, #76]	; (8007da8 <vTaskStartScheduler+0xdc>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d5e:	f001 f8ab 	bl	8008eb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d62:	e00e      	b.n	8007d82 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6a:	d10a      	bne.n	8007d82 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	60fb      	str	r3, [r7, #12]
}
 8007d7e:	bf00      	nop
 8007d80:	e7fe      	b.n	8007d80 <vTaskStartScheduler+0xb4>
}
 8007d82:	bf00      	nop
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	0800e1a0 	.word	0x0800e1a0
 8007d90:	08008421 	.word	0x08008421
 8007d94:	20000eac 	.word	0x20000eac
 8007d98:	200009b4 	.word	0x200009b4
 8007d9c:	2000000c 	.word	0x2000000c
 8007da0:	20000ea8 	.word	0x20000ea8
 8007da4:	20000e94 	.word	0x20000e94
 8007da8:	20000e8c 	.word	0x20000e8c

08007dac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <vTaskSuspendAll+0x18>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3301      	adds	r3, #1
 8007db6:	4a03      	ldr	r2, [pc, #12]	; (8007dc4 <vTaskSuspendAll+0x18>)
 8007db8:	6013      	str	r3, [r2, #0]
}
 8007dba:	bf00      	nop
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bc80      	pop	{r7}
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	20000eb0 	.word	0x20000eb0

08007dc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007dd6:	4b42      	ldr	r3, [pc, #264]	; (8007ee0 <xTaskResumeAll+0x118>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10a      	bne.n	8007df4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	603b      	str	r3, [r7, #0]
}
 8007df0:	bf00      	nop
 8007df2:	e7fe      	b.n	8007df2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007df4:	f001 f8d2 	bl	8008f9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007df8:	4b39      	ldr	r3, [pc, #228]	; (8007ee0 <xTaskResumeAll+0x118>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	4a38      	ldr	r2, [pc, #224]	; (8007ee0 <xTaskResumeAll+0x118>)
 8007e00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e02:	4b37      	ldr	r3, [pc, #220]	; (8007ee0 <xTaskResumeAll+0x118>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d162      	bne.n	8007ed0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e0a:	4b36      	ldr	r3, [pc, #216]	; (8007ee4 <xTaskResumeAll+0x11c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d05e      	beq.n	8007ed0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e12:	e02f      	b.n	8007e74 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007e14:	4b34      	ldr	r3, [pc, #208]	; (8007ee8 <xTaskResumeAll+0x120>)
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3318      	adds	r3, #24
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fe ff6b 	bl	8006cfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe ff66 	bl	8006cfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e34:	4b2d      	ldr	r3, [pc, #180]	; (8007eec <xTaskResumeAll+0x124>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d903      	bls.n	8007e44 <xTaskResumeAll+0x7c>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	4a2a      	ldr	r2, [pc, #168]	; (8007eec <xTaskResumeAll+0x124>)
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4a27      	ldr	r2, [pc, #156]	; (8007ef0 <xTaskResumeAll+0x128>)
 8007e52:	441a      	add	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	f7fe fef3 	bl	8006c46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e64:	4b23      	ldr	r3, [pc, #140]	; (8007ef4 <xTaskResumeAll+0x12c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d302      	bcc.n	8007e74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007e6e:	4b22      	ldr	r3, [pc, #136]	; (8007ef8 <xTaskResumeAll+0x130>)
 8007e70:	2201      	movs	r2, #1
 8007e72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e74:	4b1c      	ldr	r3, [pc, #112]	; (8007ee8 <xTaskResumeAll+0x120>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1cb      	bne.n	8007e14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e82:	f000 fb87 	bl	8008594 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e86:	4b1d      	ldr	r3, [pc, #116]	; (8007efc <xTaskResumeAll+0x134>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d010      	beq.n	8007eb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e92:	f000 f845 	bl	8007f20 <xTaskIncrementTick>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007e9c:	4b16      	ldr	r3, [pc, #88]	; (8007ef8 <xTaskResumeAll+0x130>)
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1f1      	bne.n	8007e92 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007eae:	4b13      	ldr	r3, [pc, #76]	; (8007efc <xTaskResumeAll+0x134>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007eb4:	4b10      	ldr	r3, [pc, #64]	; (8007ef8 <xTaskResumeAll+0x130>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d009      	beq.n	8007ed0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ec0:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <xTaskResumeAll+0x138>)
 8007ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ed0:	f001 f894 	bl	8008ffc <vPortExitCritical>

	return xAlreadyYielded;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000eb0 	.word	0x20000eb0
 8007ee4:	20000e88 	.word	0x20000e88
 8007ee8:	20000e48 	.word	0x20000e48
 8007eec:	20000e90 	.word	0x20000e90
 8007ef0:	200009b8 	.word	0x200009b8
 8007ef4:	200009b4 	.word	0x200009b4
 8007ef8:	20000e9c 	.word	0x20000e9c
 8007efc:	20000e98 	.word	0x20000e98
 8007f00:	e000ed04 	.word	0xe000ed04

08007f04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f0a:	4b04      	ldr	r3, [pc, #16]	; (8007f1c <xTaskGetTickCount+0x18>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f10:	687b      	ldr	r3, [r7, #4]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bc80      	pop	{r7}
 8007f1a:	4770      	bx	lr
 8007f1c:	20000e8c 	.word	0x20000e8c

08007f20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f26:	2300      	movs	r3, #0
 8007f28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f2a:	4b51      	ldr	r3, [pc, #324]	; (8008070 <xTaskIncrementTick+0x150>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f040 808e 	bne.w	8008050 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f34:	4b4f      	ldr	r3, [pc, #316]	; (8008074 <xTaskIncrementTick+0x154>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f3c:	4a4d      	ldr	r2, [pc, #308]	; (8008074 <xTaskIncrementTick+0x154>)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d120      	bne.n	8007f8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f48:	4b4b      	ldr	r3, [pc, #300]	; (8008078 <xTaskIncrementTick+0x158>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <xTaskIncrementTick+0x48>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	603b      	str	r3, [r7, #0]
}
 8007f64:	bf00      	nop
 8007f66:	e7fe      	b.n	8007f66 <xTaskIncrementTick+0x46>
 8007f68:	4b43      	ldr	r3, [pc, #268]	; (8008078 <xTaskIncrementTick+0x158>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	60fb      	str	r3, [r7, #12]
 8007f6e:	4b43      	ldr	r3, [pc, #268]	; (800807c <xTaskIncrementTick+0x15c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a41      	ldr	r2, [pc, #260]	; (8008078 <xTaskIncrementTick+0x158>)
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	4a41      	ldr	r2, [pc, #260]	; (800807c <xTaskIncrementTick+0x15c>)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6013      	str	r3, [r2, #0]
 8007f7c:	4b40      	ldr	r3, [pc, #256]	; (8008080 <xTaskIncrementTick+0x160>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3301      	adds	r3, #1
 8007f82:	4a3f      	ldr	r2, [pc, #252]	; (8008080 <xTaskIncrementTick+0x160>)
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	f000 fb05 	bl	8008594 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f8a:	4b3e      	ldr	r3, [pc, #248]	; (8008084 <xTaskIncrementTick+0x164>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d34e      	bcc.n	8008032 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f94:	4b38      	ldr	r3, [pc, #224]	; (8008078 <xTaskIncrementTick+0x158>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <xTaskIncrementTick+0x82>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e000      	b.n	8007fa4 <xTaskIncrementTick+0x84>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d004      	beq.n	8007fb2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fa8:	4b36      	ldr	r3, [pc, #216]	; (8008084 <xTaskIncrementTick+0x164>)
 8007faa:	f04f 32ff 	mov.w	r2, #4294967295
 8007fae:	601a      	str	r2, [r3, #0]
					break;
 8007fb0:	e03f      	b.n	8008032 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007fb2:	4b31      	ldr	r3, [pc, #196]	; (8008078 <xTaskIncrementTick+0x158>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d203      	bcs.n	8007fd2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007fca:	4a2e      	ldr	r2, [pc, #184]	; (8008084 <xTaskIncrementTick+0x164>)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6013      	str	r3, [r2, #0]
						break;
 8007fd0:	e02f      	b.n	8008032 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe fe90 	bl	8006cfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d004      	beq.n	8007fee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	3318      	adds	r3, #24
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe fe87 	bl	8006cfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff2:	4b25      	ldr	r3, [pc, #148]	; (8008088 <xTaskIncrementTick+0x168>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d903      	bls.n	8008002 <xTaskIncrementTick+0xe2>
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffe:	4a22      	ldr	r2, [pc, #136]	; (8008088 <xTaskIncrementTick+0x168>)
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008006:	4613      	mov	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4a1f      	ldr	r2, [pc, #124]	; (800808c <xTaskIncrementTick+0x16c>)
 8008010:	441a      	add	r2, r3
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	3304      	adds	r3, #4
 8008016:	4619      	mov	r1, r3
 8008018:	4610      	mov	r0, r2
 800801a:	f7fe fe14 	bl	8006c46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008022:	4b1b      	ldr	r3, [pc, #108]	; (8008090 <xTaskIncrementTick+0x170>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	429a      	cmp	r2, r3
 800802a:	d3b3      	bcc.n	8007f94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800802c:	2301      	movs	r3, #1
 800802e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008030:	e7b0      	b.n	8007f94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008032:	4b17      	ldr	r3, [pc, #92]	; (8008090 <xTaskIncrementTick+0x170>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008038:	4914      	ldr	r1, [pc, #80]	; (800808c <xTaskIncrementTick+0x16c>)
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	440b      	add	r3, r1
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d907      	bls.n	800805a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800804a:	2301      	movs	r3, #1
 800804c:	617b      	str	r3, [r7, #20]
 800804e:	e004      	b.n	800805a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008050:	4b10      	ldr	r3, [pc, #64]	; (8008094 <xTaskIncrementTick+0x174>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3301      	adds	r3, #1
 8008056:	4a0f      	ldr	r2, [pc, #60]	; (8008094 <xTaskIncrementTick+0x174>)
 8008058:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800805a:	4b0f      	ldr	r3, [pc, #60]	; (8008098 <xTaskIncrementTick+0x178>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008062:	2301      	movs	r3, #1
 8008064:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008066:	697b      	ldr	r3, [r7, #20]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3718      	adds	r7, #24
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20000eb0 	.word	0x20000eb0
 8008074:	20000e8c 	.word	0x20000e8c
 8008078:	20000e40 	.word	0x20000e40
 800807c:	20000e44 	.word	0x20000e44
 8008080:	20000ea0 	.word	0x20000ea0
 8008084:	20000ea8 	.word	0x20000ea8
 8008088:	20000e90 	.word	0x20000e90
 800808c:	200009b8 	.word	0x200009b8
 8008090:	200009b4 	.word	0x200009b4
 8008094:	20000e98 	.word	0x20000e98
 8008098:	20000e9c 	.word	0x20000e9c

0800809c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080a2:	4b3d      	ldr	r3, [pc, #244]	; (8008198 <vTaskSwitchContext+0xfc>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080aa:	4b3c      	ldr	r3, [pc, #240]	; (800819c <vTaskSwitchContext+0x100>)
 80080ac:	2201      	movs	r2, #1
 80080ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80080b0:	e06d      	b.n	800818e <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 80080b2:	4b3a      	ldr	r3, [pc, #232]	; (800819c <vTaskSwitchContext+0x100>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80080b8:	4b39      	ldr	r3, [pc, #228]	; (80081a0 <vTaskSwitchContext+0x104>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080be:	613b      	str	r3, [r7, #16]
 80080c0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d111      	bne.n	80080f4 <vTaskSwitchContext+0x58>
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	3304      	adds	r3, #4
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d10b      	bne.n	80080f4 <vTaskSwitchContext+0x58>
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	3308      	adds	r3, #8
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d105      	bne.n	80080f4 <vTaskSwitchContext+0x58>
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	330c      	adds	r3, #12
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d008      	beq.n	8008106 <vTaskSwitchContext+0x6a>
 80080f4:	4b2a      	ldr	r3, [pc, #168]	; (80081a0 <vTaskSwitchContext+0x104>)
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	4b29      	ldr	r3, [pc, #164]	; (80081a0 <vTaskSwitchContext+0x104>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3334      	adds	r3, #52	; 0x34
 80080fe:	4619      	mov	r1, r3
 8008100:	4610      	mov	r0, r2
 8008102:	f7f9 f8f5 	bl	80012f0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008106:	4b27      	ldr	r3, [pc, #156]	; (80081a4 <vTaskSwitchContext+0x108>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	617b      	str	r3, [r7, #20]
 800810c:	e010      	b.n	8008130 <vTaskSwitchContext+0x94>
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <vTaskSwitchContext+0x8e>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	607b      	str	r3, [r7, #4]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <vTaskSwitchContext+0x8c>
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	3b01      	subs	r3, #1
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	491d      	ldr	r1, [pc, #116]	; (80081a8 <vTaskSwitchContext+0x10c>)
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	440b      	add	r3, r1
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d0e4      	beq.n	800810e <vTaskSwitchContext+0x72>
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4a16      	ldr	r2, [pc, #88]	; (80081a8 <vTaskSwitchContext+0x10c>)
 8008150:	4413      	add	r3, r2
 8008152:	60bb      	str	r3, [r7, #8]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	605a      	str	r2, [r3, #4]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	3308      	adds	r3, #8
 8008166:	429a      	cmp	r2, r3
 8008168:	d104      	bne.n	8008174 <vTaskSwitchContext+0xd8>
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	605a      	str	r2, [r3, #4]
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	4a09      	ldr	r2, [pc, #36]	; (80081a0 <vTaskSwitchContext+0x104>)
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	4a09      	ldr	r2, [pc, #36]	; (80081a4 <vTaskSwitchContext+0x108>)
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008184:	4b06      	ldr	r3, [pc, #24]	; (80081a0 <vTaskSwitchContext+0x104>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3354      	adds	r3, #84	; 0x54
 800818a:	4a08      	ldr	r2, [pc, #32]	; (80081ac <vTaskSwitchContext+0x110>)
 800818c:	6013      	str	r3, [r2, #0]
}
 800818e:	bf00      	nop
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20000eb0 	.word	0x20000eb0
 800819c:	20000e9c 	.word	0x20000e9c
 80081a0:	200009b4 	.word	0x200009b4
 80081a4:	20000e90 	.word	0x20000e90
 80081a8:	200009b8 	.word	0x200009b8
 80081ac:	2000000c 	.word	0x2000000c

080081b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	60fb      	str	r3, [r7, #12]
}
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081d6:	4b07      	ldr	r3, [pc, #28]	; (80081f4 <vTaskPlaceOnEventList+0x44>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3318      	adds	r3, #24
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7fe fd54 	bl	8006c8c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081e4:	2101      	movs	r1, #1
 80081e6:	6838      	ldr	r0, [r7, #0]
 80081e8:	f000 fa84 	bl	80086f4 <prvAddCurrentTaskToDelayedList>
}
 80081ec:	bf00      	nop
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	200009b4 	.word	0x200009b4

080081f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10a      	bne.n	8008220 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	617b      	str	r3, [r7, #20]
}
 800821c:	bf00      	nop
 800821e:	e7fe      	b.n	800821e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008220:	4b0a      	ldr	r3, [pc, #40]	; (800824c <vTaskPlaceOnEventListRestricted+0x54>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3318      	adds	r3, #24
 8008226:	4619      	mov	r1, r3
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f7fe fd0c 	bl	8006c46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008234:	f04f 33ff 	mov.w	r3, #4294967295
 8008238:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800823a:	6879      	ldr	r1, [r7, #4]
 800823c:	68b8      	ldr	r0, [r7, #8]
 800823e:	f000 fa59 	bl	80086f4 <prvAddCurrentTaskToDelayedList>
	}
 8008242:	bf00      	nop
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	200009b4 	.word	0x200009b4

08008250 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	60fb      	str	r3, [r7, #12]
}
 8008278:	bf00      	nop
 800827a:	e7fe      	b.n	800827a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	3318      	adds	r3, #24
 8008280:	4618      	mov	r0, r3
 8008282:	f7fe fd3b 	bl	8006cfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008286:	4b1e      	ldr	r3, [pc, #120]	; (8008300 <xTaskRemoveFromEventList+0xb0>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d11d      	bne.n	80082ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	3304      	adds	r3, #4
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fd32 	bl	8006cfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829c:	4b19      	ldr	r3, [pc, #100]	; (8008304 <xTaskRemoveFromEventList+0xb4>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d903      	bls.n	80082ac <xTaskRemoveFromEventList+0x5c>
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	4a16      	ldr	r2, [pc, #88]	; (8008304 <xTaskRemoveFromEventList+0xb4>)
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4a13      	ldr	r2, [pc, #76]	; (8008308 <xTaskRemoveFromEventList+0xb8>)
 80082ba:	441a      	add	r2, r3
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	3304      	adds	r3, #4
 80082c0:	4619      	mov	r1, r3
 80082c2:	4610      	mov	r0, r2
 80082c4:	f7fe fcbf 	bl	8006c46 <vListInsertEnd>
 80082c8:	e005      	b.n	80082d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	3318      	adds	r3, #24
 80082ce:	4619      	mov	r1, r3
 80082d0:	480e      	ldr	r0, [pc, #56]	; (800830c <xTaskRemoveFromEventList+0xbc>)
 80082d2:	f7fe fcb8 	bl	8006c46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082da:	4b0d      	ldr	r3, [pc, #52]	; (8008310 <xTaskRemoveFromEventList+0xc0>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d905      	bls.n	80082f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80082e4:	2301      	movs	r3, #1
 80082e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80082e8:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <xTaskRemoveFromEventList+0xc4>)
 80082ea:	2201      	movs	r2, #1
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	e001      	b.n	80082f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80082f4:	697b      	ldr	r3, [r7, #20]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20000eb0 	.word	0x20000eb0
 8008304:	20000e90 	.word	0x20000e90
 8008308:	200009b8 	.word	0x200009b8
 800830c:	20000e48 	.word	0x20000e48
 8008310:	200009b4 	.word	0x200009b4
 8008314:	20000e9c 	.word	0x20000e9c

08008318 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008320:	4b06      	ldr	r3, [pc, #24]	; (800833c <vTaskInternalSetTimeOutState+0x24>)
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008328:	4b05      	ldr	r3, [pc, #20]	; (8008340 <vTaskInternalSetTimeOutState+0x28>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	605a      	str	r2, [r3, #4]
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	bc80      	pop	{r7}
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	20000ea0 	.word	0x20000ea0
 8008340:	20000e8c 	.word	0x20000e8c

08008344 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b088      	sub	sp, #32
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10a      	bne.n	800836a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	613b      	str	r3, [r7, #16]
}
 8008366:	bf00      	nop
 8008368:	e7fe      	b.n	8008368 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	60fb      	str	r3, [r7, #12]
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008386:	f000 fe09 	bl	8008f9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800838a:	4b1d      	ldr	r3, [pc, #116]	; (8008400 <xTaskCheckForTimeOut+0xbc>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a2:	d102      	bne.n	80083aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083a4:	2300      	movs	r3, #0
 80083a6:	61fb      	str	r3, [r7, #28]
 80083a8:	e023      	b.n	80083f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	4b15      	ldr	r3, [pc, #84]	; (8008404 <xTaskCheckForTimeOut+0xc0>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d007      	beq.n	80083c6 <xTaskCheckForTimeOut+0x82>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d302      	bcc.n	80083c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083c0:	2301      	movs	r3, #1
 80083c2:	61fb      	str	r3, [r7, #28]
 80083c4:	e015      	b.n	80083f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d20b      	bcs.n	80083e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	1ad2      	subs	r2, r2, r3
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff ff9b 	bl	8008318 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083e2:	2300      	movs	r3, #0
 80083e4:	61fb      	str	r3, [r7, #28]
 80083e6:	e004      	b.n	80083f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80083ee:	2301      	movs	r3, #1
 80083f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80083f2:	f000 fe03 	bl	8008ffc <vPortExitCritical>

	return xReturn;
 80083f6:	69fb      	ldr	r3, [r7, #28]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3720      	adds	r7, #32
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	20000e8c 	.word	0x20000e8c
 8008404:	20000ea0 	.word	0x20000ea0

08008408 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800840c:	4b03      	ldr	r3, [pc, #12]	; (800841c <vTaskMissedYield+0x14>)
 800840e:	2201      	movs	r2, #1
 8008410:	601a      	str	r2, [r3, #0]
}
 8008412:	bf00      	nop
 8008414:	46bd      	mov	sp, r7
 8008416:	bc80      	pop	{r7}
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	20000e9c 	.word	0x20000e9c

08008420 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008428:	f000 f852 	bl	80084d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800842c:	4b06      	ldr	r3, [pc, #24]	; (8008448 <prvIdleTask+0x28>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d9f9      	bls.n	8008428 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008434:	4b05      	ldr	r3, [pc, #20]	; (800844c <prvIdleTask+0x2c>)
 8008436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008444:	e7f0      	b.n	8008428 <prvIdleTask+0x8>
 8008446:	bf00      	nop
 8008448:	200009b8 	.word	0x200009b8
 800844c:	e000ed04 	.word	0xe000ed04

08008450 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008456:	2300      	movs	r3, #0
 8008458:	607b      	str	r3, [r7, #4]
 800845a:	e00c      	b.n	8008476 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4a12      	ldr	r2, [pc, #72]	; (80084b0 <prvInitialiseTaskLists+0x60>)
 8008468:	4413      	add	r3, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7fe fbc0 	bl	8006bf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	3301      	adds	r3, #1
 8008474:	607b      	str	r3, [r7, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b37      	cmp	r3, #55	; 0x37
 800847a:	d9ef      	bls.n	800845c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800847c:	480d      	ldr	r0, [pc, #52]	; (80084b4 <prvInitialiseTaskLists+0x64>)
 800847e:	f7fe fbb7 	bl	8006bf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008482:	480d      	ldr	r0, [pc, #52]	; (80084b8 <prvInitialiseTaskLists+0x68>)
 8008484:	f7fe fbb4 	bl	8006bf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008488:	480c      	ldr	r0, [pc, #48]	; (80084bc <prvInitialiseTaskLists+0x6c>)
 800848a:	f7fe fbb1 	bl	8006bf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800848e:	480c      	ldr	r0, [pc, #48]	; (80084c0 <prvInitialiseTaskLists+0x70>)
 8008490:	f7fe fbae 	bl	8006bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008494:	480b      	ldr	r0, [pc, #44]	; (80084c4 <prvInitialiseTaskLists+0x74>)
 8008496:	f7fe fbab 	bl	8006bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800849a:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <prvInitialiseTaskLists+0x78>)
 800849c:	4a05      	ldr	r2, [pc, #20]	; (80084b4 <prvInitialiseTaskLists+0x64>)
 800849e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084a0:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <prvInitialiseTaskLists+0x7c>)
 80084a2:	4a05      	ldr	r2, [pc, #20]	; (80084b8 <prvInitialiseTaskLists+0x68>)
 80084a4:	601a      	str	r2, [r3, #0]
}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	200009b8 	.word	0x200009b8
 80084b4:	20000e18 	.word	0x20000e18
 80084b8:	20000e2c 	.word	0x20000e2c
 80084bc:	20000e48 	.word	0x20000e48
 80084c0:	20000e5c 	.word	0x20000e5c
 80084c4:	20000e74 	.word	0x20000e74
 80084c8:	20000e40 	.word	0x20000e40
 80084cc:	20000e44 	.word	0x20000e44

080084d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084d6:	e019      	b.n	800850c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084d8:	f000 fd60 	bl	8008f9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80084dc:	4b10      	ldr	r3, [pc, #64]	; (8008520 <prvCheckTasksWaitingTermination+0x50>)
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3304      	adds	r3, #4
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fe fc07 	bl	8006cfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084ee:	4b0d      	ldr	r3, [pc, #52]	; (8008524 <prvCheckTasksWaitingTermination+0x54>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	4a0b      	ldr	r2, [pc, #44]	; (8008524 <prvCheckTasksWaitingTermination+0x54>)
 80084f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084f8:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <prvCheckTasksWaitingTermination+0x58>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3b01      	subs	r3, #1
 80084fe:	4a0a      	ldr	r2, [pc, #40]	; (8008528 <prvCheckTasksWaitingTermination+0x58>)
 8008500:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008502:	f000 fd7b 	bl	8008ffc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f810 	bl	800852c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800850c:	4b06      	ldr	r3, [pc, #24]	; (8008528 <prvCheckTasksWaitingTermination+0x58>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e1      	bne.n	80084d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20000e5c 	.word	0x20000e5c
 8008524:	20000e88 	.word	0x20000e88
 8008528:	20000e70 	.word	0x20000e70

0800852c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	3354      	adds	r3, #84	; 0x54
 8008538:	4618      	mov	r0, r3
 800853a:	f002 f81f 	bl	800a57c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008544:	2b00      	cmp	r3, #0
 8008546:	d108      	bne.n	800855a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854c:	4618      	mov	r0, r3
 800854e:	f000 fee9 	bl	8009324 <vPortFree>
				vPortFree( pxTCB );
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fee6 	bl	8009324 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008558:	e018      	b.n	800858c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008560:	2b01      	cmp	r3, #1
 8008562:	d103      	bne.n	800856c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fedd 	bl	8009324 <vPortFree>
	}
 800856a:	e00f      	b.n	800858c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008572:	2b02      	cmp	r3, #2
 8008574:	d00a      	beq.n	800858c <prvDeleteTCB+0x60>
	__asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	60fb      	str	r3, [r7, #12]
}
 8008588:	bf00      	nop
 800858a:	e7fe      	b.n	800858a <prvDeleteTCB+0x5e>
	}
 800858c:	bf00      	nop
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800859a:	4b0e      	ldr	r3, [pc, #56]	; (80085d4 <prvResetNextTaskUnblockTime+0x40>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <prvResetNextTaskUnblockTime+0x14>
 80085a4:	2301      	movs	r3, #1
 80085a6:	e000      	b.n	80085aa <prvResetNextTaskUnblockTime+0x16>
 80085a8:	2300      	movs	r3, #0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d004      	beq.n	80085b8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085ae:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <prvResetNextTaskUnblockTime+0x44>)
 80085b0:	f04f 32ff 	mov.w	r2, #4294967295
 80085b4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085b6:	e008      	b.n	80085ca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80085b8:	4b06      	ldr	r3, [pc, #24]	; (80085d4 <prvResetNextTaskUnblockTime+0x40>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	4a04      	ldr	r2, [pc, #16]	; (80085d8 <prvResetNextTaskUnblockTime+0x44>)
 80085c8:	6013      	str	r3, [r2, #0]
}
 80085ca:	bf00      	nop
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr
 80085d4:	20000e40 	.word	0x20000e40
 80085d8:	20000ea8 	.word	0x20000ea8

080085dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085e2:	4b0b      	ldr	r3, [pc, #44]	; (8008610 <xTaskGetSchedulerState+0x34>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d102      	bne.n	80085f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085ea:	2301      	movs	r3, #1
 80085ec:	607b      	str	r3, [r7, #4]
 80085ee:	e008      	b.n	8008602 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085f0:	4b08      	ldr	r3, [pc, #32]	; (8008614 <xTaskGetSchedulerState+0x38>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d102      	bne.n	80085fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085f8:	2302      	movs	r3, #2
 80085fa:	607b      	str	r3, [r7, #4]
 80085fc:	e001      	b.n	8008602 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085fe:	2300      	movs	r3, #0
 8008600:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008602:	687b      	ldr	r3, [r7, #4]
	}
 8008604:	4618      	mov	r0, r3
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	bc80      	pop	{r7}
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	20000e94 	.word	0x20000e94
 8008614:	20000eb0 	.word	0x20000eb0

08008618 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008624:	2300      	movs	r3, #0
 8008626:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d056      	beq.n	80086dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800862e:	4b2e      	ldr	r3, [pc, #184]	; (80086e8 <xTaskPriorityDisinherit+0xd0>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	429a      	cmp	r2, r3
 8008636:	d00a      	beq.n	800864e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	60fb      	str	r3, [r7, #12]
}
 800864a:	bf00      	nop
 800864c:	e7fe      	b.n	800864c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10a      	bne.n	800866c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	60bb      	str	r3, [r7, #8]
}
 8008668:	bf00      	nop
 800866a:	e7fe      	b.n	800866a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008670:	1e5a      	subs	r2, r3, #1
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800867e:	429a      	cmp	r2, r3
 8008680:	d02c      	beq.n	80086dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008686:	2b00      	cmp	r3, #0
 8008688:	d128      	bne.n	80086dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	3304      	adds	r3, #4
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fb34 	bl	8006cfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ac:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <xTaskPriorityDisinherit+0xd4>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d903      	bls.n	80086bc <xTaskPriorityDisinherit+0xa4>
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	4a0c      	ldr	r2, [pc, #48]	; (80086ec <xTaskPriorityDisinherit+0xd4>)
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	4613      	mov	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <xTaskPriorityDisinherit+0xd8>)
 80086ca:	441a      	add	r2, r3
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	3304      	adds	r3, #4
 80086d0:	4619      	mov	r1, r3
 80086d2:	4610      	mov	r0, r2
 80086d4:	f7fe fab7 	bl	8006c46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086d8:	2301      	movs	r3, #1
 80086da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086dc:	697b      	ldr	r3, [r7, #20]
	}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	200009b4 	.word	0x200009b4
 80086ec:	20000e90 	.word	0x20000e90
 80086f0:	200009b8 	.word	0x200009b8

080086f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086fe:	4b21      	ldr	r3, [pc, #132]	; (8008784 <prvAddCurrentTaskToDelayedList+0x90>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008704:	4b20      	ldr	r3, [pc, #128]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3304      	adds	r3, #4
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe faf6 	bl	8006cfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008716:	d10a      	bne.n	800872e <prvAddCurrentTaskToDelayedList+0x3a>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800871e:	4b1a      	ldr	r3, [pc, #104]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3304      	adds	r3, #4
 8008724:	4619      	mov	r1, r3
 8008726:	4819      	ldr	r0, [pc, #100]	; (800878c <prvAddCurrentTaskToDelayedList+0x98>)
 8008728:	f7fe fa8d 	bl	8006c46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800872c:	e026      	b.n	800877c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4413      	add	r3, r2
 8008734:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008736:	4b14      	ldr	r3, [pc, #80]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	429a      	cmp	r2, r3
 8008744:	d209      	bcs.n	800875a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008746:	4b12      	ldr	r3, [pc, #72]	; (8008790 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	4b0f      	ldr	r3, [pc, #60]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3304      	adds	r3, #4
 8008750:	4619      	mov	r1, r3
 8008752:	4610      	mov	r0, r2
 8008754:	f7fe fa9a 	bl	8006c8c <vListInsert>
}
 8008758:	e010      	b.n	800877c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800875a:	4b0e      	ldr	r3, [pc, #56]	; (8008794 <prvAddCurrentTaskToDelayedList+0xa0>)
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3304      	adds	r3, #4
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f7fe fa90 	bl	8006c8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800876c:	4b0a      	ldr	r3, [pc, #40]	; (8008798 <prvAddCurrentTaskToDelayedList+0xa4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	429a      	cmp	r2, r3
 8008774:	d202      	bcs.n	800877c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008776:	4a08      	ldr	r2, [pc, #32]	; (8008798 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	6013      	str	r3, [r2, #0]
}
 800877c:	bf00      	nop
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20000e8c 	.word	0x20000e8c
 8008788:	200009b4 	.word	0x200009b4
 800878c:	20000e74 	.word	0x20000e74
 8008790:	20000e44 	.word	0x20000e44
 8008794:	20000e40 	.word	0x20000e40
 8008798:	20000ea8 	.word	0x20000ea8

0800879c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08a      	sub	sp, #40	; 0x28
 80087a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80087a6:	f000 facb 	bl	8008d40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80087aa:	4b1c      	ldr	r3, [pc, #112]	; (800881c <xTimerCreateTimerTask+0x80>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d021      	beq.n	80087f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80087ba:	1d3a      	adds	r2, r7, #4
 80087bc:	f107 0108 	add.w	r1, r7, #8
 80087c0:	f107 030c 	add.w	r3, r7, #12
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe f9f9 	bl	8006bbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	9202      	str	r2, [sp, #8]
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	2302      	movs	r3, #2
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	2300      	movs	r3, #0
 80087da:	460a      	mov	r2, r1
 80087dc:	4910      	ldr	r1, [pc, #64]	; (8008820 <xTimerCreateTimerTask+0x84>)
 80087de:	4811      	ldr	r0, [pc, #68]	; (8008824 <xTimerCreateTimerTask+0x88>)
 80087e0:	f7ff f890 	bl	8007904 <xTaskCreateStatic>
 80087e4:	4603      	mov	r3, r0
 80087e6:	4a10      	ldr	r2, [pc, #64]	; (8008828 <xTimerCreateTimerTask+0x8c>)
 80087e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80087ea:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <xTimerCreateTimerTask+0x8c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80087f2:	2301      	movs	r3, #1
 80087f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10a      	bne.n	8008812 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	613b      	str	r3, [r7, #16]
}
 800880e:	bf00      	nop
 8008810:	e7fe      	b.n	8008810 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008812:	697b      	ldr	r3, [r7, #20]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3718      	adds	r7, #24
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20000ee4 	.word	0x20000ee4
 8008820:	0800e1a8 	.word	0x0800e1a8
 8008824:	08008949 	.word	0x08008949
 8008828:	20000ee8 	.word	0x20000ee8

0800882c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08a      	sub	sp, #40	; 0x28
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800883a:	2300      	movs	r3, #0
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	623b      	str	r3, [r7, #32]
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800885a:	4b1a      	ldr	r3, [pc, #104]	; (80088c4 <xTimerGenericCommand+0x98>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d02a      	beq.n	80088b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2b05      	cmp	r3, #5
 8008872:	dc18      	bgt.n	80088a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008874:	f7ff feb2 	bl	80085dc <xTaskGetSchedulerState>
 8008878:	4603      	mov	r3, r0
 800887a:	2b02      	cmp	r3, #2
 800887c:	d109      	bne.n	8008892 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800887e:	4b11      	ldr	r3, [pc, #68]	; (80088c4 <xTimerGenericCommand+0x98>)
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	f107 0110 	add.w	r1, r7, #16
 8008886:	2300      	movs	r3, #0
 8008888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800888a:	f7fe fc0b 	bl	80070a4 <xQueueGenericSend>
 800888e:	6278      	str	r0, [r7, #36]	; 0x24
 8008890:	e012      	b.n	80088b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008892:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <xTimerGenericCommand+0x98>)
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	f107 0110 	add.w	r1, r7, #16
 800889a:	2300      	movs	r3, #0
 800889c:	2200      	movs	r2, #0
 800889e:	f7fe fc01 	bl	80070a4 <xQueueGenericSend>
 80088a2:	6278      	str	r0, [r7, #36]	; 0x24
 80088a4:	e008      	b.n	80088b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088a6:	4b07      	ldr	r3, [pc, #28]	; (80088c4 <xTimerGenericCommand+0x98>)
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	f107 0110 	add.w	r1, r7, #16
 80088ae:	2300      	movs	r3, #0
 80088b0:	683a      	ldr	r2, [r7, #0]
 80088b2:	f7fe fcf5 	bl	80072a0 <xQueueGenericSendFromISR>
 80088b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3728      	adds	r7, #40	; 0x28
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20000ee4 	.word	0x20000ee4

080088c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088d2:	4b1c      	ldr	r3, [pc, #112]	; (8008944 <prvProcessExpiredTimer+0x7c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	3304      	adds	r3, #4
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fe fa0b 	bl	8006cfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d122      	bne.n	8008934 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	699a      	ldr	r2, [r3, #24]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	18d1      	adds	r1, r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	6978      	ldr	r0, [r7, #20]
 80088fc:	f000 f8c8 	bl	8008a90 <prvInsertTimerInActiveList>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d016      	beq.n	8008934 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008906:	2300      	movs	r3, #0
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	2300      	movs	r3, #0
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	2100      	movs	r1, #0
 8008910:	6978      	ldr	r0, [r7, #20]
 8008912:	f7ff ff8b 	bl	800882c <xTimerGenericCommand>
 8008916:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10a      	bne.n	8008934 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	60fb      	str	r3, [r7, #12]
}
 8008930:	bf00      	nop
 8008932:	e7fe      	b.n	8008932 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	6978      	ldr	r0, [r7, #20]
 800893a:	4798      	blx	r3
}
 800893c:	bf00      	nop
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	20000edc 	.word	0x20000edc

08008948 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008950:	f107 0308 	add.w	r3, r7, #8
 8008954:	4618      	mov	r0, r3
 8008956:	f000 f857 	bl	8008a08 <prvGetNextExpireTime>
 800895a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4619      	mov	r1, r3
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 f803 	bl	800896c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008966:	f000 f8d5 	bl	8008b14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800896a:	e7f1      	b.n	8008950 <prvTimerTask+0x8>

0800896c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008976:	f7ff fa19 	bl	8007dac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800897a:	f107 0308 	add.w	r3, r7, #8
 800897e:	4618      	mov	r0, r3
 8008980:	f000 f866 	bl	8008a50 <prvSampleTimeNow>
 8008984:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d130      	bne.n	80089ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10a      	bne.n	80089a8 <prvProcessTimerOrBlockTask+0x3c>
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	429a      	cmp	r2, r3
 8008998:	d806      	bhi.n	80089a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800899a:	f7ff fa15 	bl	8007dc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800899e:	68f9      	ldr	r1, [r7, #12]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7ff ff91 	bl	80088c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80089a6:	e024      	b.n	80089f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d008      	beq.n	80089c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80089ae:	4b13      	ldr	r3, [pc, #76]	; (80089fc <prvProcessTimerOrBlockTask+0x90>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	bf0c      	ite	eq
 80089b8:	2301      	moveq	r3, #1
 80089ba:	2300      	movne	r3, #0
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089c0:	4b0f      	ldr	r3, [pc, #60]	; (8008a00 <prvProcessTimerOrBlockTask+0x94>)
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	4619      	mov	r1, r3
 80089ce:	f7fe ff65 	bl	800789c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80089d2:	f7ff f9f9 	bl	8007dc8 <xTaskResumeAll>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10a      	bne.n	80089f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089dc:	4b09      	ldr	r3, [pc, #36]	; (8008a04 <prvProcessTimerOrBlockTask+0x98>)
 80089de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	f3bf 8f6f 	isb	sy
}
 80089ec:	e001      	b.n	80089f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80089ee:	f7ff f9eb 	bl	8007dc8 <xTaskResumeAll>
}
 80089f2:	bf00      	nop
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20000ee0 	.word	0x20000ee0
 8008a00:	20000ee4 	.word	0x20000ee4
 8008a04:	e000ed04 	.word	0xe000ed04

08008a08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a10:	4b0e      	ldr	r3, [pc, #56]	; (8008a4c <prvGetNextExpireTime+0x44>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	bf0c      	ite	eq
 8008a1a:	2301      	moveq	r3, #1
 8008a1c:	2300      	movne	r3, #0
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	461a      	mov	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d105      	bne.n	8008a3a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a2e:	4b07      	ldr	r3, [pc, #28]	; (8008a4c <prvGetNextExpireTime+0x44>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	e001      	b.n	8008a3e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bc80      	pop	{r7}
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	20000edc 	.word	0x20000edc

08008a50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a58:	f7ff fa54 	bl	8007f04 <xTaskGetTickCount>
 8008a5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a5e:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <prvSampleTimeNow+0x3c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d205      	bcs.n	8008a74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a68:	f000 f908 	bl	8008c7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	e002      	b.n	8008a7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a7a:	4a04      	ldr	r2, [pc, #16]	; (8008a8c <prvSampleTimeNow+0x3c>)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a80:	68fb      	ldr	r3, [r7, #12]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20000eec 	.word	0x20000eec

08008a90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
 8008a9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d812      	bhi.n	8008adc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	1ad2      	subs	r2, r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d302      	bcc.n	8008aca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	617b      	str	r3, [r7, #20]
 8008ac8:	e01b      	b.n	8008b02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008aca:	4b10      	ldr	r3, [pc, #64]	; (8008b0c <prvInsertTimerInActiveList+0x7c>)
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	f7fe f8d9 	bl	8006c8c <vListInsert>
 8008ada:	e012      	b.n	8008b02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d206      	bcs.n	8008af2 <prvInsertTimerInActiveList+0x62>
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d302      	bcc.n	8008af2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008aec:	2301      	movs	r3, #1
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	e007      	b.n	8008b02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008af2:	4b07      	ldr	r3, [pc, #28]	; (8008b10 <prvInsertTimerInActiveList+0x80>)
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3304      	adds	r3, #4
 8008afa:	4619      	mov	r1, r3
 8008afc:	4610      	mov	r0, r2
 8008afe:	f7fe f8c5 	bl	8006c8c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b02:	697b      	ldr	r3, [r7, #20]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3718      	adds	r7, #24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20000ee0 	.word	0x20000ee0
 8008b10:	20000edc 	.word	0x20000edc

08008b14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08e      	sub	sp, #56	; 0x38
 8008b18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b1a:	e09d      	b.n	8008c58 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	da18      	bge.n	8008b54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b22:	1d3b      	adds	r3, r7, #4
 8008b24:	3304      	adds	r3, #4
 8008b26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10a      	bne.n	8008b44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	61fb      	str	r3, [r7, #28]
}
 8008b40:	bf00      	nop
 8008b42:	e7fe      	b.n	8008b42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b4a:	6850      	ldr	r0, [r2, #4]
 8008b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b4e:	6892      	ldr	r2, [r2, #8]
 8008b50:	4611      	mov	r1, r2
 8008b52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	db7d      	blt.n	8008c56 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d004      	beq.n	8008b70 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b68:	3304      	adds	r3, #4
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe f8c6 	bl	8006cfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b70:	463b      	mov	r3, r7
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff ff6c 	bl	8008a50 <prvSampleTimeNow>
 8008b78:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b09      	cmp	r3, #9
 8008b7e:	d86b      	bhi.n	8008c58 <prvProcessReceivedCommands+0x144>
 8008b80:	a201      	add	r2, pc, #4	; (adr r2, 8008b88 <prvProcessReceivedCommands+0x74>)
 8008b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b86:	bf00      	nop
 8008b88:	08008bb1 	.word	0x08008bb1
 8008b8c:	08008bb1 	.word	0x08008bb1
 8008b90:	08008bb1 	.word	0x08008bb1
 8008b94:	08008c59 	.word	0x08008c59
 8008b98:	08008c0d 	.word	0x08008c0d
 8008b9c:	08008c45 	.word	0x08008c45
 8008ba0:	08008bb1 	.word	0x08008bb1
 8008ba4:	08008bb1 	.word	0x08008bb1
 8008ba8:	08008c59 	.word	0x08008c59
 8008bac:	08008c0d 	.word	0x08008c0d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	18d1      	adds	r1, r2, r3
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bbe:	f7ff ff67 	bl	8008a90 <prvInsertTimerInActiveList>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d047      	beq.n	8008c58 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d13f      	bne.n	8008c58 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	441a      	add	r2, r3
 8008be0:	2300      	movs	r3, #0
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	2300      	movs	r3, #0
 8008be6:	2100      	movs	r1, #0
 8008be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bea:	f7ff fe1f 	bl	800882c <xTimerGenericCommand>
 8008bee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d130      	bne.n	8008c58 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	61bb      	str	r3, [r7, #24]
}
 8008c08:	bf00      	nop
 8008c0a:	e7fe      	b.n	8008c0a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10a      	bne.n	8008c30 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	617b      	str	r3, [r7, #20]
}
 8008c2c:	bf00      	nop
 8008c2e:	e7fe      	b.n	8008c2e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	699a      	ldr	r2, [r3, #24]
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	18d1      	adds	r1, r2, r3
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c3e:	f7ff ff27 	bl	8008a90 <prvInsertTimerInActiveList>
					break;
 8008c42:	e009      	b.n	8008c58 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d104      	bne.n	8008c58 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c50:	f000 fb68 	bl	8009324 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c54:	e000      	b.n	8008c58 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c56:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c58:	4b07      	ldr	r3, [pc, #28]	; (8008c78 <prvProcessReceivedCommands+0x164>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	1d39      	adds	r1, r7, #4
 8008c5e:	2200      	movs	r2, #0
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fe fbb5 	bl	80073d0 <xQueueReceive>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f47f af57 	bne.w	8008b1c <prvProcessReceivedCommands+0x8>
	}
}
 8008c6e:	bf00      	nop
 8008c70:	bf00      	nop
 8008c72:	3730      	adds	r7, #48	; 0x30
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	20000ee4 	.word	0x20000ee4

08008c7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c82:	e045      	b.n	8008d10 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c84:	4b2c      	ldr	r3, [pc, #176]	; (8008d38 <prvSwitchTimerLists+0xbc>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c8e:	4b2a      	ldr	r3, [pc, #168]	; (8008d38 <prvSwitchTimerLists+0xbc>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fe f82d 	bl	8006cfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	69db      	ldr	r3, [r3, #28]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d12e      	bne.n	8008d10 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	4413      	add	r3, r2
 8008cba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d90e      	bls.n	8008ce2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cd0:	4b19      	ldr	r3, [pc, #100]	; (8008d38 <prvSwitchTimerLists+0xbc>)
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	4619      	mov	r1, r3
 8008cda:	4610      	mov	r0, r2
 8008cdc:	f7fd ffd6 	bl	8006c8c <vListInsert>
 8008ce0:	e016      	b.n	8008d10 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	2100      	movs	r1, #0
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f7ff fd9d 	bl	800882c <xTimerGenericCommand>
 8008cf2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10a      	bne.n	8008d10 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	603b      	str	r3, [r7, #0]
}
 8008d0c:	bf00      	nop
 8008d0e:	e7fe      	b.n	8008d0e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d10:	4b09      	ldr	r3, [pc, #36]	; (8008d38 <prvSwitchTimerLists+0xbc>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1b4      	bne.n	8008c84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d1a:	4b07      	ldr	r3, [pc, #28]	; (8008d38 <prvSwitchTimerLists+0xbc>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d20:	4b06      	ldr	r3, [pc, #24]	; (8008d3c <prvSwitchTimerLists+0xc0>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a04      	ldr	r2, [pc, #16]	; (8008d38 <prvSwitchTimerLists+0xbc>)
 8008d26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d28:	4a04      	ldr	r2, [pc, #16]	; (8008d3c <prvSwitchTimerLists+0xc0>)
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	6013      	str	r3, [r2, #0]
}
 8008d2e:	bf00      	nop
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20000edc 	.word	0x20000edc
 8008d3c:	20000ee0 	.word	0x20000ee0

08008d40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d46:	f000 f929 	bl	8008f9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d4a:	4b15      	ldr	r3, [pc, #84]	; (8008da0 <prvCheckForValidListAndQueue+0x60>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d120      	bne.n	8008d94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d52:	4814      	ldr	r0, [pc, #80]	; (8008da4 <prvCheckForValidListAndQueue+0x64>)
 8008d54:	f7fd ff4c 	bl	8006bf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d58:	4813      	ldr	r0, [pc, #76]	; (8008da8 <prvCheckForValidListAndQueue+0x68>)
 8008d5a:	f7fd ff49 	bl	8006bf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d5e:	4b13      	ldr	r3, [pc, #76]	; (8008dac <prvCheckForValidListAndQueue+0x6c>)
 8008d60:	4a10      	ldr	r2, [pc, #64]	; (8008da4 <prvCheckForValidListAndQueue+0x64>)
 8008d62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d64:	4b12      	ldr	r3, [pc, #72]	; (8008db0 <prvCheckForValidListAndQueue+0x70>)
 8008d66:	4a10      	ldr	r2, [pc, #64]	; (8008da8 <prvCheckForValidListAndQueue+0x68>)
 8008d68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	4b11      	ldr	r3, [pc, #68]	; (8008db4 <prvCheckForValidListAndQueue+0x74>)
 8008d70:	4a11      	ldr	r2, [pc, #68]	; (8008db8 <prvCheckForValidListAndQueue+0x78>)
 8008d72:	2110      	movs	r1, #16
 8008d74:	200a      	movs	r0, #10
 8008d76:	f7fe f853 	bl	8006e20 <xQueueGenericCreateStatic>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	4a08      	ldr	r2, [pc, #32]	; (8008da0 <prvCheckForValidListAndQueue+0x60>)
 8008d7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d80:	4b07      	ldr	r3, [pc, #28]	; (8008da0 <prvCheckForValidListAndQueue+0x60>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d005      	beq.n	8008d94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d88:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <prvCheckForValidListAndQueue+0x60>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	490b      	ldr	r1, [pc, #44]	; (8008dbc <prvCheckForValidListAndQueue+0x7c>)
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe fd32 	bl	80077f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d94:	f000 f932 	bl	8008ffc <vPortExitCritical>
}
 8008d98:	bf00      	nop
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	20000ee4 	.word	0x20000ee4
 8008da4:	20000eb4 	.word	0x20000eb4
 8008da8:	20000ec8 	.word	0x20000ec8
 8008dac:	20000edc 	.word	0x20000edc
 8008db0:	20000ee0 	.word	0x20000ee0
 8008db4:	20000f90 	.word	0x20000f90
 8008db8:	20000ef0 	.word	0x20000ef0
 8008dbc:	0800e1b0 	.word	0x0800e1b0

08008dc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3b04      	subs	r3, #4
 8008dd0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3b04      	subs	r3, #4
 8008dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f023 0201 	bic.w	r2, r3, #1
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3b04      	subs	r3, #4
 8008dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008df0:	4a08      	ldr	r2, [pc, #32]	; (8008e14 <pxPortInitialiseStack+0x54>)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3b14      	subs	r3, #20
 8008dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3b20      	subs	r3, #32
 8008e06:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e08:	68fb      	ldr	r3, [r7, #12]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bc80      	pop	{r7}
 8008e12:	4770      	bx	lr
 8008e14:	08008e19 	.word	0x08008e19

08008e18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e22:	4b12      	ldr	r3, [pc, #72]	; (8008e6c <prvTaskExitError+0x54>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2a:	d00a      	beq.n	8008e42 <prvTaskExitError+0x2a>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	60fb      	str	r3, [r7, #12]
}
 8008e3e:	bf00      	nop
 8008e40:	e7fe      	b.n	8008e40 <prvTaskExitError+0x28>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	60bb      	str	r3, [r7, #8]
}
 8008e54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e56:	bf00      	nop
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d0fc      	beq.n	8008e58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e5e:	bf00      	nop
 8008e60:	bf00      	nop
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bc80      	pop	{r7}
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	20000008 	.word	0x20000008

08008e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e70:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <pxCurrentTCBConst2>)
 8008e72:	6819      	ldr	r1, [r3, #0]
 8008e74:	6808      	ldr	r0, [r1, #0]
 8008e76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e7a:	f380 8809 	msr	PSP, r0
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f04f 0000 	mov.w	r0, #0
 8008e86:	f380 8811 	msr	BASEPRI, r0
 8008e8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008e8e:	4770      	bx	lr

08008e90 <pxCurrentTCBConst2>:
 8008e90:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop

08008e98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008e98:	4806      	ldr	r0, [pc, #24]	; (8008eb4 <prvPortStartFirstTask+0x1c>)
 8008e9a:	6800      	ldr	r0, [r0, #0]
 8008e9c:	6800      	ldr	r0, [r0, #0]
 8008e9e:	f380 8808 	msr	MSP, r0
 8008ea2:	b662      	cpsie	i
 8008ea4:	b661      	cpsie	f
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	df00      	svc	0
 8008eb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eb2:	bf00      	nop
 8008eb4:	e000ed08 	.word	0xe000ed08

08008eb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ebe:	4b32      	ldr	r3, [pc, #200]	; (8008f88 <xPortStartScheduler+0xd0>)
 8008ec0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	22ff      	movs	r2, #255	; 0xff
 8008ece:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ed8:	78fb      	ldrb	r3, [r7, #3]
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	4b2a      	ldr	r3, [pc, #168]	; (8008f8c <xPortStartScheduler+0xd4>)
 8008ee4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ee6:	4b2a      	ldr	r3, [pc, #168]	; (8008f90 <xPortStartScheduler+0xd8>)
 8008ee8:	2207      	movs	r2, #7
 8008eea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eec:	e009      	b.n	8008f02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008eee:	4b28      	ldr	r3, [pc, #160]	; (8008f90 <xPortStartScheduler+0xd8>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	4a26      	ldr	r2, [pc, #152]	; (8008f90 <xPortStartScheduler+0xd8>)
 8008ef6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ef8:	78fb      	ldrb	r3, [r7, #3]
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0a:	2b80      	cmp	r3, #128	; 0x80
 8008f0c:	d0ef      	beq.n	8008eee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f0e:	4b20      	ldr	r3, [pc, #128]	; (8008f90 <xPortStartScheduler+0xd8>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f1c3 0307 	rsb	r3, r3, #7
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	d00a      	beq.n	8008f30 <xPortStartScheduler+0x78>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	60bb      	str	r3, [r7, #8]
}
 8008f2c:	bf00      	nop
 8008f2e:	e7fe      	b.n	8008f2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f30:	4b17      	ldr	r3, [pc, #92]	; (8008f90 <xPortStartScheduler+0xd8>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	021b      	lsls	r3, r3, #8
 8008f36:	4a16      	ldr	r2, [pc, #88]	; (8008f90 <xPortStartScheduler+0xd8>)
 8008f38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f3a:	4b15      	ldr	r3, [pc, #84]	; (8008f90 <xPortStartScheduler+0xd8>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f42:	4a13      	ldr	r2, [pc, #76]	; (8008f90 <xPortStartScheduler+0xd8>)
 8008f44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f4e:	4b11      	ldr	r3, [pc, #68]	; (8008f94 <xPortStartScheduler+0xdc>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a10      	ldr	r2, [pc, #64]	; (8008f94 <xPortStartScheduler+0xdc>)
 8008f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f5a:	4b0e      	ldr	r3, [pc, #56]	; (8008f94 <xPortStartScheduler+0xdc>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a0d      	ldr	r2, [pc, #52]	; (8008f94 <xPortStartScheduler+0xdc>)
 8008f60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f66:	f000 f8b9 	bl	80090dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f6a:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <xPortStartScheduler+0xe0>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f70:	f7ff ff92 	bl	8008e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f74:	f7ff f892 	bl	800809c <vTaskSwitchContext>
	prvTaskExitError();
 8008f78:	f7ff ff4e 	bl	8008e18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	e000e400 	.word	0xe000e400
 8008f8c:	20000fe0 	.word	0x20000fe0
 8008f90:	20000fe4 	.word	0x20000fe4
 8008f94:	e000ed20 	.word	0xe000ed20
 8008f98:	20000008 	.word	0x20000008

08008f9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	607b      	str	r3, [r7, #4]
}
 8008fb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fb6:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <vPortEnterCritical+0x58>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	4a0d      	ldr	r2, [pc, #52]	; (8008ff4 <vPortEnterCritical+0x58>)
 8008fbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008fc0:	4b0c      	ldr	r3, [pc, #48]	; (8008ff4 <vPortEnterCritical+0x58>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d10f      	bne.n	8008fe8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008fc8:	4b0b      	ldr	r3, [pc, #44]	; (8008ff8 <vPortEnterCritical+0x5c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	603b      	str	r3, [r7, #0]
}
 8008fe4:	bf00      	nop
 8008fe6:	e7fe      	b.n	8008fe6 <vPortEnterCritical+0x4a>
	}
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bc80      	pop	{r7}
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	20000008 	.word	0x20000008
 8008ff8:	e000ed04 	.word	0xe000ed04

08008ffc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009002:	4b11      	ldr	r3, [pc, #68]	; (8009048 <vPortExitCritical+0x4c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10a      	bne.n	8009020 <vPortExitCritical+0x24>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	607b      	str	r3, [r7, #4]
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009020:	4b09      	ldr	r3, [pc, #36]	; (8009048 <vPortExitCritical+0x4c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3b01      	subs	r3, #1
 8009026:	4a08      	ldr	r2, [pc, #32]	; (8009048 <vPortExitCritical+0x4c>)
 8009028:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800902a:	4b07      	ldr	r3, [pc, #28]	; (8009048 <vPortExitCritical+0x4c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d105      	bne.n	800903e <vPortExitCritical+0x42>
 8009032:	2300      	movs	r3, #0
 8009034:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	f383 8811 	msr	BASEPRI, r3
}
 800903c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800903e:	bf00      	nop
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	bc80      	pop	{r7}
 8009046:	4770      	bx	lr
 8009048:	20000008 	.word	0x20000008
 800904c:	00000000 	.word	0x00000000

08009050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009050:	f3ef 8009 	mrs	r0, PSP
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	4b0d      	ldr	r3, [pc, #52]	; (8009090 <pxCurrentTCBConst>)
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009060:	6010      	str	r0, [r2, #0]
 8009062:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009066:	f04f 0050 	mov.w	r0, #80	; 0x50
 800906a:	f380 8811 	msr	BASEPRI, r0
 800906e:	f7ff f815 	bl	800809c <vTaskSwitchContext>
 8009072:	f04f 0000 	mov.w	r0, #0
 8009076:	f380 8811 	msr	BASEPRI, r0
 800907a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800907e:	6819      	ldr	r1, [r3, #0]
 8009080:	6808      	ldr	r0, [r1, #0]
 8009082:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009086:	f380 8809 	msr	PSP, r0
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	4770      	bx	lr

08009090 <pxCurrentTCBConst>:
 8009090:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009094:	bf00      	nop
 8009096:	bf00      	nop

08009098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	607b      	str	r3, [r7, #4]
}
 80090b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090b2:	f7fe ff35 	bl	8007f20 <xTaskIncrementTick>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090bc:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <SysTick_Handler+0x40>)
 80090be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	2300      	movs	r3, #0
 80090c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	f383 8811 	msr	BASEPRI, r3
}
 80090ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	e000ed04 	.word	0xe000ed04

080090dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80090dc:	b480      	push	{r7}
 80090de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090e0:	4b0a      	ldr	r3, [pc, #40]	; (800910c <vPortSetupTimerInterrupt+0x30>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090e6:	4b0a      	ldr	r3, [pc, #40]	; (8009110 <vPortSetupTimerInterrupt+0x34>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090ec:	4b09      	ldr	r3, [pc, #36]	; (8009114 <vPortSetupTimerInterrupt+0x38>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a09      	ldr	r2, [pc, #36]	; (8009118 <vPortSetupTimerInterrupt+0x3c>)
 80090f2:	fba2 2303 	umull	r2, r3, r2, r3
 80090f6:	0b5b      	lsrs	r3, r3, #13
 80090f8:	4a08      	ldr	r2, [pc, #32]	; (800911c <vPortSetupTimerInterrupt+0x40>)
 80090fa:	3b01      	subs	r3, #1
 80090fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090fe:	4b03      	ldr	r3, [pc, #12]	; (800910c <vPortSetupTimerInterrupt+0x30>)
 8009100:	2207      	movs	r2, #7
 8009102:	601a      	str	r2, [r3, #0]
}
 8009104:	bf00      	nop
 8009106:	46bd      	mov	sp, r7
 8009108:	bc80      	pop	{r7}
 800910a:	4770      	bx	lr
 800910c:	e000e010 	.word	0xe000e010
 8009110:	e000e018 	.word	0xe000e018
 8009114:	20000000 	.word	0x20000000
 8009118:	d1b71759 	.word	0xd1b71759
 800911c:	e000e014 	.word	0xe000e014

08009120 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009126:	f3ef 8305 	mrs	r3, IPSR
 800912a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b0f      	cmp	r3, #15
 8009130:	d914      	bls.n	800915c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009132:	4a16      	ldr	r2, [pc, #88]	; (800918c <vPortValidateInterruptPriority+0x6c>)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4413      	add	r3, r2
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800913c:	4b14      	ldr	r3, [pc, #80]	; (8009190 <vPortValidateInterruptPriority+0x70>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	7afa      	ldrb	r2, [r7, #11]
 8009142:	429a      	cmp	r2, r3
 8009144:	d20a      	bcs.n	800915c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	607b      	str	r3, [r7, #4]
}
 8009158:	bf00      	nop
 800915a:	e7fe      	b.n	800915a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800915c:	4b0d      	ldr	r3, [pc, #52]	; (8009194 <vPortValidateInterruptPriority+0x74>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009164:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <vPortValidateInterruptPriority+0x78>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	429a      	cmp	r2, r3
 800916a:	d90a      	bls.n	8009182 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	603b      	str	r3, [r7, #0]
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <vPortValidateInterruptPriority+0x60>
	}
 8009182:	bf00      	nop
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	bc80      	pop	{r7}
 800918a:	4770      	bx	lr
 800918c:	e000e3f0 	.word	0xe000e3f0
 8009190:	20000fe0 	.word	0x20000fe0
 8009194:	e000ed0c 	.word	0xe000ed0c
 8009198:	20000fe4 	.word	0x20000fe4

0800919c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b08a      	sub	sp, #40	; 0x28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091a4:	2300      	movs	r3, #0
 80091a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091a8:	f7fe fe00 	bl	8007dac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091ac:	4b58      	ldr	r3, [pc, #352]	; (8009310 <pvPortMalloc+0x174>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80091b4:	f000 f910 	bl	80093d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80091b8:	4b56      	ldr	r3, [pc, #344]	; (8009314 <pvPortMalloc+0x178>)
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4013      	ands	r3, r2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f040 808e 	bne.w	80092e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d01d      	beq.n	8009208 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80091cc:	2208      	movs	r2, #8
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4413      	add	r3, r2
 80091d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f003 0307 	and.w	r3, r3, #7
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d014      	beq.n	8009208 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f023 0307 	bic.w	r3, r3, #7
 80091e4:	3308      	adds	r3, #8
 80091e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f003 0307 	and.w	r3, r3, #7
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00a      	beq.n	8009208 <pvPortMalloc+0x6c>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	617b      	str	r3, [r7, #20]
}
 8009204:	bf00      	nop
 8009206:	e7fe      	b.n	8009206 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d069      	beq.n	80092e2 <pvPortMalloc+0x146>
 800920e:	4b42      	ldr	r3, [pc, #264]	; (8009318 <pvPortMalloc+0x17c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	429a      	cmp	r2, r3
 8009216:	d864      	bhi.n	80092e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009218:	4b40      	ldr	r3, [pc, #256]	; (800931c <pvPortMalloc+0x180>)
 800921a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800921c:	4b3f      	ldr	r3, [pc, #252]	; (800931c <pvPortMalloc+0x180>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009222:	e004      	b.n	800922e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	429a      	cmp	r2, r3
 8009236:	d903      	bls.n	8009240 <pvPortMalloc+0xa4>
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1f1      	bne.n	8009224 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009240:	4b33      	ldr	r3, [pc, #204]	; (8009310 <pvPortMalloc+0x174>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009246:	429a      	cmp	r2, r3
 8009248:	d04b      	beq.n	80092e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2208      	movs	r2, #8
 8009250:	4413      	add	r3, r2
 8009252:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	6a3b      	ldr	r3, [r7, #32]
 800925a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	1ad2      	subs	r2, r2, r3
 8009264:	2308      	movs	r3, #8
 8009266:	005b      	lsls	r3, r3, #1
 8009268:	429a      	cmp	r2, r3
 800926a:	d91f      	bls.n	80092ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800926c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4413      	add	r3, r2
 8009272:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	f003 0307 	and.w	r3, r3, #7
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00a      	beq.n	8009294 <pvPortMalloc+0xf8>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	613b      	str	r3, [r7, #16]
}
 8009290:	bf00      	nop
 8009292:	e7fe      	b.n	8009292 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	1ad2      	subs	r2, r2, r3
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092a6:	69b8      	ldr	r0, [r7, #24]
 80092a8:	f000 f8f8 	bl	800949c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092ac:	4b1a      	ldr	r3, [pc, #104]	; (8009318 <pvPortMalloc+0x17c>)
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	4a18      	ldr	r2, [pc, #96]	; (8009318 <pvPortMalloc+0x17c>)
 80092b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092ba:	4b17      	ldr	r3, [pc, #92]	; (8009318 <pvPortMalloc+0x17c>)
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	4b18      	ldr	r3, [pc, #96]	; (8009320 <pvPortMalloc+0x184>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d203      	bcs.n	80092ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092c6:	4b14      	ldr	r3, [pc, #80]	; (8009318 <pvPortMalloc+0x17c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a15      	ldr	r2, [pc, #84]	; (8009320 <pvPortMalloc+0x184>)
 80092cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	4b10      	ldr	r3, [pc, #64]	; (8009314 <pvPortMalloc+0x178>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	431a      	orrs	r2, r3
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	2200      	movs	r2, #0
 80092e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80092e2:	f7fe fd71 	bl	8007dc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	f003 0307 	and.w	r3, r3, #7
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00a      	beq.n	8009306 <pvPortMalloc+0x16a>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	60fb      	str	r3, [r7, #12]
}
 8009302:	bf00      	nop
 8009304:	e7fe      	b.n	8009304 <pvPortMalloc+0x168>
	return pvReturn;
 8009306:	69fb      	ldr	r3, [r7, #28]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3728      	adds	r7, #40	; 0x28
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	20003700 	.word	0x20003700
 8009314:	2000370c 	.word	0x2000370c
 8009318:	20003704 	.word	0x20003704
 800931c:	200036f8 	.word	0x200036f8
 8009320:	20003708 	.word	0x20003708

08009324 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d048      	beq.n	80093c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009336:	2308      	movs	r3, #8
 8009338:	425b      	negs	r3, r3
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	4413      	add	r3, r2
 800933e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	4b21      	ldr	r3, [pc, #132]	; (80093d0 <vPortFree+0xac>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4013      	ands	r3, r2
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10a      	bne.n	8009368 <vPortFree+0x44>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	60fb      	str	r3, [r7, #12]
}
 8009364:	bf00      	nop
 8009366:	e7fe      	b.n	8009366 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00a      	beq.n	8009386 <vPortFree+0x62>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	60bb      	str	r3, [r7, #8]
}
 8009382:	bf00      	nop
 8009384:	e7fe      	b.n	8009384 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	4b11      	ldr	r3, [pc, #68]	; (80093d0 <vPortFree+0xac>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4013      	ands	r3, r2
 8009390:	2b00      	cmp	r3, #0
 8009392:	d019      	beq.n	80093c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d115      	bne.n	80093c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <vPortFree+0xac>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	43db      	mvns	r3, r3
 80093a6:	401a      	ands	r2, r3
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093ac:	f7fe fcfe 	bl	8007dac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	4b07      	ldr	r3, [pc, #28]	; (80093d4 <vPortFree+0xb0>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4413      	add	r3, r2
 80093ba:	4a06      	ldr	r2, [pc, #24]	; (80093d4 <vPortFree+0xb0>)
 80093bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093be:	6938      	ldr	r0, [r7, #16]
 80093c0:	f000 f86c 	bl	800949c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80093c4:	f7fe fd00 	bl	8007dc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093c8:	bf00      	nop
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	2000370c 	.word	0x2000370c
 80093d4:	20003704 	.word	0x20003704

080093d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093de:	f242 7310 	movw	r3, #10000	; 0x2710
 80093e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093e4:	4b27      	ldr	r3, [pc, #156]	; (8009484 <prvHeapInit+0xac>)
 80093e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f003 0307 	and.w	r3, r3, #7
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00c      	beq.n	800940c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3307      	adds	r3, #7
 80093f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f023 0307 	bic.w	r3, r3, #7
 80093fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	4a1f      	ldr	r2, [pc, #124]	; (8009484 <prvHeapInit+0xac>)
 8009408:	4413      	add	r3, r2
 800940a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009410:	4a1d      	ldr	r2, [pc, #116]	; (8009488 <prvHeapInit+0xb0>)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009416:	4b1c      	ldr	r3, [pc, #112]	; (8009488 <prvHeapInit+0xb0>)
 8009418:	2200      	movs	r2, #0
 800941a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	4413      	add	r3, r2
 8009422:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009424:	2208      	movs	r2, #8
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	1a9b      	subs	r3, r3, r2
 800942a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f023 0307 	bic.w	r3, r3, #7
 8009432:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4a15      	ldr	r2, [pc, #84]	; (800948c <prvHeapInit+0xb4>)
 8009438:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800943a:	4b14      	ldr	r3, [pc, #80]	; (800948c <prvHeapInit+0xb4>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2200      	movs	r2, #0
 8009440:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009442:	4b12      	ldr	r3, [pc, #72]	; (800948c <prvHeapInit+0xb4>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2200      	movs	r2, #0
 8009448:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	1ad2      	subs	r2, r2, r3
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009458:	4b0c      	ldr	r3, [pc, #48]	; (800948c <prvHeapInit+0xb4>)
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	4a0a      	ldr	r2, [pc, #40]	; (8009490 <prvHeapInit+0xb8>)
 8009466:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	4a09      	ldr	r2, [pc, #36]	; (8009494 <prvHeapInit+0xbc>)
 800946e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009470:	4b09      	ldr	r3, [pc, #36]	; (8009498 <prvHeapInit+0xc0>)
 8009472:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009476:	601a      	str	r2, [r3, #0]
}
 8009478:	bf00      	nop
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	bc80      	pop	{r7}
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	20000fe8 	.word	0x20000fe8
 8009488:	200036f8 	.word	0x200036f8
 800948c:	20003700 	.word	0x20003700
 8009490:	20003708 	.word	0x20003708
 8009494:	20003704 	.word	0x20003704
 8009498:	2000370c 	.word	0x2000370c

0800949c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094a4:	4b27      	ldr	r3, [pc, #156]	; (8009544 <prvInsertBlockIntoFreeList+0xa8>)
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	e002      	b.n	80094b0 <prvInsertBlockIntoFreeList+0x14>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	60fb      	str	r3, [r7, #12]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d8f7      	bhi.n	80094aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	4413      	add	r3, r2
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d108      	bne.n	80094de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	441a      	add	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	441a      	add	r2, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d118      	bne.n	8009524 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	4b14      	ldr	r3, [pc, #80]	; (8009548 <prvInsertBlockIntoFreeList+0xac>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d00d      	beq.n	800951a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	441a      	add	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	e008      	b.n	800952c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800951a:	4b0b      	ldr	r3, [pc, #44]	; (8009548 <prvInsertBlockIntoFreeList+0xac>)
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	e003      	b.n	800952c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	429a      	cmp	r2, r3
 8009532:	d002      	beq.n	800953a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800953a:	bf00      	nop
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	bc80      	pop	{r7}
 8009542:	4770      	bx	lr
 8009544:	200036f8 	.word	0x200036f8
 8009548:	20003700 	.word	0x20003700

0800954c <atof>:
 800954c:	2100      	movs	r1, #0
 800954e:	f001 bf5d 	b.w	800b40c <strtod>
	...

08009554 <__errno>:
 8009554:	4b01      	ldr	r3, [pc, #4]	; (800955c <__errno+0x8>)
 8009556:	6818      	ldr	r0, [r3, #0]
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	2000000c 	.word	0x2000000c

08009560 <std>:
 8009560:	2300      	movs	r3, #0
 8009562:	b510      	push	{r4, lr}
 8009564:	4604      	mov	r4, r0
 8009566:	e9c0 3300 	strd	r3, r3, [r0]
 800956a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800956e:	6083      	str	r3, [r0, #8]
 8009570:	8181      	strh	r1, [r0, #12]
 8009572:	6643      	str	r3, [r0, #100]	; 0x64
 8009574:	81c2      	strh	r2, [r0, #14]
 8009576:	6183      	str	r3, [r0, #24]
 8009578:	4619      	mov	r1, r3
 800957a:	2208      	movs	r2, #8
 800957c:	305c      	adds	r0, #92	; 0x5c
 800957e:	f000 f91a 	bl	80097b6 <memset>
 8009582:	4b05      	ldr	r3, [pc, #20]	; (8009598 <std+0x38>)
 8009584:	6224      	str	r4, [r4, #32]
 8009586:	6263      	str	r3, [r4, #36]	; 0x24
 8009588:	4b04      	ldr	r3, [pc, #16]	; (800959c <std+0x3c>)
 800958a:	62a3      	str	r3, [r4, #40]	; 0x28
 800958c:	4b04      	ldr	r3, [pc, #16]	; (80095a0 <std+0x40>)
 800958e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009590:	4b04      	ldr	r3, [pc, #16]	; (80095a4 <std+0x44>)
 8009592:	6323      	str	r3, [r4, #48]	; 0x30
 8009594:	bd10      	pop	{r4, pc}
 8009596:	bf00      	nop
 8009598:	0800a705 	.word	0x0800a705
 800959c:	0800a727 	.word	0x0800a727
 80095a0:	0800a75f 	.word	0x0800a75f
 80095a4:	0800a783 	.word	0x0800a783

080095a8 <_cleanup_r>:
 80095a8:	4901      	ldr	r1, [pc, #4]	; (80095b0 <_cleanup_r+0x8>)
 80095aa:	f000 b8af 	b.w	800970c <_fwalk_reent>
 80095ae:	bf00      	nop
 80095b0:	0800c489 	.word	0x0800c489

080095b4 <__sfmoreglue>:
 80095b4:	b570      	push	{r4, r5, r6, lr}
 80095b6:	2568      	movs	r5, #104	; 0x68
 80095b8:	1e4a      	subs	r2, r1, #1
 80095ba:	4355      	muls	r5, r2
 80095bc:	460e      	mov	r6, r1
 80095be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095c2:	f000 f901 	bl	80097c8 <_malloc_r>
 80095c6:	4604      	mov	r4, r0
 80095c8:	b140      	cbz	r0, 80095dc <__sfmoreglue+0x28>
 80095ca:	2100      	movs	r1, #0
 80095cc:	e9c0 1600 	strd	r1, r6, [r0]
 80095d0:	300c      	adds	r0, #12
 80095d2:	60a0      	str	r0, [r4, #8]
 80095d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095d8:	f000 f8ed 	bl	80097b6 <memset>
 80095dc:	4620      	mov	r0, r4
 80095de:	bd70      	pop	{r4, r5, r6, pc}

080095e0 <__sfp_lock_acquire>:
 80095e0:	4801      	ldr	r0, [pc, #4]	; (80095e8 <__sfp_lock_acquire+0x8>)
 80095e2:	f000 b8d8 	b.w	8009796 <__retarget_lock_acquire_recursive>
 80095e6:	bf00      	nop
 80095e8:	20003ba8 	.word	0x20003ba8

080095ec <__sfp_lock_release>:
 80095ec:	4801      	ldr	r0, [pc, #4]	; (80095f4 <__sfp_lock_release+0x8>)
 80095ee:	f000 b8d3 	b.w	8009798 <__retarget_lock_release_recursive>
 80095f2:	bf00      	nop
 80095f4:	20003ba8 	.word	0x20003ba8

080095f8 <__sinit_lock_acquire>:
 80095f8:	4801      	ldr	r0, [pc, #4]	; (8009600 <__sinit_lock_acquire+0x8>)
 80095fa:	f000 b8cc 	b.w	8009796 <__retarget_lock_acquire_recursive>
 80095fe:	bf00      	nop
 8009600:	20003ba3 	.word	0x20003ba3

08009604 <__sinit_lock_release>:
 8009604:	4801      	ldr	r0, [pc, #4]	; (800960c <__sinit_lock_release+0x8>)
 8009606:	f000 b8c7 	b.w	8009798 <__retarget_lock_release_recursive>
 800960a:	bf00      	nop
 800960c:	20003ba3 	.word	0x20003ba3

08009610 <__sinit>:
 8009610:	b510      	push	{r4, lr}
 8009612:	4604      	mov	r4, r0
 8009614:	f7ff fff0 	bl	80095f8 <__sinit_lock_acquire>
 8009618:	69a3      	ldr	r3, [r4, #24]
 800961a:	b11b      	cbz	r3, 8009624 <__sinit+0x14>
 800961c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009620:	f7ff bff0 	b.w	8009604 <__sinit_lock_release>
 8009624:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009628:	6523      	str	r3, [r4, #80]	; 0x50
 800962a:	4b13      	ldr	r3, [pc, #76]	; (8009678 <__sinit+0x68>)
 800962c:	4a13      	ldr	r2, [pc, #76]	; (800967c <__sinit+0x6c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	62a2      	str	r2, [r4, #40]	; 0x28
 8009632:	42a3      	cmp	r3, r4
 8009634:	bf08      	it	eq
 8009636:	2301      	moveq	r3, #1
 8009638:	4620      	mov	r0, r4
 800963a:	bf08      	it	eq
 800963c:	61a3      	streq	r3, [r4, #24]
 800963e:	f000 f81f 	bl	8009680 <__sfp>
 8009642:	6060      	str	r0, [r4, #4]
 8009644:	4620      	mov	r0, r4
 8009646:	f000 f81b 	bl	8009680 <__sfp>
 800964a:	60a0      	str	r0, [r4, #8]
 800964c:	4620      	mov	r0, r4
 800964e:	f000 f817 	bl	8009680 <__sfp>
 8009652:	2200      	movs	r2, #0
 8009654:	2104      	movs	r1, #4
 8009656:	60e0      	str	r0, [r4, #12]
 8009658:	6860      	ldr	r0, [r4, #4]
 800965a:	f7ff ff81 	bl	8009560 <std>
 800965e:	2201      	movs	r2, #1
 8009660:	2109      	movs	r1, #9
 8009662:	68a0      	ldr	r0, [r4, #8]
 8009664:	f7ff ff7c 	bl	8009560 <std>
 8009668:	2202      	movs	r2, #2
 800966a:	2112      	movs	r1, #18
 800966c:	68e0      	ldr	r0, [r4, #12]
 800966e:	f7ff ff77 	bl	8009560 <std>
 8009672:	2301      	movs	r3, #1
 8009674:	61a3      	str	r3, [r4, #24]
 8009676:	e7d1      	b.n	800961c <__sinit+0xc>
 8009678:	0800e2dc 	.word	0x0800e2dc
 800967c:	080095a9 	.word	0x080095a9

08009680 <__sfp>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	4607      	mov	r7, r0
 8009684:	f7ff ffac 	bl	80095e0 <__sfp_lock_acquire>
 8009688:	4b1e      	ldr	r3, [pc, #120]	; (8009704 <__sfp+0x84>)
 800968a:	681e      	ldr	r6, [r3, #0]
 800968c:	69b3      	ldr	r3, [r6, #24]
 800968e:	b913      	cbnz	r3, 8009696 <__sfp+0x16>
 8009690:	4630      	mov	r0, r6
 8009692:	f7ff ffbd 	bl	8009610 <__sinit>
 8009696:	3648      	adds	r6, #72	; 0x48
 8009698:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800969c:	3b01      	subs	r3, #1
 800969e:	d503      	bpl.n	80096a8 <__sfp+0x28>
 80096a0:	6833      	ldr	r3, [r6, #0]
 80096a2:	b30b      	cbz	r3, 80096e8 <__sfp+0x68>
 80096a4:	6836      	ldr	r6, [r6, #0]
 80096a6:	e7f7      	b.n	8009698 <__sfp+0x18>
 80096a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096ac:	b9d5      	cbnz	r5, 80096e4 <__sfp+0x64>
 80096ae:	4b16      	ldr	r3, [pc, #88]	; (8009708 <__sfp+0x88>)
 80096b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096b4:	60e3      	str	r3, [r4, #12]
 80096b6:	6665      	str	r5, [r4, #100]	; 0x64
 80096b8:	f000 f86c 	bl	8009794 <__retarget_lock_init_recursive>
 80096bc:	f7ff ff96 	bl	80095ec <__sfp_lock_release>
 80096c0:	2208      	movs	r2, #8
 80096c2:	4629      	mov	r1, r5
 80096c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096cc:	6025      	str	r5, [r4, #0]
 80096ce:	61a5      	str	r5, [r4, #24]
 80096d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096d4:	f000 f86f 	bl	80097b6 <memset>
 80096d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096e0:	4620      	mov	r0, r4
 80096e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096e4:	3468      	adds	r4, #104	; 0x68
 80096e6:	e7d9      	b.n	800969c <__sfp+0x1c>
 80096e8:	2104      	movs	r1, #4
 80096ea:	4638      	mov	r0, r7
 80096ec:	f7ff ff62 	bl	80095b4 <__sfmoreglue>
 80096f0:	4604      	mov	r4, r0
 80096f2:	6030      	str	r0, [r6, #0]
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d1d5      	bne.n	80096a4 <__sfp+0x24>
 80096f8:	f7ff ff78 	bl	80095ec <__sfp_lock_release>
 80096fc:	230c      	movs	r3, #12
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	e7ee      	b.n	80096e0 <__sfp+0x60>
 8009702:	bf00      	nop
 8009704:	0800e2dc 	.word	0x0800e2dc
 8009708:	ffff0001 	.word	0xffff0001

0800970c <_fwalk_reent>:
 800970c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009710:	4606      	mov	r6, r0
 8009712:	4688      	mov	r8, r1
 8009714:	2700      	movs	r7, #0
 8009716:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800971a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800971e:	f1b9 0901 	subs.w	r9, r9, #1
 8009722:	d505      	bpl.n	8009730 <_fwalk_reent+0x24>
 8009724:	6824      	ldr	r4, [r4, #0]
 8009726:	2c00      	cmp	r4, #0
 8009728:	d1f7      	bne.n	800971a <_fwalk_reent+0xe>
 800972a:	4638      	mov	r0, r7
 800972c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009730:	89ab      	ldrh	r3, [r5, #12]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d907      	bls.n	8009746 <_fwalk_reent+0x3a>
 8009736:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800973a:	3301      	adds	r3, #1
 800973c:	d003      	beq.n	8009746 <_fwalk_reent+0x3a>
 800973e:	4629      	mov	r1, r5
 8009740:	4630      	mov	r0, r6
 8009742:	47c0      	blx	r8
 8009744:	4307      	orrs	r7, r0
 8009746:	3568      	adds	r5, #104	; 0x68
 8009748:	e7e9      	b.n	800971e <_fwalk_reent+0x12>
	...

0800974c <__libc_init_array>:
 800974c:	b570      	push	{r4, r5, r6, lr}
 800974e:	2600      	movs	r6, #0
 8009750:	4d0c      	ldr	r5, [pc, #48]	; (8009784 <__libc_init_array+0x38>)
 8009752:	4c0d      	ldr	r4, [pc, #52]	; (8009788 <__libc_init_array+0x3c>)
 8009754:	1b64      	subs	r4, r4, r5
 8009756:	10a4      	asrs	r4, r4, #2
 8009758:	42a6      	cmp	r6, r4
 800975a:	d109      	bne.n	8009770 <__libc_init_array+0x24>
 800975c:	f004 fc6a 	bl	800e034 <_init>
 8009760:	2600      	movs	r6, #0
 8009762:	4d0a      	ldr	r5, [pc, #40]	; (800978c <__libc_init_array+0x40>)
 8009764:	4c0a      	ldr	r4, [pc, #40]	; (8009790 <__libc_init_array+0x44>)
 8009766:	1b64      	subs	r4, r4, r5
 8009768:	10a4      	asrs	r4, r4, #2
 800976a:	42a6      	cmp	r6, r4
 800976c:	d105      	bne.n	800977a <__libc_init_array+0x2e>
 800976e:	bd70      	pop	{r4, r5, r6, pc}
 8009770:	f855 3b04 	ldr.w	r3, [r5], #4
 8009774:	4798      	blx	r3
 8009776:	3601      	adds	r6, #1
 8009778:	e7ee      	b.n	8009758 <__libc_init_array+0xc>
 800977a:	f855 3b04 	ldr.w	r3, [r5], #4
 800977e:	4798      	blx	r3
 8009780:	3601      	adds	r6, #1
 8009782:	e7f2      	b.n	800976a <__libc_init_array+0x1e>
 8009784:	0800e790 	.word	0x0800e790
 8009788:	0800e790 	.word	0x0800e790
 800978c:	0800e790 	.word	0x0800e790
 8009790:	0800e794 	.word	0x0800e794

08009794 <__retarget_lock_init_recursive>:
 8009794:	4770      	bx	lr

08009796 <__retarget_lock_acquire_recursive>:
 8009796:	4770      	bx	lr

08009798 <__retarget_lock_release_recursive>:
 8009798:	4770      	bx	lr

0800979a <memcpy>:
 800979a:	440a      	add	r2, r1
 800979c:	4291      	cmp	r1, r2
 800979e:	f100 33ff 	add.w	r3, r0, #4294967295
 80097a2:	d100      	bne.n	80097a6 <memcpy+0xc>
 80097a4:	4770      	bx	lr
 80097a6:	b510      	push	{r4, lr}
 80097a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ac:	4291      	cmp	r1, r2
 80097ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097b2:	d1f9      	bne.n	80097a8 <memcpy+0xe>
 80097b4:	bd10      	pop	{r4, pc}

080097b6 <memset>:
 80097b6:	4603      	mov	r3, r0
 80097b8:	4402      	add	r2, r0
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d100      	bne.n	80097c0 <memset+0xa>
 80097be:	4770      	bx	lr
 80097c0:	f803 1b01 	strb.w	r1, [r3], #1
 80097c4:	e7f9      	b.n	80097ba <memset+0x4>
	...

080097c8 <_malloc_r>:
 80097c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ca:	1ccd      	adds	r5, r1, #3
 80097cc:	f025 0503 	bic.w	r5, r5, #3
 80097d0:	3508      	adds	r5, #8
 80097d2:	2d0c      	cmp	r5, #12
 80097d4:	bf38      	it	cc
 80097d6:	250c      	movcc	r5, #12
 80097d8:	2d00      	cmp	r5, #0
 80097da:	4606      	mov	r6, r0
 80097dc:	db01      	blt.n	80097e2 <_malloc_r+0x1a>
 80097de:	42a9      	cmp	r1, r5
 80097e0:	d903      	bls.n	80097ea <_malloc_r+0x22>
 80097e2:	230c      	movs	r3, #12
 80097e4:	6033      	str	r3, [r6, #0]
 80097e6:	2000      	movs	r0, #0
 80097e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ea:	f003 fa3f 	bl	800cc6c <__malloc_lock>
 80097ee:	4921      	ldr	r1, [pc, #132]	; (8009874 <_malloc_r+0xac>)
 80097f0:	680a      	ldr	r2, [r1, #0]
 80097f2:	4614      	mov	r4, r2
 80097f4:	b99c      	cbnz	r4, 800981e <_malloc_r+0x56>
 80097f6:	4f20      	ldr	r7, [pc, #128]	; (8009878 <_malloc_r+0xb0>)
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	b923      	cbnz	r3, 8009806 <_malloc_r+0x3e>
 80097fc:	4621      	mov	r1, r4
 80097fe:	4630      	mov	r0, r6
 8009800:	f000 ff18 	bl	800a634 <_sbrk_r>
 8009804:	6038      	str	r0, [r7, #0]
 8009806:	4629      	mov	r1, r5
 8009808:	4630      	mov	r0, r6
 800980a:	f000 ff13 	bl	800a634 <_sbrk_r>
 800980e:	1c43      	adds	r3, r0, #1
 8009810:	d123      	bne.n	800985a <_malloc_r+0x92>
 8009812:	230c      	movs	r3, #12
 8009814:	4630      	mov	r0, r6
 8009816:	6033      	str	r3, [r6, #0]
 8009818:	f003 fa2e 	bl	800cc78 <__malloc_unlock>
 800981c:	e7e3      	b.n	80097e6 <_malloc_r+0x1e>
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	1b5b      	subs	r3, r3, r5
 8009822:	d417      	bmi.n	8009854 <_malloc_r+0x8c>
 8009824:	2b0b      	cmp	r3, #11
 8009826:	d903      	bls.n	8009830 <_malloc_r+0x68>
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	441c      	add	r4, r3
 800982c:	6025      	str	r5, [r4, #0]
 800982e:	e004      	b.n	800983a <_malloc_r+0x72>
 8009830:	6863      	ldr	r3, [r4, #4]
 8009832:	42a2      	cmp	r2, r4
 8009834:	bf0c      	ite	eq
 8009836:	600b      	streq	r3, [r1, #0]
 8009838:	6053      	strne	r3, [r2, #4]
 800983a:	4630      	mov	r0, r6
 800983c:	f003 fa1c 	bl	800cc78 <__malloc_unlock>
 8009840:	f104 000b 	add.w	r0, r4, #11
 8009844:	1d23      	adds	r3, r4, #4
 8009846:	f020 0007 	bic.w	r0, r0, #7
 800984a:	1ac2      	subs	r2, r0, r3
 800984c:	d0cc      	beq.n	80097e8 <_malloc_r+0x20>
 800984e:	1a1b      	subs	r3, r3, r0
 8009850:	50a3      	str	r3, [r4, r2]
 8009852:	e7c9      	b.n	80097e8 <_malloc_r+0x20>
 8009854:	4622      	mov	r2, r4
 8009856:	6864      	ldr	r4, [r4, #4]
 8009858:	e7cc      	b.n	80097f4 <_malloc_r+0x2c>
 800985a:	1cc4      	adds	r4, r0, #3
 800985c:	f024 0403 	bic.w	r4, r4, #3
 8009860:	42a0      	cmp	r0, r4
 8009862:	d0e3      	beq.n	800982c <_malloc_r+0x64>
 8009864:	1a21      	subs	r1, r4, r0
 8009866:	4630      	mov	r0, r6
 8009868:	f000 fee4 	bl	800a634 <_sbrk_r>
 800986c:	3001      	adds	r0, #1
 800986e:	d1dd      	bne.n	800982c <_malloc_r+0x64>
 8009870:	e7cf      	b.n	8009812 <_malloc_r+0x4a>
 8009872:	bf00      	nop
 8009874:	20003710 	.word	0x20003710
 8009878:	20003714 	.word	0x20003714

0800987c <__cvt>:
 800987c:	2b00      	cmp	r3, #0
 800987e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009882:	461f      	mov	r7, r3
 8009884:	bfbb      	ittet	lt
 8009886:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800988a:	461f      	movlt	r7, r3
 800988c:	2300      	movge	r3, #0
 800988e:	232d      	movlt	r3, #45	; 0x2d
 8009890:	b088      	sub	sp, #32
 8009892:	4614      	mov	r4, r2
 8009894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009896:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009898:	7013      	strb	r3, [r2, #0]
 800989a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800989c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80098a0:	f023 0820 	bic.w	r8, r3, #32
 80098a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80098a8:	d005      	beq.n	80098b6 <__cvt+0x3a>
 80098aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80098ae:	d100      	bne.n	80098b2 <__cvt+0x36>
 80098b0:	3501      	adds	r5, #1
 80098b2:	2302      	movs	r3, #2
 80098b4:	e000      	b.n	80098b8 <__cvt+0x3c>
 80098b6:	2303      	movs	r3, #3
 80098b8:	aa07      	add	r2, sp, #28
 80098ba:	9204      	str	r2, [sp, #16]
 80098bc:	aa06      	add	r2, sp, #24
 80098be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80098c2:	e9cd 3500 	strd	r3, r5, [sp]
 80098c6:	4622      	mov	r2, r4
 80098c8:	463b      	mov	r3, r7
 80098ca:	f001 ff69 	bl	800b7a0 <_dtoa_r>
 80098ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80098d2:	4606      	mov	r6, r0
 80098d4:	d102      	bne.n	80098dc <__cvt+0x60>
 80098d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098d8:	07db      	lsls	r3, r3, #31
 80098da:	d522      	bpl.n	8009922 <__cvt+0xa6>
 80098dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80098e0:	eb06 0905 	add.w	r9, r6, r5
 80098e4:	d110      	bne.n	8009908 <__cvt+0x8c>
 80098e6:	7833      	ldrb	r3, [r6, #0]
 80098e8:	2b30      	cmp	r3, #48	; 0x30
 80098ea:	d10a      	bne.n	8009902 <__cvt+0x86>
 80098ec:	2200      	movs	r2, #0
 80098ee:	2300      	movs	r3, #0
 80098f0:	4620      	mov	r0, r4
 80098f2:	4639      	mov	r1, r7
 80098f4:	f7f7 f858 	bl	80009a8 <__aeabi_dcmpeq>
 80098f8:	b918      	cbnz	r0, 8009902 <__cvt+0x86>
 80098fa:	f1c5 0501 	rsb	r5, r5, #1
 80098fe:	f8ca 5000 	str.w	r5, [sl]
 8009902:	f8da 3000 	ldr.w	r3, [sl]
 8009906:	4499      	add	r9, r3
 8009908:	2200      	movs	r2, #0
 800990a:	2300      	movs	r3, #0
 800990c:	4620      	mov	r0, r4
 800990e:	4639      	mov	r1, r7
 8009910:	f7f7 f84a 	bl	80009a8 <__aeabi_dcmpeq>
 8009914:	b108      	cbz	r0, 800991a <__cvt+0x9e>
 8009916:	f8cd 901c 	str.w	r9, [sp, #28]
 800991a:	2230      	movs	r2, #48	; 0x30
 800991c:	9b07      	ldr	r3, [sp, #28]
 800991e:	454b      	cmp	r3, r9
 8009920:	d307      	bcc.n	8009932 <__cvt+0xb6>
 8009922:	4630      	mov	r0, r6
 8009924:	9b07      	ldr	r3, [sp, #28]
 8009926:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009928:	1b9b      	subs	r3, r3, r6
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	b008      	add	sp, #32
 800992e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009932:	1c59      	adds	r1, r3, #1
 8009934:	9107      	str	r1, [sp, #28]
 8009936:	701a      	strb	r2, [r3, #0]
 8009938:	e7f0      	b.n	800991c <__cvt+0xa0>

0800993a <__exponent>:
 800993a:	4603      	mov	r3, r0
 800993c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800993e:	2900      	cmp	r1, #0
 8009940:	f803 2b02 	strb.w	r2, [r3], #2
 8009944:	bfb6      	itet	lt
 8009946:	222d      	movlt	r2, #45	; 0x2d
 8009948:	222b      	movge	r2, #43	; 0x2b
 800994a:	4249      	neglt	r1, r1
 800994c:	2909      	cmp	r1, #9
 800994e:	7042      	strb	r2, [r0, #1]
 8009950:	dd2b      	ble.n	80099aa <__exponent+0x70>
 8009952:	f10d 0407 	add.w	r4, sp, #7
 8009956:	46a4      	mov	ip, r4
 8009958:	270a      	movs	r7, #10
 800995a:	fb91 f6f7 	sdiv	r6, r1, r7
 800995e:	460a      	mov	r2, r1
 8009960:	46a6      	mov	lr, r4
 8009962:	fb07 1516 	mls	r5, r7, r6, r1
 8009966:	2a63      	cmp	r2, #99	; 0x63
 8009968:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800996c:	4631      	mov	r1, r6
 800996e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009972:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009976:	dcf0      	bgt.n	800995a <__exponent+0x20>
 8009978:	3130      	adds	r1, #48	; 0x30
 800997a:	f1ae 0502 	sub.w	r5, lr, #2
 800997e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009982:	4629      	mov	r1, r5
 8009984:	1c44      	adds	r4, r0, #1
 8009986:	4561      	cmp	r1, ip
 8009988:	d30a      	bcc.n	80099a0 <__exponent+0x66>
 800998a:	f10d 0209 	add.w	r2, sp, #9
 800998e:	eba2 020e 	sub.w	r2, r2, lr
 8009992:	4565      	cmp	r5, ip
 8009994:	bf88      	it	hi
 8009996:	2200      	movhi	r2, #0
 8009998:	4413      	add	r3, r2
 800999a:	1a18      	subs	r0, r3, r0
 800999c:	b003      	add	sp, #12
 800999e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099a4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80099a8:	e7ed      	b.n	8009986 <__exponent+0x4c>
 80099aa:	2330      	movs	r3, #48	; 0x30
 80099ac:	3130      	adds	r1, #48	; 0x30
 80099ae:	7083      	strb	r3, [r0, #2]
 80099b0:	70c1      	strb	r1, [r0, #3]
 80099b2:	1d03      	adds	r3, r0, #4
 80099b4:	e7f1      	b.n	800999a <__exponent+0x60>
	...

080099b8 <_printf_float>:
 80099b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099bc:	b091      	sub	sp, #68	; 0x44
 80099be:	460c      	mov	r4, r1
 80099c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80099c4:	4616      	mov	r6, r2
 80099c6:	461f      	mov	r7, r3
 80099c8:	4605      	mov	r5, r0
 80099ca:	f003 f911 	bl	800cbf0 <_localeconv_r>
 80099ce:	6803      	ldr	r3, [r0, #0]
 80099d0:	4618      	mov	r0, r3
 80099d2:	9309      	str	r3, [sp, #36]	; 0x24
 80099d4:	f7f6 fbbc 	bl	8000150 <strlen>
 80099d8:	2300      	movs	r3, #0
 80099da:	930e      	str	r3, [sp, #56]	; 0x38
 80099dc:	f8d8 3000 	ldr.w	r3, [r8]
 80099e0:	900a      	str	r0, [sp, #40]	; 0x28
 80099e2:	3307      	adds	r3, #7
 80099e4:	f023 0307 	bic.w	r3, r3, #7
 80099e8:	f103 0208 	add.w	r2, r3, #8
 80099ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 80099f0:	f8d4 b000 	ldr.w	fp, [r4]
 80099f4:	f8c8 2000 	str.w	r2, [r8]
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009a00:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009a04:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0e:	4640      	mov	r0, r8
 8009a10:	4b9c      	ldr	r3, [pc, #624]	; (8009c84 <_printf_float+0x2cc>)
 8009a12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a14:	f7f6 fffa 	bl	8000a0c <__aeabi_dcmpun>
 8009a18:	bb70      	cbnz	r0, 8009a78 <_printf_float+0xc0>
 8009a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1e:	4640      	mov	r0, r8
 8009a20:	4b98      	ldr	r3, [pc, #608]	; (8009c84 <_printf_float+0x2cc>)
 8009a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a24:	f7f6 ffd4 	bl	80009d0 <__aeabi_dcmple>
 8009a28:	bb30      	cbnz	r0, 8009a78 <_printf_float+0xc0>
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4640      	mov	r0, r8
 8009a30:	4651      	mov	r1, sl
 8009a32:	f7f6 ffc3 	bl	80009bc <__aeabi_dcmplt>
 8009a36:	b110      	cbz	r0, 8009a3e <_printf_float+0x86>
 8009a38:	232d      	movs	r3, #45	; 0x2d
 8009a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a3e:	4b92      	ldr	r3, [pc, #584]	; (8009c88 <_printf_float+0x2d0>)
 8009a40:	4892      	ldr	r0, [pc, #584]	; (8009c8c <_printf_float+0x2d4>)
 8009a42:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009a46:	bf94      	ite	ls
 8009a48:	4698      	movls	r8, r3
 8009a4a:	4680      	movhi	r8, r0
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	f04f 0a00 	mov.w	sl, #0
 8009a52:	6123      	str	r3, [r4, #16]
 8009a54:	f02b 0304 	bic.w	r3, fp, #4
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	4633      	mov	r3, r6
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	4628      	mov	r0, r5
 8009a60:	9700      	str	r7, [sp, #0]
 8009a62:	aa0f      	add	r2, sp, #60	; 0x3c
 8009a64:	f000 f9d4 	bl	8009e10 <_printf_common>
 8009a68:	3001      	adds	r0, #1
 8009a6a:	f040 8090 	bne.w	8009b8e <_printf_float+0x1d6>
 8009a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a72:	b011      	add	sp, #68	; 0x44
 8009a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a78:	4642      	mov	r2, r8
 8009a7a:	4653      	mov	r3, sl
 8009a7c:	4640      	mov	r0, r8
 8009a7e:	4651      	mov	r1, sl
 8009a80:	f7f6 ffc4 	bl	8000a0c <__aeabi_dcmpun>
 8009a84:	b148      	cbz	r0, 8009a9a <_printf_float+0xe2>
 8009a86:	f1ba 0f00 	cmp.w	sl, #0
 8009a8a:	bfb8      	it	lt
 8009a8c:	232d      	movlt	r3, #45	; 0x2d
 8009a8e:	4880      	ldr	r0, [pc, #512]	; (8009c90 <_printf_float+0x2d8>)
 8009a90:	bfb8      	it	lt
 8009a92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a96:	4b7f      	ldr	r3, [pc, #508]	; (8009c94 <_printf_float+0x2dc>)
 8009a98:	e7d3      	b.n	8009a42 <_printf_float+0x8a>
 8009a9a:	6863      	ldr	r3, [r4, #4]
 8009a9c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	d142      	bne.n	8009b2a <_printf_float+0x172>
 8009aa4:	2306      	movs	r3, #6
 8009aa6:	6063      	str	r3, [r4, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	9206      	str	r2, [sp, #24]
 8009aac:	aa0e      	add	r2, sp, #56	; 0x38
 8009aae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009ab2:	aa0d      	add	r2, sp, #52	; 0x34
 8009ab4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009ab8:	9203      	str	r2, [sp, #12]
 8009aba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009abe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009ac2:	6023      	str	r3, [r4, #0]
 8009ac4:	6863      	ldr	r3, [r4, #4]
 8009ac6:	4642      	mov	r2, r8
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	4628      	mov	r0, r5
 8009acc:	4653      	mov	r3, sl
 8009ace:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ad0:	f7ff fed4 	bl	800987c <__cvt>
 8009ad4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ad6:	4680      	mov	r8, r0
 8009ad8:	2947      	cmp	r1, #71	; 0x47
 8009ada:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009adc:	d108      	bne.n	8009af0 <_printf_float+0x138>
 8009ade:	1cc8      	adds	r0, r1, #3
 8009ae0:	db02      	blt.n	8009ae8 <_printf_float+0x130>
 8009ae2:	6863      	ldr	r3, [r4, #4]
 8009ae4:	4299      	cmp	r1, r3
 8009ae6:	dd40      	ble.n	8009b6a <_printf_float+0x1b2>
 8009ae8:	f1a9 0902 	sub.w	r9, r9, #2
 8009aec:	fa5f f989 	uxtb.w	r9, r9
 8009af0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009af4:	d81f      	bhi.n	8009b36 <_printf_float+0x17e>
 8009af6:	464a      	mov	r2, r9
 8009af8:	3901      	subs	r1, #1
 8009afa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009afe:	910d      	str	r1, [sp, #52]	; 0x34
 8009b00:	f7ff ff1b 	bl	800993a <__exponent>
 8009b04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b06:	4682      	mov	sl, r0
 8009b08:	1813      	adds	r3, r2, r0
 8009b0a:	2a01      	cmp	r2, #1
 8009b0c:	6123      	str	r3, [r4, #16]
 8009b0e:	dc02      	bgt.n	8009b16 <_printf_float+0x15e>
 8009b10:	6822      	ldr	r2, [r4, #0]
 8009b12:	07d2      	lsls	r2, r2, #31
 8009b14:	d501      	bpl.n	8009b1a <_printf_float+0x162>
 8009b16:	3301      	adds	r3, #1
 8009b18:	6123      	str	r3, [r4, #16]
 8009b1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d09b      	beq.n	8009a5a <_printf_float+0xa2>
 8009b22:	232d      	movs	r3, #45	; 0x2d
 8009b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b28:	e797      	b.n	8009a5a <_printf_float+0xa2>
 8009b2a:	2947      	cmp	r1, #71	; 0x47
 8009b2c:	d1bc      	bne.n	8009aa8 <_printf_float+0xf0>
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1ba      	bne.n	8009aa8 <_printf_float+0xf0>
 8009b32:	2301      	movs	r3, #1
 8009b34:	e7b7      	b.n	8009aa6 <_printf_float+0xee>
 8009b36:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009b3a:	d118      	bne.n	8009b6e <_printf_float+0x1b6>
 8009b3c:	2900      	cmp	r1, #0
 8009b3e:	6863      	ldr	r3, [r4, #4]
 8009b40:	dd0b      	ble.n	8009b5a <_printf_float+0x1a2>
 8009b42:	6121      	str	r1, [r4, #16]
 8009b44:	b913      	cbnz	r3, 8009b4c <_printf_float+0x194>
 8009b46:	6822      	ldr	r2, [r4, #0]
 8009b48:	07d0      	lsls	r0, r2, #31
 8009b4a:	d502      	bpl.n	8009b52 <_printf_float+0x19a>
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	440b      	add	r3, r1
 8009b50:	6123      	str	r3, [r4, #16]
 8009b52:	f04f 0a00 	mov.w	sl, #0
 8009b56:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b58:	e7df      	b.n	8009b1a <_printf_float+0x162>
 8009b5a:	b913      	cbnz	r3, 8009b62 <_printf_float+0x1aa>
 8009b5c:	6822      	ldr	r2, [r4, #0]
 8009b5e:	07d2      	lsls	r2, r2, #31
 8009b60:	d501      	bpl.n	8009b66 <_printf_float+0x1ae>
 8009b62:	3302      	adds	r3, #2
 8009b64:	e7f4      	b.n	8009b50 <_printf_float+0x198>
 8009b66:	2301      	movs	r3, #1
 8009b68:	e7f2      	b.n	8009b50 <_printf_float+0x198>
 8009b6a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b70:	4299      	cmp	r1, r3
 8009b72:	db05      	blt.n	8009b80 <_printf_float+0x1c8>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	6121      	str	r1, [r4, #16]
 8009b78:	07d8      	lsls	r0, r3, #31
 8009b7a:	d5ea      	bpl.n	8009b52 <_printf_float+0x19a>
 8009b7c:	1c4b      	adds	r3, r1, #1
 8009b7e:	e7e7      	b.n	8009b50 <_printf_float+0x198>
 8009b80:	2900      	cmp	r1, #0
 8009b82:	bfcc      	ite	gt
 8009b84:	2201      	movgt	r2, #1
 8009b86:	f1c1 0202 	rsble	r2, r1, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	e7e0      	b.n	8009b50 <_printf_float+0x198>
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	055a      	lsls	r2, r3, #21
 8009b92:	d407      	bmi.n	8009ba4 <_printf_float+0x1ec>
 8009b94:	6923      	ldr	r3, [r4, #16]
 8009b96:	4642      	mov	r2, r8
 8009b98:	4631      	mov	r1, r6
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	47b8      	blx	r7
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	d12b      	bne.n	8009bfa <_printf_float+0x242>
 8009ba2:	e764      	b.n	8009a6e <_printf_float+0xb6>
 8009ba4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009ba8:	f240 80dd 	bls.w	8009d66 <_printf_float+0x3ae>
 8009bac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	f7f6 fef8 	bl	80009a8 <__aeabi_dcmpeq>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d033      	beq.n	8009c24 <_printf_float+0x26c>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	4a35      	ldr	r2, [pc, #212]	; (8009c98 <_printf_float+0x2e0>)
 8009bc4:	47b8      	blx	r7
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	f43f af51 	beq.w	8009a6e <_printf_float+0xb6>
 8009bcc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	db02      	blt.n	8009bda <_printf_float+0x222>
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	07d8      	lsls	r0, r3, #31
 8009bd8:	d50f      	bpl.n	8009bfa <_printf_float+0x242>
 8009bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bde:	4631      	mov	r1, r6
 8009be0:	4628      	mov	r0, r5
 8009be2:	47b8      	blx	r7
 8009be4:	3001      	adds	r0, #1
 8009be6:	f43f af42 	beq.w	8009a6e <_printf_float+0xb6>
 8009bea:	f04f 0800 	mov.w	r8, #0
 8009bee:	f104 091a 	add.w	r9, r4, #26
 8009bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	4543      	cmp	r3, r8
 8009bf8:	dc09      	bgt.n	8009c0e <_printf_float+0x256>
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	079b      	lsls	r3, r3, #30
 8009bfe:	f100 8102 	bmi.w	8009e06 <_printf_float+0x44e>
 8009c02:	68e0      	ldr	r0, [r4, #12]
 8009c04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c06:	4298      	cmp	r0, r3
 8009c08:	bfb8      	it	lt
 8009c0a:	4618      	movlt	r0, r3
 8009c0c:	e731      	b.n	8009a72 <_printf_float+0xba>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	464a      	mov	r2, r9
 8009c12:	4631      	mov	r1, r6
 8009c14:	4628      	mov	r0, r5
 8009c16:	47b8      	blx	r7
 8009c18:	3001      	adds	r0, #1
 8009c1a:	f43f af28 	beq.w	8009a6e <_printf_float+0xb6>
 8009c1e:	f108 0801 	add.w	r8, r8, #1
 8009c22:	e7e6      	b.n	8009bf2 <_printf_float+0x23a>
 8009c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	dc38      	bgt.n	8009c9c <_printf_float+0x2e4>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	4628      	mov	r0, r5
 8009c30:	4a19      	ldr	r2, [pc, #100]	; (8009c98 <_printf_float+0x2e0>)
 8009c32:	47b8      	blx	r7
 8009c34:	3001      	adds	r0, #1
 8009c36:	f43f af1a 	beq.w	8009a6e <_printf_float+0xb6>
 8009c3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	d102      	bne.n	8009c48 <_printf_float+0x290>
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	07d9      	lsls	r1, r3, #31
 8009c46:	d5d8      	bpl.n	8009bfa <_printf_float+0x242>
 8009c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4628      	mov	r0, r5
 8009c50:	47b8      	blx	r7
 8009c52:	3001      	adds	r0, #1
 8009c54:	f43f af0b 	beq.w	8009a6e <_printf_float+0xb6>
 8009c58:	f04f 0900 	mov.w	r9, #0
 8009c5c:	f104 0a1a 	add.w	sl, r4, #26
 8009c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c62:	425b      	negs	r3, r3
 8009c64:	454b      	cmp	r3, r9
 8009c66:	dc01      	bgt.n	8009c6c <_printf_float+0x2b4>
 8009c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c6a:	e794      	b.n	8009b96 <_printf_float+0x1de>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	4652      	mov	r2, sl
 8009c70:	4631      	mov	r1, r6
 8009c72:	4628      	mov	r0, r5
 8009c74:	47b8      	blx	r7
 8009c76:	3001      	adds	r0, #1
 8009c78:	f43f aef9 	beq.w	8009a6e <_printf_float+0xb6>
 8009c7c:	f109 0901 	add.w	r9, r9, #1
 8009c80:	e7ee      	b.n	8009c60 <_printf_float+0x2a8>
 8009c82:	bf00      	nop
 8009c84:	7fefffff 	.word	0x7fefffff
 8009c88:	0800e2e0 	.word	0x0800e2e0
 8009c8c:	0800e2e4 	.word	0x0800e2e4
 8009c90:	0800e2ec 	.word	0x0800e2ec
 8009c94:	0800e2e8 	.word	0x0800e2e8
 8009c98:	0800e2f0 	.word	0x0800e2f0
 8009c9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	bfa8      	it	ge
 8009ca4:	461a      	movge	r2, r3
 8009ca6:	2a00      	cmp	r2, #0
 8009ca8:	4691      	mov	r9, r2
 8009caa:	dc37      	bgt.n	8009d1c <_printf_float+0x364>
 8009cac:	f04f 0b00 	mov.w	fp, #0
 8009cb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cb4:	f104 021a 	add.w	r2, r4, #26
 8009cb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009cbc:	ebaa 0309 	sub.w	r3, sl, r9
 8009cc0:	455b      	cmp	r3, fp
 8009cc2:	dc33      	bgt.n	8009d2c <_printf_float+0x374>
 8009cc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	db3b      	blt.n	8009d44 <_printf_float+0x38c>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	07da      	lsls	r2, r3, #31
 8009cd0:	d438      	bmi.n	8009d44 <_printf_float+0x38c>
 8009cd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009cd6:	eba2 030a 	sub.w	r3, r2, sl
 8009cda:	eba2 0901 	sub.w	r9, r2, r1
 8009cde:	4599      	cmp	r9, r3
 8009ce0:	bfa8      	it	ge
 8009ce2:	4699      	movge	r9, r3
 8009ce4:	f1b9 0f00 	cmp.w	r9, #0
 8009ce8:	dc34      	bgt.n	8009d54 <_printf_float+0x39c>
 8009cea:	f04f 0800 	mov.w	r8, #0
 8009cee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cf2:	f104 0a1a 	add.w	sl, r4, #26
 8009cf6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009cfa:	1a9b      	subs	r3, r3, r2
 8009cfc:	eba3 0309 	sub.w	r3, r3, r9
 8009d00:	4543      	cmp	r3, r8
 8009d02:	f77f af7a 	ble.w	8009bfa <_printf_float+0x242>
 8009d06:	2301      	movs	r3, #1
 8009d08:	4652      	mov	r2, sl
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	47b8      	blx	r7
 8009d10:	3001      	adds	r0, #1
 8009d12:	f43f aeac 	beq.w	8009a6e <_printf_float+0xb6>
 8009d16:	f108 0801 	add.w	r8, r8, #1
 8009d1a:	e7ec      	b.n	8009cf6 <_printf_float+0x33e>
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	4631      	mov	r1, r6
 8009d20:	4642      	mov	r2, r8
 8009d22:	4628      	mov	r0, r5
 8009d24:	47b8      	blx	r7
 8009d26:	3001      	adds	r0, #1
 8009d28:	d1c0      	bne.n	8009cac <_printf_float+0x2f4>
 8009d2a:	e6a0      	b.n	8009a6e <_printf_float+0xb6>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	920b      	str	r2, [sp, #44]	; 0x2c
 8009d34:	47b8      	blx	r7
 8009d36:	3001      	adds	r0, #1
 8009d38:	f43f ae99 	beq.w	8009a6e <_printf_float+0xb6>
 8009d3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d3e:	f10b 0b01 	add.w	fp, fp, #1
 8009d42:	e7b9      	b.n	8009cb8 <_printf_float+0x300>
 8009d44:	4631      	mov	r1, r6
 8009d46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	47b8      	blx	r7
 8009d4e:	3001      	adds	r0, #1
 8009d50:	d1bf      	bne.n	8009cd2 <_printf_float+0x31a>
 8009d52:	e68c      	b.n	8009a6e <_printf_float+0xb6>
 8009d54:	464b      	mov	r3, r9
 8009d56:	4631      	mov	r1, r6
 8009d58:	4628      	mov	r0, r5
 8009d5a:	eb08 020a 	add.w	r2, r8, sl
 8009d5e:	47b8      	blx	r7
 8009d60:	3001      	adds	r0, #1
 8009d62:	d1c2      	bne.n	8009cea <_printf_float+0x332>
 8009d64:	e683      	b.n	8009a6e <_printf_float+0xb6>
 8009d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d68:	2a01      	cmp	r2, #1
 8009d6a:	dc01      	bgt.n	8009d70 <_printf_float+0x3b8>
 8009d6c:	07db      	lsls	r3, r3, #31
 8009d6e:	d537      	bpl.n	8009de0 <_printf_float+0x428>
 8009d70:	2301      	movs	r3, #1
 8009d72:	4642      	mov	r2, r8
 8009d74:	4631      	mov	r1, r6
 8009d76:	4628      	mov	r0, r5
 8009d78:	47b8      	blx	r7
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	f43f ae77 	beq.w	8009a6e <_printf_float+0xb6>
 8009d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d84:	4631      	mov	r1, r6
 8009d86:	4628      	mov	r0, r5
 8009d88:	47b8      	blx	r7
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	f43f ae6f 	beq.w	8009a6e <_printf_float+0xb6>
 8009d90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d94:	2200      	movs	r2, #0
 8009d96:	2300      	movs	r3, #0
 8009d98:	f7f6 fe06 	bl	80009a8 <__aeabi_dcmpeq>
 8009d9c:	b9d8      	cbnz	r0, 8009dd6 <_printf_float+0x41e>
 8009d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009da0:	f108 0201 	add.w	r2, r8, #1
 8009da4:	3b01      	subs	r3, #1
 8009da6:	4631      	mov	r1, r6
 8009da8:	4628      	mov	r0, r5
 8009daa:	47b8      	blx	r7
 8009dac:	3001      	adds	r0, #1
 8009dae:	d10e      	bne.n	8009dce <_printf_float+0x416>
 8009db0:	e65d      	b.n	8009a6e <_printf_float+0xb6>
 8009db2:	2301      	movs	r3, #1
 8009db4:	464a      	mov	r2, r9
 8009db6:	4631      	mov	r1, r6
 8009db8:	4628      	mov	r0, r5
 8009dba:	47b8      	blx	r7
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	f43f ae56 	beq.w	8009a6e <_printf_float+0xb6>
 8009dc2:	f108 0801 	add.w	r8, r8, #1
 8009dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	4543      	cmp	r3, r8
 8009dcc:	dcf1      	bgt.n	8009db2 <_printf_float+0x3fa>
 8009dce:	4653      	mov	r3, sl
 8009dd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009dd4:	e6e0      	b.n	8009b98 <_printf_float+0x1e0>
 8009dd6:	f04f 0800 	mov.w	r8, #0
 8009dda:	f104 091a 	add.w	r9, r4, #26
 8009dde:	e7f2      	b.n	8009dc6 <_printf_float+0x40e>
 8009de0:	2301      	movs	r3, #1
 8009de2:	4642      	mov	r2, r8
 8009de4:	e7df      	b.n	8009da6 <_printf_float+0x3ee>
 8009de6:	2301      	movs	r3, #1
 8009de8:	464a      	mov	r2, r9
 8009dea:	4631      	mov	r1, r6
 8009dec:	4628      	mov	r0, r5
 8009dee:	47b8      	blx	r7
 8009df0:	3001      	adds	r0, #1
 8009df2:	f43f ae3c 	beq.w	8009a6e <_printf_float+0xb6>
 8009df6:	f108 0801 	add.w	r8, r8, #1
 8009dfa:	68e3      	ldr	r3, [r4, #12]
 8009dfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009dfe:	1a5b      	subs	r3, r3, r1
 8009e00:	4543      	cmp	r3, r8
 8009e02:	dcf0      	bgt.n	8009de6 <_printf_float+0x42e>
 8009e04:	e6fd      	b.n	8009c02 <_printf_float+0x24a>
 8009e06:	f04f 0800 	mov.w	r8, #0
 8009e0a:	f104 0919 	add.w	r9, r4, #25
 8009e0e:	e7f4      	b.n	8009dfa <_printf_float+0x442>

08009e10 <_printf_common>:
 8009e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e14:	4616      	mov	r6, r2
 8009e16:	4699      	mov	r9, r3
 8009e18:	688a      	ldr	r2, [r1, #8]
 8009e1a:	690b      	ldr	r3, [r1, #16]
 8009e1c:	4607      	mov	r7, r0
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	bfb8      	it	lt
 8009e22:	4613      	movlt	r3, r2
 8009e24:	6033      	str	r3, [r6, #0]
 8009e26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e30:	b10a      	cbz	r2, 8009e36 <_printf_common+0x26>
 8009e32:	3301      	adds	r3, #1
 8009e34:	6033      	str	r3, [r6, #0]
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	0699      	lsls	r1, r3, #26
 8009e3a:	bf42      	ittt	mi
 8009e3c:	6833      	ldrmi	r3, [r6, #0]
 8009e3e:	3302      	addmi	r3, #2
 8009e40:	6033      	strmi	r3, [r6, #0]
 8009e42:	6825      	ldr	r5, [r4, #0]
 8009e44:	f015 0506 	ands.w	r5, r5, #6
 8009e48:	d106      	bne.n	8009e58 <_printf_common+0x48>
 8009e4a:	f104 0a19 	add.w	sl, r4, #25
 8009e4e:	68e3      	ldr	r3, [r4, #12]
 8009e50:	6832      	ldr	r2, [r6, #0]
 8009e52:	1a9b      	subs	r3, r3, r2
 8009e54:	42ab      	cmp	r3, r5
 8009e56:	dc28      	bgt.n	8009eaa <_printf_common+0x9a>
 8009e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e5c:	1e13      	subs	r3, r2, #0
 8009e5e:	6822      	ldr	r2, [r4, #0]
 8009e60:	bf18      	it	ne
 8009e62:	2301      	movne	r3, #1
 8009e64:	0692      	lsls	r2, r2, #26
 8009e66:	d42d      	bmi.n	8009ec4 <_printf_common+0xb4>
 8009e68:	4649      	mov	r1, r9
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e70:	47c0      	blx	r8
 8009e72:	3001      	adds	r0, #1
 8009e74:	d020      	beq.n	8009eb8 <_printf_common+0xa8>
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	68e5      	ldr	r5, [r4, #12]
 8009e7a:	f003 0306 	and.w	r3, r3, #6
 8009e7e:	2b04      	cmp	r3, #4
 8009e80:	bf18      	it	ne
 8009e82:	2500      	movne	r5, #0
 8009e84:	6832      	ldr	r2, [r6, #0]
 8009e86:	f04f 0600 	mov.w	r6, #0
 8009e8a:	68a3      	ldr	r3, [r4, #8]
 8009e8c:	bf08      	it	eq
 8009e8e:	1aad      	subeq	r5, r5, r2
 8009e90:	6922      	ldr	r2, [r4, #16]
 8009e92:	bf08      	it	eq
 8009e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	bfc4      	itt	gt
 8009e9c:	1a9b      	subgt	r3, r3, r2
 8009e9e:	18ed      	addgt	r5, r5, r3
 8009ea0:	341a      	adds	r4, #26
 8009ea2:	42b5      	cmp	r5, r6
 8009ea4:	d11a      	bne.n	8009edc <_printf_common+0xcc>
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	e008      	b.n	8009ebc <_printf_common+0xac>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	4652      	mov	r2, sl
 8009eae:	4649      	mov	r1, r9
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	47c0      	blx	r8
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	d103      	bne.n	8009ec0 <_printf_common+0xb0>
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec0:	3501      	adds	r5, #1
 8009ec2:	e7c4      	b.n	8009e4e <_printf_common+0x3e>
 8009ec4:	2030      	movs	r0, #48	; 0x30
 8009ec6:	18e1      	adds	r1, r4, r3
 8009ec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ecc:	1c5a      	adds	r2, r3, #1
 8009ece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ed2:	4422      	add	r2, r4
 8009ed4:	3302      	adds	r3, #2
 8009ed6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009eda:	e7c5      	b.n	8009e68 <_printf_common+0x58>
 8009edc:	2301      	movs	r3, #1
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4649      	mov	r1, r9
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	47c0      	blx	r8
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d0e6      	beq.n	8009eb8 <_printf_common+0xa8>
 8009eea:	3601      	adds	r6, #1
 8009eec:	e7d9      	b.n	8009ea2 <_printf_common+0x92>
	...

08009ef0 <_printf_i>:
 8009ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	7e27      	ldrb	r7, [r4, #24]
 8009ef8:	4691      	mov	r9, r2
 8009efa:	2f78      	cmp	r7, #120	; 0x78
 8009efc:	4680      	mov	r8, r0
 8009efe:	469a      	mov	sl, r3
 8009f00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f06:	d807      	bhi.n	8009f18 <_printf_i+0x28>
 8009f08:	2f62      	cmp	r7, #98	; 0x62
 8009f0a:	d80a      	bhi.n	8009f22 <_printf_i+0x32>
 8009f0c:	2f00      	cmp	r7, #0
 8009f0e:	f000 80d9 	beq.w	800a0c4 <_printf_i+0x1d4>
 8009f12:	2f58      	cmp	r7, #88	; 0x58
 8009f14:	f000 80a4 	beq.w	800a060 <_printf_i+0x170>
 8009f18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f20:	e03a      	b.n	8009f98 <_printf_i+0xa8>
 8009f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f26:	2b15      	cmp	r3, #21
 8009f28:	d8f6      	bhi.n	8009f18 <_printf_i+0x28>
 8009f2a:	a001      	add	r0, pc, #4	; (adr r0, 8009f30 <_printf_i+0x40>)
 8009f2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f30:	08009f89 	.word	0x08009f89
 8009f34:	08009f9d 	.word	0x08009f9d
 8009f38:	08009f19 	.word	0x08009f19
 8009f3c:	08009f19 	.word	0x08009f19
 8009f40:	08009f19 	.word	0x08009f19
 8009f44:	08009f19 	.word	0x08009f19
 8009f48:	08009f9d 	.word	0x08009f9d
 8009f4c:	08009f19 	.word	0x08009f19
 8009f50:	08009f19 	.word	0x08009f19
 8009f54:	08009f19 	.word	0x08009f19
 8009f58:	08009f19 	.word	0x08009f19
 8009f5c:	0800a0ab 	.word	0x0800a0ab
 8009f60:	08009fcd 	.word	0x08009fcd
 8009f64:	0800a08d 	.word	0x0800a08d
 8009f68:	08009f19 	.word	0x08009f19
 8009f6c:	08009f19 	.word	0x08009f19
 8009f70:	0800a0cd 	.word	0x0800a0cd
 8009f74:	08009f19 	.word	0x08009f19
 8009f78:	08009fcd 	.word	0x08009fcd
 8009f7c:	08009f19 	.word	0x08009f19
 8009f80:	08009f19 	.word	0x08009f19
 8009f84:	0800a095 	.word	0x0800a095
 8009f88:	680b      	ldr	r3, [r1, #0]
 8009f8a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f8e:	1d1a      	adds	r2, r3, #4
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	600a      	str	r2, [r1, #0]
 8009f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e0a4      	b.n	800a0e6 <_printf_i+0x1f6>
 8009f9c:	6825      	ldr	r5, [r4, #0]
 8009f9e:	6808      	ldr	r0, [r1, #0]
 8009fa0:	062e      	lsls	r6, r5, #24
 8009fa2:	f100 0304 	add.w	r3, r0, #4
 8009fa6:	d50a      	bpl.n	8009fbe <_printf_i+0xce>
 8009fa8:	6805      	ldr	r5, [r0, #0]
 8009faa:	600b      	str	r3, [r1, #0]
 8009fac:	2d00      	cmp	r5, #0
 8009fae:	da03      	bge.n	8009fb8 <_printf_i+0xc8>
 8009fb0:	232d      	movs	r3, #45	; 0x2d
 8009fb2:	426d      	negs	r5, r5
 8009fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fb8:	230a      	movs	r3, #10
 8009fba:	485e      	ldr	r0, [pc, #376]	; (800a134 <_printf_i+0x244>)
 8009fbc:	e019      	b.n	8009ff2 <_printf_i+0x102>
 8009fbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009fc2:	6805      	ldr	r5, [r0, #0]
 8009fc4:	600b      	str	r3, [r1, #0]
 8009fc6:	bf18      	it	ne
 8009fc8:	b22d      	sxthne	r5, r5
 8009fca:	e7ef      	b.n	8009fac <_printf_i+0xbc>
 8009fcc:	680b      	ldr	r3, [r1, #0]
 8009fce:	6825      	ldr	r5, [r4, #0]
 8009fd0:	1d18      	adds	r0, r3, #4
 8009fd2:	6008      	str	r0, [r1, #0]
 8009fd4:	0628      	lsls	r0, r5, #24
 8009fd6:	d501      	bpl.n	8009fdc <_printf_i+0xec>
 8009fd8:	681d      	ldr	r5, [r3, #0]
 8009fda:	e002      	b.n	8009fe2 <_printf_i+0xf2>
 8009fdc:	0669      	lsls	r1, r5, #25
 8009fde:	d5fb      	bpl.n	8009fd8 <_printf_i+0xe8>
 8009fe0:	881d      	ldrh	r5, [r3, #0]
 8009fe2:	2f6f      	cmp	r7, #111	; 0x6f
 8009fe4:	bf0c      	ite	eq
 8009fe6:	2308      	moveq	r3, #8
 8009fe8:	230a      	movne	r3, #10
 8009fea:	4852      	ldr	r0, [pc, #328]	; (800a134 <_printf_i+0x244>)
 8009fec:	2100      	movs	r1, #0
 8009fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ff2:	6866      	ldr	r6, [r4, #4]
 8009ff4:	2e00      	cmp	r6, #0
 8009ff6:	bfa8      	it	ge
 8009ff8:	6821      	ldrge	r1, [r4, #0]
 8009ffa:	60a6      	str	r6, [r4, #8]
 8009ffc:	bfa4      	itt	ge
 8009ffe:	f021 0104 	bicge.w	r1, r1, #4
 800a002:	6021      	strge	r1, [r4, #0]
 800a004:	b90d      	cbnz	r5, 800a00a <_printf_i+0x11a>
 800a006:	2e00      	cmp	r6, #0
 800a008:	d04d      	beq.n	800a0a6 <_printf_i+0x1b6>
 800a00a:	4616      	mov	r6, r2
 800a00c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a010:	fb03 5711 	mls	r7, r3, r1, r5
 800a014:	5dc7      	ldrb	r7, [r0, r7]
 800a016:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a01a:	462f      	mov	r7, r5
 800a01c:	42bb      	cmp	r3, r7
 800a01e:	460d      	mov	r5, r1
 800a020:	d9f4      	bls.n	800a00c <_printf_i+0x11c>
 800a022:	2b08      	cmp	r3, #8
 800a024:	d10b      	bne.n	800a03e <_printf_i+0x14e>
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	07df      	lsls	r7, r3, #31
 800a02a:	d508      	bpl.n	800a03e <_printf_i+0x14e>
 800a02c:	6923      	ldr	r3, [r4, #16]
 800a02e:	6861      	ldr	r1, [r4, #4]
 800a030:	4299      	cmp	r1, r3
 800a032:	bfde      	ittt	le
 800a034:	2330      	movle	r3, #48	; 0x30
 800a036:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a03a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a03e:	1b92      	subs	r2, r2, r6
 800a040:	6122      	str	r2, [r4, #16]
 800a042:	464b      	mov	r3, r9
 800a044:	4621      	mov	r1, r4
 800a046:	4640      	mov	r0, r8
 800a048:	f8cd a000 	str.w	sl, [sp]
 800a04c:	aa03      	add	r2, sp, #12
 800a04e:	f7ff fedf 	bl	8009e10 <_printf_common>
 800a052:	3001      	adds	r0, #1
 800a054:	d14c      	bne.n	800a0f0 <_printf_i+0x200>
 800a056:	f04f 30ff 	mov.w	r0, #4294967295
 800a05a:	b004      	add	sp, #16
 800a05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a060:	4834      	ldr	r0, [pc, #208]	; (800a134 <_printf_i+0x244>)
 800a062:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a066:	680e      	ldr	r6, [r1, #0]
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a06e:	061f      	lsls	r7, r3, #24
 800a070:	600e      	str	r6, [r1, #0]
 800a072:	d514      	bpl.n	800a09e <_printf_i+0x1ae>
 800a074:	07d9      	lsls	r1, r3, #31
 800a076:	bf44      	itt	mi
 800a078:	f043 0320 	orrmi.w	r3, r3, #32
 800a07c:	6023      	strmi	r3, [r4, #0]
 800a07e:	b91d      	cbnz	r5, 800a088 <_printf_i+0x198>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	f023 0320 	bic.w	r3, r3, #32
 800a086:	6023      	str	r3, [r4, #0]
 800a088:	2310      	movs	r3, #16
 800a08a:	e7af      	b.n	8009fec <_printf_i+0xfc>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	f043 0320 	orr.w	r3, r3, #32
 800a092:	6023      	str	r3, [r4, #0]
 800a094:	2378      	movs	r3, #120	; 0x78
 800a096:	4828      	ldr	r0, [pc, #160]	; (800a138 <_printf_i+0x248>)
 800a098:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a09c:	e7e3      	b.n	800a066 <_printf_i+0x176>
 800a09e:	065e      	lsls	r6, r3, #25
 800a0a0:	bf48      	it	mi
 800a0a2:	b2ad      	uxthmi	r5, r5
 800a0a4:	e7e6      	b.n	800a074 <_printf_i+0x184>
 800a0a6:	4616      	mov	r6, r2
 800a0a8:	e7bb      	b.n	800a022 <_printf_i+0x132>
 800a0aa:	680b      	ldr	r3, [r1, #0]
 800a0ac:	6826      	ldr	r6, [r4, #0]
 800a0ae:	1d1d      	adds	r5, r3, #4
 800a0b0:	6960      	ldr	r0, [r4, #20]
 800a0b2:	600d      	str	r5, [r1, #0]
 800a0b4:	0635      	lsls	r5, r6, #24
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	d501      	bpl.n	800a0be <_printf_i+0x1ce>
 800a0ba:	6018      	str	r0, [r3, #0]
 800a0bc:	e002      	b.n	800a0c4 <_printf_i+0x1d4>
 800a0be:	0671      	lsls	r1, r6, #25
 800a0c0:	d5fb      	bpl.n	800a0ba <_printf_i+0x1ca>
 800a0c2:	8018      	strh	r0, [r3, #0]
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4616      	mov	r6, r2
 800a0c8:	6123      	str	r3, [r4, #16]
 800a0ca:	e7ba      	b.n	800a042 <_printf_i+0x152>
 800a0cc:	680b      	ldr	r3, [r1, #0]
 800a0ce:	1d1a      	adds	r2, r3, #4
 800a0d0:	600a      	str	r2, [r1, #0]
 800a0d2:	681e      	ldr	r6, [r3, #0]
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	6862      	ldr	r2, [r4, #4]
 800a0da:	f002 fdb9 	bl	800cc50 <memchr>
 800a0de:	b108      	cbz	r0, 800a0e4 <_printf_i+0x1f4>
 800a0e0:	1b80      	subs	r0, r0, r6
 800a0e2:	6060      	str	r0, [r4, #4]
 800a0e4:	6863      	ldr	r3, [r4, #4]
 800a0e6:	6123      	str	r3, [r4, #16]
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0ee:	e7a8      	b.n	800a042 <_printf_i+0x152>
 800a0f0:	4632      	mov	r2, r6
 800a0f2:	4649      	mov	r1, r9
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	6923      	ldr	r3, [r4, #16]
 800a0f8:	47d0      	blx	sl
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	d0ab      	beq.n	800a056 <_printf_i+0x166>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	079b      	lsls	r3, r3, #30
 800a102:	d413      	bmi.n	800a12c <_printf_i+0x23c>
 800a104:	68e0      	ldr	r0, [r4, #12]
 800a106:	9b03      	ldr	r3, [sp, #12]
 800a108:	4298      	cmp	r0, r3
 800a10a:	bfb8      	it	lt
 800a10c:	4618      	movlt	r0, r3
 800a10e:	e7a4      	b.n	800a05a <_printf_i+0x16a>
 800a110:	2301      	movs	r3, #1
 800a112:	4632      	mov	r2, r6
 800a114:	4649      	mov	r1, r9
 800a116:	4640      	mov	r0, r8
 800a118:	47d0      	blx	sl
 800a11a:	3001      	adds	r0, #1
 800a11c:	d09b      	beq.n	800a056 <_printf_i+0x166>
 800a11e:	3501      	adds	r5, #1
 800a120:	68e3      	ldr	r3, [r4, #12]
 800a122:	9903      	ldr	r1, [sp, #12]
 800a124:	1a5b      	subs	r3, r3, r1
 800a126:	42ab      	cmp	r3, r5
 800a128:	dcf2      	bgt.n	800a110 <_printf_i+0x220>
 800a12a:	e7eb      	b.n	800a104 <_printf_i+0x214>
 800a12c:	2500      	movs	r5, #0
 800a12e:	f104 0619 	add.w	r6, r4, #25
 800a132:	e7f5      	b.n	800a120 <_printf_i+0x230>
 800a134:	0800e2f2 	.word	0x0800e2f2
 800a138:	0800e303 	.word	0x0800e303

0800a13c <_scanf_float>:
 800a13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a140:	b087      	sub	sp, #28
 800a142:	9303      	str	r3, [sp, #12]
 800a144:	688b      	ldr	r3, [r1, #8]
 800a146:	4617      	mov	r7, r2
 800a148:	1e5a      	subs	r2, r3, #1
 800a14a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a14e:	bf85      	ittet	hi
 800a150:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a154:	195b      	addhi	r3, r3, r5
 800a156:	2300      	movls	r3, #0
 800a158:	9302      	strhi	r3, [sp, #8]
 800a15a:	bf88      	it	hi
 800a15c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a160:	468b      	mov	fp, r1
 800a162:	f04f 0500 	mov.w	r5, #0
 800a166:	bf8c      	ite	hi
 800a168:	608b      	strhi	r3, [r1, #8]
 800a16a:	9302      	strls	r3, [sp, #8]
 800a16c:	680b      	ldr	r3, [r1, #0]
 800a16e:	4680      	mov	r8, r0
 800a170:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a174:	f84b 3b1c 	str.w	r3, [fp], #28
 800a178:	460c      	mov	r4, r1
 800a17a:	465e      	mov	r6, fp
 800a17c:	46aa      	mov	sl, r5
 800a17e:	46a9      	mov	r9, r5
 800a180:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a184:	9501      	str	r5, [sp, #4]
 800a186:	68a2      	ldr	r2, [r4, #8]
 800a188:	b152      	cbz	r2, 800a1a0 <_scanf_float+0x64>
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	2b4e      	cmp	r3, #78	; 0x4e
 800a190:	d864      	bhi.n	800a25c <_scanf_float+0x120>
 800a192:	2b40      	cmp	r3, #64	; 0x40
 800a194:	d83c      	bhi.n	800a210 <_scanf_float+0xd4>
 800a196:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a19a:	b2c8      	uxtb	r0, r1
 800a19c:	280e      	cmp	r0, #14
 800a19e:	d93a      	bls.n	800a216 <_scanf_float+0xda>
 800a1a0:	f1b9 0f00 	cmp.w	r9, #0
 800a1a4:	d003      	beq.n	800a1ae <_scanf_float+0x72>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1b2:	f1ba 0f01 	cmp.w	sl, #1
 800a1b6:	f200 8113 	bhi.w	800a3e0 <_scanf_float+0x2a4>
 800a1ba:	455e      	cmp	r6, fp
 800a1bc:	f200 8105 	bhi.w	800a3ca <_scanf_float+0x28e>
 800a1c0:	2501      	movs	r5, #1
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	b007      	add	sp, #28
 800a1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a1ce:	2a0d      	cmp	r2, #13
 800a1d0:	d8e6      	bhi.n	800a1a0 <_scanf_float+0x64>
 800a1d2:	a101      	add	r1, pc, #4	; (adr r1, 800a1d8 <_scanf_float+0x9c>)
 800a1d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a1d8:	0800a317 	.word	0x0800a317
 800a1dc:	0800a1a1 	.word	0x0800a1a1
 800a1e0:	0800a1a1 	.word	0x0800a1a1
 800a1e4:	0800a1a1 	.word	0x0800a1a1
 800a1e8:	0800a377 	.word	0x0800a377
 800a1ec:	0800a34f 	.word	0x0800a34f
 800a1f0:	0800a1a1 	.word	0x0800a1a1
 800a1f4:	0800a1a1 	.word	0x0800a1a1
 800a1f8:	0800a325 	.word	0x0800a325
 800a1fc:	0800a1a1 	.word	0x0800a1a1
 800a200:	0800a1a1 	.word	0x0800a1a1
 800a204:	0800a1a1 	.word	0x0800a1a1
 800a208:	0800a1a1 	.word	0x0800a1a1
 800a20c:	0800a2dd 	.word	0x0800a2dd
 800a210:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a214:	e7db      	b.n	800a1ce <_scanf_float+0x92>
 800a216:	290e      	cmp	r1, #14
 800a218:	d8c2      	bhi.n	800a1a0 <_scanf_float+0x64>
 800a21a:	a001      	add	r0, pc, #4	; (adr r0, 800a220 <_scanf_float+0xe4>)
 800a21c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a220:	0800a2cf 	.word	0x0800a2cf
 800a224:	0800a1a1 	.word	0x0800a1a1
 800a228:	0800a2cf 	.word	0x0800a2cf
 800a22c:	0800a363 	.word	0x0800a363
 800a230:	0800a1a1 	.word	0x0800a1a1
 800a234:	0800a27d 	.word	0x0800a27d
 800a238:	0800a2b9 	.word	0x0800a2b9
 800a23c:	0800a2b9 	.word	0x0800a2b9
 800a240:	0800a2b9 	.word	0x0800a2b9
 800a244:	0800a2b9 	.word	0x0800a2b9
 800a248:	0800a2b9 	.word	0x0800a2b9
 800a24c:	0800a2b9 	.word	0x0800a2b9
 800a250:	0800a2b9 	.word	0x0800a2b9
 800a254:	0800a2b9 	.word	0x0800a2b9
 800a258:	0800a2b9 	.word	0x0800a2b9
 800a25c:	2b6e      	cmp	r3, #110	; 0x6e
 800a25e:	d809      	bhi.n	800a274 <_scanf_float+0x138>
 800a260:	2b60      	cmp	r3, #96	; 0x60
 800a262:	d8b2      	bhi.n	800a1ca <_scanf_float+0x8e>
 800a264:	2b54      	cmp	r3, #84	; 0x54
 800a266:	d077      	beq.n	800a358 <_scanf_float+0x21c>
 800a268:	2b59      	cmp	r3, #89	; 0x59
 800a26a:	d199      	bne.n	800a1a0 <_scanf_float+0x64>
 800a26c:	2d07      	cmp	r5, #7
 800a26e:	d197      	bne.n	800a1a0 <_scanf_float+0x64>
 800a270:	2508      	movs	r5, #8
 800a272:	e029      	b.n	800a2c8 <_scanf_float+0x18c>
 800a274:	2b74      	cmp	r3, #116	; 0x74
 800a276:	d06f      	beq.n	800a358 <_scanf_float+0x21c>
 800a278:	2b79      	cmp	r3, #121	; 0x79
 800a27a:	e7f6      	b.n	800a26a <_scanf_float+0x12e>
 800a27c:	6821      	ldr	r1, [r4, #0]
 800a27e:	05c8      	lsls	r0, r1, #23
 800a280:	d51a      	bpl.n	800a2b8 <_scanf_float+0x17c>
 800a282:	9b02      	ldr	r3, [sp, #8]
 800a284:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a288:	6021      	str	r1, [r4, #0]
 800a28a:	f109 0901 	add.w	r9, r9, #1
 800a28e:	b11b      	cbz	r3, 800a298 <_scanf_float+0x15c>
 800a290:	3b01      	subs	r3, #1
 800a292:	3201      	adds	r2, #1
 800a294:	9302      	str	r3, [sp, #8]
 800a296:	60a2      	str	r2, [r4, #8]
 800a298:	68a3      	ldr	r3, [r4, #8]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	60a3      	str	r3, [r4, #8]
 800a29e:	6923      	ldr	r3, [r4, #16]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	6123      	str	r3, [r4, #16]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	607b      	str	r3, [r7, #4]
 800a2ac:	f340 8084 	ble.w	800a3b8 <_scanf_float+0x27c>
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	603b      	str	r3, [r7, #0]
 800a2b6:	e766      	b.n	800a186 <_scanf_float+0x4a>
 800a2b8:	eb1a 0f05 	cmn.w	sl, r5
 800a2bc:	f47f af70 	bne.w	800a1a0 <_scanf_float+0x64>
 800a2c0:	6822      	ldr	r2, [r4, #0]
 800a2c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a2c6:	6022      	str	r2, [r4, #0]
 800a2c8:	f806 3b01 	strb.w	r3, [r6], #1
 800a2cc:	e7e4      	b.n	800a298 <_scanf_float+0x15c>
 800a2ce:	6822      	ldr	r2, [r4, #0]
 800a2d0:	0610      	lsls	r0, r2, #24
 800a2d2:	f57f af65 	bpl.w	800a1a0 <_scanf_float+0x64>
 800a2d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2da:	e7f4      	b.n	800a2c6 <_scanf_float+0x18a>
 800a2dc:	f1ba 0f00 	cmp.w	sl, #0
 800a2e0:	d10e      	bne.n	800a300 <_scanf_float+0x1c4>
 800a2e2:	f1b9 0f00 	cmp.w	r9, #0
 800a2e6:	d10e      	bne.n	800a306 <_scanf_float+0x1ca>
 800a2e8:	6822      	ldr	r2, [r4, #0]
 800a2ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a2ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a2f2:	d108      	bne.n	800a306 <_scanf_float+0x1ca>
 800a2f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2f8:	f04f 0a01 	mov.w	sl, #1
 800a2fc:	6022      	str	r2, [r4, #0]
 800a2fe:	e7e3      	b.n	800a2c8 <_scanf_float+0x18c>
 800a300:	f1ba 0f02 	cmp.w	sl, #2
 800a304:	d055      	beq.n	800a3b2 <_scanf_float+0x276>
 800a306:	2d01      	cmp	r5, #1
 800a308:	d002      	beq.n	800a310 <_scanf_float+0x1d4>
 800a30a:	2d04      	cmp	r5, #4
 800a30c:	f47f af48 	bne.w	800a1a0 <_scanf_float+0x64>
 800a310:	3501      	adds	r5, #1
 800a312:	b2ed      	uxtb	r5, r5
 800a314:	e7d8      	b.n	800a2c8 <_scanf_float+0x18c>
 800a316:	f1ba 0f01 	cmp.w	sl, #1
 800a31a:	f47f af41 	bne.w	800a1a0 <_scanf_float+0x64>
 800a31e:	f04f 0a02 	mov.w	sl, #2
 800a322:	e7d1      	b.n	800a2c8 <_scanf_float+0x18c>
 800a324:	b97d      	cbnz	r5, 800a346 <_scanf_float+0x20a>
 800a326:	f1b9 0f00 	cmp.w	r9, #0
 800a32a:	f47f af3c 	bne.w	800a1a6 <_scanf_float+0x6a>
 800a32e:	6822      	ldr	r2, [r4, #0]
 800a330:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a334:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a338:	f47f af39 	bne.w	800a1ae <_scanf_float+0x72>
 800a33c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a340:	2501      	movs	r5, #1
 800a342:	6022      	str	r2, [r4, #0]
 800a344:	e7c0      	b.n	800a2c8 <_scanf_float+0x18c>
 800a346:	2d03      	cmp	r5, #3
 800a348:	d0e2      	beq.n	800a310 <_scanf_float+0x1d4>
 800a34a:	2d05      	cmp	r5, #5
 800a34c:	e7de      	b.n	800a30c <_scanf_float+0x1d0>
 800a34e:	2d02      	cmp	r5, #2
 800a350:	f47f af26 	bne.w	800a1a0 <_scanf_float+0x64>
 800a354:	2503      	movs	r5, #3
 800a356:	e7b7      	b.n	800a2c8 <_scanf_float+0x18c>
 800a358:	2d06      	cmp	r5, #6
 800a35a:	f47f af21 	bne.w	800a1a0 <_scanf_float+0x64>
 800a35e:	2507      	movs	r5, #7
 800a360:	e7b2      	b.n	800a2c8 <_scanf_float+0x18c>
 800a362:	6822      	ldr	r2, [r4, #0]
 800a364:	0591      	lsls	r1, r2, #22
 800a366:	f57f af1b 	bpl.w	800a1a0 <_scanf_float+0x64>
 800a36a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a36e:	6022      	str	r2, [r4, #0]
 800a370:	f8cd 9004 	str.w	r9, [sp, #4]
 800a374:	e7a8      	b.n	800a2c8 <_scanf_float+0x18c>
 800a376:	6822      	ldr	r2, [r4, #0]
 800a378:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a37c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a380:	d006      	beq.n	800a390 <_scanf_float+0x254>
 800a382:	0550      	lsls	r0, r2, #21
 800a384:	f57f af0c 	bpl.w	800a1a0 <_scanf_float+0x64>
 800a388:	f1b9 0f00 	cmp.w	r9, #0
 800a38c:	f43f af0f 	beq.w	800a1ae <_scanf_float+0x72>
 800a390:	0591      	lsls	r1, r2, #22
 800a392:	bf58      	it	pl
 800a394:	9901      	ldrpl	r1, [sp, #4]
 800a396:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a39a:	bf58      	it	pl
 800a39c:	eba9 0101 	subpl.w	r1, r9, r1
 800a3a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a3a4:	f04f 0900 	mov.w	r9, #0
 800a3a8:	bf58      	it	pl
 800a3aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a3ae:	6022      	str	r2, [r4, #0]
 800a3b0:	e78a      	b.n	800a2c8 <_scanf_float+0x18c>
 800a3b2:	f04f 0a03 	mov.w	sl, #3
 800a3b6:	e787      	b.n	800a2c8 <_scanf_float+0x18c>
 800a3b8:	4639      	mov	r1, r7
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a3c0:	4798      	blx	r3
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	f43f aedf 	beq.w	800a186 <_scanf_float+0x4a>
 800a3c8:	e6ea      	b.n	800a1a0 <_scanf_float+0x64>
 800a3ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3ce:	463a      	mov	r2, r7
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3d6:	4798      	blx	r3
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	6123      	str	r3, [r4, #16]
 800a3de:	e6ec      	b.n	800a1ba <_scanf_float+0x7e>
 800a3e0:	1e6b      	subs	r3, r5, #1
 800a3e2:	2b06      	cmp	r3, #6
 800a3e4:	d825      	bhi.n	800a432 <_scanf_float+0x2f6>
 800a3e6:	2d02      	cmp	r5, #2
 800a3e8:	d836      	bhi.n	800a458 <_scanf_float+0x31c>
 800a3ea:	455e      	cmp	r6, fp
 800a3ec:	f67f aee8 	bls.w	800a1c0 <_scanf_float+0x84>
 800a3f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3f4:	463a      	mov	r2, r7
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3fc:	4798      	blx	r3
 800a3fe:	6923      	ldr	r3, [r4, #16]
 800a400:	3b01      	subs	r3, #1
 800a402:	6123      	str	r3, [r4, #16]
 800a404:	e7f1      	b.n	800a3ea <_scanf_float+0x2ae>
 800a406:	9802      	ldr	r0, [sp, #8]
 800a408:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a40c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a410:	463a      	mov	r2, r7
 800a412:	9002      	str	r0, [sp, #8]
 800a414:	4640      	mov	r0, r8
 800a416:	4798      	blx	r3
 800a418:	6923      	ldr	r3, [r4, #16]
 800a41a:	3b01      	subs	r3, #1
 800a41c:	6123      	str	r3, [r4, #16]
 800a41e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a422:	fa5f fa8a 	uxtb.w	sl, sl
 800a426:	f1ba 0f02 	cmp.w	sl, #2
 800a42a:	d1ec      	bne.n	800a406 <_scanf_float+0x2ca>
 800a42c:	3d03      	subs	r5, #3
 800a42e:	b2ed      	uxtb	r5, r5
 800a430:	1b76      	subs	r6, r6, r5
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	05da      	lsls	r2, r3, #23
 800a436:	d52f      	bpl.n	800a498 <_scanf_float+0x35c>
 800a438:	055b      	lsls	r3, r3, #21
 800a43a:	d510      	bpl.n	800a45e <_scanf_float+0x322>
 800a43c:	455e      	cmp	r6, fp
 800a43e:	f67f aebf 	bls.w	800a1c0 <_scanf_float+0x84>
 800a442:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a446:	463a      	mov	r2, r7
 800a448:	4640      	mov	r0, r8
 800a44a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a44e:	4798      	blx	r3
 800a450:	6923      	ldr	r3, [r4, #16]
 800a452:	3b01      	subs	r3, #1
 800a454:	6123      	str	r3, [r4, #16]
 800a456:	e7f1      	b.n	800a43c <_scanf_float+0x300>
 800a458:	46aa      	mov	sl, r5
 800a45a:	9602      	str	r6, [sp, #8]
 800a45c:	e7df      	b.n	800a41e <_scanf_float+0x2e2>
 800a45e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a462:	6923      	ldr	r3, [r4, #16]
 800a464:	2965      	cmp	r1, #101	; 0x65
 800a466:	f103 33ff 	add.w	r3, r3, #4294967295
 800a46a:	f106 35ff 	add.w	r5, r6, #4294967295
 800a46e:	6123      	str	r3, [r4, #16]
 800a470:	d00c      	beq.n	800a48c <_scanf_float+0x350>
 800a472:	2945      	cmp	r1, #69	; 0x45
 800a474:	d00a      	beq.n	800a48c <_scanf_float+0x350>
 800a476:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a47a:	463a      	mov	r2, r7
 800a47c:	4640      	mov	r0, r8
 800a47e:	4798      	blx	r3
 800a480:	6923      	ldr	r3, [r4, #16]
 800a482:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a486:	3b01      	subs	r3, #1
 800a488:	1eb5      	subs	r5, r6, #2
 800a48a:	6123      	str	r3, [r4, #16]
 800a48c:	463a      	mov	r2, r7
 800a48e:	4640      	mov	r0, r8
 800a490:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a494:	4798      	blx	r3
 800a496:	462e      	mov	r6, r5
 800a498:	6825      	ldr	r5, [r4, #0]
 800a49a:	f015 0510 	ands.w	r5, r5, #16
 800a49e:	d159      	bne.n	800a554 <_scanf_float+0x418>
 800a4a0:	7035      	strb	r5, [r6, #0]
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a4a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4ac:	d11c      	bne.n	800a4e8 <_scanf_float+0x3ac>
 800a4ae:	9b01      	ldr	r3, [sp, #4]
 800a4b0:	454b      	cmp	r3, r9
 800a4b2:	eba3 0209 	sub.w	r2, r3, r9
 800a4b6:	d124      	bne.n	800a502 <_scanf_float+0x3c6>
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	4659      	mov	r1, fp
 800a4bc:	4640      	mov	r0, r8
 800a4be:	f000 ff9f 	bl	800b400 <_strtod_r>
 800a4c2:	f8d4 c000 	ldr.w	ip, [r4]
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	f01c 0f02 	tst.w	ip, #2
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	460f      	mov	r7, r1
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	d021      	beq.n	800a518 <_scanf_float+0x3dc>
 800a4d4:	9903      	ldr	r1, [sp, #12]
 800a4d6:	1d1a      	adds	r2, r3, #4
 800a4d8:	600a      	str	r2, [r1, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	e9c3 6700 	strd	r6, r7, [r3]
 800a4e0:	68e3      	ldr	r3, [r4, #12]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	60e3      	str	r3, [r4, #12]
 800a4e6:	e66c      	b.n	800a1c2 <_scanf_float+0x86>
 800a4e8:	9b04      	ldr	r3, [sp, #16]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d0e4      	beq.n	800a4b8 <_scanf_float+0x37c>
 800a4ee:	9905      	ldr	r1, [sp, #20]
 800a4f0:	230a      	movs	r3, #10
 800a4f2:	462a      	mov	r2, r5
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	3101      	adds	r1, #1
 800a4f8:	f001 f876 	bl	800b5e8 <_strtol_r>
 800a4fc:	9b04      	ldr	r3, [sp, #16]
 800a4fe:	9e05      	ldr	r6, [sp, #20]
 800a500:	1ac2      	subs	r2, r0, r3
 800a502:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a506:	429e      	cmp	r6, r3
 800a508:	bf28      	it	cs
 800a50a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a50e:	4630      	mov	r0, r6
 800a510:	4911      	ldr	r1, [pc, #68]	; (800a558 <_scanf_float+0x41c>)
 800a512:	f000 f8d7 	bl	800a6c4 <siprintf>
 800a516:	e7cf      	b.n	800a4b8 <_scanf_float+0x37c>
 800a518:	f01c 0f04 	tst.w	ip, #4
 800a51c:	f103 0e04 	add.w	lr, r3, #4
 800a520:	d003      	beq.n	800a52a <_scanf_float+0x3ee>
 800a522:	9903      	ldr	r1, [sp, #12]
 800a524:	f8c1 e000 	str.w	lr, [r1]
 800a528:	e7d7      	b.n	800a4da <_scanf_float+0x39e>
 800a52a:	9a03      	ldr	r2, [sp, #12]
 800a52c:	f8c2 e000 	str.w	lr, [r2]
 800a530:	f8d3 8000 	ldr.w	r8, [r3]
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	f7f6 fa68 	bl	8000a0c <__aeabi_dcmpun>
 800a53c:	b128      	cbz	r0, 800a54a <_scanf_float+0x40e>
 800a53e:	4807      	ldr	r0, [pc, #28]	; (800a55c <_scanf_float+0x420>)
 800a540:	f000 f888 	bl	800a654 <nanf>
 800a544:	f8c8 0000 	str.w	r0, [r8]
 800a548:	e7ca      	b.n	800a4e0 <_scanf_float+0x3a4>
 800a54a:	4630      	mov	r0, r6
 800a54c:	4639      	mov	r1, r7
 800a54e:	f7f6 fabb 	bl	8000ac8 <__aeabi_d2f>
 800a552:	e7f7      	b.n	800a544 <_scanf_float+0x408>
 800a554:	2500      	movs	r5, #0
 800a556:	e634      	b.n	800a1c2 <_scanf_float+0x86>
 800a558:	0800e314 	.word	0x0800e314
 800a55c:	0800e423 	.word	0x0800e423

0800a560 <cleanup_glue>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	460c      	mov	r4, r1
 800a564:	6809      	ldr	r1, [r1, #0]
 800a566:	4605      	mov	r5, r0
 800a568:	b109      	cbz	r1, 800a56e <cleanup_glue+0xe>
 800a56a:	f7ff fff9 	bl	800a560 <cleanup_glue>
 800a56e:	4621      	mov	r1, r4
 800a570:	4628      	mov	r0, r5
 800a572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a576:	f003 b84b 	b.w	800d610 <_free_r>
	...

0800a57c <_reclaim_reent>:
 800a57c:	4b2c      	ldr	r3, [pc, #176]	; (800a630 <_reclaim_reent+0xb4>)
 800a57e:	b570      	push	{r4, r5, r6, lr}
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4604      	mov	r4, r0
 800a584:	4283      	cmp	r3, r0
 800a586:	d051      	beq.n	800a62c <_reclaim_reent+0xb0>
 800a588:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a58a:	b143      	cbz	r3, 800a59e <_reclaim_reent+0x22>
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d14a      	bne.n	800a628 <_reclaim_reent+0xac>
 800a592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a594:	6819      	ldr	r1, [r3, #0]
 800a596:	b111      	cbz	r1, 800a59e <_reclaim_reent+0x22>
 800a598:	4620      	mov	r0, r4
 800a59a:	f003 f839 	bl	800d610 <_free_r>
 800a59e:	6961      	ldr	r1, [r4, #20]
 800a5a0:	b111      	cbz	r1, 800a5a8 <_reclaim_reent+0x2c>
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f003 f834 	bl	800d610 <_free_r>
 800a5a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a5aa:	b111      	cbz	r1, 800a5b2 <_reclaim_reent+0x36>
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f003 f82f 	bl	800d610 <_free_r>
 800a5b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a5b4:	b111      	cbz	r1, 800a5bc <_reclaim_reent+0x40>
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f003 f82a 	bl	800d610 <_free_r>
 800a5bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a5be:	b111      	cbz	r1, 800a5c6 <_reclaim_reent+0x4a>
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f003 f825 	bl	800d610 <_free_r>
 800a5c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a5c8:	b111      	cbz	r1, 800a5d0 <_reclaim_reent+0x54>
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	f003 f820 	bl	800d610 <_free_r>
 800a5d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a5d2:	b111      	cbz	r1, 800a5da <_reclaim_reent+0x5e>
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f003 f81b 	bl	800d610 <_free_r>
 800a5da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a5dc:	b111      	cbz	r1, 800a5e4 <_reclaim_reent+0x68>
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f003 f816 	bl	800d610 <_free_r>
 800a5e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5e6:	b111      	cbz	r1, 800a5ee <_reclaim_reent+0x72>
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f003 f811 	bl	800d610 <_free_r>
 800a5ee:	69a3      	ldr	r3, [r4, #24]
 800a5f0:	b1e3      	cbz	r3, 800a62c <_reclaim_reent+0xb0>
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a5f6:	4798      	blx	r3
 800a5f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a5fa:	b1b9      	cbz	r1, 800a62c <_reclaim_reent+0xb0>
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a602:	f7ff bfad 	b.w	800a560 <cleanup_glue>
 800a606:	5949      	ldr	r1, [r1, r5]
 800a608:	b941      	cbnz	r1, 800a61c <_reclaim_reent+0xa0>
 800a60a:	3504      	adds	r5, #4
 800a60c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a60e:	2d80      	cmp	r5, #128	; 0x80
 800a610:	68d9      	ldr	r1, [r3, #12]
 800a612:	d1f8      	bne.n	800a606 <_reclaim_reent+0x8a>
 800a614:	4620      	mov	r0, r4
 800a616:	f002 fffb 	bl	800d610 <_free_r>
 800a61a:	e7ba      	b.n	800a592 <_reclaim_reent+0x16>
 800a61c:	680e      	ldr	r6, [r1, #0]
 800a61e:	4620      	mov	r0, r4
 800a620:	f002 fff6 	bl	800d610 <_free_r>
 800a624:	4631      	mov	r1, r6
 800a626:	e7ef      	b.n	800a608 <_reclaim_reent+0x8c>
 800a628:	2500      	movs	r5, #0
 800a62a:	e7ef      	b.n	800a60c <_reclaim_reent+0x90>
 800a62c:	bd70      	pop	{r4, r5, r6, pc}
 800a62e:	bf00      	nop
 800a630:	2000000c 	.word	0x2000000c

0800a634 <_sbrk_r>:
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	2300      	movs	r3, #0
 800a638:	4d05      	ldr	r5, [pc, #20]	; (800a650 <_sbrk_r+0x1c>)
 800a63a:	4604      	mov	r4, r0
 800a63c:	4608      	mov	r0, r1
 800a63e:	602b      	str	r3, [r5, #0]
 800a640:	f7f7 fd2a 	bl	8002098 <_sbrk>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_sbrk_r+0x1a>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_sbrk_r+0x1a>
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	20003bac 	.word	0x20003bac

0800a654 <nanf>:
 800a654:	4800      	ldr	r0, [pc, #0]	; (800a658 <nanf+0x4>)
 800a656:	4770      	bx	lr
 800a658:	7fc00000 	.word	0x7fc00000

0800a65c <sniprintf>:
 800a65c:	b40c      	push	{r2, r3}
 800a65e:	b530      	push	{r4, r5, lr}
 800a660:	4b17      	ldr	r3, [pc, #92]	; (800a6c0 <sniprintf+0x64>)
 800a662:	1e0c      	subs	r4, r1, #0
 800a664:	681d      	ldr	r5, [r3, #0]
 800a666:	b09d      	sub	sp, #116	; 0x74
 800a668:	da08      	bge.n	800a67c <sniprintf+0x20>
 800a66a:	238b      	movs	r3, #139	; 0x8b
 800a66c:	f04f 30ff 	mov.w	r0, #4294967295
 800a670:	602b      	str	r3, [r5, #0]
 800a672:	b01d      	add	sp, #116	; 0x74
 800a674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a678:	b002      	add	sp, #8
 800a67a:	4770      	bx	lr
 800a67c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a680:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a684:	bf0c      	ite	eq
 800a686:	4623      	moveq	r3, r4
 800a688:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a68c:	9304      	str	r3, [sp, #16]
 800a68e:	9307      	str	r3, [sp, #28]
 800a690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a694:	9002      	str	r0, [sp, #8]
 800a696:	9006      	str	r0, [sp, #24]
 800a698:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a69c:	4628      	mov	r0, r5
 800a69e:	ab21      	add	r3, sp, #132	; 0x84
 800a6a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a6a2:	a902      	add	r1, sp, #8
 800a6a4:	9301      	str	r3, [sp, #4]
 800a6a6:	f003 f85b 	bl	800d760 <_svfiprintf_r>
 800a6aa:	1c43      	adds	r3, r0, #1
 800a6ac:	bfbc      	itt	lt
 800a6ae:	238b      	movlt	r3, #139	; 0x8b
 800a6b0:	602b      	strlt	r3, [r5, #0]
 800a6b2:	2c00      	cmp	r4, #0
 800a6b4:	d0dd      	beq.n	800a672 <sniprintf+0x16>
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	9b02      	ldr	r3, [sp, #8]
 800a6ba:	701a      	strb	r2, [r3, #0]
 800a6bc:	e7d9      	b.n	800a672 <sniprintf+0x16>
 800a6be:	bf00      	nop
 800a6c0:	2000000c 	.word	0x2000000c

0800a6c4 <siprintf>:
 800a6c4:	b40e      	push	{r1, r2, r3}
 800a6c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6ca:	b500      	push	{lr}
 800a6cc:	b09c      	sub	sp, #112	; 0x70
 800a6ce:	ab1d      	add	r3, sp, #116	; 0x74
 800a6d0:	9002      	str	r0, [sp, #8]
 800a6d2:	9006      	str	r0, [sp, #24]
 800a6d4:	9107      	str	r1, [sp, #28]
 800a6d6:	9104      	str	r1, [sp, #16]
 800a6d8:	4808      	ldr	r0, [pc, #32]	; (800a6fc <siprintf+0x38>)
 800a6da:	4909      	ldr	r1, [pc, #36]	; (800a700 <siprintf+0x3c>)
 800a6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e0:	9105      	str	r1, [sp, #20]
 800a6e2:	6800      	ldr	r0, [r0, #0]
 800a6e4:	a902      	add	r1, sp, #8
 800a6e6:	9301      	str	r3, [sp, #4]
 800a6e8:	f003 f83a 	bl	800d760 <_svfiprintf_r>
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	9b02      	ldr	r3, [sp, #8]
 800a6f0:	701a      	strb	r2, [r3, #0]
 800a6f2:	b01c      	add	sp, #112	; 0x70
 800a6f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6f8:	b003      	add	sp, #12
 800a6fa:	4770      	bx	lr
 800a6fc:	2000000c 	.word	0x2000000c
 800a700:	ffff0208 	.word	0xffff0208

0800a704 <__sread>:
 800a704:	b510      	push	{r4, lr}
 800a706:	460c      	mov	r4, r1
 800a708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a70c:	f003 fa80 	bl	800dc10 <_read_r>
 800a710:	2800      	cmp	r0, #0
 800a712:	bfab      	itete	ge
 800a714:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a716:	89a3      	ldrhlt	r3, [r4, #12]
 800a718:	181b      	addge	r3, r3, r0
 800a71a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a71e:	bfac      	ite	ge
 800a720:	6563      	strge	r3, [r4, #84]	; 0x54
 800a722:	81a3      	strhlt	r3, [r4, #12]
 800a724:	bd10      	pop	{r4, pc}

0800a726 <__swrite>:
 800a726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a72a:	461f      	mov	r7, r3
 800a72c:	898b      	ldrh	r3, [r1, #12]
 800a72e:	4605      	mov	r5, r0
 800a730:	05db      	lsls	r3, r3, #23
 800a732:	460c      	mov	r4, r1
 800a734:	4616      	mov	r6, r2
 800a736:	d505      	bpl.n	800a744 <__swrite+0x1e>
 800a738:	2302      	movs	r3, #2
 800a73a:	2200      	movs	r2, #0
 800a73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a740:	f002 fa5a 	bl	800cbf8 <_lseek_r>
 800a744:	89a3      	ldrh	r3, [r4, #12]
 800a746:	4632      	mov	r2, r6
 800a748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a74c:	81a3      	strh	r3, [r4, #12]
 800a74e:	4628      	mov	r0, r5
 800a750:	463b      	mov	r3, r7
 800a752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a75a:	f000 bf51 	b.w	800b600 <_write_r>

0800a75e <__sseek>:
 800a75e:	b510      	push	{r4, lr}
 800a760:	460c      	mov	r4, r1
 800a762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a766:	f002 fa47 	bl	800cbf8 <_lseek_r>
 800a76a:	1c43      	adds	r3, r0, #1
 800a76c:	89a3      	ldrh	r3, [r4, #12]
 800a76e:	bf15      	itete	ne
 800a770:	6560      	strne	r0, [r4, #84]	; 0x54
 800a772:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a776:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a77a:	81a3      	strheq	r3, [r4, #12]
 800a77c:	bf18      	it	ne
 800a77e:	81a3      	strhne	r3, [r4, #12]
 800a780:	bd10      	pop	{r4, pc}

0800a782 <__sclose>:
 800a782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a786:	f000 bf6b 	b.w	800b660 <_close_r>

0800a78a <strchr>:
 800a78a:	4603      	mov	r3, r0
 800a78c:	b2c9      	uxtb	r1, r1
 800a78e:	4618      	mov	r0, r3
 800a790:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a794:	b112      	cbz	r2, 800a79c <strchr+0x12>
 800a796:	428a      	cmp	r2, r1
 800a798:	d1f9      	bne.n	800a78e <strchr+0x4>
 800a79a:	4770      	bx	lr
 800a79c:	2900      	cmp	r1, #0
 800a79e:	bf18      	it	ne
 800a7a0:	2000      	movne	r0, #0
 800a7a2:	4770      	bx	lr

0800a7a4 <strstr>:
 800a7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7a6:	780c      	ldrb	r4, [r1, #0]
 800a7a8:	b164      	cbz	r4, 800a7c4 <strstr+0x20>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	781a      	ldrb	r2, [r3, #0]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	1c5e      	adds	r6, r3, #1
 800a7b2:	b90a      	cbnz	r2, 800a7b8 <strstr+0x14>
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	e005      	b.n	800a7c4 <strstr+0x20>
 800a7b8:	4294      	cmp	r4, r2
 800a7ba:	d108      	bne.n	800a7ce <strstr+0x2a>
 800a7bc:	460d      	mov	r5, r1
 800a7be:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a7c2:	b902      	cbnz	r2, 800a7c6 <strstr+0x22>
 800a7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7c6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a7ca:	4297      	cmp	r7, r2
 800a7cc:	d0f7      	beq.n	800a7be <strstr+0x1a>
 800a7ce:	4633      	mov	r3, r6
 800a7d0:	e7ec      	b.n	800a7ac <strstr+0x8>

0800a7d2 <sulp>:
 800a7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d6:	460f      	mov	r7, r1
 800a7d8:	4690      	mov	r8, r2
 800a7da:	f002 fdc3 	bl	800d364 <__ulp>
 800a7de:	4604      	mov	r4, r0
 800a7e0:	460d      	mov	r5, r1
 800a7e2:	f1b8 0f00 	cmp.w	r8, #0
 800a7e6:	d011      	beq.n	800a80c <sulp+0x3a>
 800a7e8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a7ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	dd0b      	ble.n	800a80c <sulp+0x3a>
 800a7f4:	2400      	movs	r4, #0
 800a7f6:	051b      	lsls	r3, r3, #20
 800a7f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a7fc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a800:	4622      	mov	r2, r4
 800a802:	462b      	mov	r3, r5
 800a804:	f7f5 fe68 	bl	80004d8 <__aeabi_dmul>
 800a808:	4604      	mov	r4, r0
 800a80a:	460d      	mov	r5, r1
 800a80c:	4620      	mov	r0, r4
 800a80e:	4629      	mov	r1, r5
 800a810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a814:	0000      	movs	r0, r0
	...

0800a818 <_strtod_l>:
 800a818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81c:	469b      	mov	fp, r3
 800a81e:	2300      	movs	r3, #0
 800a820:	b0a1      	sub	sp, #132	; 0x84
 800a822:	931c      	str	r3, [sp, #112]	; 0x70
 800a824:	4ba1      	ldr	r3, [pc, #644]	; (800aaac <_strtod_l+0x294>)
 800a826:	4682      	mov	sl, r0
 800a828:	681f      	ldr	r7, [r3, #0]
 800a82a:	460e      	mov	r6, r1
 800a82c:	4638      	mov	r0, r7
 800a82e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a830:	f7f5 fc8e 	bl	8000150 <strlen>
 800a834:	f04f 0800 	mov.w	r8, #0
 800a838:	4604      	mov	r4, r0
 800a83a:	f04f 0900 	mov.w	r9, #0
 800a83e:	961b      	str	r6, [sp, #108]	; 0x6c
 800a840:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a842:	781a      	ldrb	r2, [r3, #0]
 800a844:	2a2b      	cmp	r2, #43	; 0x2b
 800a846:	d04c      	beq.n	800a8e2 <_strtod_l+0xca>
 800a848:	d83a      	bhi.n	800a8c0 <_strtod_l+0xa8>
 800a84a:	2a0d      	cmp	r2, #13
 800a84c:	d833      	bhi.n	800a8b6 <_strtod_l+0x9e>
 800a84e:	2a08      	cmp	r2, #8
 800a850:	d833      	bhi.n	800a8ba <_strtod_l+0xa2>
 800a852:	2a00      	cmp	r2, #0
 800a854:	d03d      	beq.n	800a8d2 <_strtod_l+0xba>
 800a856:	2300      	movs	r3, #0
 800a858:	930c      	str	r3, [sp, #48]	; 0x30
 800a85a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a85c:	782b      	ldrb	r3, [r5, #0]
 800a85e:	2b30      	cmp	r3, #48	; 0x30
 800a860:	f040 80af 	bne.w	800a9c2 <_strtod_l+0x1aa>
 800a864:	786b      	ldrb	r3, [r5, #1]
 800a866:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a86a:	2b58      	cmp	r3, #88	; 0x58
 800a86c:	d16c      	bne.n	800a948 <_strtod_l+0x130>
 800a86e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a870:	4650      	mov	r0, sl
 800a872:	9301      	str	r3, [sp, #4]
 800a874:	ab1c      	add	r3, sp, #112	; 0x70
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	4a8d      	ldr	r2, [pc, #564]	; (800aab0 <_strtod_l+0x298>)
 800a87a:	f8cd b008 	str.w	fp, [sp, #8]
 800a87e:	ab1d      	add	r3, sp, #116	; 0x74
 800a880:	a91b      	add	r1, sp, #108	; 0x6c
 800a882:	f001 feb7 	bl	800c5f4 <__gethex>
 800a886:	f010 0607 	ands.w	r6, r0, #7
 800a88a:	4604      	mov	r4, r0
 800a88c:	d005      	beq.n	800a89a <_strtod_l+0x82>
 800a88e:	2e06      	cmp	r6, #6
 800a890:	d129      	bne.n	800a8e6 <_strtod_l+0xce>
 800a892:	2300      	movs	r3, #0
 800a894:	3501      	adds	r5, #1
 800a896:	951b      	str	r5, [sp, #108]	; 0x6c
 800a898:	930c      	str	r3, [sp, #48]	; 0x30
 800a89a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f040 8596 	bne.w	800b3ce <_strtod_l+0xbb6>
 800a8a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8a4:	b1d3      	cbz	r3, 800a8dc <_strtod_l+0xc4>
 800a8a6:	4642      	mov	r2, r8
 800a8a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	b021      	add	sp, #132	; 0x84
 800a8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b6:	2a20      	cmp	r2, #32
 800a8b8:	d1cd      	bne.n	800a856 <_strtod_l+0x3e>
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	931b      	str	r3, [sp, #108]	; 0x6c
 800a8be:	e7bf      	b.n	800a840 <_strtod_l+0x28>
 800a8c0:	2a2d      	cmp	r2, #45	; 0x2d
 800a8c2:	d1c8      	bne.n	800a856 <_strtod_l+0x3e>
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	920c      	str	r2, [sp, #48]	; 0x30
 800a8c8:	1c5a      	adds	r2, r3, #1
 800a8ca:	921b      	str	r2, [sp, #108]	; 0x6c
 800a8cc:	785b      	ldrb	r3, [r3, #1]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1c3      	bne.n	800a85a <_strtod_l+0x42>
 800a8d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8d4:	961b      	str	r6, [sp, #108]	; 0x6c
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f040 8577 	bne.w	800b3ca <_strtod_l+0xbb2>
 800a8dc:	4642      	mov	r2, r8
 800a8de:	464b      	mov	r3, r9
 800a8e0:	e7e4      	b.n	800a8ac <_strtod_l+0x94>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	e7ef      	b.n	800a8c6 <_strtod_l+0xae>
 800a8e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a8e8:	b13a      	cbz	r2, 800a8fa <_strtod_l+0xe2>
 800a8ea:	2135      	movs	r1, #53	; 0x35
 800a8ec:	a81e      	add	r0, sp, #120	; 0x78
 800a8ee:	f002 fe3d 	bl	800d56c <__copybits>
 800a8f2:	4650      	mov	r0, sl
 800a8f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a8f6:	f002 fa05 	bl	800cd04 <_Bfree>
 800a8fa:	3e01      	subs	r6, #1
 800a8fc:	2e05      	cmp	r6, #5
 800a8fe:	d807      	bhi.n	800a910 <_strtod_l+0xf8>
 800a900:	e8df f006 	tbb	[pc, r6]
 800a904:	1d180b0e 	.word	0x1d180b0e
 800a908:	030e      	.short	0x030e
 800a90a:	f04f 0900 	mov.w	r9, #0
 800a90e:	46c8      	mov	r8, r9
 800a910:	0721      	lsls	r1, r4, #28
 800a912:	d5c2      	bpl.n	800a89a <_strtod_l+0x82>
 800a914:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a918:	e7bf      	b.n	800a89a <_strtod_l+0x82>
 800a91a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800a91e:	e7f7      	b.n	800a910 <_strtod_l+0xf8>
 800a920:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a922:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800a926:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a92a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a92e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a932:	e7ed      	b.n	800a910 <_strtod_l+0xf8>
 800a934:	f04f 0800 	mov.w	r8, #0
 800a938:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800aab4 <_strtod_l+0x29c>
 800a93c:	e7e8      	b.n	800a910 <_strtod_l+0xf8>
 800a93e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a942:	f04f 38ff 	mov.w	r8, #4294967295
 800a946:	e7e3      	b.n	800a910 <_strtod_l+0xf8>
 800a948:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a94a:	1c5a      	adds	r2, r3, #1
 800a94c:	921b      	str	r2, [sp, #108]	; 0x6c
 800a94e:	785b      	ldrb	r3, [r3, #1]
 800a950:	2b30      	cmp	r3, #48	; 0x30
 800a952:	d0f9      	beq.n	800a948 <_strtod_l+0x130>
 800a954:	2b00      	cmp	r3, #0
 800a956:	d0a0      	beq.n	800a89a <_strtod_l+0x82>
 800a958:	2301      	movs	r3, #1
 800a95a:	9307      	str	r3, [sp, #28]
 800a95c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a95e:	220a      	movs	r2, #10
 800a960:	9308      	str	r3, [sp, #32]
 800a962:	2300      	movs	r3, #0
 800a964:	469b      	mov	fp, r3
 800a966:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a96a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a96c:	7805      	ldrb	r5, [r0, #0]
 800a96e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a972:	b2d9      	uxtb	r1, r3
 800a974:	2909      	cmp	r1, #9
 800a976:	d926      	bls.n	800a9c6 <_strtod_l+0x1ae>
 800a978:	4622      	mov	r2, r4
 800a97a:	4639      	mov	r1, r7
 800a97c:	f003 f960 	bl	800dc40 <strncmp>
 800a980:	2800      	cmp	r0, #0
 800a982:	d032      	beq.n	800a9ea <_strtod_l+0x1d2>
 800a984:	2000      	movs	r0, #0
 800a986:	462b      	mov	r3, r5
 800a988:	465c      	mov	r4, fp
 800a98a:	4602      	mov	r2, r0
 800a98c:	9004      	str	r0, [sp, #16]
 800a98e:	2b65      	cmp	r3, #101	; 0x65
 800a990:	d001      	beq.n	800a996 <_strtod_l+0x17e>
 800a992:	2b45      	cmp	r3, #69	; 0x45
 800a994:	d113      	bne.n	800a9be <_strtod_l+0x1a6>
 800a996:	b91c      	cbnz	r4, 800a9a0 <_strtod_l+0x188>
 800a998:	9b07      	ldr	r3, [sp, #28]
 800a99a:	4303      	orrs	r3, r0
 800a99c:	d099      	beq.n	800a8d2 <_strtod_l+0xba>
 800a99e:	2400      	movs	r4, #0
 800a9a0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a9a2:	1c73      	adds	r3, r6, #1
 800a9a4:	931b      	str	r3, [sp, #108]	; 0x6c
 800a9a6:	7873      	ldrb	r3, [r6, #1]
 800a9a8:	2b2b      	cmp	r3, #43	; 0x2b
 800a9aa:	d078      	beq.n	800aa9e <_strtod_l+0x286>
 800a9ac:	2b2d      	cmp	r3, #45	; 0x2d
 800a9ae:	d07b      	beq.n	800aaa8 <_strtod_l+0x290>
 800a9b0:	2700      	movs	r7, #0
 800a9b2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a9b6:	2909      	cmp	r1, #9
 800a9b8:	f240 8082 	bls.w	800aac0 <_strtod_l+0x2a8>
 800a9bc:	961b      	str	r6, [sp, #108]	; 0x6c
 800a9be:	2500      	movs	r5, #0
 800a9c0:	e09e      	b.n	800ab00 <_strtod_l+0x2e8>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	e7c9      	b.n	800a95a <_strtod_l+0x142>
 800a9c6:	f1bb 0f08 	cmp.w	fp, #8
 800a9ca:	bfd5      	itete	le
 800a9cc:	9906      	ldrle	r1, [sp, #24]
 800a9ce:	9905      	ldrgt	r1, [sp, #20]
 800a9d0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a9d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a9d8:	f100 0001 	add.w	r0, r0, #1
 800a9dc:	bfd4      	ite	le
 800a9de:	9306      	strle	r3, [sp, #24]
 800a9e0:	9305      	strgt	r3, [sp, #20]
 800a9e2:	f10b 0b01 	add.w	fp, fp, #1
 800a9e6:	901b      	str	r0, [sp, #108]	; 0x6c
 800a9e8:	e7bf      	b.n	800a96a <_strtod_l+0x152>
 800a9ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9ec:	191a      	adds	r2, r3, r4
 800a9ee:	921b      	str	r2, [sp, #108]	; 0x6c
 800a9f0:	5d1b      	ldrb	r3, [r3, r4]
 800a9f2:	f1bb 0f00 	cmp.w	fp, #0
 800a9f6:	d036      	beq.n	800aa66 <_strtod_l+0x24e>
 800a9f8:	465c      	mov	r4, fp
 800a9fa:	9004      	str	r0, [sp, #16]
 800a9fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800aa00:	2a09      	cmp	r2, #9
 800aa02:	d912      	bls.n	800aa2a <_strtod_l+0x212>
 800aa04:	2201      	movs	r2, #1
 800aa06:	e7c2      	b.n	800a98e <_strtod_l+0x176>
 800aa08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	1c5a      	adds	r2, r3, #1
 800aa0e:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa10:	785b      	ldrb	r3, [r3, #1]
 800aa12:	2b30      	cmp	r3, #48	; 0x30
 800aa14:	d0f8      	beq.n	800aa08 <_strtod_l+0x1f0>
 800aa16:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800aa1a:	2a08      	cmp	r2, #8
 800aa1c:	f200 84dc 	bhi.w	800b3d8 <_strtod_l+0xbc0>
 800aa20:	9004      	str	r0, [sp, #16]
 800aa22:	2000      	movs	r0, #0
 800aa24:	4604      	mov	r4, r0
 800aa26:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800aa28:	9208      	str	r2, [sp, #32]
 800aa2a:	3b30      	subs	r3, #48	; 0x30
 800aa2c:	f100 0201 	add.w	r2, r0, #1
 800aa30:	d013      	beq.n	800aa5a <_strtod_l+0x242>
 800aa32:	9904      	ldr	r1, [sp, #16]
 800aa34:	1905      	adds	r5, r0, r4
 800aa36:	4411      	add	r1, r2
 800aa38:	9104      	str	r1, [sp, #16]
 800aa3a:	4622      	mov	r2, r4
 800aa3c:	210a      	movs	r1, #10
 800aa3e:	42aa      	cmp	r2, r5
 800aa40:	d113      	bne.n	800aa6a <_strtod_l+0x252>
 800aa42:	1822      	adds	r2, r4, r0
 800aa44:	2a08      	cmp	r2, #8
 800aa46:	f104 0401 	add.w	r4, r4, #1
 800aa4a:	4404      	add	r4, r0
 800aa4c:	dc1b      	bgt.n	800aa86 <_strtod_l+0x26e>
 800aa4e:	220a      	movs	r2, #10
 800aa50:	9906      	ldr	r1, [sp, #24]
 800aa52:	fb02 3301 	mla	r3, r2, r1, r3
 800aa56:	9306      	str	r3, [sp, #24]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	1c59      	adds	r1, r3, #1
 800aa60:	911b      	str	r1, [sp, #108]	; 0x6c
 800aa62:	785b      	ldrb	r3, [r3, #1]
 800aa64:	e7ca      	b.n	800a9fc <_strtod_l+0x1e4>
 800aa66:	4658      	mov	r0, fp
 800aa68:	e7d3      	b.n	800aa12 <_strtod_l+0x1fa>
 800aa6a:	2a08      	cmp	r2, #8
 800aa6c:	dc04      	bgt.n	800aa78 <_strtod_l+0x260>
 800aa6e:	9f06      	ldr	r7, [sp, #24]
 800aa70:	434f      	muls	r7, r1
 800aa72:	9706      	str	r7, [sp, #24]
 800aa74:	3201      	adds	r2, #1
 800aa76:	e7e2      	b.n	800aa3e <_strtod_l+0x226>
 800aa78:	1c57      	adds	r7, r2, #1
 800aa7a:	2f10      	cmp	r7, #16
 800aa7c:	bfde      	ittt	le
 800aa7e:	9f05      	ldrle	r7, [sp, #20]
 800aa80:	434f      	mulle	r7, r1
 800aa82:	9705      	strle	r7, [sp, #20]
 800aa84:	e7f6      	b.n	800aa74 <_strtod_l+0x25c>
 800aa86:	2c10      	cmp	r4, #16
 800aa88:	bfdf      	itttt	le
 800aa8a:	220a      	movle	r2, #10
 800aa8c:	9905      	ldrle	r1, [sp, #20]
 800aa8e:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa92:	9305      	strle	r3, [sp, #20]
 800aa94:	e7e0      	b.n	800aa58 <_strtod_l+0x240>
 800aa96:	2300      	movs	r3, #0
 800aa98:	2201      	movs	r2, #1
 800aa9a:	9304      	str	r3, [sp, #16]
 800aa9c:	e77c      	b.n	800a998 <_strtod_l+0x180>
 800aa9e:	2700      	movs	r7, #0
 800aaa0:	1cb3      	adds	r3, r6, #2
 800aaa2:	931b      	str	r3, [sp, #108]	; 0x6c
 800aaa4:	78b3      	ldrb	r3, [r6, #2]
 800aaa6:	e784      	b.n	800a9b2 <_strtod_l+0x19a>
 800aaa8:	2701      	movs	r7, #1
 800aaaa:	e7f9      	b.n	800aaa0 <_strtod_l+0x288>
 800aaac:	0800e60c 	.word	0x0800e60c
 800aab0:	0800e31c 	.word	0x0800e31c
 800aab4:	7ff00000 	.word	0x7ff00000
 800aab8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aaba:	1c59      	adds	r1, r3, #1
 800aabc:	911b      	str	r1, [sp, #108]	; 0x6c
 800aabe:	785b      	ldrb	r3, [r3, #1]
 800aac0:	2b30      	cmp	r3, #48	; 0x30
 800aac2:	d0f9      	beq.n	800aab8 <_strtod_l+0x2a0>
 800aac4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800aac8:	2908      	cmp	r1, #8
 800aaca:	f63f af78 	bhi.w	800a9be <_strtod_l+0x1a6>
 800aace:	f04f 0e0a 	mov.w	lr, #10
 800aad2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800aad6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aad8:	9309      	str	r3, [sp, #36]	; 0x24
 800aada:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aadc:	1c59      	adds	r1, r3, #1
 800aade:	911b      	str	r1, [sp, #108]	; 0x6c
 800aae0:	785b      	ldrb	r3, [r3, #1]
 800aae2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800aae6:	2d09      	cmp	r5, #9
 800aae8:	d935      	bls.n	800ab56 <_strtod_l+0x33e>
 800aaea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aaec:	1b49      	subs	r1, r1, r5
 800aaee:	2908      	cmp	r1, #8
 800aaf0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800aaf4:	dc02      	bgt.n	800aafc <_strtod_l+0x2e4>
 800aaf6:	4565      	cmp	r5, ip
 800aaf8:	bfa8      	it	ge
 800aafa:	4665      	movge	r5, ip
 800aafc:	b107      	cbz	r7, 800ab00 <_strtod_l+0x2e8>
 800aafe:	426d      	negs	r5, r5
 800ab00:	2c00      	cmp	r4, #0
 800ab02:	d14c      	bne.n	800ab9e <_strtod_l+0x386>
 800ab04:	9907      	ldr	r1, [sp, #28]
 800ab06:	4301      	orrs	r1, r0
 800ab08:	f47f aec7 	bne.w	800a89a <_strtod_l+0x82>
 800ab0c:	2a00      	cmp	r2, #0
 800ab0e:	f47f aee0 	bne.w	800a8d2 <_strtod_l+0xba>
 800ab12:	2b69      	cmp	r3, #105	; 0x69
 800ab14:	d026      	beq.n	800ab64 <_strtod_l+0x34c>
 800ab16:	dc23      	bgt.n	800ab60 <_strtod_l+0x348>
 800ab18:	2b49      	cmp	r3, #73	; 0x49
 800ab1a:	d023      	beq.n	800ab64 <_strtod_l+0x34c>
 800ab1c:	2b4e      	cmp	r3, #78	; 0x4e
 800ab1e:	f47f aed8 	bne.w	800a8d2 <_strtod_l+0xba>
 800ab22:	499c      	ldr	r1, [pc, #624]	; (800ad94 <_strtod_l+0x57c>)
 800ab24:	a81b      	add	r0, sp, #108	; 0x6c
 800ab26:	f001 ffb3 	bl	800ca90 <__match>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	f43f aed1 	beq.w	800a8d2 <_strtod_l+0xba>
 800ab30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	2b28      	cmp	r3, #40	; 0x28
 800ab36:	d12c      	bne.n	800ab92 <_strtod_l+0x37a>
 800ab38:	4997      	ldr	r1, [pc, #604]	; (800ad98 <_strtod_l+0x580>)
 800ab3a:	aa1e      	add	r2, sp, #120	; 0x78
 800ab3c:	a81b      	add	r0, sp, #108	; 0x6c
 800ab3e:	f001 ffbb 	bl	800cab8 <__hexnan>
 800ab42:	2805      	cmp	r0, #5
 800ab44:	d125      	bne.n	800ab92 <_strtod_l+0x37a>
 800ab46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab48:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800ab4c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ab50:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ab54:	e6a1      	b.n	800a89a <_strtod_l+0x82>
 800ab56:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800ab5a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ab5e:	e7bc      	b.n	800aada <_strtod_l+0x2c2>
 800ab60:	2b6e      	cmp	r3, #110	; 0x6e
 800ab62:	e7dc      	b.n	800ab1e <_strtod_l+0x306>
 800ab64:	498d      	ldr	r1, [pc, #564]	; (800ad9c <_strtod_l+0x584>)
 800ab66:	a81b      	add	r0, sp, #108	; 0x6c
 800ab68:	f001 ff92 	bl	800ca90 <__match>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	f43f aeb0 	beq.w	800a8d2 <_strtod_l+0xba>
 800ab72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab74:	498a      	ldr	r1, [pc, #552]	; (800ada0 <_strtod_l+0x588>)
 800ab76:	3b01      	subs	r3, #1
 800ab78:	a81b      	add	r0, sp, #108	; 0x6c
 800ab7a:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab7c:	f001 ff88 	bl	800ca90 <__match>
 800ab80:	b910      	cbnz	r0, 800ab88 <_strtod_l+0x370>
 800ab82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab84:	3301      	adds	r3, #1
 800ab86:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab88:	f04f 0800 	mov.w	r8, #0
 800ab8c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800adb0 <_strtod_l+0x598>
 800ab90:	e683      	b.n	800a89a <_strtod_l+0x82>
 800ab92:	4884      	ldr	r0, [pc, #528]	; (800ada4 <_strtod_l+0x58c>)
 800ab94:	f003 f84e 	bl	800dc34 <nan>
 800ab98:	4680      	mov	r8, r0
 800ab9a:	4689      	mov	r9, r1
 800ab9c:	e67d      	b.n	800a89a <_strtod_l+0x82>
 800ab9e:	9b04      	ldr	r3, [sp, #16]
 800aba0:	f1bb 0f00 	cmp.w	fp, #0
 800aba4:	bf08      	it	eq
 800aba6:	46a3      	moveq	fp, r4
 800aba8:	1aeb      	subs	r3, r5, r3
 800abaa:	2c10      	cmp	r4, #16
 800abac:	9806      	ldr	r0, [sp, #24]
 800abae:	4626      	mov	r6, r4
 800abb0:	9307      	str	r3, [sp, #28]
 800abb2:	bfa8      	it	ge
 800abb4:	2610      	movge	r6, #16
 800abb6:	f7f5 fc15 	bl	80003e4 <__aeabi_ui2d>
 800abba:	2c09      	cmp	r4, #9
 800abbc:	4680      	mov	r8, r0
 800abbe:	4689      	mov	r9, r1
 800abc0:	dd13      	ble.n	800abea <_strtod_l+0x3d2>
 800abc2:	4b79      	ldr	r3, [pc, #484]	; (800ada8 <_strtod_l+0x590>)
 800abc4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800abc8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800abcc:	f7f5 fc84 	bl	80004d8 <__aeabi_dmul>
 800abd0:	4680      	mov	r8, r0
 800abd2:	9805      	ldr	r0, [sp, #20]
 800abd4:	4689      	mov	r9, r1
 800abd6:	f7f5 fc05 	bl	80003e4 <__aeabi_ui2d>
 800abda:	4602      	mov	r2, r0
 800abdc:	460b      	mov	r3, r1
 800abde:	4640      	mov	r0, r8
 800abe0:	4649      	mov	r1, r9
 800abe2:	f7f5 fac3 	bl	800016c <__adddf3>
 800abe6:	4680      	mov	r8, r0
 800abe8:	4689      	mov	r9, r1
 800abea:	2c0f      	cmp	r4, #15
 800abec:	dc36      	bgt.n	800ac5c <_strtod_l+0x444>
 800abee:	9b07      	ldr	r3, [sp, #28]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f43f ae52 	beq.w	800a89a <_strtod_l+0x82>
 800abf6:	dd22      	ble.n	800ac3e <_strtod_l+0x426>
 800abf8:	2b16      	cmp	r3, #22
 800abfa:	dc09      	bgt.n	800ac10 <_strtod_l+0x3f8>
 800abfc:	4c6a      	ldr	r4, [pc, #424]	; (800ada8 <_strtod_l+0x590>)
 800abfe:	4642      	mov	r2, r8
 800ac00:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800ac04:	464b      	mov	r3, r9
 800ac06:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ac0a:	f7f5 fc65 	bl	80004d8 <__aeabi_dmul>
 800ac0e:	e7c3      	b.n	800ab98 <_strtod_l+0x380>
 800ac10:	9a07      	ldr	r2, [sp, #28]
 800ac12:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ac16:	4293      	cmp	r3, r2
 800ac18:	db20      	blt.n	800ac5c <_strtod_l+0x444>
 800ac1a:	4d63      	ldr	r5, [pc, #396]	; (800ada8 <_strtod_l+0x590>)
 800ac1c:	f1c4 040f 	rsb	r4, r4, #15
 800ac20:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800ac24:	4642      	mov	r2, r8
 800ac26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac2a:	464b      	mov	r3, r9
 800ac2c:	f7f5 fc54 	bl	80004d8 <__aeabi_dmul>
 800ac30:	9b07      	ldr	r3, [sp, #28]
 800ac32:	1b1c      	subs	r4, r3, r4
 800ac34:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ac38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac3c:	e7e5      	b.n	800ac0a <_strtod_l+0x3f2>
 800ac3e:	9b07      	ldr	r3, [sp, #28]
 800ac40:	3316      	adds	r3, #22
 800ac42:	db0b      	blt.n	800ac5c <_strtod_l+0x444>
 800ac44:	9b04      	ldr	r3, [sp, #16]
 800ac46:	4a58      	ldr	r2, [pc, #352]	; (800ada8 <_strtod_l+0x590>)
 800ac48:	1b5d      	subs	r5, r3, r5
 800ac4a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ac4e:	4640      	mov	r0, r8
 800ac50:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac54:	4649      	mov	r1, r9
 800ac56:	f7f5 fd69 	bl	800072c <__aeabi_ddiv>
 800ac5a:	e79d      	b.n	800ab98 <_strtod_l+0x380>
 800ac5c:	9b07      	ldr	r3, [sp, #28]
 800ac5e:	1ba6      	subs	r6, r4, r6
 800ac60:	441e      	add	r6, r3
 800ac62:	2e00      	cmp	r6, #0
 800ac64:	dd71      	ble.n	800ad4a <_strtod_l+0x532>
 800ac66:	f016 030f 	ands.w	r3, r6, #15
 800ac6a:	d00a      	beq.n	800ac82 <_strtod_l+0x46a>
 800ac6c:	494e      	ldr	r1, [pc, #312]	; (800ada8 <_strtod_l+0x590>)
 800ac6e:	4642      	mov	r2, r8
 800ac70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac78:	464b      	mov	r3, r9
 800ac7a:	f7f5 fc2d 	bl	80004d8 <__aeabi_dmul>
 800ac7e:	4680      	mov	r8, r0
 800ac80:	4689      	mov	r9, r1
 800ac82:	f036 060f 	bics.w	r6, r6, #15
 800ac86:	d050      	beq.n	800ad2a <_strtod_l+0x512>
 800ac88:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800ac8c:	dd27      	ble.n	800acde <_strtod_l+0x4c6>
 800ac8e:	f04f 0b00 	mov.w	fp, #0
 800ac92:	f8cd b010 	str.w	fp, [sp, #16]
 800ac96:	f8cd b020 	str.w	fp, [sp, #32]
 800ac9a:	f8cd b018 	str.w	fp, [sp, #24]
 800ac9e:	2322      	movs	r3, #34	; 0x22
 800aca0:	f04f 0800 	mov.w	r8, #0
 800aca4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800adb0 <_strtod_l+0x598>
 800aca8:	f8ca 3000 	str.w	r3, [sl]
 800acac:	9b08      	ldr	r3, [sp, #32]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f43f adf3 	beq.w	800a89a <_strtod_l+0x82>
 800acb4:	4650      	mov	r0, sl
 800acb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800acb8:	f002 f824 	bl	800cd04 <_Bfree>
 800acbc:	4650      	mov	r0, sl
 800acbe:	9906      	ldr	r1, [sp, #24]
 800acc0:	f002 f820 	bl	800cd04 <_Bfree>
 800acc4:	4650      	mov	r0, sl
 800acc6:	9904      	ldr	r1, [sp, #16]
 800acc8:	f002 f81c 	bl	800cd04 <_Bfree>
 800accc:	4650      	mov	r0, sl
 800acce:	9908      	ldr	r1, [sp, #32]
 800acd0:	f002 f818 	bl	800cd04 <_Bfree>
 800acd4:	4659      	mov	r1, fp
 800acd6:	4650      	mov	r0, sl
 800acd8:	f002 f814 	bl	800cd04 <_Bfree>
 800acdc:	e5dd      	b.n	800a89a <_strtod_l+0x82>
 800acde:	2300      	movs	r3, #0
 800ace0:	4640      	mov	r0, r8
 800ace2:	4649      	mov	r1, r9
 800ace4:	461f      	mov	r7, r3
 800ace6:	1136      	asrs	r6, r6, #4
 800ace8:	2e01      	cmp	r6, #1
 800acea:	dc21      	bgt.n	800ad30 <_strtod_l+0x518>
 800acec:	b10b      	cbz	r3, 800acf2 <_strtod_l+0x4da>
 800acee:	4680      	mov	r8, r0
 800acf0:	4689      	mov	r9, r1
 800acf2:	4b2e      	ldr	r3, [pc, #184]	; (800adac <_strtod_l+0x594>)
 800acf4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800acf8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800acfc:	4642      	mov	r2, r8
 800acfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad02:	464b      	mov	r3, r9
 800ad04:	f7f5 fbe8 	bl	80004d8 <__aeabi_dmul>
 800ad08:	4b29      	ldr	r3, [pc, #164]	; (800adb0 <_strtod_l+0x598>)
 800ad0a:	460a      	mov	r2, r1
 800ad0c:	400b      	ands	r3, r1
 800ad0e:	4929      	ldr	r1, [pc, #164]	; (800adb4 <_strtod_l+0x59c>)
 800ad10:	4680      	mov	r8, r0
 800ad12:	428b      	cmp	r3, r1
 800ad14:	d8bb      	bhi.n	800ac8e <_strtod_l+0x476>
 800ad16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ad1a:	428b      	cmp	r3, r1
 800ad1c:	bf86      	itte	hi
 800ad1e:	f04f 38ff 	movhi.w	r8, #4294967295
 800ad22:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800adb8 <_strtod_l+0x5a0>
 800ad26:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	9305      	str	r3, [sp, #20]
 800ad2e:	e07e      	b.n	800ae2e <_strtod_l+0x616>
 800ad30:	07f2      	lsls	r2, r6, #31
 800ad32:	d507      	bpl.n	800ad44 <_strtod_l+0x52c>
 800ad34:	4b1d      	ldr	r3, [pc, #116]	; (800adac <_strtod_l+0x594>)
 800ad36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3e:	f7f5 fbcb 	bl	80004d8 <__aeabi_dmul>
 800ad42:	2301      	movs	r3, #1
 800ad44:	3701      	adds	r7, #1
 800ad46:	1076      	asrs	r6, r6, #1
 800ad48:	e7ce      	b.n	800ace8 <_strtod_l+0x4d0>
 800ad4a:	d0ee      	beq.n	800ad2a <_strtod_l+0x512>
 800ad4c:	4276      	negs	r6, r6
 800ad4e:	f016 020f 	ands.w	r2, r6, #15
 800ad52:	d00a      	beq.n	800ad6a <_strtod_l+0x552>
 800ad54:	4b14      	ldr	r3, [pc, #80]	; (800ada8 <_strtod_l+0x590>)
 800ad56:	4640      	mov	r0, r8
 800ad58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad5c:	4649      	mov	r1, r9
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	f7f5 fce3 	bl	800072c <__aeabi_ddiv>
 800ad66:	4680      	mov	r8, r0
 800ad68:	4689      	mov	r9, r1
 800ad6a:	1136      	asrs	r6, r6, #4
 800ad6c:	d0dd      	beq.n	800ad2a <_strtod_l+0x512>
 800ad6e:	2e1f      	cmp	r6, #31
 800ad70:	dd24      	ble.n	800adbc <_strtod_l+0x5a4>
 800ad72:	f04f 0b00 	mov.w	fp, #0
 800ad76:	f8cd b010 	str.w	fp, [sp, #16]
 800ad7a:	f8cd b020 	str.w	fp, [sp, #32]
 800ad7e:	f8cd b018 	str.w	fp, [sp, #24]
 800ad82:	2322      	movs	r3, #34	; 0x22
 800ad84:	f04f 0800 	mov.w	r8, #0
 800ad88:	f04f 0900 	mov.w	r9, #0
 800ad8c:	f8ca 3000 	str.w	r3, [sl]
 800ad90:	e78c      	b.n	800acac <_strtod_l+0x494>
 800ad92:	bf00      	nop
 800ad94:	0800e2ed 	.word	0x0800e2ed
 800ad98:	0800e330 	.word	0x0800e330
 800ad9c:	0800e2e5 	.word	0x0800e2e5
 800ada0:	0800e528 	.word	0x0800e528
 800ada4:	0800e423 	.word	0x0800e423
 800ada8:	0800e6a8 	.word	0x0800e6a8
 800adac:	0800e680 	.word	0x0800e680
 800adb0:	7ff00000 	.word	0x7ff00000
 800adb4:	7ca00000 	.word	0x7ca00000
 800adb8:	7fefffff 	.word	0x7fefffff
 800adbc:	f016 0310 	ands.w	r3, r6, #16
 800adc0:	bf18      	it	ne
 800adc2:	236a      	movne	r3, #106	; 0x6a
 800adc4:	4640      	mov	r0, r8
 800adc6:	9305      	str	r3, [sp, #20]
 800adc8:	4649      	mov	r1, r9
 800adca:	2300      	movs	r3, #0
 800adcc:	4fb2      	ldr	r7, [pc, #712]	; (800b098 <_strtod_l+0x880>)
 800adce:	07f2      	lsls	r2, r6, #31
 800add0:	d504      	bpl.n	800addc <_strtod_l+0x5c4>
 800add2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800add6:	f7f5 fb7f 	bl	80004d8 <__aeabi_dmul>
 800adda:	2301      	movs	r3, #1
 800addc:	1076      	asrs	r6, r6, #1
 800adde:	f107 0708 	add.w	r7, r7, #8
 800ade2:	d1f4      	bne.n	800adce <_strtod_l+0x5b6>
 800ade4:	b10b      	cbz	r3, 800adea <_strtod_l+0x5d2>
 800ade6:	4680      	mov	r8, r0
 800ade8:	4689      	mov	r9, r1
 800adea:	9b05      	ldr	r3, [sp, #20]
 800adec:	b1bb      	cbz	r3, 800ae1e <_strtod_l+0x606>
 800adee:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800adf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	4649      	mov	r1, r9
 800adfa:	dd10      	ble.n	800ae1e <_strtod_l+0x606>
 800adfc:	2b1f      	cmp	r3, #31
 800adfe:	f340 812b 	ble.w	800b058 <_strtod_l+0x840>
 800ae02:	2b34      	cmp	r3, #52	; 0x34
 800ae04:	bfd8      	it	le
 800ae06:	f04f 32ff 	movle.w	r2, #4294967295
 800ae0a:	f04f 0800 	mov.w	r8, #0
 800ae0e:	bfcf      	iteee	gt
 800ae10:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ae14:	3b20      	suble	r3, #32
 800ae16:	fa02 f303 	lslle.w	r3, r2, r3
 800ae1a:	ea03 0901 	andle.w	r9, r3, r1
 800ae1e:	2200      	movs	r2, #0
 800ae20:	2300      	movs	r3, #0
 800ae22:	4640      	mov	r0, r8
 800ae24:	4649      	mov	r1, r9
 800ae26:	f7f5 fdbf 	bl	80009a8 <__aeabi_dcmpeq>
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	d1a1      	bne.n	800ad72 <_strtod_l+0x55a>
 800ae2e:	9b06      	ldr	r3, [sp, #24]
 800ae30:	465a      	mov	r2, fp
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	4650      	mov	r0, sl
 800ae36:	4623      	mov	r3, r4
 800ae38:	9908      	ldr	r1, [sp, #32]
 800ae3a:	f001 ffcf 	bl	800cddc <__s2b>
 800ae3e:	9008      	str	r0, [sp, #32]
 800ae40:	2800      	cmp	r0, #0
 800ae42:	f43f af24 	beq.w	800ac8e <_strtod_l+0x476>
 800ae46:	9b04      	ldr	r3, [sp, #16]
 800ae48:	f04f 0b00 	mov.w	fp, #0
 800ae4c:	1b5d      	subs	r5, r3, r5
 800ae4e:	9b07      	ldr	r3, [sp, #28]
 800ae50:	f8cd b010 	str.w	fp, [sp, #16]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	bfb4      	ite	lt
 800ae58:	462b      	movlt	r3, r5
 800ae5a:	2300      	movge	r3, #0
 800ae5c:	930e      	str	r3, [sp, #56]	; 0x38
 800ae5e:	9b07      	ldr	r3, [sp, #28]
 800ae60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ae64:	9316      	str	r3, [sp, #88]	; 0x58
 800ae66:	9b08      	ldr	r3, [sp, #32]
 800ae68:	4650      	mov	r0, sl
 800ae6a:	6859      	ldr	r1, [r3, #4]
 800ae6c:	f001 ff0a 	bl	800cc84 <_Balloc>
 800ae70:	9006      	str	r0, [sp, #24]
 800ae72:	2800      	cmp	r0, #0
 800ae74:	f43f af13 	beq.w	800ac9e <_strtod_l+0x486>
 800ae78:	9b08      	ldr	r3, [sp, #32]
 800ae7a:	300c      	adds	r0, #12
 800ae7c:	691a      	ldr	r2, [r3, #16]
 800ae7e:	f103 010c 	add.w	r1, r3, #12
 800ae82:	3202      	adds	r2, #2
 800ae84:	0092      	lsls	r2, r2, #2
 800ae86:	f7fe fc88 	bl	800979a <memcpy>
 800ae8a:	ab1e      	add	r3, sp, #120	; 0x78
 800ae8c:	9301      	str	r3, [sp, #4]
 800ae8e:	ab1d      	add	r3, sp, #116	; 0x74
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	4642      	mov	r2, r8
 800ae94:	464b      	mov	r3, r9
 800ae96:	4650      	mov	r0, sl
 800ae98:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800ae9c:	f002 fadc 	bl	800d458 <__d2b>
 800aea0:	901c      	str	r0, [sp, #112]	; 0x70
 800aea2:	2800      	cmp	r0, #0
 800aea4:	f43f aefb 	beq.w	800ac9e <_strtod_l+0x486>
 800aea8:	2101      	movs	r1, #1
 800aeaa:	4650      	mov	r0, sl
 800aeac:	f002 f82e 	bl	800cf0c <__i2b>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	9004      	str	r0, [sp, #16]
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	f43f aef2 	beq.w	800ac9e <_strtod_l+0x486>
 800aeba:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800aebc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aebe:	2d00      	cmp	r5, #0
 800aec0:	bfab      	itete	ge
 800aec2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800aec4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800aec6:	18ee      	addge	r6, r5, r3
 800aec8:	1b5c      	sublt	r4, r3, r5
 800aeca:	9b05      	ldr	r3, [sp, #20]
 800aecc:	bfa8      	it	ge
 800aece:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800aed0:	eba5 0503 	sub.w	r5, r5, r3
 800aed4:	4415      	add	r5, r2
 800aed6:	4b71      	ldr	r3, [pc, #452]	; (800b09c <_strtod_l+0x884>)
 800aed8:	f105 35ff 	add.w	r5, r5, #4294967295
 800aedc:	bfb8      	it	lt
 800aede:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800aee0:	429d      	cmp	r5, r3
 800aee2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aee6:	f280 80c9 	bge.w	800b07c <_strtod_l+0x864>
 800aeea:	1b5b      	subs	r3, r3, r5
 800aeec:	2b1f      	cmp	r3, #31
 800aeee:	f04f 0701 	mov.w	r7, #1
 800aef2:	eba2 0203 	sub.w	r2, r2, r3
 800aef6:	f300 80b6 	bgt.w	800b066 <_strtod_l+0x84e>
 800aefa:	2500      	movs	r5, #0
 800aefc:	fa07 f303 	lsl.w	r3, r7, r3
 800af00:	930f      	str	r3, [sp, #60]	; 0x3c
 800af02:	18b7      	adds	r7, r6, r2
 800af04:	9b05      	ldr	r3, [sp, #20]
 800af06:	42be      	cmp	r6, r7
 800af08:	4414      	add	r4, r2
 800af0a:	441c      	add	r4, r3
 800af0c:	4633      	mov	r3, r6
 800af0e:	bfa8      	it	ge
 800af10:	463b      	movge	r3, r7
 800af12:	42a3      	cmp	r3, r4
 800af14:	bfa8      	it	ge
 800af16:	4623      	movge	r3, r4
 800af18:	2b00      	cmp	r3, #0
 800af1a:	bfc2      	ittt	gt
 800af1c:	1aff      	subgt	r7, r7, r3
 800af1e:	1ae4      	subgt	r4, r4, r3
 800af20:	1af6      	subgt	r6, r6, r3
 800af22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af24:	2b00      	cmp	r3, #0
 800af26:	dd17      	ble.n	800af58 <_strtod_l+0x740>
 800af28:	461a      	mov	r2, r3
 800af2a:	4650      	mov	r0, sl
 800af2c:	9904      	ldr	r1, [sp, #16]
 800af2e:	f002 f8a7 	bl	800d080 <__pow5mult>
 800af32:	9004      	str	r0, [sp, #16]
 800af34:	2800      	cmp	r0, #0
 800af36:	f43f aeb2 	beq.w	800ac9e <_strtod_l+0x486>
 800af3a:	4601      	mov	r1, r0
 800af3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800af3e:	4650      	mov	r0, sl
 800af40:	f001 fffa 	bl	800cf38 <__multiply>
 800af44:	9009      	str	r0, [sp, #36]	; 0x24
 800af46:	2800      	cmp	r0, #0
 800af48:	f43f aea9 	beq.w	800ac9e <_strtod_l+0x486>
 800af4c:	4650      	mov	r0, sl
 800af4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800af50:	f001 fed8 	bl	800cd04 <_Bfree>
 800af54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af56:	931c      	str	r3, [sp, #112]	; 0x70
 800af58:	2f00      	cmp	r7, #0
 800af5a:	f300 8093 	bgt.w	800b084 <_strtod_l+0x86c>
 800af5e:	9b07      	ldr	r3, [sp, #28]
 800af60:	2b00      	cmp	r3, #0
 800af62:	dd08      	ble.n	800af76 <_strtod_l+0x75e>
 800af64:	4650      	mov	r0, sl
 800af66:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af68:	9906      	ldr	r1, [sp, #24]
 800af6a:	f002 f889 	bl	800d080 <__pow5mult>
 800af6e:	9006      	str	r0, [sp, #24]
 800af70:	2800      	cmp	r0, #0
 800af72:	f43f ae94 	beq.w	800ac9e <_strtod_l+0x486>
 800af76:	2c00      	cmp	r4, #0
 800af78:	dd08      	ble.n	800af8c <_strtod_l+0x774>
 800af7a:	4622      	mov	r2, r4
 800af7c:	4650      	mov	r0, sl
 800af7e:	9906      	ldr	r1, [sp, #24]
 800af80:	f002 f8d8 	bl	800d134 <__lshift>
 800af84:	9006      	str	r0, [sp, #24]
 800af86:	2800      	cmp	r0, #0
 800af88:	f43f ae89 	beq.w	800ac9e <_strtod_l+0x486>
 800af8c:	2e00      	cmp	r6, #0
 800af8e:	dd08      	ble.n	800afa2 <_strtod_l+0x78a>
 800af90:	4632      	mov	r2, r6
 800af92:	4650      	mov	r0, sl
 800af94:	9904      	ldr	r1, [sp, #16]
 800af96:	f002 f8cd 	bl	800d134 <__lshift>
 800af9a:	9004      	str	r0, [sp, #16]
 800af9c:	2800      	cmp	r0, #0
 800af9e:	f43f ae7e 	beq.w	800ac9e <_strtod_l+0x486>
 800afa2:	4650      	mov	r0, sl
 800afa4:	9a06      	ldr	r2, [sp, #24]
 800afa6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800afa8:	f002 f94c 	bl	800d244 <__mdiff>
 800afac:	4683      	mov	fp, r0
 800afae:	2800      	cmp	r0, #0
 800afb0:	f43f ae75 	beq.w	800ac9e <_strtod_l+0x486>
 800afb4:	2400      	movs	r4, #0
 800afb6:	68c3      	ldr	r3, [r0, #12]
 800afb8:	9904      	ldr	r1, [sp, #16]
 800afba:	60c4      	str	r4, [r0, #12]
 800afbc:	930d      	str	r3, [sp, #52]	; 0x34
 800afbe:	f002 f925 	bl	800d20c <__mcmp>
 800afc2:	42a0      	cmp	r0, r4
 800afc4:	da70      	bge.n	800b0a8 <_strtod_l+0x890>
 800afc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afc8:	ea53 0308 	orrs.w	r3, r3, r8
 800afcc:	f040 8096 	bne.w	800b0fc <_strtod_l+0x8e4>
 800afd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f040 8091 	bne.w	800b0fc <_strtod_l+0x8e4>
 800afda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afde:	0d1b      	lsrs	r3, r3, #20
 800afe0:	051b      	lsls	r3, r3, #20
 800afe2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800afe6:	f240 8089 	bls.w	800b0fc <_strtod_l+0x8e4>
 800afea:	f8db 3014 	ldr.w	r3, [fp, #20]
 800afee:	b923      	cbnz	r3, 800affa <_strtod_l+0x7e2>
 800aff0:	f8db 3010 	ldr.w	r3, [fp, #16]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	f340 8081 	ble.w	800b0fc <_strtod_l+0x8e4>
 800affa:	4659      	mov	r1, fp
 800affc:	2201      	movs	r2, #1
 800affe:	4650      	mov	r0, sl
 800b000:	f002 f898 	bl	800d134 <__lshift>
 800b004:	9904      	ldr	r1, [sp, #16]
 800b006:	4683      	mov	fp, r0
 800b008:	f002 f900 	bl	800d20c <__mcmp>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	dd75      	ble.n	800b0fc <_strtod_l+0x8e4>
 800b010:	9905      	ldr	r1, [sp, #20]
 800b012:	464b      	mov	r3, r9
 800b014:	4a22      	ldr	r2, [pc, #136]	; (800b0a0 <_strtod_l+0x888>)
 800b016:	2900      	cmp	r1, #0
 800b018:	f000 8091 	beq.w	800b13e <_strtod_l+0x926>
 800b01c:	ea02 0109 	and.w	r1, r2, r9
 800b020:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b024:	f300 808b 	bgt.w	800b13e <_strtod_l+0x926>
 800b028:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b02c:	f77f aea9 	ble.w	800ad82 <_strtod_l+0x56a>
 800b030:	2300      	movs	r3, #0
 800b032:	4a1c      	ldr	r2, [pc, #112]	; (800b0a4 <_strtod_l+0x88c>)
 800b034:	4640      	mov	r0, r8
 800b036:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b03a:	4649      	mov	r1, r9
 800b03c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b040:	f7f5 fa4a 	bl	80004d8 <__aeabi_dmul>
 800b044:	460b      	mov	r3, r1
 800b046:	4303      	orrs	r3, r0
 800b048:	bf08      	it	eq
 800b04a:	2322      	moveq	r3, #34	; 0x22
 800b04c:	4680      	mov	r8, r0
 800b04e:	4689      	mov	r9, r1
 800b050:	bf08      	it	eq
 800b052:	f8ca 3000 	streq.w	r3, [sl]
 800b056:	e62d      	b.n	800acb4 <_strtod_l+0x49c>
 800b058:	f04f 32ff 	mov.w	r2, #4294967295
 800b05c:	fa02 f303 	lsl.w	r3, r2, r3
 800b060:	ea03 0808 	and.w	r8, r3, r8
 800b064:	e6db      	b.n	800ae1e <_strtod_l+0x606>
 800b066:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b06a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b06e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b072:	35e2      	adds	r5, #226	; 0xe2
 800b074:	fa07 f505 	lsl.w	r5, r7, r5
 800b078:	970f      	str	r7, [sp, #60]	; 0x3c
 800b07a:	e742      	b.n	800af02 <_strtod_l+0x6ea>
 800b07c:	2301      	movs	r3, #1
 800b07e:	2500      	movs	r5, #0
 800b080:	930f      	str	r3, [sp, #60]	; 0x3c
 800b082:	e73e      	b.n	800af02 <_strtod_l+0x6ea>
 800b084:	463a      	mov	r2, r7
 800b086:	4650      	mov	r0, sl
 800b088:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b08a:	f002 f853 	bl	800d134 <__lshift>
 800b08e:	901c      	str	r0, [sp, #112]	; 0x70
 800b090:	2800      	cmp	r0, #0
 800b092:	f47f af64 	bne.w	800af5e <_strtod_l+0x746>
 800b096:	e602      	b.n	800ac9e <_strtod_l+0x486>
 800b098:	0800e348 	.word	0x0800e348
 800b09c:	fffffc02 	.word	0xfffffc02
 800b0a0:	7ff00000 	.word	0x7ff00000
 800b0a4:	39500000 	.word	0x39500000
 800b0a8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b0ac:	d166      	bne.n	800b17c <_strtod_l+0x964>
 800b0ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0b4:	b35a      	cbz	r2, 800b10e <_strtod_l+0x8f6>
 800b0b6:	4a9c      	ldr	r2, [pc, #624]	; (800b328 <_strtod_l+0xb10>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d12c      	bne.n	800b116 <_strtod_l+0x8fe>
 800b0bc:	9b05      	ldr	r3, [sp, #20]
 800b0be:	4640      	mov	r0, r8
 800b0c0:	b303      	cbz	r3, 800b104 <_strtod_l+0x8ec>
 800b0c2:	464b      	mov	r3, r9
 800b0c4:	4a99      	ldr	r2, [pc, #612]	; (800b32c <_strtod_l+0xb14>)
 800b0c6:	f04f 31ff 	mov.w	r1, #4294967295
 800b0ca:	401a      	ands	r2, r3
 800b0cc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b0d0:	d81b      	bhi.n	800b10a <_strtod_l+0x8f2>
 800b0d2:	0d12      	lsrs	r2, r2, #20
 800b0d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b0d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b0dc:	4298      	cmp	r0, r3
 800b0de:	d11a      	bne.n	800b116 <_strtod_l+0x8fe>
 800b0e0:	4b93      	ldr	r3, [pc, #588]	; (800b330 <_strtod_l+0xb18>)
 800b0e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d102      	bne.n	800b0ee <_strtod_l+0x8d6>
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	f43f add8 	beq.w	800ac9e <_strtod_l+0x486>
 800b0ee:	f04f 0800 	mov.w	r8, #0
 800b0f2:	4b8e      	ldr	r3, [pc, #568]	; (800b32c <_strtod_l+0xb14>)
 800b0f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0f6:	401a      	ands	r2, r3
 800b0f8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800b0fc:	9b05      	ldr	r3, [sp, #20]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d196      	bne.n	800b030 <_strtod_l+0x818>
 800b102:	e5d7      	b.n	800acb4 <_strtod_l+0x49c>
 800b104:	f04f 33ff 	mov.w	r3, #4294967295
 800b108:	e7e8      	b.n	800b0dc <_strtod_l+0x8c4>
 800b10a:	460b      	mov	r3, r1
 800b10c:	e7e6      	b.n	800b0dc <_strtod_l+0x8c4>
 800b10e:	ea53 0308 	orrs.w	r3, r3, r8
 800b112:	f43f af7d 	beq.w	800b010 <_strtod_l+0x7f8>
 800b116:	b1e5      	cbz	r5, 800b152 <_strtod_l+0x93a>
 800b118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b11a:	421d      	tst	r5, r3
 800b11c:	d0ee      	beq.n	800b0fc <_strtod_l+0x8e4>
 800b11e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b120:	4640      	mov	r0, r8
 800b122:	4649      	mov	r1, r9
 800b124:	9a05      	ldr	r2, [sp, #20]
 800b126:	b1c3      	cbz	r3, 800b15a <_strtod_l+0x942>
 800b128:	f7ff fb53 	bl	800a7d2 <sulp>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b134:	f7f5 f81a 	bl	800016c <__adddf3>
 800b138:	4680      	mov	r8, r0
 800b13a:	4689      	mov	r9, r1
 800b13c:	e7de      	b.n	800b0fc <_strtod_l+0x8e4>
 800b13e:	4013      	ands	r3, r2
 800b140:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b144:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b148:	f04f 38ff 	mov.w	r8, #4294967295
 800b14c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b150:	e7d4      	b.n	800b0fc <_strtod_l+0x8e4>
 800b152:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b154:	ea13 0f08 	tst.w	r3, r8
 800b158:	e7e0      	b.n	800b11c <_strtod_l+0x904>
 800b15a:	f7ff fb3a 	bl	800a7d2 <sulp>
 800b15e:	4602      	mov	r2, r0
 800b160:	460b      	mov	r3, r1
 800b162:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b166:	f7f4 ffff 	bl	8000168 <__aeabi_dsub>
 800b16a:	2200      	movs	r2, #0
 800b16c:	2300      	movs	r3, #0
 800b16e:	4680      	mov	r8, r0
 800b170:	4689      	mov	r9, r1
 800b172:	f7f5 fc19 	bl	80009a8 <__aeabi_dcmpeq>
 800b176:	2800      	cmp	r0, #0
 800b178:	d0c0      	beq.n	800b0fc <_strtod_l+0x8e4>
 800b17a:	e602      	b.n	800ad82 <_strtod_l+0x56a>
 800b17c:	4658      	mov	r0, fp
 800b17e:	9904      	ldr	r1, [sp, #16]
 800b180:	f002 f9c6 	bl	800d510 <__ratio>
 800b184:	2200      	movs	r2, #0
 800b186:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b18a:	4606      	mov	r6, r0
 800b18c:	460f      	mov	r7, r1
 800b18e:	f7f5 fc1f 	bl	80009d0 <__aeabi_dcmple>
 800b192:	2800      	cmp	r0, #0
 800b194:	d075      	beq.n	800b282 <_strtod_l+0xa6a>
 800b196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d047      	beq.n	800b22c <_strtod_l+0xa14>
 800b19c:	2600      	movs	r6, #0
 800b19e:	4f65      	ldr	r7, [pc, #404]	; (800b334 <_strtod_l+0xb1c>)
 800b1a0:	4d64      	ldr	r5, [pc, #400]	; (800b334 <_strtod_l+0xb1c>)
 800b1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1a8:	0d1b      	lsrs	r3, r3, #20
 800b1aa:	051b      	lsls	r3, r3, #20
 800b1ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1b0:	4b61      	ldr	r3, [pc, #388]	; (800b338 <_strtod_l+0xb20>)
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	f040 80c8 	bne.w	800b348 <_strtod_l+0xb30>
 800b1b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b1bc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1c2:	4640      	mov	r0, r8
 800b1c4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800b1c8:	4649      	mov	r1, r9
 800b1ca:	f002 f8cb 	bl	800d364 <__ulp>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	f7f5 f97f 	bl	80004d8 <__aeabi_dmul>
 800b1da:	4642      	mov	r2, r8
 800b1dc:	464b      	mov	r3, r9
 800b1de:	f7f4 ffc5 	bl	800016c <__adddf3>
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4951      	ldr	r1, [pc, #324]	; (800b32c <_strtod_l+0xb14>)
 800b1e6:	4a55      	ldr	r2, [pc, #340]	; (800b33c <_strtod_l+0xb24>)
 800b1e8:	4019      	ands	r1, r3
 800b1ea:	4291      	cmp	r1, r2
 800b1ec:	4680      	mov	r8, r0
 800b1ee:	d95e      	bls.n	800b2ae <_strtod_l+0xa96>
 800b1f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1f2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d103      	bne.n	800b202 <_strtod_l+0x9ea>
 800b1fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	f43f ad4e 	beq.w	800ac9e <_strtod_l+0x486>
 800b202:	f04f 38ff 	mov.w	r8, #4294967295
 800b206:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b330 <_strtod_l+0xb18>
 800b20a:	4650      	mov	r0, sl
 800b20c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b20e:	f001 fd79 	bl	800cd04 <_Bfree>
 800b212:	4650      	mov	r0, sl
 800b214:	9906      	ldr	r1, [sp, #24]
 800b216:	f001 fd75 	bl	800cd04 <_Bfree>
 800b21a:	4650      	mov	r0, sl
 800b21c:	9904      	ldr	r1, [sp, #16]
 800b21e:	f001 fd71 	bl	800cd04 <_Bfree>
 800b222:	4659      	mov	r1, fp
 800b224:	4650      	mov	r0, sl
 800b226:	f001 fd6d 	bl	800cd04 <_Bfree>
 800b22a:	e61c      	b.n	800ae66 <_strtod_l+0x64e>
 800b22c:	f1b8 0f00 	cmp.w	r8, #0
 800b230:	d119      	bne.n	800b266 <_strtod_l+0xa4e>
 800b232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b238:	b9e3      	cbnz	r3, 800b274 <_strtod_l+0xa5c>
 800b23a:	2200      	movs	r2, #0
 800b23c:	4630      	mov	r0, r6
 800b23e:	4639      	mov	r1, r7
 800b240:	4b3c      	ldr	r3, [pc, #240]	; (800b334 <_strtod_l+0xb1c>)
 800b242:	f7f5 fbbb 	bl	80009bc <__aeabi_dcmplt>
 800b246:	b9c8      	cbnz	r0, 800b27c <_strtod_l+0xa64>
 800b248:	2200      	movs	r2, #0
 800b24a:	4630      	mov	r0, r6
 800b24c:	4639      	mov	r1, r7
 800b24e:	4b3c      	ldr	r3, [pc, #240]	; (800b340 <_strtod_l+0xb28>)
 800b250:	f7f5 f942 	bl	80004d8 <__aeabi_dmul>
 800b254:	4604      	mov	r4, r0
 800b256:	460d      	mov	r5, r1
 800b258:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b25c:	9418      	str	r4, [sp, #96]	; 0x60
 800b25e:	9319      	str	r3, [sp, #100]	; 0x64
 800b260:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800b264:	e79d      	b.n	800b1a2 <_strtod_l+0x98a>
 800b266:	f1b8 0f01 	cmp.w	r8, #1
 800b26a:	d103      	bne.n	800b274 <_strtod_l+0xa5c>
 800b26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f43f ad87 	beq.w	800ad82 <_strtod_l+0x56a>
 800b274:	2600      	movs	r6, #0
 800b276:	2400      	movs	r4, #0
 800b278:	4f32      	ldr	r7, [pc, #200]	; (800b344 <_strtod_l+0xb2c>)
 800b27a:	e791      	b.n	800b1a0 <_strtod_l+0x988>
 800b27c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b27e:	4d30      	ldr	r5, [pc, #192]	; (800b340 <_strtod_l+0xb28>)
 800b280:	e7ea      	b.n	800b258 <_strtod_l+0xa40>
 800b282:	4b2f      	ldr	r3, [pc, #188]	; (800b340 <_strtod_l+0xb28>)
 800b284:	2200      	movs	r2, #0
 800b286:	4630      	mov	r0, r6
 800b288:	4639      	mov	r1, r7
 800b28a:	f7f5 f925 	bl	80004d8 <__aeabi_dmul>
 800b28e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b290:	4604      	mov	r4, r0
 800b292:	460d      	mov	r5, r1
 800b294:	b933      	cbnz	r3, 800b2a4 <_strtod_l+0xa8c>
 800b296:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b29a:	9010      	str	r0, [sp, #64]	; 0x40
 800b29c:	9311      	str	r3, [sp, #68]	; 0x44
 800b29e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b2a2:	e77e      	b.n	800b1a2 <_strtod_l+0x98a>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b2ac:	e7f7      	b.n	800b29e <_strtod_l+0xa86>
 800b2ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b2b2:	9b05      	ldr	r3, [sp, #20]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1a8      	bne.n	800b20a <_strtod_l+0x9f2>
 800b2b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b2bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2be:	0d1b      	lsrs	r3, r3, #20
 800b2c0:	051b      	lsls	r3, r3, #20
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d1a1      	bne.n	800b20a <_strtod_l+0x9f2>
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7f5 fecb 	bl	8001064 <__aeabi_d2lz>
 800b2ce:	f7f5 f8d5 	bl	800047c <__aeabi_l2d>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	4629      	mov	r1, r5
 800b2da:	f7f4 ff45 	bl	8000168 <__aeabi_dsub>
 800b2de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2e4:	ea43 0308 	orr.w	r3, r3, r8
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	460d      	mov	r5, r1
 800b2ee:	d066      	beq.n	800b3be <_strtod_l+0xba6>
 800b2f0:	a309      	add	r3, pc, #36	; (adr r3, 800b318 <_strtod_l+0xb00>)
 800b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f6:	f7f5 fb61 	bl	80009bc <__aeabi_dcmplt>
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	f47f acda 	bne.w	800acb4 <_strtod_l+0x49c>
 800b300:	a307      	add	r3, pc, #28	; (adr r3, 800b320 <_strtod_l+0xb08>)
 800b302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b306:	4620      	mov	r0, r4
 800b308:	4629      	mov	r1, r5
 800b30a:	f7f5 fb75 	bl	80009f8 <__aeabi_dcmpgt>
 800b30e:	2800      	cmp	r0, #0
 800b310:	f43f af7b 	beq.w	800b20a <_strtod_l+0x9f2>
 800b314:	e4ce      	b.n	800acb4 <_strtod_l+0x49c>
 800b316:	bf00      	nop
 800b318:	94a03595 	.word	0x94a03595
 800b31c:	3fdfffff 	.word	0x3fdfffff
 800b320:	35afe535 	.word	0x35afe535
 800b324:	3fe00000 	.word	0x3fe00000
 800b328:	000fffff 	.word	0x000fffff
 800b32c:	7ff00000 	.word	0x7ff00000
 800b330:	7fefffff 	.word	0x7fefffff
 800b334:	3ff00000 	.word	0x3ff00000
 800b338:	7fe00000 	.word	0x7fe00000
 800b33c:	7c9fffff 	.word	0x7c9fffff
 800b340:	3fe00000 	.word	0x3fe00000
 800b344:	bff00000 	.word	0xbff00000
 800b348:	9b05      	ldr	r3, [sp, #20]
 800b34a:	b313      	cbz	r3, 800b392 <_strtod_l+0xb7a>
 800b34c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b34e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b352:	d81e      	bhi.n	800b392 <_strtod_l+0xb7a>
 800b354:	a326      	add	r3, pc, #152	; (adr r3, 800b3f0 <_strtod_l+0xbd8>)
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	4620      	mov	r0, r4
 800b35c:	4629      	mov	r1, r5
 800b35e:	f7f5 fb37 	bl	80009d0 <__aeabi_dcmple>
 800b362:	b190      	cbz	r0, 800b38a <_strtod_l+0xb72>
 800b364:	4629      	mov	r1, r5
 800b366:	4620      	mov	r0, r4
 800b368:	f7f5 fb8e 	bl	8000a88 <__aeabi_d2uiz>
 800b36c:	2801      	cmp	r0, #1
 800b36e:	bf38      	it	cc
 800b370:	2001      	movcc	r0, #1
 800b372:	f7f5 f837 	bl	80003e4 <__aeabi_ui2d>
 800b376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b378:	4604      	mov	r4, r0
 800b37a:	460d      	mov	r5, r1
 800b37c:	b9d3      	cbnz	r3, 800b3b4 <_strtod_l+0xb9c>
 800b37e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b382:	9012      	str	r0, [sp, #72]	; 0x48
 800b384:	9313      	str	r3, [sp, #76]	; 0x4c
 800b386:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b38a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b38c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b390:	1a9f      	subs	r7, r3, r2
 800b392:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b396:	f001 ffe5 	bl	800d364 <__ulp>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	4630      	mov	r0, r6
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	f7f5 f899 	bl	80004d8 <__aeabi_dmul>
 800b3a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b3aa:	f7f4 fedf 	bl	800016c <__adddf3>
 800b3ae:	4680      	mov	r8, r0
 800b3b0:	4689      	mov	r9, r1
 800b3b2:	e77e      	b.n	800b2b2 <_strtod_l+0xa9a>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b3bc:	e7e3      	b.n	800b386 <_strtod_l+0xb6e>
 800b3be:	a30e      	add	r3, pc, #56	; (adr r3, 800b3f8 <_strtod_l+0xbe0>)
 800b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c4:	f7f5 fafa 	bl	80009bc <__aeabi_dcmplt>
 800b3c8:	e7a1      	b.n	800b30e <_strtod_l+0xaf6>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	930c      	str	r3, [sp, #48]	; 0x30
 800b3ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b3d2:	6013      	str	r3, [r2, #0]
 800b3d4:	f7ff ba65 	b.w	800a8a2 <_strtod_l+0x8a>
 800b3d8:	2b65      	cmp	r3, #101	; 0x65
 800b3da:	f43f ab5c 	beq.w	800aa96 <_strtod_l+0x27e>
 800b3de:	2b45      	cmp	r3, #69	; 0x45
 800b3e0:	f43f ab59 	beq.w	800aa96 <_strtod_l+0x27e>
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f7ff bb8d 	b.w	800ab04 <_strtod_l+0x2ec>
 800b3ea:	bf00      	nop
 800b3ec:	f3af 8000 	nop.w
 800b3f0:	ffc00000 	.word	0xffc00000
 800b3f4:	41dfffff 	.word	0x41dfffff
 800b3f8:	94a03595 	.word	0x94a03595
 800b3fc:	3fcfffff 	.word	0x3fcfffff

0800b400 <_strtod_r>:
 800b400:	4b01      	ldr	r3, [pc, #4]	; (800b408 <_strtod_r+0x8>)
 800b402:	f7ff ba09 	b.w	800a818 <_strtod_l>
 800b406:	bf00      	nop
 800b408:	20000074 	.word	0x20000074

0800b40c <strtod>:
 800b40c:	460a      	mov	r2, r1
 800b40e:	4601      	mov	r1, r0
 800b410:	4802      	ldr	r0, [pc, #8]	; (800b41c <strtod+0x10>)
 800b412:	4b03      	ldr	r3, [pc, #12]	; (800b420 <strtod+0x14>)
 800b414:	6800      	ldr	r0, [r0, #0]
 800b416:	f7ff b9ff 	b.w	800a818 <_strtod_l>
 800b41a:	bf00      	nop
 800b41c:	2000000c 	.word	0x2000000c
 800b420:	20000074 	.word	0x20000074

0800b424 <strtok>:
 800b424:	4b16      	ldr	r3, [pc, #88]	; (800b480 <strtok+0x5c>)
 800b426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42a:	681f      	ldr	r7, [r3, #0]
 800b42c:	4605      	mov	r5, r0
 800b42e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800b430:	460e      	mov	r6, r1
 800b432:	b9ec      	cbnz	r4, 800b470 <strtok+0x4c>
 800b434:	2050      	movs	r0, #80	; 0x50
 800b436:	f001 fbf1 	bl	800cc1c <malloc>
 800b43a:	4602      	mov	r2, r0
 800b43c:	65b8      	str	r0, [r7, #88]	; 0x58
 800b43e:	b920      	cbnz	r0, 800b44a <strtok+0x26>
 800b440:	2157      	movs	r1, #87	; 0x57
 800b442:	4b10      	ldr	r3, [pc, #64]	; (800b484 <strtok+0x60>)
 800b444:	4810      	ldr	r0, [pc, #64]	; (800b488 <strtok+0x64>)
 800b446:	f000 f8ed 	bl	800b624 <__assert_func>
 800b44a:	e9c0 4400 	strd	r4, r4, [r0]
 800b44e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b452:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b456:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b45a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b45e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b462:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b466:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b46a:	6184      	str	r4, [r0, #24]
 800b46c:	7704      	strb	r4, [r0, #28]
 800b46e:	6244      	str	r4, [r0, #36]	; 0x24
 800b470:	4631      	mov	r1, r6
 800b472:	4628      	mov	r0, r5
 800b474:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b476:	2301      	movs	r3, #1
 800b478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b47c:	f000 b806 	b.w	800b48c <__strtok_r>
 800b480:	2000000c 	.word	0x2000000c
 800b484:	0800e370 	.word	0x0800e370
 800b488:	0800e387 	.word	0x0800e387

0800b48c <__strtok_r>:
 800b48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b48e:	b908      	cbnz	r0, 800b494 <__strtok_r+0x8>
 800b490:	6810      	ldr	r0, [r2, #0]
 800b492:	b188      	cbz	r0, 800b4b8 <__strtok_r+0x2c>
 800b494:	4604      	mov	r4, r0
 800b496:	460f      	mov	r7, r1
 800b498:	4620      	mov	r0, r4
 800b49a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b49e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b4a2:	b91e      	cbnz	r6, 800b4ac <__strtok_r+0x20>
 800b4a4:	b965      	cbnz	r5, 800b4c0 <__strtok_r+0x34>
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	6015      	str	r5, [r2, #0]
 800b4aa:	e005      	b.n	800b4b8 <__strtok_r+0x2c>
 800b4ac:	42b5      	cmp	r5, r6
 800b4ae:	d1f6      	bne.n	800b49e <__strtok_r+0x12>
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1f0      	bne.n	800b496 <__strtok_r+0xa>
 800b4b4:	6014      	str	r4, [r2, #0]
 800b4b6:	7003      	strb	r3, [r0, #0]
 800b4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4ba:	461c      	mov	r4, r3
 800b4bc:	e00c      	b.n	800b4d8 <__strtok_r+0x4c>
 800b4be:	b915      	cbnz	r5, 800b4c6 <__strtok_r+0x3a>
 800b4c0:	460e      	mov	r6, r1
 800b4c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b4c6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b4ca:	42ab      	cmp	r3, r5
 800b4cc:	d1f7      	bne.n	800b4be <__strtok_r+0x32>
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d0f3      	beq.n	800b4ba <__strtok_r+0x2e>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b4d8:	6014      	str	r4, [r2, #0]
 800b4da:	e7ed      	b.n	800b4b8 <__strtok_r+0x2c>

0800b4dc <_strtol_l.isra.0>:
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e2:	4686      	mov	lr, r0
 800b4e4:	d001      	beq.n	800b4ea <_strtol_l.isra.0+0xe>
 800b4e6:	2b24      	cmp	r3, #36	; 0x24
 800b4e8:	d906      	bls.n	800b4f8 <_strtol_l.isra.0+0x1c>
 800b4ea:	f7fe f833 	bl	8009554 <__errno>
 800b4ee:	2316      	movs	r3, #22
 800b4f0:	6003      	str	r3, [r0, #0]
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f8:	468c      	mov	ip, r1
 800b4fa:	4e3a      	ldr	r6, [pc, #232]	; (800b5e4 <_strtol_l.isra.0+0x108>)
 800b4fc:	4660      	mov	r0, ip
 800b4fe:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b502:	5da5      	ldrb	r5, [r4, r6]
 800b504:	f015 0508 	ands.w	r5, r5, #8
 800b508:	d1f8      	bne.n	800b4fc <_strtol_l.isra.0+0x20>
 800b50a:	2c2d      	cmp	r4, #45	; 0x2d
 800b50c:	d133      	bne.n	800b576 <_strtol_l.isra.0+0x9a>
 800b50e:	f04f 0801 	mov.w	r8, #1
 800b512:	f89c 4000 	ldrb.w	r4, [ip]
 800b516:	f100 0c02 	add.w	ip, r0, #2
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d05d      	beq.n	800b5da <_strtol_l.isra.0+0xfe>
 800b51e:	2b10      	cmp	r3, #16
 800b520:	d10c      	bne.n	800b53c <_strtol_l.isra.0+0x60>
 800b522:	2c30      	cmp	r4, #48	; 0x30
 800b524:	d10a      	bne.n	800b53c <_strtol_l.isra.0+0x60>
 800b526:	f89c 0000 	ldrb.w	r0, [ip]
 800b52a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b52e:	2858      	cmp	r0, #88	; 0x58
 800b530:	d14e      	bne.n	800b5d0 <_strtol_l.isra.0+0xf4>
 800b532:	2310      	movs	r3, #16
 800b534:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b538:	f10c 0c02 	add.w	ip, ip, #2
 800b53c:	2500      	movs	r5, #0
 800b53e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800b542:	3f01      	subs	r7, #1
 800b544:	fbb7 f9f3 	udiv	r9, r7, r3
 800b548:	4628      	mov	r0, r5
 800b54a:	fb03 7a19 	mls	sl, r3, r9, r7
 800b54e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b552:	2e09      	cmp	r6, #9
 800b554:	d818      	bhi.n	800b588 <_strtol_l.isra.0+0xac>
 800b556:	4634      	mov	r4, r6
 800b558:	42a3      	cmp	r3, r4
 800b55a:	dd24      	ble.n	800b5a6 <_strtol_l.isra.0+0xca>
 800b55c:	2d00      	cmp	r5, #0
 800b55e:	db1f      	blt.n	800b5a0 <_strtol_l.isra.0+0xc4>
 800b560:	4581      	cmp	r9, r0
 800b562:	d31d      	bcc.n	800b5a0 <_strtol_l.isra.0+0xc4>
 800b564:	d101      	bne.n	800b56a <_strtol_l.isra.0+0x8e>
 800b566:	45a2      	cmp	sl, r4
 800b568:	db1a      	blt.n	800b5a0 <_strtol_l.isra.0+0xc4>
 800b56a:	2501      	movs	r5, #1
 800b56c:	fb00 4003 	mla	r0, r0, r3, r4
 800b570:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b574:	e7eb      	b.n	800b54e <_strtol_l.isra.0+0x72>
 800b576:	2c2b      	cmp	r4, #43	; 0x2b
 800b578:	bf08      	it	eq
 800b57a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b57e:	46a8      	mov	r8, r5
 800b580:	bf08      	it	eq
 800b582:	f100 0c02 	addeq.w	ip, r0, #2
 800b586:	e7c8      	b.n	800b51a <_strtol_l.isra.0+0x3e>
 800b588:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b58c:	2e19      	cmp	r6, #25
 800b58e:	d801      	bhi.n	800b594 <_strtol_l.isra.0+0xb8>
 800b590:	3c37      	subs	r4, #55	; 0x37
 800b592:	e7e1      	b.n	800b558 <_strtol_l.isra.0+0x7c>
 800b594:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b598:	2e19      	cmp	r6, #25
 800b59a:	d804      	bhi.n	800b5a6 <_strtol_l.isra.0+0xca>
 800b59c:	3c57      	subs	r4, #87	; 0x57
 800b59e:	e7db      	b.n	800b558 <_strtol_l.isra.0+0x7c>
 800b5a0:	f04f 35ff 	mov.w	r5, #4294967295
 800b5a4:	e7e4      	b.n	800b570 <_strtol_l.isra.0+0x94>
 800b5a6:	2d00      	cmp	r5, #0
 800b5a8:	da08      	bge.n	800b5bc <_strtol_l.isra.0+0xe0>
 800b5aa:	2322      	movs	r3, #34	; 0x22
 800b5ac:	4638      	mov	r0, r7
 800b5ae:	f8ce 3000 	str.w	r3, [lr]
 800b5b2:	2a00      	cmp	r2, #0
 800b5b4:	d09e      	beq.n	800b4f4 <_strtol_l.isra.0+0x18>
 800b5b6:	f10c 31ff 	add.w	r1, ip, #4294967295
 800b5ba:	e007      	b.n	800b5cc <_strtol_l.isra.0+0xf0>
 800b5bc:	f1b8 0f00 	cmp.w	r8, #0
 800b5c0:	d000      	beq.n	800b5c4 <_strtol_l.isra.0+0xe8>
 800b5c2:	4240      	negs	r0, r0
 800b5c4:	2a00      	cmp	r2, #0
 800b5c6:	d095      	beq.n	800b4f4 <_strtol_l.isra.0+0x18>
 800b5c8:	2d00      	cmp	r5, #0
 800b5ca:	d1f4      	bne.n	800b5b6 <_strtol_l.isra.0+0xda>
 800b5cc:	6011      	str	r1, [r2, #0]
 800b5ce:	e791      	b.n	800b4f4 <_strtol_l.isra.0+0x18>
 800b5d0:	2430      	movs	r4, #48	; 0x30
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1b2      	bne.n	800b53c <_strtol_l.isra.0+0x60>
 800b5d6:	2308      	movs	r3, #8
 800b5d8:	e7b0      	b.n	800b53c <_strtol_l.isra.0+0x60>
 800b5da:	2c30      	cmp	r4, #48	; 0x30
 800b5dc:	d0a3      	beq.n	800b526 <_strtol_l.isra.0+0x4a>
 800b5de:	230a      	movs	r3, #10
 800b5e0:	e7ac      	b.n	800b53c <_strtol_l.isra.0+0x60>
 800b5e2:	bf00      	nop
 800b5e4:	0800e425 	.word	0x0800e425

0800b5e8 <_strtol_r>:
 800b5e8:	f7ff bf78 	b.w	800b4dc <_strtol_l.isra.0>

0800b5ec <strtol>:
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	460a      	mov	r2, r1
 800b5f0:	4601      	mov	r1, r0
 800b5f2:	4802      	ldr	r0, [pc, #8]	; (800b5fc <strtol+0x10>)
 800b5f4:	6800      	ldr	r0, [r0, #0]
 800b5f6:	f7ff bf71 	b.w	800b4dc <_strtol_l.isra.0>
 800b5fa:	bf00      	nop
 800b5fc:	2000000c 	.word	0x2000000c

0800b600 <_write_r>:
 800b600:	b538      	push	{r3, r4, r5, lr}
 800b602:	4604      	mov	r4, r0
 800b604:	4608      	mov	r0, r1
 800b606:	4611      	mov	r1, r2
 800b608:	2200      	movs	r2, #0
 800b60a:	4d05      	ldr	r5, [pc, #20]	; (800b620 <_write_r+0x20>)
 800b60c:	602a      	str	r2, [r5, #0]
 800b60e:	461a      	mov	r2, r3
 800b610:	f7f6 fcf6 	bl	8002000 <_write>
 800b614:	1c43      	adds	r3, r0, #1
 800b616:	d102      	bne.n	800b61e <_write_r+0x1e>
 800b618:	682b      	ldr	r3, [r5, #0]
 800b61a:	b103      	cbz	r3, 800b61e <_write_r+0x1e>
 800b61c:	6023      	str	r3, [r4, #0]
 800b61e:	bd38      	pop	{r3, r4, r5, pc}
 800b620:	20003bac 	.word	0x20003bac

0800b624 <__assert_func>:
 800b624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b626:	4614      	mov	r4, r2
 800b628:	461a      	mov	r2, r3
 800b62a:	4b09      	ldr	r3, [pc, #36]	; (800b650 <__assert_func+0x2c>)
 800b62c:	4605      	mov	r5, r0
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68d8      	ldr	r0, [r3, #12]
 800b632:	b14c      	cbz	r4, 800b648 <__assert_func+0x24>
 800b634:	4b07      	ldr	r3, [pc, #28]	; (800b654 <__assert_func+0x30>)
 800b636:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b63a:	9100      	str	r1, [sp, #0]
 800b63c:	462b      	mov	r3, r5
 800b63e:	4906      	ldr	r1, [pc, #24]	; (800b658 <__assert_func+0x34>)
 800b640:	f000 ff5e 	bl	800c500 <fiprintf>
 800b644:	f002 fbdc 	bl	800de00 <abort>
 800b648:	4b04      	ldr	r3, [pc, #16]	; (800b65c <__assert_func+0x38>)
 800b64a:	461c      	mov	r4, r3
 800b64c:	e7f3      	b.n	800b636 <__assert_func+0x12>
 800b64e:	bf00      	nop
 800b650:	2000000c 	.word	0x2000000c
 800b654:	0800e3e8 	.word	0x0800e3e8
 800b658:	0800e3f5 	.word	0x0800e3f5
 800b65c:	0800e423 	.word	0x0800e423

0800b660 <_close_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	2300      	movs	r3, #0
 800b664:	4d05      	ldr	r5, [pc, #20]	; (800b67c <_close_r+0x1c>)
 800b666:	4604      	mov	r4, r0
 800b668:	4608      	mov	r0, r1
 800b66a:	602b      	str	r3, [r5, #0]
 800b66c:	f7f6 fce4 	bl	8002038 <_close>
 800b670:	1c43      	adds	r3, r0, #1
 800b672:	d102      	bne.n	800b67a <_close_r+0x1a>
 800b674:	682b      	ldr	r3, [r5, #0]
 800b676:	b103      	cbz	r3, 800b67a <_close_r+0x1a>
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	bd38      	pop	{r3, r4, r5, pc}
 800b67c:	20003bac 	.word	0x20003bac

0800b680 <quorem>:
 800b680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	6903      	ldr	r3, [r0, #16]
 800b686:	690c      	ldr	r4, [r1, #16]
 800b688:	4607      	mov	r7, r0
 800b68a:	42a3      	cmp	r3, r4
 800b68c:	f2c0 8083 	blt.w	800b796 <quorem+0x116>
 800b690:	3c01      	subs	r4, #1
 800b692:	f100 0514 	add.w	r5, r0, #20
 800b696:	f101 0814 	add.w	r8, r1, #20
 800b69a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b69e:	9301      	str	r3, [sp, #4]
 800b6a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800b6b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b6b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b6b8:	d332      	bcc.n	800b720 <quorem+0xa0>
 800b6ba:	f04f 0e00 	mov.w	lr, #0
 800b6be:	4640      	mov	r0, r8
 800b6c0:	46ac      	mov	ip, r5
 800b6c2:	46f2      	mov	sl, lr
 800b6c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b6c8:	b293      	uxth	r3, r2
 800b6ca:	fb06 e303 	mla	r3, r6, r3, lr
 800b6ce:	0c12      	lsrs	r2, r2, #16
 800b6d0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b6d4:	fb06 e202 	mla	r2, r6, r2, lr
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	ebaa 0303 	sub.w	r3, sl, r3
 800b6de:	f8dc a000 	ldr.w	sl, [ip]
 800b6e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b6e6:	fa1f fa8a 	uxth.w	sl, sl
 800b6ea:	4453      	add	r3, sl
 800b6ec:	fa1f fa82 	uxth.w	sl, r2
 800b6f0:	f8dc 2000 	ldr.w	r2, [ip]
 800b6f4:	4581      	cmp	r9, r0
 800b6f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b6fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b704:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b708:	f84c 3b04 	str.w	r3, [ip], #4
 800b70c:	d2da      	bcs.n	800b6c4 <quorem+0x44>
 800b70e:	f855 300b 	ldr.w	r3, [r5, fp]
 800b712:	b92b      	cbnz	r3, 800b720 <quorem+0xa0>
 800b714:	9b01      	ldr	r3, [sp, #4]
 800b716:	3b04      	subs	r3, #4
 800b718:	429d      	cmp	r5, r3
 800b71a:	461a      	mov	r2, r3
 800b71c:	d32f      	bcc.n	800b77e <quorem+0xfe>
 800b71e:	613c      	str	r4, [r7, #16]
 800b720:	4638      	mov	r0, r7
 800b722:	f001 fd73 	bl	800d20c <__mcmp>
 800b726:	2800      	cmp	r0, #0
 800b728:	db25      	blt.n	800b776 <quorem+0xf6>
 800b72a:	4628      	mov	r0, r5
 800b72c:	f04f 0c00 	mov.w	ip, #0
 800b730:	3601      	adds	r6, #1
 800b732:	f858 1b04 	ldr.w	r1, [r8], #4
 800b736:	f8d0 e000 	ldr.w	lr, [r0]
 800b73a:	b28b      	uxth	r3, r1
 800b73c:	ebac 0303 	sub.w	r3, ip, r3
 800b740:	fa1f f28e 	uxth.w	r2, lr
 800b744:	4413      	add	r3, r2
 800b746:	0c0a      	lsrs	r2, r1, #16
 800b748:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b74c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b750:	b29b      	uxth	r3, r3
 800b752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b756:	45c1      	cmp	r9, r8
 800b758:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b75c:	f840 3b04 	str.w	r3, [r0], #4
 800b760:	d2e7      	bcs.n	800b732 <quorem+0xb2>
 800b762:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b766:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b76a:	b922      	cbnz	r2, 800b776 <quorem+0xf6>
 800b76c:	3b04      	subs	r3, #4
 800b76e:	429d      	cmp	r5, r3
 800b770:	461a      	mov	r2, r3
 800b772:	d30a      	bcc.n	800b78a <quorem+0x10a>
 800b774:	613c      	str	r4, [r7, #16]
 800b776:	4630      	mov	r0, r6
 800b778:	b003      	add	sp, #12
 800b77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b77e:	6812      	ldr	r2, [r2, #0]
 800b780:	3b04      	subs	r3, #4
 800b782:	2a00      	cmp	r2, #0
 800b784:	d1cb      	bne.n	800b71e <quorem+0x9e>
 800b786:	3c01      	subs	r4, #1
 800b788:	e7c6      	b.n	800b718 <quorem+0x98>
 800b78a:	6812      	ldr	r2, [r2, #0]
 800b78c:	3b04      	subs	r3, #4
 800b78e:	2a00      	cmp	r2, #0
 800b790:	d1f0      	bne.n	800b774 <quorem+0xf4>
 800b792:	3c01      	subs	r4, #1
 800b794:	e7eb      	b.n	800b76e <quorem+0xee>
 800b796:	2000      	movs	r0, #0
 800b798:	e7ee      	b.n	800b778 <quorem+0xf8>
 800b79a:	0000      	movs	r0, r0
 800b79c:	0000      	movs	r0, r0
	...

0800b7a0 <_dtoa_r>:
 800b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	4616      	mov	r6, r2
 800b7a6:	461f      	mov	r7, r3
 800b7a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b7aa:	b099      	sub	sp, #100	; 0x64
 800b7ac:	4605      	mov	r5, r0
 800b7ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b7b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b7b6:	b974      	cbnz	r4, 800b7d6 <_dtoa_r+0x36>
 800b7b8:	2010      	movs	r0, #16
 800b7ba:	f001 fa2f 	bl	800cc1c <malloc>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	6268      	str	r0, [r5, #36]	; 0x24
 800b7c2:	b920      	cbnz	r0, 800b7ce <_dtoa_r+0x2e>
 800b7c4:	21ea      	movs	r1, #234	; 0xea
 800b7c6:	4bae      	ldr	r3, [pc, #696]	; (800ba80 <_dtoa_r+0x2e0>)
 800b7c8:	48ae      	ldr	r0, [pc, #696]	; (800ba84 <_dtoa_r+0x2e4>)
 800b7ca:	f7ff ff2b 	bl	800b624 <__assert_func>
 800b7ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7d2:	6004      	str	r4, [r0, #0]
 800b7d4:	60c4      	str	r4, [r0, #12]
 800b7d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b7d8:	6819      	ldr	r1, [r3, #0]
 800b7da:	b151      	cbz	r1, 800b7f2 <_dtoa_r+0x52>
 800b7dc:	685a      	ldr	r2, [r3, #4]
 800b7de:	2301      	movs	r3, #1
 800b7e0:	4093      	lsls	r3, r2
 800b7e2:	604a      	str	r2, [r1, #4]
 800b7e4:	608b      	str	r3, [r1, #8]
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	f001 fa8c 	bl	800cd04 <_Bfree>
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b7f0:	601a      	str	r2, [r3, #0]
 800b7f2:	1e3b      	subs	r3, r7, #0
 800b7f4:	bfaf      	iteee	ge
 800b7f6:	2300      	movge	r3, #0
 800b7f8:	2201      	movlt	r2, #1
 800b7fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b7fe:	9305      	strlt	r3, [sp, #20]
 800b800:	bfa8      	it	ge
 800b802:	f8c8 3000 	strge.w	r3, [r8]
 800b806:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b80a:	4b9f      	ldr	r3, [pc, #636]	; (800ba88 <_dtoa_r+0x2e8>)
 800b80c:	bfb8      	it	lt
 800b80e:	f8c8 2000 	strlt.w	r2, [r8]
 800b812:	ea33 0309 	bics.w	r3, r3, r9
 800b816:	d119      	bne.n	800b84c <_dtoa_r+0xac>
 800b818:	f242 730f 	movw	r3, #9999	; 0x270f
 800b81c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b81e:	6013      	str	r3, [r2, #0]
 800b820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b824:	4333      	orrs	r3, r6
 800b826:	f000 8580 	beq.w	800c32a <_dtoa_r+0xb8a>
 800b82a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b82c:	b953      	cbnz	r3, 800b844 <_dtoa_r+0xa4>
 800b82e:	4b97      	ldr	r3, [pc, #604]	; (800ba8c <_dtoa_r+0x2ec>)
 800b830:	e022      	b.n	800b878 <_dtoa_r+0xd8>
 800b832:	4b97      	ldr	r3, [pc, #604]	; (800ba90 <_dtoa_r+0x2f0>)
 800b834:	9308      	str	r3, [sp, #32]
 800b836:	3308      	adds	r3, #8
 800b838:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b83a:	6013      	str	r3, [r2, #0]
 800b83c:	9808      	ldr	r0, [sp, #32]
 800b83e:	b019      	add	sp, #100	; 0x64
 800b840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b844:	4b91      	ldr	r3, [pc, #580]	; (800ba8c <_dtoa_r+0x2ec>)
 800b846:	9308      	str	r3, [sp, #32]
 800b848:	3303      	adds	r3, #3
 800b84a:	e7f5      	b.n	800b838 <_dtoa_r+0x98>
 800b84c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b850:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b858:	2200      	movs	r2, #0
 800b85a:	2300      	movs	r3, #0
 800b85c:	f7f5 f8a4 	bl	80009a8 <__aeabi_dcmpeq>
 800b860:	4680      	mov	r8, r0
 800b862:	b158      	cbz	r0, 800b87c <_dtoa_r+0xdc>
 800b864:	2301      	movs	r3, #1
 800b866:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f000 8559 	beq.w	800c324 <_dtoa_r+0xb84>
 800b872:	4888      	ldr	r0, [pc, #544]	; (800ba94 <_dtoa_r+0x2f4>)
 800b874:	6018      	str	r0, [r3, #0]
 800b876:	1e43      	subs	r3, r0, #1
 800b878:	9308      	str	r3, [sp, #32]
 800b87a:	e7df      	b.n	800b83c <_dtoa_r+0x9c>
 800b87c:	ab16      	add	r3, sp, #88	; 0x58
 800b87e:	9301      	str	r3, [sp, #4]
 800b880:	ab17      	add	r3, sp, #92	; 0x5c
 800b882:	9300      	str	r3, [sp, #0]
 800b884:	4628      	mov	r0, r5
 800b886:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b88a:	f001 fde5 	bl	800d458 <__d2b>
 800b88e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b892:	4682      	mov	sl, r0
 800b894:	2c00      	cmp	r4, #0
 800b896:	d07e      	beq.n	800b996 <_dtoa_r+0x1f6>
 800b898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b89c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b89e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b8a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b8aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b8ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	4b78      	ldr	r3, [pc, #480]	; (800ba98 <_dtoa_r+0x2f8>)
 800b8b6:	f7f4 fc57 	bl	8000168 <__aeabi_dsub>
 800b8ba:	a36b      	add	r3, pc, #428	; (adr r3, 800ba68 <_dtoa_r+0x2c8>)
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	f7f4 fe0a 	bl	80004d8 <__aeabi_dmul>
 800b8c4:	a36a      	add	r3, pc, #424	; (adr r3, 800ba70 <_dtoa_r+0x2d0>)
 800b8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ca:	f7f4 fc4f 	bl	800016c <__adddf3>
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	460f      	mov	r7, r1
 800b8d4:	f7f4 fd96 	bl	8000404 <__aeabi_i2d>
 800b8d8:	a367      	add	r3, pc, #412	; (adr r3, 800ba78 <_dtoa_r+0x2d8>)
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	f7f4 fdfb 	bl	80004d8 <__aeabi_dmul>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	4639      	mov	r1, r7
 800b8ea:	f7f4 fc3f 	bl	800016c <__adddf3>
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	460f      	mov	r7, r1
 800b8f2:	f7f5 f8a1 	bl	8000a38 <__aeabi_d2iz>
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	4681      	mov	r9, r0
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	4639      	mov	r1, r7
 800b900:	f7f5 f85c 	bl	80009bc <__aeabi_dcmplt>
 800b904:	b148      	cbz	r0, 800b91a <_dtoa_r+0x17a>
 800b906:	4648      	mov	r0, r9
 800b908:	f7f4 fd7c 	bl	8000404 <__aeabi_i2d>
 800b90c:	4632      	mov	r2, r6
 800b90e:	463b      	mov	r3, r7
 800b910:	f7f5 f84a 	bl	80009a8 <__aeabi_dcmpeq>
 800b914:	b908      	cbnz	r0, 800b91a <_dtoa_r+0x17a>
 800b916:	f109 39ff 	add.w	r9, r9, #4294967295
 800b91a:	f1b9 0f16 	cmp.w	r9, #22
 800b91e:	d857      	bhi.n	800b9d0 <_dtoa_r+0x230>
 800b920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b924:	4b5d      	ldr	r3, [pc, #372]	; (800ba9c <_dtoa_r+0x2fc>)
 800b926:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92e:	f7f5 f845 	bl	80009bc <__aeabi_dcmplt>
 800b932:	2800      	cmp	r0, #0
 800b934:	d04e      	beq.n	800b9d4 <_dtoa_r+0x234>
 800b936:	2300      	movs	r3, #0
 800b938:	f109 39ff 	add.w	r9, r9, #4294967295
 800b93c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b93e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b940:	1b1c      	subs	r4, r3, r4
 800b942:	1e63      	subs	r3, r4, #1
 800b944:	9309      	str	r3, [sp, #36]	; 0x24
 800b946:	bf49      	itett	mi
 800b948:	f1c4 0301 	rsbmi	r3, r4, #1
 800b94c:	2300      	movpl	r3, #0
 800b94e:	9306      	strmi	r3, [sp, #24]
 800b950:	2300      	movmi	r3, #0
 800b952:	bf54      	ite	pl
 800b954:	9306      	strpl	r3, [sp, #24]
 800b956:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b958:	f1b9 0f00 	cmp.w	r9, #0
 800b95c:	db3c      	blt.n	800b9d8 <_dtoa_r+0x238>
 800b95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b960:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b964:	444b      	add	r3, r9
 800b966:	9309      	str	r3, [sp, #36]	; 0x24
 800b968:	2300      	movs	r3, #0
 800b96a:	930a      	str	r3, [sp, #40]	; 0x28
 800b96c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b96e:	2b09      	cmp	r3, #9
 800b970:	d86c      	bhi.n	800ba4c <_dtoa_r+0x2ac>
 800b972:	2b05      	cmp	r3, #5
 800b974:	bfc4      	itt	gt
 800b976:	3b04      	subgt	r3, #4
 800b978:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b97a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b97c:	bfc8      	it	gt
 800b97e:	2400      	movgt	r4, #0
 800b980:	f1a3 0302 	sub.w	r3, r3, #2
 800b984:	bfd8      	it	le
 800b986:	2401      	movle	r4, #1
 800b988:	2b03      	cmp	r3, #3
 800b98a:	f200 808b 	bhi.w	800baa4 <_dtoa_r+0x304>
 800b98e:	e8df f003 	tbb	[pc, r3]
 800b992:	4f2d      	.short	0x4f2d
 800b994:	5b4d      	.short	0x5b4d
 800b996:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b99a:	441c      	add	r4, r3
 800b99c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b9a0:	2b20      	cmp	r3, #32
 800b9a2:	bfc3      	ittte	gt
 800b9a4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b9a8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b9ac:	fa09 f303 	lslgt.w	r3, r9, r3
 800b9b0:	f1c3 0320 	rsble	r3, r3, #32
 800b9b4:	bfc6      	itte	gt
 800b9b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b9ba:	4318      	orrgt	r0, r3
 800b9bc:	fa06 f003 	lslle.w	r0, r6, r3
 800b9c0:	f7f4 fd10 	bl	80003e4 <__aeabi_ui2d>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b9ca:	3c01      	subs	r4, #1
 800b9cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800b9ce:	e770      	b.n	800b8b2 <_dtoa_r+0x112>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e7b3      	b.n	800b93c <_dtoa_r+0x19c>
 800b9d4:	900f      	str	r0, [sp, #60]	; 0x3c
 800b9d6:	e7b2      	b.n	800b93e <_dtoa_r+0x19e>
 800b9d8:	9b06      	ldr	r3, [sp, #24]
 800b9da:	eba3 0309 	sub.w	r3, r3, r9
 800b9de:	9306      	str	r3, [sp, #24]
 800b9e0:	f1c9 0300 	rsb	r3, r9, #0
 800b9e4:	930a      	str	r3, [sp, #40]	; 0x28
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	930e      	str	r3, [sp, #56]	; 0x38
 800b9ea:	e7bf      	b.n	800b96c <_dtoa_r+0x1cc>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	dc59      	bgt.n	800baaa <_dtoa_r+0x30a>
 800b9f6:	f04f 0b01 	mov.w	fp, #1
 800b9fa:	465b      	mov	r3, fp
 800b9fc:	f8cd b008 	str.w	fp, [sp, #8]
 800ba00:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800ba04:	2200      	movs	r2, #0
 800ba06:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ba08:	6042      	str	r2, [r0, #4]
 800ba0a:	2204      	movs	r2, #4
 800ba0c:	f102 0614 	add.w	r6, r2, #20
 800ba10:	429e      	cmp	r6, r3
 800ba12:	6841      	ldr	r1, [r0, #4]
 800ba14:	d94f      	bls.n	800bab6 <_dtoa_r+0x316>
 800ba16:	4628      	mov	r0, r5
 800ba18:	f001 f934 	bl	800cc84 <_Balloc>
 800ba1c:	9008      	str	r0, [sp, #32]
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d14d      	bne.n	800babe <_dtoa_r+0x31e>
 800ba22:	4602      	mov	r2, r0
 800ba24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba28:	4b1d      	ldr	r3, [pc, #116]	; (800baa0 <_dtoa_r+0x300>)
 800ba2a:	e6cd      	b.n	800b7c8 <_dtoa_r+0x28>
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e7de      	b.n	800b9ee <_dtoa_r+0x24e>
 800ba30:	2300      	movs	r3, #0
 800ba32:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba36:	eb09 0b03 	add.w	fp, r9, r3
 800ba3a:	f10b 0301 	add.w	r3, fp, #1
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	9302      	str	r3, [sp, #8]
 800ba42:	bfb8      	it	lt
 800ba44:	2301      	movlt	r3, #1
 800ba46:	e7dd      	b.n	800ba04 <_dtoa_r+0x264>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e7f2      	b.n	800ba32 <_dtoa_r+0x292>
 800ba4c:	2401      	movs	r4, #1
 800ba4e:	2300      	movs	r3, #0
 800ba50:	940b      	str	r4, [sp, #44]	; 0x2c
 800ba52:	9322      	str	r3, [sp, #136]	; 0x88
 800ba54:	f04f 3bff 	mov.w	fp, #4294967295
 800ba58:	2200      	movs	r2, #0
 800ba5a:	2312      	movs	r3, #18
 800ba5c:	f8cd b008 	str.w	fp, [sp, #8]
 800ba60:	9223      	str	r2, [sp, #140]	; 0x8c
 800ba62:	e7cf      	b.n	800ba04 <_dtoa_r+0x264>
 800ba64:	f3af 8000 	nop.w
 800ba68:	636f4361 	.word	0x636f4361
 800ba6c:	3fd287a7 	.word	0x3fd287a7
 800ba70:	8b60c8b3 	.word	0x8b60c8b3
 800ba74:	3fc68a28 	.word	0x3fc68a28
 800ba78:	509f79fb 	.word	0x509f79fb
 800ba7c:	3fd34413 	.word	0x3fd34413
 800ba80:	0800e370 	.word	0x0800e370
 800ba84:	0800e532 	.word	0x0800e532
 800ba88:	7ff00000 	.word	0x7ff00000
 800ba8c:	0800e52e 	.word	0x0800e52e
 800ba90:	0800e525 	.word	0x0800e525
 800ba94:	0800e2f1 	.word	0x0800e2f1
 800ba98:	3ff80000 	.word	0x3ff80000
 800ba9c:	0800e6a8 	.word	0x0800e6a8
 800baa0:	0800e591 	.word	0x0800e591
 800baa4:	2301      	movs	r3, #1
 800baa6:	930b      	str	r3, [sp, #44]	; 0x2c
 800baa8:	e7d4      	b.n	800ba54 <_dtoa_r+0x2b4>
 800baaa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800baae:	465b      	mov	r3, fp
 800bab0:	f8cd b008 	str.w	fp, [sp, #8]
 800bab4:	e7a6      	b.n	800ba04 <_dtoa_r+0x264>
 800bab6:	3101      	adds	r1, #1
 800bab8:	6041      	str	r1, [r0, #4]
 800baba:	0052      	lsls	r2, r2, #1
 800babc:	e7a6      	b.n	800ba0c <_dtoa_r+0x26c>
 800babe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bac0:	9a08      	ldr	r2, [sp, #32]
 800bac2:	601a      	str	r2, [r3, #0]
 800bac4:	9b02      	ldr	r3, [sp, #8]
 800bac6:	2b0e      	cmp	r3, #14
 800bac8:	f200 80a8 	bhi.w	800bc1c <_dtoa_r+0x47c>
 800bacc:	2c00      	cmp	r4, #0
 800bace:	f000 80a5 	beq.w	800bc1c <_dtoa_r+0x47c>
 800bad2:	f1b9 0f00 	cmp.w	r9, #0
 800bad6:	dd34      	ble.n	800bb42 <_dtoa_r+0x3a2>
 800bad8:	4a9a      	ldr	r2, [pc, #616]	; (800bd44 <_dtoa_r+0x5a4>)
 800bada:	f009 030f 	and.w	r3, r9, #15
 800bade:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bae2:	f419 7f80 	tst.w	r9, #256	; 0x100
 800bae6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800baea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800baee:	ea4f 1429 	mov.w	r4, r9, asr #4
 800baf2:	d016      	beq.n	800bb22 <_dtoa_r+0x382>
 800baf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800baf8:	4b93      	ldr	r3, [pc, #588]	; (800bd48 <_dtoa_r+0x5a8>)
 800bafa:	2703      	movs	r7, #3
 800bafc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb00:	f7f4 fe14 	bl	800072c <__aeabi_ddiv>
 800bb04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb08:	f004 040f 	and.w	r4, r4, #15
 800bb0c:	4e8e      	ldr	r6, [pc, #568]	; (800bd48 <_dtoa_r+0x5a8>)
 800bb0e:	b954      	cbnz	r4, 800bb26 <_dtoa_r+0x386>
 800bb10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb18:	f7f4 fe08 	bl	800072c <__aeabi_ddiv>
 800bb1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb20:	e029      	b.n	800bb76 <_dtoa_r+0x3d6>
 800bb22:	2702      	movs	r7, #2
 800bb24:	e7f2      	b.n	800bb0c <_dtoa_r+0x36c>
 800bb26:	07e1      	lsls	r1, r4, #31
 800bb28:	d508      	bpl.n	800bb3c <_dtoa_r+0x39c>
 800bb2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb32:	f7f4 fcd1 	bl	80004d8 <__aeabi_dmul>
 800bb36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bb3a:	3701      	adds	r7, #1
 800bb3c:	1064      	asrs	r4, r4, #1
 800bb3e:	3608      	adds	r6, #8
 800bb40:	e7e5      	b.n	800bb0e <_dtoa_r+0x36e>
 800bb42:	f000 80a5 	beq.w	800bc90 <_dtoa_r+0x4f0>
 800bb46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb4a:	f1c9 0400 	rsb	r4, r9, #0
 800bb4e:	4b7d      	ldr	r3, [pc, #500]	; (800bd44 <_dtoa_r+0x5a4>)
 800bb50:	f004 020f 	and.w	r2, r4, #15
 800bb54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5c:	f7f4 fcbc 	bl	80004d8 <__aeabi_dmul>
 800bb60:	2702      	movs	r7, #2
 800bb62:	2300      	movs	r3, #0
 800bb64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb68:	4e77      	ldr	r6, [pc, #476]	; (800bd48 <_dtoa_r+0x5a8>)
 800bb6a:	1124      	asrs	r4, r4, #4
 800bb6c:	2c00      	cmp	r4, #0
 800bb6e:	f040 8084 	bne.w	800bc7a <_dtoa_r+0x4da>
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1d2      	bne.n	800bb1c <_dtoa_r+0x37c>
 800bb76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 808b 	beq.w	800bc94 <_dtoa_r+0x4f4>
 800bb7e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bb82:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bb86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	4b6f      	ldr	r3, [pc, #444]	; (800bd4c <_dtoa_r+0x5ac>)
 800bb8e:	f7f4 ff15 	bl	80009bc <__aeabi_dcmplt>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d07e      	beq.n	800bc94 <_dtoa_r+0x4f4>
 800bb96:	9b02      	ldr	r3, [sp, #8]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d07b      	beq.n	800bc94 <_dtoa_r+0x4f4>
 800bb9c:	f1bb 0f00 	cmp.w	fp, #0
 800bba0:	dd38      	ble.n	800bc14 <_dtoa_r+0x474>
 800bba2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bba6:	2200      	movs	r2, #0
 800bba8:	4b69      	ldr	r3, [pc, #420]	; (800bd50 <_dtoa_r+0x5b0>)
 800bbaa:	f7f4 fc95 	bl	80004d8 <__aeabi_dmul>
 800bbae:	465c      	mov	r4, fp
 800bbb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbb4:	f109 38ff 	add.w	r8, r9, #4294967295
 800bbb8:	3701      	adds	r7, #1
 800bbba:	4638      	mov	r0, r7
 800bbbc:	f7f4 fc22 	bl	8000404 <__aeabi_i2d>
 800bbc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbc4:	f7f4 fc88 	bl	80004d8 <__aeabi_dmul>
 800bbc8:	2200      	movs	r2, #0
 800bbca:	4b62      	ldr	r3, [pc, #392]	; (800bd54 <_dtoa_r+0x5b4>)
 800bbcc:	f7f4 face 	bl	800016c <__adddf3>
 800bbd0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bbd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bbd8:	9611      	str	r6, [sp, #68]	; 0x44
 800bbda:	2c00      	cmp	r4, #0
 800bbdc:	d15d      	bne.n	800bc9a <_dtoa_r+0x4fa>
 800bbde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	4b5c      	ldr	r3, [pc, #368]	; (800bd58 <_dtoa_r+0x5b8>)
 800bbe6:	f7f4 fabf 	bl	8000168 <__aeabi_dsub>
 800bbea:	4602      	mov	r2, r0
 800bbec:	460b      	mov	r3, r1
 800bbee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bbf2:	4633      	mov	r3, r6
 800bbf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bbf6:	f7f4 feff 	bl	80009f8 <__aeabi_dcmpgt>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	f040 829e 	bne.w	800c13c <_dtoa_r+0x99c>
 800bc00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc06:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bc0a:	f7f4 fed7 	bl	80009bc <__aeabi_dcmplt>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	f040 8292 	bne.w	800c138 <_dtoa_r+0x998>
 800bc14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bc18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bc1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f2c0 8153 	blt.w	800beca <_dtoa_r+0x72a>
 800bc24:	f1b9 0f0e 	cmp.w	r9, #14
 800bc28:	f300 814f 	bgt.w	800beca <_dtoa_r+0x72a>
 800bc2c:	4b45      	ldr	r3, [pc, #276]	; (800bd44 <_dtoa_r+0x5a4>)
 800bc2e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800bc32:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bc36:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bc3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f280 80db 	bge.w	800bdf8 <_dtoa_r+0x658>
 800bc42:	9b02      	ldr	r3, [sp, #8]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f300 80d7 	bgt.w	800bdf8 <_dtoa_r+0x658>
 800bc4a:	f040 8274 	bne.w	800c136 <_dtoa_r+0x996>
 800bc4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc52:	2200      	movs	r2, #0
 800bc54:	4b40      	ldr	r3, [pc, #256]	; (800bd58 <_dtoa_r+0x5b8>)
 800bc56:	f7f4 fc3f 	bl	80004d8 <__aeabi_dmul>
 800bc5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc5e:	f7f4 fec1 	bl	80009e4 <__aeabi_dcmpge>
 800bc62:	9c02      	ldr	r4, [sp, #8]
 800bc64:	4626      	mov	r6, r4
 800bc66:	2800      	cmp	r0, #0
 800bc68:	f040 824a 	bne.w	800c100 <_dtoa_r+0x960>
 800bc6c:	2331      	movs	r3, #49	; 0x31
 800bc6e:	9f08      	ldr	r7, [sp, #32]
 800bc70:	f109 0901 	add.w	r9, r9, #1
 800bc74:	f807 3b01 	strb.w	r3, [r7], #1
 800bc78:	e246      	b.n	800c108 <_dtoa_r+0x968>
 800bc7a:	07e2      	lsls	r2, r4, #31
 800bc7c:	d505      	bpl.n	800bc8a <_dtoa_r+0x4ea>
 800bc7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc82:	f7f4 fc29 	bl	80004d8 <__aeabi_dmul>
 800bc86:	2301      	movs	r3, #1
 800bc88:	3701      	adds	r7, #1
 800bc8a:	1064      	asrs	r4, r4, #1
 800bc8c:	3608      	adds	r6, #8
 800bc8e:	e76d      	b.n	800bb6c <_dtoa_r+0x3cc>
 800bc90:	2702      	movs	r7, #2
 800bc92:	e770      	b.n	800bb76 <_dtoa_r+0x3d6>
 800bc94:	46c8      	mov	r8, r9
 800bc96:	9c02      	ldr	r4, [sp, #8]
 800bc98:	e78f      	b.n	800bbba <_dtoa_r+0x41a>
 800bc9a:	9908      	ldr	r1, [sp, #32]
 800bc9c:	4b29      	ldr	r3, [pc, #164]	; (800bd44 <_dtoa_r+0x5a4>)
 800bc9e:	4421      	add	r1, r4
 800bca0:	9112      	str	r1, [sp, #72]	; 0x48
 800bca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bca4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bca8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bcac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcb0:	2900      	cmp	r1, #0
 800bcb2:	d055      	beq.n	800bd60 <_dtoa_r+0x5c0>
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	4929      	ldr	r1, [pc, #164]	; (800bd5c <_dtoa_r+0x5bc>)
 800bcb8:	f7f4 fd38 	bl	800072c <__aeabi_ddiv>
 800bcbc:	463b      	mov	r3, r7
 800bcbe:	4632      	mov	r2, r6
 800bcc0:	f7f4 fa52 	bl	8000168 <__aeabi_dsub>
 800bcc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bcc8:	9f08      	ldr	r7, [sp, #32]
 800bcca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcce:	f7f4 feb3 	bl	8000a38 <__aeabi_d2iz>
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	f7f4 fb96 	bl	8000404 <__aeabi_i2d>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	460b      	mov	r3, r1
 800bcdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bce0:	f7f4 fa42 	bl	8000168 <__aeabi_dsub>
 800bce4:	4602      	mov	r2, r0
 800bce6:	460b      	mov	r3, r1
 800bce8:	3430      	adds	r4, #48	; 0x30
 800bcea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bcf2:	f807 4b01 	strb.w	r4, [r7], #1
 800bcf6:	f7f4 fe61 	bl	80009bc <__aeabi_dcmplt>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d174      	bne.n	800bde8 <_dtoa_r+0x648>
 800bcfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd02:	2000      	movs	r0, #0
 800bd04:	4911      	ldr	r1, [pc, #68]	; (800bd4c <_dtoa_r+0x5ac>)
 800bd06:	f7f4 fa2f 	bl	8000168 <__aeabi_dsub>
 800bd0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd0e:	f7f4 fe55 	bl	80009bc <__aeabi_dcmplt>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	f040 80b6 	bne.w	800be84 <_dtoa_r+0x6e4>
 800bd18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd1a:	429f      	cmp	r7, r3
 800bd1c:	f43f af7a 	beq.w	800bc14 <_dtoa_r+0x474>
 800bd20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bd24:	2200      	movs	r2, #0
 800bd26:	4b0a      	ldr	r3, [pc, #40]	; (800bd50 <_dtoa_r+0x5b0>)
 800bd28:	f7f4 fbd6 	bl	80004d8 <__aeabi_dmul>
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bd32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd36:	4b06      	ldr	r3, [pc, #24]	; (800bd50 <_dtoa_r+0x5b0>)
 800bd38:	f7f4 fbce 	bl	80004d8 <__aeabi_dmul>
 800bd3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd40:	e7c3      	b.n	800bcca <_dtoa_r+0x52a>
 800bd42:	bf00      	nop
 800bd44:	0800e6a8 	.word	0x0800e6a8
 800bd48:	0800e680 	.word	0x0800e680
 800bd4c:	3ff00000 	.word	0x3ff00000
 800bd50:	40240000 	.word	0x40240000
 800bd54:	401c0000 	.word	0x401c0000
 800bd58:	40140000 	.word	0x40140000
 800bd5c:	3fe00000 	.word	0x3fe00000
 800bd60:	4630      	mov	r0, r6
 800bd62:	4639      	mov	r1, r7
 800bd64:	f7f4 fbb8 	bl	80004d8 <__aeabi_dmul>
 800bd68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bd6e:	9c08      	ldr	r4, [sp, #32]
 800bd70:	9314      	str	r3, [sp, #80]	; 0x50
 800bd72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd76:	f7f4 fe5f 	bl	8000a38 <__aeabi_d2iz>
 800bd7a:	9015      	str	r0, [sp, #84]	; 0x54
 800bd7c:	f7f4 fb42 	bl	8000404 <__aeabi_i2d>
 800bd80:	4602      	mov	r2, r0
 800bd82:	460b      	mov	r3, r1
 800bd84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd88:	f7f4 f9ee 	bl	8000168 <__aeabi_dsub>
 800bd8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd8e:	4606      	mov	r6, r0
 800bd90:	3330      	adds	r3, #48	; 0x30
 800bd92:	f804 3b01 	strb.w	r3, [r4], #1
 800bd96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd98:	460f      	mov	r7, r1
 800bd9a:	429c      	cmp	r4, r3
 800bd9c:	f04f 0200 	mov.w	r2, #0
 800bda0:	d124      	bne.n	800bdec <_dtoa_r+0x64c>
 800bda2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bda6:	4bb3      	ldr	r3, [pc, #716]	; (800c074 <_dtoa_r+0x8d4>)
 800bda8:	f7f4 f9e0 	bl	800016c <__adddf3>
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	4639      	mov	r1, r7
 800bdb4:	f7f4 fe20 	bl	80009f8 <__aeabi_dcmpgt>
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d162      	bne.n	800be82 <_dtoa_r+0x6e2>
 800bdbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	49ac      	ldr	r1, [pc, #688]	; (800c074 <_dtoa_r+0x8d4>)
 800bdc4:	f7f4 f9d0 	bl	8000168 <__aeabi_dsub>
 800bdc8:	4602      	mov	r2, r0
 800bdca:	460b      	mov	r3, r1
 800bdcc:	4630      	mov	r0, r6
 800bdce:	4639      	mov	r1, r7
 800bdd0:	f7f4 fdf4 	bl	80009bc <__aeabi_dcmplt>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	f43f af1d 	beq.w	800bc14 <_dtoa_r+0x474>
 800bdda:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bddc:	1e7b      	subs	r3, r7, #1
 800bdde:	9314      	str	r3, [sp, #80]	; 0x50
 800bde0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bde4:	2b30      	cmp	r3, #48	; 0x30
 800bde6:	d0f8      	beq.n	800bdda <_dtoa_r+0x63a>
 800bde8:	46c1      	mov	r9, r8
 800bdea:	e03a      	b.n	800be62 <_dtoa_r+0x6c2>
 800bdec:	4ba2      	ldr	r3, [pc, #648]	; (800c078 <_dtoa_r+0x8d8>)
 800bdee:	f7f4 fb73 	bl	80004d8 <__aeabi_dmul>
 800bdf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdf6:	e7bc      	b.n	800bd72 <_dtoa_r+0x5d2>
 800bdf8:	9f08      	ldr	r7, [sp, #32]
 800bdfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be02:	f7f4 fc93 	bl	800072c <__aeabi_ddiv>
 800be06:	f7f4 fe17 	bl	8000a38 <__aeabi_d2iz>
 800be0a:	4604      	mov	r4, r0
 800be0c:	f7f4 fafa 	bl	8000404 <__aeabi_i2d>
 800be10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be14:	f7f4 fb60 	bl	80004d8 <__aeabi_dmul>
 800be18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800be1c:	460b      	mov	r3, r1
 800be1e:	4602      	mov	r2, r0
 800be20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be24:	f7f4 f9a0 	bl	8000168 <__aeabi_dsub>
 800be28:	f807 6b01 	strb.w	r6, [r7], #1
 800be2c:	9e08      	ldr	r6, [sp, #32]
 800be2e:	9b02      	ldr	r3, [sp, #8]
 800be30:	1bbe      	subs	r6, r7, r6
 800be32:	42b3      	cmp	r3, r6
 800be34:	d13a      	bne.n	800beac <_dtoa_r+0x70c>
 800be36:	4602      	mov	r2, r0
 800be38:	460b      	mov	r3, r1
 800be3a:	f7f4 f997 	bl	800016c <__adddf3>
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be4a:	f7f4 fdd5 	bl	80009f8 <__aeabi_dcmpgt>
 800be4e:	bb58      	cbnz	r0, 800bea8 <_dtoa_r+0x708>
 800be50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be58:	f7f4 fda6 	bl	80009a8 <__aeabi_dcmpeq>
 800be5c:	b108      	cbz	r0, 800be62 <_dtoa_r+0x6c2>
 800be5e:	07e1      	lsls	r1, r4, #31
 800be60:	d422      	bmi.n	800bea8 <_dtoa_r+0x708>
 800be62:	4628      	mov	r0, r5
 800be64:	4651      	mov	r1, sl
 800be66:	f000 ff4d 	bl	800cd04 <_Bfree>
 800be6a:	2300      	movs	r3, #0
 800be6c:	703b      	strb	r3, [r7, #0]
 800be6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800be70:	f109 0001 	add.w	r0, r9, #1
 800be74:	6018      	str	r0, [r3, #0]
 800be76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f43f acdf 	beq.w	800b83c <_dtoa_r+0x9c>
 800be7e:	601f      	str	r7, [r3, #0]
 800be80:	e4dc      	b.n	800b83c <_dtoa_r+0x9c>
 800be82:	4627      	mov	r7, r4
 800be84:	463b      	mov	r3, r7
 800be86:	461f      	mov	r7, r3
 800be88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be8c:	2a39      	cmp	r2, #57	; 0x39
 800be8e:	d107      	bne.n	800bea0 <_dtoa_r+0x700>
 800be90:	9a08      	ldr	r2, [sp, #32]
 800be92:	429a      	cmp	r2, r3
 800be94:	d1f7      	bne.n	800be86 <_dtoa_r+0x6e6>
 800be96:	2230      	movs	r2, #48	; 0x30
 800be98:	9908      	ldr	r1, [sp, #32]
 800be9a:	f108 0801 	add.w	r8, r8, #1
 800be9e:	700a      	strb	r2, [r1, #0]
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	3201      	adds	r2, #1
 800bea4:	701a      	strb	r2, [r3, #0]
 800bea6:	e79f      	b.n	800bde8 <_dtoa_r+0x648>
 800bea8:	46c8      	mov	r8, r9
 800beaa:	e7eb      	b.n	800be84 <_dtoa_r+0x6e4>
 800beac:	2200      	movs	r2, #0
 800beae:	4b72      	ldr	r3, [pc, #456]	; (800c078 <_dtoa_r+0x8d8>)
 800beb0:	f7f4 fb12 	bl	80004d8 <__aeabi_dmul>
 800beb4:	4602      	mov	r2, r0
 800beb6:	460b      	mov	r3, r1
 800beb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bebc:	2200      	movs	r2, #0
 800bebe:	2300      	movs	r3, #0
 800bec0:	f7f4 fd72 	bl	80009a8 <__aeabi_dcmpeq>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d098      	beq.n	800bdfa <_dtoa_r+0x65a>
 800bec8:	e7cb      	b.n	800be62 <_dtoa_r+0x6c2>
 800beca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800becc:	2a00      	cmp	r2, #0
 800bece:	f000 80cd 	beq.w	800c06c <_dtoa_r+0x8cc>
 800bed2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bed4:	2a01      	cmp	r2, #1
 800bed6:	f300 80af 	bgt.w	800c038 <_dtoa_r+0x898>
 800beda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bedc:	2a00      	cmp	r2, #0
 800bede:	f000 80a7 	beq.w	800c030 <_dtoa_r+0x890>
 800bee2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bee6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bee8:	9f06      	ldr	r7, [sp, #24]
 800beea:	9a06      	ldr	r2, [sp, #24]
 800beec:	2101      	movs	r1, #1
 800beee:	441a      	add	r2, r3
 800bef0:	9206      	str	r2, [sp, #24]
 800bef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bef4:	4628      	mov	r0, r5
 800bef6:	441a      	add	r2, r3
 800bef8:	9209      	str	r2, [sp, #36]	; 0x24
 800befa:	f001 f807 	bl	800cf0c <__i2b>
 800befe:	4606      	mov	r6, r0
 800bf00:	2f00      	cmp	r7, #0
 800bf02:	dd0c      	ble.n	800bf1e <_dtoa_r+0x77e>
 800bf04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	dd09      	ble.n	800bf1e <_dtoa_r+0x77e>
 800bf0a:	42bb      	cmp	r3, r7
 800bf0c:	bfa8      	it	ge
 800bf0e:	463b      	movge	r3, r7
 800bf10:	9a06      	ldr	r2, [sp, #24]
 800bf12:	1aff      	subs	r7, r7, r3
 800bf14:	1ad2      	subs	r2, r2, r3
 800bf16:	9206      	str	r2, [sp, #24]
 800bf18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf20:	b1f3      	cbz	r3, 800bf60 <_dtoa_r+0x7c0>
 800bf22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 80a9 	beq.w	800c07c <_dtoa_r+0x8dc>
 800bf2a:	2c00      	cmp	r4, #0
 800bf2c:	dd10      	ble.n	800bf50 <_dtoa_r+0x7b0>
 800bf2e:	4631      	mov	r1, r6
 800bf30:	4622      	mov	r2, r4
 800bf32:	4628      	mov	r0, r5
 800bf34:	f001 f8a4 	bl	800d080 <__pow5mult>
 800bf38:	4652      	mov	r2, sl
 800bf3a:	4601      	mov	r1, r0
 800bf3c:	4606      	mov	r6, r0
 800bf3e:	4628      	mov	r0, r5
 800bf40:	f000 fffa 	bl	800cf38 <__multiply>
 800bf44:	4680      	mov	r8, r0
 800bf46:	4651      	mov	r1, sl
 800bf48:	4628      	mov	r0, r5
 800bf4a:	f000 fedb 	bl	800cd04 <_Bfree>
 800bf4e:	46c2      	mov	sl, r8
 800bf50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf52:	1b1a      	subs	r2, r3, r4
 800bf54:	d004      	beq.n	800bf60 <_dtoa_r+0x7c0>
 800bf56:	4651      	mov	r1, sl
 800bf58:	4628      	mov	r0, r5
 800bf5a:	f001 f891 	bl	800d080 <__pow5mult>
 800bf5e:	4682      	mov	sl, r0
 800bf60:	2101      	movs	r1, #1
 800bf62:	4628      	mov	r0, r5
 800bf64:	f000 ffd2 	bl	800cf0c <__i2b>
 800bf68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f340 8087 	ble.w	800c080 <_dtoa_r+0x8e0>
 800bf72:	461a      	mov	r2, r3
 800bf74:	4601      	mov	r1, r0
 800bf76:	4628      	mov	r0, r5
 800bf78:	f001 f882 	bl	800d080 <__pow5mult>
 800bf7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf7e:	4604      	mov	r4, r0
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	f340 8080 	ble.w	800c086 <_dtoa_r+0x8e6>
 800bf86:	f04f 0800 	mov.w	r8, #0
 800bf8a:	6923      	ldr	r3, [r4, #16]
 800bf8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf90:	6918      	ldr	r0, [r3, #16]
 800bf92:	f000 ff6d 	bl	800ce70 <__hi0bits>
 800bf96:	f1c0 0020 	rsb	r0, r0, #32
 800bf9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf9c:	4418      	add	r0, r3
 800bf9e:	f010 001f 	ands.w	r0, r0, #31
 800bfa2:	f000 8092 	beq.w	800c0ca <_dtoa_r+0x92a>
 800bfa6:	f1c0 0320 	rsb	r3, r0, #32
 800bfaa:	2b04      	cmp	r3, #4
 800bfac:	f340 808a 	ble.w	800c0c4 <_dtoa_r+0x924>
 800bfb0:	f1c0 001c 	rsb	r0, r0, #28
 800bfb4:	9b06      	ldr	r3, [sp, #24]
 800bfb6:	4407      	add	r7, r0
 800bfb8:	4403      	add	r3, r0
 800bfba:	9306      	str	r3, [sp, #24]
 800bfbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfbe:	4403      	add	r3, r0
 800bfc0:	9309      	str	r3, [sp, #36]	; 0x24
 800bfc2:	9b06      	ldr	r3, [sp, #24]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	dd05      	ble.n	800bfd4 <_dtoa_r+0x834>
 800bfc8:	4651      	mov	r1, sl
 800bfca:	461a      	mov	r2, r3
 800bfcc:	4628      	mov	r0, r5
 800bfce:	f001 f8b1 	bl	800d134 <__lshift>
 800bfd2:	4682      	mov	sl, r0
 800bfd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	dd05      	ble.n	800bfe6 <_dtoa_r+0x846>
 800bfda:	4621      	mov	r1, r4
 800bfdc:	461a      	mov	r2, r3
 800bfde:	4628      	mov	r0, r5
 800bfe0:	f001 f8a8 	bl	800d134 <__lshift>
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d070      	beq.n	800c0ce <_dtoa_r+0x92e>
 800bfec:	4621      	mov	r1, r4
 800bfee:	4650      	mov	r0, sl
 800bff0:	f001 f90c 	bl	800d20c <__mcmp>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	da6a      	bge.n	800c0ce <_dtoa_r+0x92e>
 800bff8:	2300      	movs	r3, #0
 800bffa:	4651      	mov	r1, sl
 800bffc:	220a      	movs	r2, #10
 800bffe:	4628      	mov	r0, r5
 800c000:	f000 fea2 	bl	800cd48 <__multadd>
 800c004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c006:	4682      	mov	sl, r0
 800c008:	f109 39ff 	add.w	r9, r9, #4294967295
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 8193 	beq.w	800c338 <_dtoa_r+0xb98>
 800c012:	4631      	mov	r1, r6
 800c014:	2300      	movs	r3, #0
 800c016:	220a      	movs	r2, #10
 800c018:	4628      	mov	r0, r5
 800c01a:	f000 fe95 	bl	800cd48 <__multadd>
 800c01e:	f1bb 0f00 	cmp.w	fp, #0
 800c022:	4606      	mov	r6, r0
 800c024:	f300 8093 	bgt.w	800c14e <_dtoa_r+0x9ae>
 800c028:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	dc57      	bgt.n	800c0de <_dtoa_r+0x93e>
 800c02e:	e08e      	b.n	800c14e <_dtoa_r+0x9ae>
 800c030:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c032:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c036:	e756      	b.n	800bee6 <_dtoa_r+0x746>
 800c038:	9b02      	ldr	r3, [sp, #8]
 800c03a:	1e5c      	subs	r4, r3, #1
 800c03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c03e:	42a3      	cmp	r3, r4
 800c040:	bfb7      	itett	lt
 800c042:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c044:	1b1c      	subge	r4, r3, r4
 800c046:	1ae2      	sublt	r2, r4, r3
 800c048:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c04a:	bfbe      	ittt	lt
 800c04c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c04e:	189b      	addlt	r3, r3, r2
 800c050:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c052:	9b02      	ldr	r3, [sp, #8]
 800c054:	bfb8      	it	lt
 800c056:	2400      	movlt	r4, #0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	bfbb      	ittet	lt
 800c05c:	9b06      	ldrlt	r3, [sp, #24]
 800c05e:	9a02      	ldrlt	r2, [sp, #8]
 800c060:	9f06      	ldrge	r7, [sp, #24]
 800c062:	1a9f      	sublt	r7, r3, r2
 800c064:	bfac      	ite	ge
 800c066:	9b02      	ldrge	r3, [sp, #8]
 800c068:	2300      	movlt	r3, #0
 800c06a:	e73e      	b.n	800beea <_dtoa_r+0x74a>
 800c06c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c06e:	9f06      	ldr	r7, [sp, #24]
 800c070:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c072:	e745      	b.n	800bf00 <_dtoa_r+0x760>
 800c074:	3fe00000 	.word	0x3fe00000
 800c078:	40240000 	.word	0x40240000
 800c07c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c07e:	e76a      	b.n	800bf56 <_dtoa_r+0x7b6>
 800c080:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c082:	2b01      	cmp	r3, #1
 800c084:	dc19      	bgt.n	800c0ba <_dtoa_r+0x91a>
 800c086:	9b04      	ldr	r3, [sp, #16]
 800c088:	b9bb      	cbnz	r3, 800c0ba <_dtoa_r+0x91a>
 800c08a:	9b05      	ldr	r3, [sp, #20]
 800c08c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c090:	b99b      	cbnz	r3, 800c0ba <_dtoa_r+0x91a>
 800c092:	9b05      	ldr	r3, [sp, #20]
 800c094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c098:	0d1b      	lsrs	r3, r3, #20
 800c09a:	051b      	lsls	r3, r3, #20
 800c09c:	b183      	cbz	r3, 800c0c0 <_dtoa_r+0x920>
 800c09e:	f04f 0801 	mov.w	r8, #1
 800c0a2:	9b06      	ldr	r3, [sp, #24]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	9306      	str	r3, [sp, #24]
 800c0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f47f af6a 	bne.w	800bf8a <_dtoa_r+0x7ea>
 800c0b6:	2001      	movs	r0, #1
 800c0b8:	e76f      	b.n	800bf9a <_dtoa_r+0x7fa>
 800c0ba:	f04f 0800 	mov.w	r8, #0
 800c0be:	e7f6      	b.n	800c0ae <_dtoa_r+0x90e>
 800c0c0:	4698      	mov	r8, r3
 800c0c2:	e7f4      	b.n	800c0ae <_dtoa_r+0x90e>
 800c0c4:	f43f af7d 	beq.w	800bfc2 <_dtoa_r+0x822>
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	301c      	adds	r0, #28
 800c0cc:	e772      	b.n	800bfb4 <_dtoa_r+0x814>
 800c0ce:	9b02      	ldr	r3, [sp, #8]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	dc36      	bgt.n	800c142 <_dtoa_r+0x9a2>
 800c0d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	dd33      	ble.n	800c142 <_dtoa_r+0x9a2>
 800c0da:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c0de:	f1bb 0f00 	cmp.w	fp, #0
 800c0e2:	d10d      	bne.n	800c100 <_dtoa_r+0x960>
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	465b      	mov	r3, fp
 800c0e8:	2205      	movs	r2, #5
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	f000 fe2c 	bl	800cd48 <__multadd>
 800c0f0:	4601      	mov	r1, r0
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	4650      	mov	r0, sl
 800c0f6:	f001 f889 	bl	800d20c <__mcmp>
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	f73f adb6 	bgt.w	800bc6c <_dtoa_r+0x4cc>
 800c100:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c102:	9f08      	ldr	r7, [sp, #32]
 800c104:	ea6f 0903 	mvn.w	r9, r3
 800c108:	f04f 0800 	mov.w	r8, #0
 800c10c:	4621      	mov	r1, r4
 800c10e:	4628      	mov	r0, r5
 800c110:	f000 fdf8 	bl	800cd04 <_Bfree>
 800c114:	2e00      	cmp	r6, #0
 800c116:	f43f aea4 	beq.w	800be62 <_dtoa_r+0x6c2>
 800c11a:	f1b8 0f00 	cmp.w	r8, #0
 800c11e:	d005      	beq.n	800c12c <_dtoa_r+0x98c>
 800c120:	45b0      	cmp	r8, r6
 800c122:	d003      	beq.n	800c12c <_dtoa_r+0x98c>
 800c124:	4641      	mov	r1, r8
 800c126:	4628      	mov	r0, r5
 800c128:	f000 fdec 	bl	800cd04 <_Bfree>
 800c12c:	4631      	mov	r1, r6
 800c12e:	4628      	mov	r0, r5
 800c130:	f000 fde8 	bl	800cd04 <_Bfree>
 800c134:	e695      	b.n	800be62 <_dtoa_r+0x6c2>
 800c136:	2400      	movs	r4, #0
 800c138:	4626      	mov	r6, r4
 800c13a:	e7e1      	b.n	800c100 <_dtoa_r+0x960>
 800c13c:	46c1      	mov	r9, r8
 800c13e:	4626      	mov	r6, r4
 800c140:	e594      	b.n	800bc6c <_dtoa_r+0x4cc>
 800c142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c144:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f000 80fc 	beq.w	800c346 <_dtoa_r+0xba6>
 800c14e:	2f00      	cmp	r7, #0
 800c150:	dd05      	ble.n	800c15e <_dtoa_r+0x9be>
 800c152:	4631      	mov	r1, r6
 800c154:	463a      	mov	r2, r7
 800c156:	4628      	mov	r0, r5
 800c158:	f000 ffec 	bl	800d134 <__lshift>
 800c15c:	4606      	mov	r6, r0
 800c15e:	f1b8 0f00 	cmp.w	r8, #0
 800c162:	d05c      	beq.n	800c21e <_dtoa_r+0xa7e>
 800c164:	4628      	mov	r0, r5
 800c166:	6871      	ldr	r1, [r6, #4]
 800c168:	f000 fd8c 	bl	800cc84 <_Balloc>
 800c16c:	4607      	mov	r7, r0
 800c16e:	b928      	cbnz	r0, 800c17c <_dtoa_r+0x9dc>
 800c170:	4602      	mov	r2, r0
 800c172:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c176:	4b7e      	ldr	r3, [pc, #504]	; (800c370 <_dtoa_r+0xbd0>)
 800c178:	f7ff bb26 	b.w	800b7c8 <_dtoa_r+0x28>
 800c17c:	6932      	ldr	r2, [r6, #16]
 800c17e:	f106 010c 	add.w	r1, r6, #12
 800c182:	3202      	adds	r2, #2
 800c184:	0092      	lsls	r2, r2, #2
 800c186:	300c      	adds	r0, #12
 800c188:	f7fd fb07 	bl	800979a <memcpy>
 800c18c:	2201      	movs	r2, #1
 800c18e:	4639      	mov	r1, r7
 800c190:	4628      	mov	r0, r5
 800c192:	f000 ffcf 	bl	800d134 <__lshift>
 800c196:	46b0      	mov	r8, r6
 800c198:	4606      	mov	r6, r0
 800c19a:	9b08      	ldr	r3, [sp, #32]
 800c19c:	3301      	adds	r3, #1
 800c19e:	9302      	str	r3, [sp, #8]
 800c1a0:	9b08      	ldr	r3, [sp, #32]
 800c1a2:	445b      	add	r3, fp
 800c1a4:	930a      	str	r3, [sp, #40]	; 0x28
 800c1a6:	9b04      	ldr	r3, [sp, #16]
 800c1a8:	f003 0301 	and.w	r3, r3, #1
 800c1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ae:	9b02      	ldr	r3, [sp, #8]
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	4650      	mov	r0, sl
 800c1b4:	f103 3bff 	add.w	fp, r3, #4294967295
 800c1b8:	f7ff fa62 	bl	800b680 <quorem>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	4641      	mov	r1, r8
 800c1c0:	3330      	adds	r3, #48	; 0x30
 800c1c2:	9004      	str	r0, [sp, #16]
 800c1c4:	4650      	mov	r0, sl
 800c1c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1c8:	f001 f820 	bl	800d20c <__mcmp>
 800c1cc:	4632      	mov	r2, r6
 800c1ce:	9006      	str	r0, [sp, #24]
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	f001 f836 	bl	800d244 <__mdiff>
 800c1d8:	68c2      	ldr	r2, [r0, #12]
 800c1da:	4607      	mov	r7, r0
 800c1dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1de:	bb02      	cbnz	r2, 800c222 <_dtoa_r+0xa82>
 800c1e0:	4601      	mov	r1, r0
 800c1e2:	4650      	mov	r0, sl
 800c1e4:	f001 f812 	bl	800d20c <__mcmp>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ec:	4639      	mov	r1, r7
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c1f4:	f000 fd86 	bl	800cd04 <_Bfree>
 800c1f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1fc:	9f02      	ldr	r7, [sp, #8]
 800c1fe:	ea43 0102 	orr.w	r1, r3, r2
 800c202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c204:	430b      	orrs	r3, r1
 800c206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c208:	d10d      	bne.n	800c226 <_dtoa_r+0xa86>
 800c20a:	2b39      	cmp	r3, #57	; 0x39
 800c20c:	d027      	beq.n	800c25e <_dtoa_r+0xabe>
 800c20e:	9a06      	ldr	r2, [sp, #24]
 800c210:	2a00      	cmp	r2, #0
 800c212:	dd01      	ble.n	800c218 <_dtoa_r+0xa78>
 800c214:	9b04      	ldr	r3, [sp, #16]
 800c216:	3331      	adds	r3, #49	; 0x31
 800c218:	f88b 3000 	strb.w	r3, [fp]
 800c21c:	e776      	b.n	800c10c <_dtoa_r+0x96c>
 800c21e:	4630      	mov	r0, r6
 800c220:	e7b9      	b.n	800c196 <_dtoa_r+0x9f6>
 800c222:	2201      	movs	r2, #1
 800c224:	e7e2      	b.n	800c1ec <_dtoa_r+0xa4c>
 800c226:	9906      	ldr	r1, [sp, #24]
 800c228:	2900      	cmp	r1, #0
 800c22a:	db04      	blt.n	800c236 <_dtoa_r+0xa96>
 800c22c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c22e:	4301      	orrs	r1, r0
 800c230:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c232:	4301      	orrs	r1, r0
 800c234:	d120      	bne.n	800c278 <_dtoa_r+0xad8>
 800c236:	2a00      	cmp	r2, #0
 800c238:	ddee      	ble.n	800c218 <_dtoa_r+0xa78>
 800c23a:	4651      	mov	r1, sl
 800c23c:	2201      	movs	r2, #1
 800c23e:	4628      	mov	r0, r5
 800c240:	9302      	str	r3, [sp, #8]
 800c242:	f000 ff77 	bl	800d134 <__lshift>
 800c246:	4621      	mov	r1, r4
 800c248:	4682      	mov	sl, r0
 800c24a:	f000 ffdf 	bl	800d20c <__mcmp>
 800c24e:	2800      	cmp	r0, #0
 800c250:	9b02      	ldr	r3, [sp, #8]
 800c252:	dc02      	bgt.n	800c25a <_dtoa_r+0xaba>
 800c254:	d1e0      	bne.n	800c218 <_dtoa_r+0xa78>
 800c256:	07da      	lsls	r2, r3, #31
 800c258:	d5de      	bpl.n	800c218 <_dtoa_r+0xa78>
 800c25a:	2b39      	cmp	r3, #57	; 0x39
 800c25c:	d1da      	bne.n	800c214 <_dtoa_r+0xa74>
 800c25e:	2339      	movs	r3, #57	; 0x39
 800c260:	f88b 3000 	strb.w	r3, [fp]
 800c264:	463b      	mov	r3, r7
 800c266:	461f      	mov	r7, r3
 800c268:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c26c:	3b01      	subs	r3, #1
 800c26e:	2a39      	cmp	r2, #57	; 0x39
 800c270:	d050      	beq.n	800c314 <_dtoa_r+0xb74>
 800c272:	3201      	adds	r2, #1
 800c274:	701a      	strb	r2, [r3, #0]
 800c276:	e749      	b.n	800c10c <_dtoa_r+0x96c>
 800c278:	2a00      	cmp	r2, #0
 800c27a:	dd03      	ble.n	800c284 <_dtoa_r+0xae4>
 800c27c:	2b39      	cmp	r3, #57	; 0x39
 800c27e:	d0ee      	beq.n	800c25e <_dtoa_r+0xabe>
 800c280:	3301      	adds	r3, #1
 800c282:	e7c9      	b.n	800c218 <_dtoa_r+0xa78>
 800c284:	9a02      	ldr	r2, [sp, #8]
 800c286:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c288:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c28c:	428a      	cmp	r2, r1
 800c28e:	d02a      	beq.n	800c2e6 <_dtoa_r+0xb46>
 800c290:	4651      	mov	r1, sl
 800c292:	2300      	movs	r3, #0
 800c294:	220a      	movs	r2, #10
 800c296:	4628      	mov	r0, r5
 800c298:	f000 fd56 	bl	800cd48 <__multadd>
 800c29c:	45b0      	cmp	r8, r6
 800c29e:	4682      	mov	sl, r0
 800c2a0:	f04f 0300 	mov.w	r3, #0
 800c2a4:	f04f 020a 	mov.w	r2, #10
 800c2a8:	4641      	mov	r1, r8
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	d107      	bne.n	800c2be <_dtoa_r+0xb1e>
 800c2ae:	f000 fd4b 	bl	800cd48 <__multadd>
 800c2b2:	4680      	mov	r8, r0
 800c2b4:	4606      	mov	r6, r0
 800c2b6:	9b02      	ldr	r3, [sp, #8]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	9302      	str	r3, [sp, #8]
 800c2bc:	e777      	b.n	800c1ae <_dtoa_r+0xa0e>
 800c2be:	f000 fd43 	bl	800cd48 <__multadd>
 800c2c2:	4631      	mov	r1, r6
 800c2c4:	4680      	mov	r8, r0
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	220a      	movs	r2, #10
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	f000 fd3c 	bl	800cd48 <__multadd>
 800c2d0:	4606      	mov	r6, r0
 800c2d2:	e7f0      	b.n	800c2b6 <_dtoa_r+0xb16>
 800c2d4:	f1bb 0f00 	cmp.w	fp, #0
 800c2d8:	bfcc      	ite	gt
 800c2da:	465f      	movgt	r7, fp
 800c2dc:	2701      	movle	r7, #1
 800c2de:	f04f 0800 	mov.w	r8, #0
 800c2e2:	9a08      	ldr	r2, [sp, #32]
 800c2e4:	4417      	add	r7, r2
 800c2e6:	4651      	mov	r1, sl
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	9302      	str	r3, [sp, #8]
 800c2ee:	f000 ff21 	bl	800d134 <__lshift>
 800c2f2:	4621      	mov	r1, r4
 800c2f4:	4682      	mov	sl, r0
 800c2f6:	f000 ff89 	bl	800d20c <__mcmp>
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	dcb2      	bgt.n	800c264 <_dtoa_r+0xac4>
 800c2fe:	d102      	bne.n	800c306 <_dtoa_r+0xb66>
 800c300:	9b02      	ldr	r3, [sp, #8]
 800c302:	07db      	lsls	r3, r3, #31
 800c304:	d4ae      	bmi.n	800c264 <_dtoa_r+0xac4>
 800c306:	463b      	mov	r3, r7
 800c308:	461f      	mov	r7, r3
 800c30a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c30e:	2a30      	cmp	r2, #48	; 0x30
 800c310:	d0fa      	beq.n	800c308 <_dtoa_r+0xb68>
 800c312:	e6fb      	b.n	800c10c <_dtoa_r+0x96c>
 800c314:	9a08      	ldr	r2, [sp, #32]
 800c316:	429a      	cmp	r2, r3
 800c318:	d1a5      	bne.n	800c266 <_dtoa_r+0xac6>
 800c31a:	2331      	movs	r3, #49	; 0x31
 800c31c:	f109 0901 	add.w	r9, r9, #1
 800c320:	7013      	strb	r3, [r2, #0]
 800c322:	e6f3      	b.n	800c10c <_dtoa_r+0x96c>
 800c324:	4b13      	ldr	r3, [pc, #76]	; (800c374 <_dtoa_r+0xbd4>)
 800c326:	f7ff baa7 	b.w	800b878 <_dtoa_r+0xd8>
 800c32a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f47f aa80 	bne.w	800b832 <_dtoa_r+0x92>
 800c332:	4b11      	ldr	r3, [pc, #68]	; (800c378 <_dtoa_r+0xbd8>)
 800c334:	f7ff baa0 	b.w	800b878 <_dtoa_r+0xd8>
 800c338:	f1bb 0f00 	cmp.w	fp, #0
 800c33c:	dc03      	bgt.n	800c346 <_dtoa_r+0xba6>
 800c33e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c340:	2b02      	cmp	r3, #2
 800c342:	f73f aecc 	bgt.w	800c0de <_dtoa_r+0x93e>
 800c346:	9f08      	ldr	r7, [sp, #32]
 800c348:	4621      	mov	r1, r4
 800c34a:	4650      	mov	r0, sl
 800c34c:	f7ff f998 	bl	800b680 <quorem>
 800c350:	9a08      	ldr	r2, [sp, #32]
 800c352:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c356:	f807 3b01 	strb.w	r3, [r7], #1
 800c35a:	1aba      	subs	r2, r7, r2
 800c35c:	4593      	cmp	fp, r2
 800c35e:	ddb9      	ble.n	800c2d4 <_dtoa_r+0xb34>
 800c360:	4651      	mov	r1, sl
 800c362:	2300      	movs	r3, #0
 800c364:	220a      	movs	r2, #10
 800c366:	4628      	mov	r0, r5
 800c368:	f000 fcee 	bl	800cd48 <__multadd>
 800c36c:	4682      	mov	sl, r0
 800c36e:	e7eb      	b.n	800c348 <_dtoa_r+0xba8>
 800c370:	0800e591 	.word	0x0800e591
 800c374:	0800e2f0 	.word	0x0800e2f0
 800c378:	0800e525 	.word	0x0800e525

0800c37c <__sflush_r>:
 800c37c:	898a      	ldrh	r2, [r1, #12]
 800c37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c382:	4605      	mov	r5, r0
 800c384:	0710      	lsls	r0, r2, #28
 800c386:	460c      	mov	r4, r1
 800c388:	d458      	bmi.n	800c43c <__sflush_r+0xc0>
 800c38a:	684b      	ldr	r3, [r1, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	dc05      	bgt.n	800c39c <__sflush_r+0x20>
 800c390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c392:	2b00      	cmp	r3, #0
 800c394:	dc02      	bgt.n	800c39c <__sflush_r+0x20>
 800c396:	2000      	movs	r0, #0
 800c398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c39c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c39e:	2e00      	cmp	r6, #0
 800c3a0:	d0f9      	beq.n	800c396 <__sflush_r+0x1a>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3a8:	682f      	ldr	r7, [r5, #0]
 800c3aa:	602b      	str	r3, [r5, #0]
 800c3ac:	d032      	beq.n	800c414 <__sflush_r+0x98>
 800c3ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	075a      	lsls	r2, r3, #29
 800c3b4:	d505      	bpl.n	800c3c2 <__sflush_r+0x46>
 800c3b6:	6863      	ldr	r3, [r4, #4]
 800c3b8:	1ac0      	subs	r0, r0, r3
 800c3ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3bc:	b10b      	cbz	r3, 800c3c2 <__sflush_r+0x46>
 800c3be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3c0:	1ac0      	subs	r0, r0, r3
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	6a21      	ldr	r1, [r4, #32]
 800c3cc:	47b0      	blx	r6
 800c3ce:	1c43      	adds	r3, r0, #1
 800c3d0:	89a3      	ldrh	r3, [r4, #12]
 800c3d2:	d106      	bne.n	800c3e2 <__sflush_r+0x66>
 800c3d4:	6829      	ldr	r1, [r5, #0]
 800c3d6:	291d      	cmp	r1, #29
 800c3d8:	d82c      	bhi.n	800c434 <__sflush_r+0xb8>
 800c3da:	4a2a      	ldr	r2, [pc, #168]	; (800c484 <__sflush_r+0x108>)
 800c3dc:	40ca      	lsrs	r2, r1
 800c3de:	07d6      	lsls	r6, r2, #31
 800c3e0:	d528      	bpl.n	800c434 <__sflush_r+0xb8>
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	6062      	str	r2, [r4, #4]
 800c3e6:	6922      	ldr	r2, [r4, #16]
 800c3e8:	04d9      	lsls	r1, r3, #19
 800c3ea:	6022      	str	r2, [r4, #0]
 800c3ec:	d504      	bpl.n	800c3f8 <__sflush_r+0x7c>
 800c3ee:	1c42      	adds	r2, r0, #1
 800c3f0:	d101      	bne.n	800c3f6 <__sflush_r+0x7a>
 800c3f2:	682b      	ldr	r3, [r5, #0]
 800c3f4:	b903      	cbnz	r3, 800c3f8 <__sflush_r+0x7c>
 800c3f6:	6560      	str	r0, [r4, #84]	; 0x54
 800c3f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3fa:	602f      	str	r7, [r5, #0]
 800c3fc:	2900      	cmp	r1, #0
 800c3fe:	d0ca      	beq.n	800c396 <__sflush_r+0x1a>
 800c400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c404:	4299      	cmp	r1, r3
 800c406:	d002      	beq.n	800c40e <__sflush_r+0x92>
 800c408:	4628      	mov	r0, r5
 800c40a:	f001 f901 	bl	800d610 <_free_r>
 800c40e:	2000      	movs	r0, #0
 800c410:	6360      	str	r0, [r4, #52]	; 0x34
 800c412:	e7c1      	b.n	800c398 <__sflush_r+0x1c>
 800c414:	6a21      	ldr	r1, [r4, #32]
 800c416:	2301      	movs	r3, #1
 800c418:	4628      	mov	r0, r5
 800c41a:	47b0      	blx	r6
 800c41c:	1c41      	adds	r1, r0, #1
 800c41e:	d1c7      	bne.n	800c3b0 <__sflush_r+0x34>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d0c4      	beq.n	800c3b0 <__sflush_r+0x34>
 800c426:	2b1d      	cmp	r3, #29
 800c428:	d001      	beq.n	800c42e <__sflush_r+0xb2>
 800c42a:	2b16      	cmp	r3, #22
 800c42c:	d101      	bne.n	800c432 <__sflush_r+0xb6>
 800c42e:	602f      	str	r7, [r5, #0]
 800c430:	e7b1      	b.n	800c396 <__sflush_r+0x1a>
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c438:	81a3      	strh	r3, [r4, #12]
 800c43a:	e7ad      	b.n	800c398 <__sflush_r+0x1c>
 800c43c:	690f      	ldr	r7, [r1, #16]
 800c43e:	2f00      	cmp	r7, #0
 800c440:	d0a9      	beq.n	800c396 <__sflush_r+0x1a>
 800c442:	0793      	lsls	r3, r2, #30
 800c444:	bf18      	it	ne
 800c446:	2300      	movne	r3, #0
 800c448:	680e      	ldr	r6, [r1, #0]
 800c44a:	bf08      	it	eq
 800c44c:	694b      	ldreq	r3, [r1, #20]
 800c44e:	eba6 0807 	sub.w	r8, r6, r7
 800c452:	600f      	str	r7, [r1, #0]
 800c454:	608b      	str	r3, [r1, #8]
 800c456:	f1b8 0f00 	cmp.w	r8, #0
 800c45a:	dd9c      	ble.n	800c396 <__sflush_r+0x1a>
 800c45c:	4643      	mov	r3, r8
 800c45e:	463a      	mov	r2, r7
 800c460:	4628      	mov	r0, r5
 800c462:	6a21      	ldr	r1, [r4, #32]
 800c464:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c466:	47b0      	blx	r6
 800c468:	2800      	cmp	r0, #0
 800c46a:	dc06      	bgt.n	800c47a <__sflush_r+0xfe>
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	f04f 30ff 	mov.w	r0, #4294967295
 800c472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c476:	81a3      	strh	r3, [r4, #12]
 800c478:	e78e      	b.n	800c398 <__sflush_r+0x1c>
 800c47a:	4407      	add	r7, r0
 800c47c:	eba8 0800 	sub.w	r8, r8, r0
 800c480:	e7e9      	b.n	800c456 <__sflush_r+0xda>
 800c482:	bf00      	nop
 800c484:	20400001 	.word	0x20400001

0800c488 <_fflush_r>:
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	690b      	ldr	r3, [r1, #16]
 800c48c:	4605      	mov	r5, r0
 800c48e:	460c      	mov	r4, r1
 800c490:	b913      	cbnz	r3, 800c498 <_fflush_r+0x10>
 800c492:	2500      	movs	r5, #0
 800c494:	4628      	mov	r0, r5
 800c496:	bd38      	pop	{r3, r4, r5, pc}
 800c498:	b118      	cbz	r0, 800c4a2 <_fflush_r+0x1a>
 800c49a:	6983      	ldr	r3, [r0, #24]
 800c49c:	b90b      	cbnz	r3, 800c4a2 <_fflush_r+0x1a>
 800c49e:	f7fd f8b7 	bl	8009610 <__sinit>
 800c4a2:	4b14      	ldr	r3, [pc, #80]	; (800c4f4 <_fflush_r+0x6c>)
 800c4a4:	429c      	cmp	r4, r3
 800c4a6:	d11b      	bne.n	800c4e0 <_fflush_r+0x58>
 800c4a8:	686c      	ldr	r4, [r5, #4]
 800c4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d0ef      	beq.n	800c492 <_fflush_r+0xa>
 800c4b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4b4:	07d0      	lsls	r0, r2, #31
 800c4b6:	d404      	bmi.n	800c4c2 <_fflush_r+0x3a>
 800c4b8:	0599      	lsls	r1, r3, #22
 800c4ba:	d402      	bmi.n	800c4c2 <_fflush_r+0x3a>
 800c4bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4be:	f7fd f96a 	bl	8009796 <__retarget_lock_acquire_recursive>
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	f7ff ff59 	bl	800c37c <__sflush_r>
 800c4ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	07da      	lsls	r2, r3, #31
 800c4d0:	d4e0      	bmi.n	800c494 <_fflush_r+0xc>
 800c4d2:	89a3      	ldrh	r3, [r4, #12]
 800c4d4:	059b      	lsls	r3, r3, #22
 800c4d6:	d4dd      	bmi.n	800c494 <_fflush_r+0xc>
 800c4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4da:	f7fd f95d 	bl	8009798 <__retarget_lock_release_recursive>
 800c4de:	e7d9      	b.n	800c494 <_fflush_r+0xc>
 800c4e0:	4b05      	ldr	r3, [pc, #20]	; (800c4f8 <_fflush_r+0x70>)
 800c4e2:	429c      	cmp	r4, r3
 800c4e4:	d101      	bne.n	800c4ea <_fflush_r+0x62>
 800c4e6:	68ac      	ldr	r4, [r5, #8]
 800c4e8:	e7df      	b.n	800c4aa <_fflush_r+0x22>
 800c4ea:	4b04      	ldr	r3, [pc, #16]	; (800c4fc <_fflush_r+0x74>)
 800c4ec:	429c      	cmp	r4, r3
 800c4ee:	bf08      	it	eq
 800c4f0:	68ec      	ldreq	r4, [r5, #12]
 800c4f2:	e7da      	b.n	800c4aa <_fflush_r+0x22>
 800c4f4:	0800e29c 	.word	0x0800e29c
 800c4f8:	0800e2bc 	.word	0x0800e2bc
 800c4fc:	0800e27c 	.word	0x0800e27c

0800c500 <fiprintf>:
 800c500:	b40e      	push	{r1, r2, r3}
 800c502:	b503      	push	{r0, r1, lr}
 800c504:	4601      	mov	r1, r0
 800c506:	ab03      	add	r3, sp, #12
 800c508:	4805      	ldr	r0, [pc, #20]	; (800c520 <fiprintf+0x20>)
 800c50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c50e:	6800      	ldr	r0, [r0, #0]
 800c510:	9301      	str	r3, [sp, #4]
 800c512:	f001 fa4d 	bl	800d9b0 <_vfiprintf_r>
 800c516:	b002      	add	sp, #8
 800c518:	f85d eb04 	ldr.w	lr, [sp], #4
 800c51c:	b003      	add	sp, #12
 800c51e:	4770      	bx	lr
 800c520:	2000000c 	.word	0x2000000c

0800c524 <rshift>:
 800c524:	6903      	ldr	r3, [r0, #16]
 800c526:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c52a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c52e:	f100 0414 	add.w	r4, r0, #20
 800c532:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c536:	dd46      	ble.n	800c5c6 <rshift+0xa2>
 800c538:	f011 011f 	ands.w	r1, r1, #31
 800c53c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c540:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c544:	d10c      	bne.n	800c560 <rshift+0x3c>
 800c546:	4629      	mov	r1, r5
 800c548:	f100 0710 	add.w	r7, r0, #16
 800c54c:	42b1      	cmp	r1, r6
 800c54e:	d335      	bcc.n	800c5bc <rshift+0x98>
 800c550:	1a9b      	subs	r3, r3, r2
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	1eea      	subs	r2, r5, #3
 800c556:	4296      	cmp	r6, r2
 800c558:	bf38      	it	cc
 800c55a:	2300      	movcc	r3, #0
 800c55c:	4423      	add	r3, r4
 800c55e:	e015      	b.n	800c58c <rshift+0x68>
 800c560:	46a1      	mov	r9, r4
 800c562:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c566:	f1c1 0820 	rsb	r8, r1, #32
 800c56a:	40cf      	lsrs	r7, r1
 800c56c:	f105 0e04 	add.w	lr, r5, #4
 800c570:	4576      	cmp	r6, lr
 800c572:	46f4      	mov	ip, lr
 800c574:	d816      	bhi.n	800c5a4 <rshift+0x80>
 800c576:	1a9b      	subs	r3, r3, r2
 800c578:	009a      	lsls	r2, r3, #2
 800c57a:	3a04      	subs	r2, #4
 800c57c:	3501      	adds	r5, #1
 800c57e:	42ae      	cmp	r6, r5
 800c580:	bf38      	it	cc
 800c582:	2200      	movcc	r2, #0
 800c584:	18a3      	adds	r3, r4, r2
 800c586:	50a7      	str	r7, [r4, r2]
 800c588:	b107      	cbz	r7, 800c58c <rshift+0x68>
 800c58a:	3304      	adds	r3, #4
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	eba3 0204 	sub.w	r2, r3, r4
 800c592:	bf08      	it	eq
 800c594:	2300      	moveq	r3, #0
 800c596:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c59a:	6102      	str	r2, [r0, #16]
 800c59c:	bf08      	it	eq
 800c59e:	6143      	streq	r3, [r0, #20]
 800c5a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5a4:	f8dc c000 	ldr.w	ip, [ip]
 800c5a8:	fa0c fc08 	lsl.w	ip, ip, r8
 800c5ac:	ea4c 0707 	orr.w	r7, ip, r7
 800c5b0:	f849 7b04 	str.w	r7, [r9], #4
 800c5b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c5b8:	40cf      	lsrs	r7, r1
 800c5ba:	e7d9      	b.n	800c570 <rshift+0x4c>
 800c5bc:	f851 cb04 	ldr.w	ip, [r1], #4
 800c5c0:	f847 cf04 	str.w	ip, [r7, #4]!
 800c5c4:	e7c2      	b.n	800c54c <rshift+0x28>
 800c5c6:	4623      	mov	r3, r4
 800c5c8:	e7e0      	b.n	800c58c <rshift+0x68>

0800c5ca <__hexdig_fun>:
 800c5ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c5ce:	2b09      	cmp	r3, #9
 800c5d0:	d802      	bhi.n	800c5d8 <__hexdig_fun+0xe>
 800c5d2:	3820      	subs	r0, #32
 800c5d4:	b2c0      	uxtb	r0, r0
 800c5d6:	4770      	bx	lr
 800c5d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c5dc:	2b05      	cmp	r3, #5
 800c5de:	d801      	bhi.n	800c5e4 <__hexdig_fun+0x1a>
 800c5e0:	3847      	subs	r0, #71	; 0x47
 800c5e2:	e7f7      	b.n	800c5d4 <__hexdig_fun+0xa>
 800c5e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c5e8:	2b05      	cmp	r3, #5
 800c5ea:	d801      	bhi.n	800c5f0 <__hexdig_fun+0x26>
 800c5ec:	3827      	subs	r0, #39	; 0x27
 800c5ee:	e7f1      	b.n	800c5d4 <__hexdig_fun+0xa>
 800c5f0:	2000      	movs	r0, #0
 800c5f2:	4770      	bx	lr

0800c5f4 <__gethex>:
 800c5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f8:	b08b      	sub	sp, #44	; 0x2c
 800c5fa:	9306      	str	r3, [sp, #24]
 800c5fc:	4bb9      	ldr	r3, [pc, #740]	; (800c8e4 <__gethex+0x2f0>)
 800c5fe:	9002      	str	r0, [sp, #8]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	468b      	mov	fp, r1
 800c604:	4618      	mov	r0, r3
 800c606:	4690      	mov	r8, r2
 800c608:	9303      	str	r3, [sp, #12]
 800c60a:	f7f3 fda1 	bl	8000150 <strlen>
 800c60e:	4682      	mov	sl, r0
 800c610:	9b03      	ldr	r3, [sp, #12]
 800c612:	f8db 2000 	ldr.w	r2, [fp]
 800c616:	4403      	add	r3, r0
 800c618:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c61c:	9307      	str	r3, [sp, #28]
 800c61e:	1c93      	adds	r3, r2, #2
 800c620:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c624:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c628:	32fe      	adds	r2, #254	; 0xfe
 800c62a:	18d1      	adds	r1, r2, r3
 800c62c:	461f      	mov	r7, r3
 800c62e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c632:	9101      	str	r1, [sp, #4]
 800c634:	2830      	cmp	r0, #48	; 0x30
 800c636:	d0f8      	beq.n	800c62a <__gethex+0x36>
 800c638:	f7ff ffc7 	bl	800c5ca <__hexdig_fun>
 800c63c:	4604      	mov	r4, r0
 800c63e:	2800      	cmp	r0, #0
 800c640:	d13a      	bne.n	800c6b8 <__gethex+0xc4>
 800c642:	4652      	mov	r2, sl
 800c644:	4638      	mov	r0, r7
 800c646:	9903      	ldr	r1, [sp, #12]
 800c648:	f001 fafa 	bl	800dc40 <strncmp>
 800c64c:	4605      	mov	r5, r0
 800c64e:	2800      	cmp	r0, #0
 800c650:	d166      	bne.n	800c720 <__gethex+0x12c>
 800c652:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c656:	eb07 060a 	add.w	r6, r7, sl
 800c65a:	f7ff ffb6 	bl	800c5ca <__hexdig_fun>
 800c65e:	2800      	cmp	r0, #0
 800c660:	d060      	beq.n	800c724 <__gethex+0x130>
 800c662:	4633      	mov	r3, r6
 800c664:	7818      	ldrb	r0, [r3, #0]
 800c666:	461f      	mov	r7, r3
 800c668:	2830      	cmp	r0, #48	; 0x30
 800c66a:	f103 0301 	add.w	r3, r3, #1
 800c66e:	d0f9      	beq.n	800c664 <__gethex+0x70>
 800c670:	f7ff ffab 	bl	800c5ca <__hexdig_fun>
 800c674:	2301      	movs	r3, #1
 800c676:	fab0 f480 	clz	r4, r0
 800c67a:	4635      	mov	r5, r6
 800c67c:	0964      	lsrs	r4, r4, #5
 800c67e:	9301      	str	r3, [sp, #4]
 800c680:	463a      	mov	r2, r7
 800c682:	4616      	mov	r6, r2
 800c684:	7830      	ldrb	r0, [r6, #0]
 800c686:	3201      	adds	r2, #1
 800c688:	f7ff ff9f 	bl	800c5ca <__hexdig_fun>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d1f8      	bne.n	800c682 <__gethex+0x8e>
 800c690:	4652      	mov	r2, sl
 800c692:	4630      	mov	r0, r6
 800c694:	9903      	ldr	r1, [sp, #12]
 800c696:	f001 fad3 	bl	800dc40 <strncmp>
 800c69a:	b980      	cbnz	r0, 800c6be <__gethex+0xca>
 800c69c:	b94d      	cbnz	r5, 800c6b2 <__gethex+0xbe>
 800c69e:	eb06 050a 	add.w	r5, r6, sl
 800c6a2:	462a      	mov	r2, r5
 800c6a4:	4616      	mov	r6, r2
 800c6a6:	7830      	ldrb	r0, [r6, #0]
 800c6a8:	3201      	adds	r2, #1
 800c6aa:	f7ff ff8e 	bl	800c5ca <__hexdig_fun>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d1f8      	bne.n	800c6a4 <__gethex+0xb0>
 800c6b2:	1bad      	subs	r5, r5, r6
 800c6b4:	00ad      	lsls	r5, r5, #2
 800c6b6:	e004      	b.n	800c6c2 <__gethex+0xce>
 800c6b8:	2400      	movs	r4, #0
 800c6ba:	4625      	mov	r5, r4
 800c6bc:	e7e0      	b.n	800c680 <__gethex+0x8c>
 800c6be:	2d00      	cmp	r5, #0
 800c6c0:	d1f7      	bne.n	800c6b2 <__gethex+0xbe>
 800c6c2:	7833      	ldrb	r3, [r6, #0]
 800c6c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c6c8:	2b50      	cmp	r3, #80	; 0x50
 800c6ca:	d139      	bne.n	800c740 <__gethex+0x14c>
 800c6cc:	7873      	ldrb	r3, [r6, #1]
 800c6ce:	2b2b      	cmp	r3, #43	; 0x2b
 800c6d0:	d02a      	beq.n	800c728 <__gethex+0x134>
 800c6d2:	2b2d      	cmp	r3, #45	; 0x2d
 800c6d4:	d02c      	beq.n	800c730 <__gethex+0x13c>
 800c6d6:	f04f 0900 	mov.w	r9, #0
 800c6da:	1c71      	adds	r1, r6, #1
 800c6dc:	7808      	ldrb	r0, [r1, #0]
 800c6de:	f7ff ff74 	bl	800c5ca <__hexdig_fun>
 800c6e2:	1e43      	subs	r3, r0, #1
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	2b18      	cmp	r3, #24
 800c6e8:	d82a      	bhi.n	800c740 <__gethex+0x14c>
 800c6ea:	f1a0 0210 	sub.w	r2, r0, #16
 800c6ee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c6f2:	f7ff ff6a 	bl	800c5ca <__hexdig_fun>
 800c6f6:	1e43      	subs	r3, r0, #1
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	2b18      	cmp	r3, #24
 800c6fc:	d91b      	bls.n	800c736 <__gethex+0x142>
 800c6fe:	f1b9 0f00 	cmp.w	r9, #0
 800c702:	d000      	beq.n	800c706 <__gethex+0x112>
 800c704:	4252      	negs	r2, r2
 800c706:	4415      	add	r5, r2
 800c708:	f8cb 1000 	str.w	r1, [fp]
 800c70c:	b1d4      	cbz	r4, 800c744 <__gethex+0x150>
 800c70e:	9b01      	ldr	r3, [sp, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	bf14      	ite	ne
 800c714:	2700      	movne	r7, #0
 800c716:	2706      	moveq	r7, #6
 800c718:	4638      	mov	r0, r7
 800c71a:	b00b      	add	sp, #44	; 0x2c
 800c71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c720:	463e      	mov	r6, r7
 800c722:	4625      	mov	r5, r4
 800c724:	2401      	movs	r4, #1
 800c726:	e7cc      	b.n	800c6c2 <__gethex+0xce>
 800c728:	f04f 0900 	mov.w	r9, #0
 800c72c:	1cb1      	adds	r1, r6, #2
 800c72e:	e7d5      	b.n	800c6dc <__gethex+0xe8>
 800c730:	f04f 0901 	mov.w	r9, #1
 800c734:	e7fa      	b.n	800c72c <__gethex+0x138>
 800c736:	230a      	movs	r3, #10
 800c738:	fb03 0202 	mla	r2, r3, r2, r0
 800c73c:	3a10      	subs	r2, #16
 800c73e:	e7d6      	b.n	800c6ee <__gethex+0xfa>
 800c740:	4631      	mov	r1, r6
 800c742:	e7e1      	b.n	800c708 <__gethex+0x114>
 800c744:	4621      	mov	r1, r4
 800c746:	1bf3      	subs	r3, r6, r7
 800c748:	3b01      	subs	r3, #1
 800c74a:	2b07      	cmp	r3, #7
 800c74c:	dc0a      	bgt.n	800c764 <__gethex+0x170>
 800c74e:	9802      	ldr	r0, [sp, #8]
 800c750:	f000 fa98 	bl	800cc84 <_Balloc>
 800c754:	4604      	mov	r4, r0
 800c756:	b940      	cbnz	r0, 800c76a <__gethex+0x176>
 800c758:	4602      	mov	r2, r0
 800c75a:	21de      	movs	r1, #222	; 0xde
 800c75c:	4b62      	ldr	r3, [pc, #392]	; (800c8e8 <__gethex+0x2f4>)
 800c75e:	4863      	ldr	r0, [pc, #396]	; (800c8ec <__gethex+0x2f8>)
 800c760:	f7fe ff60 	bl	800b624 <__assert_func>
 800c764:	3101      	adds	r1, #1
 800c766:	105b      	asrs	r3, r3, #1
 800c768:	e7ef      	b.n	800c74a <__gethex+0x156>
 800c76a:	f04f 0b00 	mov.w	fp, #0
 800c76e:	f100 0914 	add.w	r9, r0, #20
 800c772:	f1ca 0301 	rsb	r3, sl, #1
 800c776:	f8cd 9010 	str.w	r9, [sp, #16]
 800c77a:	f8cd b004 	str.w	fp, [sp, #4]
 800c77e:	9308      	str	r3, [sp, #32]
 800c780:	42b7      	cmp	r7, r6
 800c782:	d33f      	bcc.n	800c804 <__gethex+0x210>
 800c784:	9f04      	ldr	r7, [sp, #16]
 800c786:	9b01      	ldr	r3, [sp, #4]
 800c788:	f847 3b04 	str.w	r3, [r7], #4
 800c78c:	eba7 0709 	sub.w	r7, r7, r9
 800c790:	10bf      	asrs	r7, r7, #2
 800c792:	6127      	str	r7, [r4, #16]
 800c794:	4618      	mov	r0, r3
 800c796:	f000 fb6b 	bl	800ce70 <__hi0bits>
 800c79a:	017f      	lsls	r7, r7, #5
 800c79c:	f8d8 6000 	ldr.w	r6, [r8]
 800c7a0:	1a3f      	subs	r7, r7, r0
 800c7a2:	42b7      	cmp	r7, r6
 800c7a4:	dd62      	ble.n	800c86c <__gethex+0x278>
 800c7a6:	1bbf      	subs	r7, r7, r6
 800c7a8:	4639      	mov	r1, r7
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f000 ff01 	bl	800d5b2 <__any_on>
 800c7b0:	4682      	mov	sl, r0
 800c7b2:	b1a8      	cbz	r0, 800c7e0 <__gethex+0x1ec>
 800c7b4:	f04f 0a01 	mov.w	sl, #1
 800c7b8:	1e7b      	subs	r3, r7, #1
 800c7ba:	1159      	asrs	r1, r3, #5
 800c7bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c7c0:	f003 021f 	and.w	r2, r3, #31
 800c7c4:	fa0a f202 	lsl.w	r2, sl, r2
 800c7c8:	420a      	tst	r2, r1
 800c7ca:	d009      	beq.n	800c7e0 <__gethex+0x1ec>
 800c7cc:	4553      	cmp	r3, sl
 800c7ce:	dd05      	ble.n	800c7dc <__gethex+0x1e8>
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	1eb9      	subs	r1, r7, #2
 800c7d4:	f000 feed 	bl	800d5b2 <__any_on>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	d144      	bne.n	800c866 <__gethex+0x272>
 800c7dc:	f04f 0a02 	mov.w	sl, #2
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f7ff fe9e 	bl	800c524 <rshift>
 800c7e8:	443d      	add	r5, r7
 800c7ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7ee:	42ab      	cmp	r3, r5
 800c7f0:	da4a      	bge.n	800c888 <__gethex+0x294>
 800c7f2:	4621      	mov	r1, r4
 800c7f4:	9802      	ldr	r0, [sp, #8]
 800c7f6:	f000 fa85 	bl	800cd04 <_Bfree>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c7fe:	27a3      	movs	r7, #163	; 0xa3
 800c800:	6013      	str	r3, [r2, #0]
 800c802:	e789      	b.n	800c718 <__gethex+0x124>
 800c804:	1e73      	subs	r3, r6, #1
 800c806:	9a07      	ldr	r2, [sp, #28]
 800c808:	9305      	str	r3, [sp, #20]
 800c80a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c80e:	4293      	cmp	r3, r2
 800c810:	d019      	beq.n	800c846 <__gethex+0x252>
 800c812:	f1bb 0f20 	cmp.w	fp, #32
 800c816:	d107      	bne.n	800c828 <__gethex+0x234>
 800c818:	9b04      	ldr	r3, [sp, #16]
 800c81a:	9a01      	ldr	r2, [sp, #4]
 800c81c:	f843 2b04 	str.w	r2, [r3], #4
 800c820:	9304      	str	r3, [sp, #16]
 800c822:	2300      	movs	r3, #0
 800c824:	469b      	mov	fp, r3
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c82c:	f7ff fecd 	bl	800c5ca <__hexdig_fun>
 800c830:	9b01      	ldr	r3, [sp, #4]
 800c832:	f000 000f 	and.w	r0, r0, #15
 800c836:	fa00 f00b 	lsl.w	r0, r0, fp
 800c83a:	4303      	orrs	r3, r0
 800c83c:	9301      	str	r3, [sp, #4]
 800c83e:	f10b 0b04 	add.w	fp, fp, #4
 800c842:	9b05      	ldr	r3, [sp, #20]
 800c844:	e00d      	b.n	800c862 <__gethex+0x26e>
 800c846:	9b05      	ldr	r3, [sp, #20]
 800c848:	9a08      	ldr	r2, [sp, #32]
 800c84a:	4413      	add	r3, r2
 800c84c:	42bb      	cmp	r3, r7
 800c84e:	d3e0      	bcc.n	800c812 <__gethex+0x21e>
 800c850:	4618      	mov	r0, r3
 800c852:	4652      	mov	r2, sl
 800c854:	9903      	ldr	r1, [sp, #12]
 800c856:	9309      	str	r3, [sp, #36]	; 0x24
 800c858:	f001 f9f2 	bl	800dc40 <strncmp>
 800c85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c85e:	2800      	cmp	r0, #0
 800c860:	d1d7      	bne.n	800c812 <__gethex+0x21e>
 800c862:	461e      	mov	r6, r3
 800c864:	e78c      	b.n	800c780 <__gethex+0x18c>
 800c866:	f04f 0a03 	mov.w	sl, #3
 800c86a:	e7b9      	b.n	800c7e0 <__gethex+0x1ec>
 800c86c:	da09      	bge.n	800c882 <__gethex+0x28e>
 800c86e:	1bf7      	subs	r7, r6, r7
 800c870:	4621      	mov	r1, r4
 800c872:	463a      	mov	r2, r7
 800c874:	9802      	ldr	r0, [sp, #8]
 800c876:	f000 fc5d 	bl	800d134 <__lshift>
 800c87a:	4604      	mov	r4, r0
 800c87c:	1bed      	subs	r5, r5, r7
 800c87e:	f100 0914 	add.w	r9, r0, #20
 800c882:	f04f 0a00 	mov.w	sl, #0
 800c886:	e7b0      	b.n	800c7ea <__gethex+0x1f6>
 800c888:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c88c:	42a8      	cmp	r0, r5
 800c88e:	dd71      	ble.n	800c974 <__gethex+0x380>
 800c890:	1b45      	subs	r5, r0, r5
 800c892:	42ae      	cmp	r6, r5
 800c894:	dc34      	bgt.n	800c900 <__gethex+0x30c>
 800c896:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d028      	beq.n	800c8f0 <__gethex+0x2fc>
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	d02a      	beq.n	800c8f8 <__gethex+0x304>
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d115      	bne.n	800c8d2 <__gethex+0x2de>
 800c8a6:	42ae      	cmp	r6, r5
 800c8a8:	d113      	bne.n	800c8d2 <__gethex+0x2de>
 800c8aa:	2e01      	cmp	r6, #1
 800c8ac:	d10b      	bne.n	800c8c6 <__gethex+0x2d2>
 800c8ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c8b2:	9a06      	ldr	r2, [sp, #24]
 800c8b4:	2762      	movs	r7, #98	; 0x62
 800c8b6:	6013      	str	r3, [r2, #0]
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	6123      	str	r3, [r4, #16]
 800c8bc:	f8c9 3000 	str.w	r3, [r9]
 800c8c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8c2:	601c      	str	r4, [r3, #0]
 800c8c4:	e728      	b.n	800c718 <__gethex+0x124>
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	1e71      	subs	r1, r6, #1
 800c8ca:	f000 fe72 	bl	800d5b2 <__any_on>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	d1ed      	bne.n	800c8ae <__gethex+0x2ba>
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	9802      	ldr	r0, [sp, #8]
 800c8d6:	f000 fa15 	bl	800cd04 <_Bfree>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c8de:	2750      	movs	r7, #80	; 0x50
 800c8e0:	6013      	str	r3, [r2, #0]
 800c8e2:	e719      	b.n	800c718 <__gethex+0x124>
 800c8e4:	0800e60c 	.word	0x0800e60c
 800c8e8:	0800e591 	.word	0x0800e591
 800c8ec:	0800e5a2 	.word	0x0800e5a2
 800c8f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1ed      	bne.n	800c8d2 <__gethex+0x2de>
 800c8f6:	e7da      	b.n	800c8ae <__gethex+0x2ba>
 800c8f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1d7      	bne.n	800c8ae <__gethex+0x2ba>
 800c8fe:	e7e8      	b.n	800c8d2 <__gethex+0x2de>
 800c900:	1e6f      	subs	r7, r5, #1
 800c902:	f1ba 0f00 	cmp.w	sl, #0
 800c906:	d132      	bne.n	800c96e <__gethex+0x37a>
 800c908:	b127      	cbz	r7, 800c914 <__gethex+0x320>
 800c90a:	4639      	mov	r1, r7
 800c90c:	4620      	mov	r0, r4
 800c90e:	f000 fe50 	bl	800d5b2 <__any_on>
 800c912:	4682      	mov	sl, r0
 800c914:	2101      	movs	r1, #1
 800c916:	117b      	asrs	r3, r7, #5
 800c918:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c91c:	f007 071f 	and.w	r7, r7, #31
 800c920:	fa01 f707 	lsl.w	r7, r1, r7
 800c924:	421f      	tst	r7, r3
 800c926:	f04f 0702 	mov.w	r7, #2
 800c92a:	4629      	mov	r1, r5
 800c92c:	4620      	mov	r0, r4
 800c92e:	bf18      	it	ne
 800c930:	f04a 0a02 	orrne.w	sl, sl, #2
 800c934:	1b76      	subs	r6, r6, r5
 800c936:	f7ff fdf5 	bl	800c524 <rshift>
 800c93a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c93e:	f1ba 0f00 	cmp.w	sl, #0
 800c942:	d048      	beq.n	800c9d6 <__gethex+0x3e2>
 800c944:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c948:	2b02      	cmp	r3, #2
 800c94a:	d015      	beq.n	800c978 <__gethex+0x384>
 800c94c:	2b03      	cmp	r3, #3
 800c94e:	d017      	beq.n	800c980 <__gethex+0x38c>
 800c950:	2b01      	cmp	r3, #1
 800c952:	d109      	bne.n	800c968 <__gethex+0x374>
 800c954:	f01a 0f02 	tst.w	sl, #2
 800c958:	d006      	beq.n	800c968 <__gethex+0x374>
 800c95a:	f8d9 0000 	ldr.w	r0, [r9]
 800c95e:	ea4a 0a00 	orr.w	sl, sl, r0
 800c962:	f01a 0f01 	tst.w	sl, #1
 800c966:	d10e      	bne.n	800c986 <__gethex+0x392>
 800c968:	f047 0710 	orr.w	r7, r7, #16
 800c96c:	e033      	b.n	800c9d6 <__gethex+0x3e2>
 800c96e:	f04f 0a01 	mov.w	sl, #1
 800c972:	e7cf      	b.n	800c914 <__gethex+0x320>
 800c974:	2701      	movs	r7, #1
 800c976:	e7e2      	b.n	800c93e <__gethex+0x34a>
 800c978:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c97a:	f1c3 0301 	rsb	r3, r3, #1
 800c97e:	9315      	str	r3, [sp, #84]	; 0x54
 800c980:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c982:	2b00      	cmp	r3, #0
 800c984:	d0f0      	beq.n	800c968 <__gethex+0x374>
 800c986:	f04f 0c00 	mov.w	ip, #0
 800c98a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c98e:	f104 0314 	add.w	r3, r4, #20
 800c992:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c996:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c99a:	4618      	mov	r0, r3
 800c99c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c9a4:	d01c      	beq.n	800c9e0 <__gethex+0x3ec>
 800c9a6:	3201      	adds	r2, #1
 800c9a8:	6002      	str	r2, [r0, #0]
 800c9aa:	2f02      	cmp	r7, #2
 800c9ac:	f104 0314 	add.w	r3, r4, #20
 800c9b0:	d13d      	bne.n	800ca2e <__gethex+0x43a>
 800c9b2:	f8d8 2000 	ldr.w	r2, [r8]
 800c9b6:	3a01      	subs	r2, #1
 800c9b8:	42b2      	cmp	r2, r6
 800c9ba:	d10a      	bne.n	800c9d2 <__gethex+0x3de>
 800c9bc:	2201      	movs	r2, #1
 800c9be:	1171      	asrs	r1, r6, #5
 800c9c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9c4:	f006 061f 	and.w	r6, r6, #31
 800c9c8:	fa02 f606 	lsl.w	r6, r2, r6
 800c9cc:	421e      	tst	r6, r3
 800c9ce:	bf18      	it	ne
 800c9d0:	4617      	movne	r7, r2
 800c9d2:	f047 0720 	orr.w	r7, r7, #32
 800c9d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9d8:	601c      	str	r4, [r3, #0]
 800c9da:	9b06      	ldr	r3, [sp, #24]
 800c9dc:	601d      	str	r5, [r3, #0]
 800c9de:	e69b      	b.n	800c718 <__gethex+0x124>
 800c9e0:	4299      	cmp	r1, r3
 800c9e2:	f843 cc04 	str.w	ip, [r3, #-4]
 800c9e6:	d8d8      	bhi.n	800c99a <__gethex+0x3a6>
 800c9e8:	68a3      	ldr	r3, [r4, #8]
 800c9ea:	459b      	cmp	fp, r3
 800c9ec:	db17      	blt.n	800ca1e <__gethex+0x42a>
 800c9ee:	6861      	ldr	r1, [r4, #4]
 800c9f0:	9802      	ldr	r0, [sp, #8]
 800c9f2:	3101      	adds	r1, #1
 800c9f4:	f000 f946 	bl	800cc84 <_Balloc>
 800c9f8:	4681      	mov	r9, r0
 800c9fa:	b918      	cbnz	r0, 800ca04 <__gethex+0x410>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	2184      	movs	r1, #132	; 0x84
 800ca00:	4b19      	ldr	r3, [pc, #100]	; (800ca68 <__gethex+0x474>)
 800ca02:	e6ac      	b.n	800c75e <__gethex+0x16a>
 800ca04:	6922      	ldr	r2, [r4, #16]
 800ca06:	f104 010c 	add.w	r1, r4, #12
 800ca0a:	3202      	adds	r2, #2
 800ca0c:	0092      	lsls	r2, r2, #2
 800ca0e:	300c      	adds	r0, #12
 800ca10:	f7fc fec3 	bl	800979a <memcpy>
 800ca14:	4621      	mov	r1, r4
 800ca16:	9802      	ldr	r0, [sp, #8]
 800ca18:	f000 f974 	bl	800cd04 <_Bfree>
 800ca1c:	464c      	mov	r4, r9
 800ca1e:	6923      	ldr	r3, [r4, #16]
 800ca20:	1c5a      	adds	r2, r3, #1
 800ca22:	6122      	str	r2, [r4, #16]
 800ca24:	2201      	movs	r2, #1
 800ca26:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca2a:	615a      	str	r2, [r3, #20]
 800ca2c:	e7bd      	b.n	800c9aa <__gethex+0x3b6>
 800ca2e:	6922      	ldr	r2, [r4, #16]
 800ca30:	455a      	cmp	r2, fp
 800ca32:	dd0b      	ble.n	800ca4c <__gethex+0x458>
 800ca34:	2101      	movs	r1, #1
 800ca36:	4620      	mov	r0, r4
 800ca38:	f7ff fd74 	bl	800c524 <rshift>
 800ca3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca40:	3501      	adds	r5, #1
 800ca42:	42ab      	cmp	r3, r5
 800ca44:	f6ff aed5 	blt.w	800c7f2 <__gethex+0x1fe>
 800ca48:	2701      	movs	r7, #1
 800ca4a:	e7c2      	b.n	800c9d2 <__gethex+0x3de>
 800ca4c:	f016 061f 	ands.w	r6, r6, #31
 800ca50:	d0fa      	beq.n	800ca48 <__gethex+0x454>
 800ca52:	449a      	add	sl, r3
 800ca54:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ca58:	f000 fa0a 	bl	800ce70 <__hi0bits>
 800ca5c:	f1c6 0620 	rsb	r6, r6, #32
 800ca60:	42b0      	cmp	r0, r6
 800ca62:	dbe7      	blt.n	800ca34 <__gethex+0x440>
 800ca64:	e7f0      	b.n	800ca48 <__gethex+0x454>
 800ca66:	bf00      	nop
 800ca68:	0800e591 	.word	0x0800e591

0800ca6c <L_shift>:
 800ca6c:	f1c2 0208 	rsb	r2, r2, #8
 800ca70:	0092      	lsls	r2, r2, #2
 800ca72:	b570      	push	{r4, r5, r6, lr}
 800ca74:	f1c2 0620 	rsb	r6, r2, #32
 800ca78:	6843      	ldr	r3, [r0, #4]
 800ca7a:	6804      	ldr	r4, [r0, #0]
 800ca7c:	fa03 f506 	lsl.w	r5, r3, r6
 800ca80:	432c      	orrs	r4, r5
 800ca82:	40d3      	lsrs	r3, r2
 800ca84:	6004      	str	r4, [r0, #0]
 800ca86:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca8a:	4288      	cmp	r0, r1
 800ca8c:	d3f4      	bcc.n	800ca78 <L_shift+0xc>
 800ca8e:	bd70      	pop	{r4, r5, r6, pc}

0800ca90 <__match>:
 800ca90:	b530      	push	{r4, r5, lr}
 800ca92:	6803      	ldr	r3, [r0, #0]
 800ca94:	3301      	adds	r3, #1
 800ca96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca9a:	b914      	cbnz	r4, 800caa2 <__match+0x12>
 800ca9c:	6003      	str	r3, [r0, #0]
 800ca9e:	2001      	movs	r0, #1
 800caa0:	bd30      	pop	{r4, r5, pc}
 800caa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caa6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800caaa:	2d19      	cmp	r5, #25
 800caac:	bf98      	it	ls
 800caae:	3220      	addls	r2, #32
 800cab0:	42a2      	cmp	r2, r4
 800cab2:	d0f0      	beq.n	800ca96 <__match+0x6>
 800cab4:	2000      	movs	r0, #0
 800cab6:	e7f3      	b.n	800caa0 <__match+0x10>

0800cab8 <__hexnan>:
 800cab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cabc:	2500      	movs	r5, #0
 800cabe:	680b      	ldr	r3, [r1, #0]
 800cac0:	4682      	mov	sl, r0
 800cac2:	115e      	asrs	r6, r3, #5
 800cac4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cac8:	f013 031f 	ands.w	r3, r3, #31
 800cacc:	bf18      	it	ne
 800cace:	3604      	addne	r6, #4
 800cad0:	1f37      	subs	r7, r6, #4
 800cad2:	4690      	mov	r8, r2
 800cad4:	46b9      	mov	r9, r7
 800cad6:	463c      	mov	r4, r7
 800cad8:	46ab      	mov	fp, r5
 800cada:	b087      	sub	sp, #28
 800cadc:	6801      	ldr	r1, [r0, #0]
 800cade:	9301      	str	r3, [sp, #4]
 800cae0:	f846 5c04 	str.w	r5, [r6, #-4]
 800cae4:	9502      	str	r5, [sp, #8]
 800cae6:	784a      	ldrb	r2, [r1, #1]
 800cae8:	1c4b      	adds	r3, r1, #1
 800caea:	9303      	str	r3, [sp, #12]
 800caec:	b342      	cbz	r2, 800cb40 <__hexnan+0x88>
 800caee:	4610      	mov	r0, r2
 800caf0:	9105      	str	r1, [sp, #20]
 800caf2:	9204      	str	r2, [sp, #16]
 800caf4:	f7ff fd69 	bl	800c5ca <__hexdig_fun>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	d14f      	bne.n	800cb9c <__hexnan+0xe4>
 800cafc:	9a04      	ldr	r2, [sp, #16]
 800cafe:	9905      	ldr	r1, [sp, #20]
 800cb00:	2a20      	cmp	r2, #32
 800cb02:	d818      	bhi.n	800cb36 <__hexnan+0x7e>
 800cb04:	9b02      	ldr	r3, [sp, #8]
 800cb06:	459b      	cmp	fp, r3
 800cb08:	dd13      	ble.n	800cb32 <__hexnan+0x7a>
 800cb0a:	454c      	cmp	r4, r9
 800cb0c:	d206      	bcs.n	800cb1c <__hexnan+0x64>
 800cb0e:	2d07      	cmp	r5, #7
 800cb10:	dc04      	bgt.n	800cb1c <__hexnan+0x64>
 800cb12:	462a      	mov	r2, r5
 800cb14:	4649      	mov	r1, r9
 800cb16:	4620      	mov	r0, r4
 800cb18:	f7ff ffa8 	bl	800ca6c <L_shift>
 800cb1c:	4544      	cmp	r4, r8
 800cb1e:	d950      	bls.n	800cbc2 <__hexnan+0x10a>
 800cb20:	2300      	movs	r3, #0
 800cb22:	f1a4 0904 	sub.w	r9, r4, #4
 800cb26:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb2a:	461d      	mov	r5, r3
 800cb2c:	464c      	mov	r4, r9
 800cb2e:	f8cd b008 	str.w	fp, [sp, #8]
 800cb32:	9903      	ldr	r1, [sp, #12]
 800cb34:	e7d7      	b.n	800cae6 <__hexnan+0x2e>
 800cb36:	2a29      	cmp	r2, #41	; 0x29
 800cb38:	d156      	bne.n	800cbe8 <__hexnan+0x130>
 800cb3a:	3102      	adds	r1, #2
 800cb3c:	f8ca 1000 	str.w	r1, [sl]
 800cb40:	f1bb 0f00 	cmp.w	fp, #0
 800cb44:	d050      	beq.n	800cbe8 <__hexnan+0x130>
 800cb46:	454c      	cmp	r4, r9
 800cb48:	d206      	bcs.n	800cb58 <__hexnan+0xa0>
 800cb4a:	2d07      	cmp	r5, #7
 800cb4c:	dc04      	bgt.n	800cb58 <__hexnan+0xa0>
 800cb4e:	462a      	mov	r2, r5
 800cb50:	4649      	mov	r1, r9
 800cb52:	4620      	mov	r0, r4
 800cb54:	f7ff ff8a 	bl	800ca6c <L_shift>
 800cb58:	4544      	cmp	r4, r8
 800cb5a:	d934      	bls.n	800cbc6 <__hexnan+0x10e>
 800cb5c:	4623      	mov	r3, r4
 800cb5e:	f1a8 0204 	sub.w	r2, r8, #4
 800cb62:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb66:	429f      	cmp	r7, r3
 800cb68:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb6c:	d2f9      	bcs.n	800cb62 <__hexnan+0xaa>
 800cb6e:	1b3b      	subs	r3, r7, r4
 800cb70:	f023 0303 	bic.w	r3, r3, #3
 800cb74:	3304      	adds	r3, #4
 800cb76:	3401      	adds	r4, #1
 800cb78:	3e03      	subs	r6, #3
 800cb7a:	42b4      	cmp	r4, r6
 800cb7c:	bf88      	it	hi
 800cb7e:	2304      	movhi	r3, #4
 800cb80:	2200      	movs	r2, #0
 800cb82:	4443      	add	r3, r8
 800cb84:	f843 2b04 	str.w	r2, [r3], #4
 800cb88:	429f      	cmp	r7, r3
 800cb8a:	d2fb      	bcs.n	800cb84 <__hexnan+0xcc>
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	b91b      	cbnz	r3, 800cb98 <__hexnan+0xe0>
 800cb90:	4547      	cmp	r7, r8
 800cb92:	d127      	bne.n	800cbe4 <__hexnan+0x12c>
 800cb94:	2301      	movs	r3, #1
 800cb96:	603b      	str	r3, [r7, #0]
 800cb98:	2005      	movs	r0, #5
 800cb9a:	e026      	b.n	800cbea <__hexnan+0x132>
 800cb9c:	3501      	adds	r5, #1
 800cb9e:	2d08      	cmp	r5, #8
 800cba0:	f10b 0b01 	add.w	fp, fp, #1
 800cba4:	dd06      	ble.n	800cbb4 <__hexnan+0xfc>
 800cba6:	4544      	cmp	r4, r8
 800cba8:	d9c3      	bls.n	800cb32 <__hexnan+0x7a>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	2501      	movs	r5, #1
 800cbae:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbb2:	3c04      	subs	r4, #4
 800cbb4:	6822      	ldr	r2, [r4, #0]
 800cbb6:	f000 000f 	and.w	r0, r0, #15
 800cbba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cbbe:	6022      	str	r2, [r4, #0]
 800cbc0:	e7b7      	b.n	800cb32 <__hexnan+0x7a>
 800cbc2:	2508      	movs	r5, #8
 800cbc4:	e7b5      	b.n	800cb32 <__hexnan+0x7a>
 800cbc6:	9b01      	ldr	r3, [sp, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d0df      	beq.n	800cb8c <__hexnan+0xd4>
 800cbcc:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd0:	f1c3 0320 	rsb	r3, r3, #32
 800cbd4:	fa22 f303 	lsr.w	r3, r2, r3
 800cbd8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cbdc:	401a      	ands	r2, r3
 800cbde:	f846 2c04 	str.w	r2, [r6, #-4]
 800cbe2:	e7d3      	b.n	800cb8c <__hexnan+0xd4>
 800cbe4:	3f04      	subs	r7, #4
 800cbe6:	e7d1      	b.n	800cb8c <__hexnan+0xd4>
 800cbe8:	2004      	movs	r0, #4
 800cbea:	b007      	add	sp, #28
 800cbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cbf0 <_localeconv_r>:
 800cbf0:	4800      	ldr	r0, [pc, #0]	; (800cbf4 <_localeconv_r+0x4>)
 800cbf2:	4770      	bx	lr
 800cbf4:	20000164 	.word	0x20000164

0800cbf8 <_lseek_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	4608      	mov	r0, r1
 800cbfe:	4611      	mov	r1, r2
 800cc00:	2200      	movs	r2, #0
 800cc02:	4d05      	ldr	r5, [pc, #20]	; (800cc18 <_lseek_r+0x20>)
 800cc04:	602a      	str	r2, [r5, #0]
 800cc06:	461a      	mov	r2, r3
 800cc08:	f7f5 fa3a 	bl	8002080 <_lseek>
 800cc0c:	1c43      	adds	r3, r0, #1
 800cc0e:	d102      	bne.n	800cc16 <_lseek_r+0x1e>
 800cc10:	682b      	ldr	r3, [r5, #0]
 800cc12:	b103      	cbz	r3, 800cc16 <_lseek_r+0x1e>
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	bd38      	pop	{r3, r4, r5, pc}
 800cc18:	20003bac 	.word	0x20003bac

0800cc1c <malloc>:
 800cc1c:	4b02      	ldr	r3, [pc, #8]	; (800cc28 <malloc+0xc>)
 800cc1e:	4601      	mov	r1, r0
 800cc20:	6818      	ldr	r0, [r3, #0]
 800cc22:	f7fc bdd1 	b.w	80097c8 <_malloc_r>
 800cc26:	bf00      	nop
 800cc28:	2000000c 	.word	0x2000000c

0800cc2c <__ascii_mbtowc>:
 800cc2c:	b082      	sub	sp, #8
 800cc2e:	b901      	cbnz	r1, 800cc32 <__ascii_mbtowc+0x6>
 800cc30:	a901      	add	r1, sp, #4
 800cc32:	b142      	cbz	r2, 800cc46 <__ascii_mbtowc+0x1a>
 800cc34:	b14b      	cbz	r3, 800cc4a <__ascii_mbtowc+0x1e>
 800cc36:	7813      	ldrb	r3, [r2, #0]
 800cc38:	600b      	str	r3, [r1, #0]
 800cc3a:	7812      	ldrb	r2, [r2, #0]
 800cc3c:	1e10      	subs	r0, r2, #0
 800cc3e:	bf18      	it	ne
 800cc40:	2001      	movne	r0, #1
 800cc42:	b002      	add	sp, #8
 800cc44:	4770      	bx	lr
 800cc46:	4610      	mov	r0, r2
 800cc48:	e7fb      	b.n	800cc42 <__ascii_mbtowc+0x16>
 800cc4a:	f06f 0001 	mvn.w	r0, #1
 800cc4e:	e7f8      	b.n	800cc42 <__ascii_mbtowc+0x16>

0800cc50 <memchr>:
 800cc50:	4603      	mov	r3, r0
 800cc52:	b510      	push	{r4, lr}
 800cc54:	b2c9      	uxtb	r1, r1
 800cc56:	4402      	add	r2, r0
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	d101      	bne.n	800cc62 <memchr+0x12>
 800cc5e:	2000      	movs	r0, #0
 800cc60:	e003      	b.n	800cc6a <memchr+0x1a>
 800cc62:	7804      	ldrb	r4, [r0, #0]
 800cc64:	3301      	adds	r3, #1
 800cc66:	428c      	cmp	r4, r1
 800cc68:	d1f6      	bne.n	800cc58 <memchr+0x8>
 800cc6a:	bd10      	pop	{r4, pc}

0800cc6c <__malloc_lock>:
 800cc6c:	4801      	ldr	r0, [pc, #4]	; (800cc74 <__malloc_lock+0x8>)
 800cc6e:	f7fc bd92 	b.w	8009796 <__retarget_lock_acquire_recursive>
 800cc72:	bf00      	nop
 800cc74:	20003ba4 	.word	0x20003ba4

0800cc78 <__malloc_unlock>:
 800cc78:	4801      	ldr	r0, [pc, #4]	; (800cc80 <__malloc_unlock+0x8>)
 800cc7a:	f7fc bd8d 	b.w	8009798 <__retarget_lock_release_recursive>
 800cc7e:	bf00      	nop
 800cc80:	20003ba4 	.word	0x20003ba4

0800cc84 <_Balloc>:
 800cc84:	b570      	push	{r4, r5, r6, lr}
 800cc86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc88:	4604      	mov	r4, r0
 800cc8a:	460d      	mov	r5, r1
 800cc8c:	b976      	cbnz	r6, 800ccac <_Balloc+0x28>
 800cc8e:	2010      	movs	r0, #16
 800cc90:	f7ff ffc4 	bl	800cc1c <malloc>
 800cc94:	4602      	mov	r2, r0
 800cc96:	6260      	str	r0, [r4, #36]	; 0x24
 800cc98:	b920      	cbnz	r0, 800cca4 <_Balloc+0x20>
 800cc9a:	2166      	movs	r1, #102	; 0x66
 800cc9c:	4b17      	ldr	r3, [pc, #92]	; (800ccfc <_Balloc+0x78>)
 800cc9e:	4818      	ldr	r0, [pc, #96]	; (800cd00 <_Balloc+0x7c>)
 800cca0:	f7fe fcc0 	bl	800b624 <__assert_func>
 800cca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cca8:	6006      	str	r6, [r0, #0]
 800ccaa:	60c6      	str	r6, [r0, #12]
 800ccac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ccae:	68f3      	ldr	r3, [r6, #12]
 800ccb0:	b183      	cbz	r3, 800ccd4 <_Balloc+0x50>
 800ccb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ccba:	b9b8      	cbnz	r0, 800ccec <_Balloc+0x68>
 800ccbc:	2101      	movs	r1, #1
 800ccbe:	fa01 f605 	lsl.w	r6, r1, r5
 800ccc2:	1d72      	adds	r2, r6, #5
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	0092      	lsls	r2, r2, #2
 800ccc8:	f000 fc94 	bl	800d5f4 <_calloc_r>
 800cccc:	b160      	cbz	r0, 800cce8 <_Balloc+0x64>
 800ccce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccd2:	e00e      	b.n	800ccf2 <_Balloc+0x6e>
 800ccd4:	2221      	movs	r2, #33	; 0x21
 800ccd6:	2104      	movs	r1, #4
 800ccd8:	4620      	mov	r0, r4
 800ccda:	f000 fc8b 	bl	800d5f4 <_calloc_r>
 800ccde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cce0:	60f0      	str	r0, [r6, #12]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1e4      	bne.n	800ccb2 <_Balloc+0x2e>
 800cce8:	2000      	movs	r0, #0
 800ccea:	bd70      	pop	{r4, r5, r6, pc}
 800ccec:	6802      	ldr	r2, [r0, #0]
 800ccee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccf8:	e7f7      	b.n	800ccea <_Balloc+0x66>
 800ccfa:	bf00      	nop
 800ccfc:	0800e370 	.word	0x0800e370
 800cd00:	0800e620 	.word	0x0800e620

0800cd04 <_Bfree>:
 800cd04:	b570      	push	{r4, r5, r6, lr}
 800cd06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd08:	4605      	mov	r5, r0
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	b976      	cbnz	r6, 800cd2c <_Bfree+0x28>
 800cd0e:	2010      	movs	r0, #16
 800cd10:	f7ff ff84 	bl	800cc1c <malloc>
 800cd14:	4602      	mov	r2, r0
 800cd16:	6268      	str	r0, [r5, #36]	; 0x24
 800cd18:	b920      	cbnz	r0, 800cd24 <_Bfree+0x20>
 800cd1a:	218a      	movs	r1, #138	; 0x8a
 800cd1c:	4b08      	ldr	r3, [pc, #32]	; (800cd40 <_Bfree+0x3c>)
 800cd1e:	4809      	ldr	r0, [pc, #36]	; (800cd44 <_Bfree+0x40>)
 800cd20:	f7fe fc80 	bl	800b624 <__assert_func>
 800cd24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd28:	6006      	str	r6, [r0, #0]
 800cd2a:	60c6      	str	r6, [r0, #12]
 800cd2c:	b13c      	cbz	r4, 800cd3e <_Bfree+0x3a>
 800cd2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd30:	6862      	ldr	r2, [r4, #4]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd38:	6021      	str	r1, [r4, #0]
 800cd3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}
 800cd40:	0800e370 	.word	0x0800e370
 800cd44:	0800e620 	.word	0x0800e620

0800cd48 <__multadd>:
 800cd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd4c:	4698      	mov	r8, r3
 800cd4e:	460c      	mov	r4, r1
 800cd50:	2300      	movs	r3, #0
 800cd52:	690e      	ldr	r6, [r1, #16]
 800cd54:	4607      	mov	r7, r0
 800cd56:	f101 0014 	add.w	r0, r1, #20
 800cd5a:	6805      	ldr	r5, [r0, #0]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	b2a9      	uxth	r1, r5
 800cd60:	fb02 8101 	mla	r1, r2, r1, r8
 800cd64:	0c2d      	lsrs	r5, r5, #16
 800cd66:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cd6a:	fb02 c505 	mla	r5, r2, r5, ip
 800cd6e:	b289      	uxth	r1, r1
 800cd70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cd74:	429e      	cmp	r6, r3
 800cd76:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cd7a:	f840 1b04 	str.w	r1, [r0], #4
 800cd7e:	dcec      	bgt.n	800cd5a <__multadd+0x12>
 800cd80:	f1b8 0f00 	cmp.w	r8, #0
 800cd84:	d022      	beq.n	800cdcc <__multadd+0x84>
 800cd86:	68a3      	ldr	r3, [r4, #8]
 800cd88:	42b3      	cmp	r3, r6
 800cd8a:	dc19      	bgt.n	800cdc0 <__multadd+0x78>
 800cd8c:	6861      	ldr	r1, [r4, #4]
 800cd8e:	4638      	mov	r0, r7
 800cd90:	3101      	adds	r1, #1
 800cd92:	f7ff ff77 	bl	800cc84 <_Balloc>
 800cd96:	4605      	mov	r5, r0
 800cd98:	b928      	cbnz	r0, 800cda6 <__multadd+0x5e>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	21b5      	movs	r1, #181	; 0xb5
 800cd9e:	4b0d      	ldr	r3, [pc, #52]	; (800cdd4 <__multadd+0x8c>)
 800cda0:	480d      	ldr	r0, [pc, #52]	; (800cdd8 <__multadd+0x90>)
 800cda2:	f7fe fc3f 	bl	800b624 <__assert_func>
 800cda6:	6922      	ldr	r2, [r4, #16]
 800cda8:	f104 010c 	add.w	r1, r4, #12
 800cdac:	3202      	adds	r2, #2
 800cdae:	0092      	lsls	r2, r2, #2
 800cdb0:	300c      	adds	r0, #12
 800cdb2:	f7fc fcf2 	bl	800979a <memcpy>
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	4638      	mov	r0, r7
 800cdba:	f7ff ffa3 	bl	800cd04 <_Bfree>
 800cdbe:	462c      	mov	r4, r5
 800cdc0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cdc4:	3601      	adds	r6, #1
 800cdc6:	f8c3 8014 	str.w	r8, [r3, #20]
 800cdca:	6126      	str	r6, [r4, #16]
 800cdcc:	4620      	mov	r0, r4
 800cdce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd2:	bf00      	nop
 800cdd4:	0800e591 	.word	0x0800e591
 800cdd8:	0800e620 	.word	0x0800e620

0800cddc <__s2b>:
 800cddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cde0:	4615      	mov	r5, r2
 800cde2:	2209      	movs	r2, #9
 800cde4:	461f      	mov	r7, r3
 800cde6:	3308      	adds	r3, #8
 800cde8:	460c      	mov	r4, r1
 800cdea:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdee:	4606      	mov	r6, r0
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	db09      	blt.n	800ce0c <__s2b+0x30>
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	f7ff ff43 	bl	800cc84 <_Balloc>
 800cdfe:	b940      	cbnz	r0, 800ce12 <__s2b+0x36>
 800ce00:	4602      	mov	r2, r0
 800ce02:	21ce      	movs	r1, #206	; 0xce
 800ce04:	4b18      	ldr	r3, [pc, #96]	; (800ce68 <__s2b+0x8c>)
 800ce06:	4819      	ldr	r0, [pc, #100]	; (800ce6c <__s2b+0x90>)
 800ce08:	f7fe fc0c 	bl	800b624 <__assert_func>
 800ce0c:	0052      	lsls	r2, r2, #1
 800ce0e:	3101      	adds	r1, #1
 800ce10:	e7f0      	b.n	800cdf4 <__s2b+0x18>
 800ce12:	9b08      	ldr	r3, [sp, #32]
 800ce14:	2d09      	cmp	r5, #9
 800ce16:	6143      	str	r3, [r0, #20]
 800ce18:	f04f 0301 	mov.w	r3, #1
 800ce1c:	6103      	str	r3, [r0, #16]
 800ce1e:	dd16      	ble.n	800ce4e <__s2b+0x72>
 800ce20:	f104 0909 	add.w	r9, r4, #9
 800ce24:	46c8      	mov	r8, r9
 800ce26:	442c      	add	r4, r5
 800ce28:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce2c:	4601      	mov	r1, r0
 800ce2e:	220a      	movs	r2, #10
 800ce30:	4630      	mov	r0, r6
 800ce32:	3b30      	subs	r3, #48	; 0x30
 800ce34:	f7ff ff88 	bl	800cd48 <__multadd>
 800ce38:	45a0      	cmp	r8, r4
 800ce3a:	d1f5      	bne.n	800ce28 <__s2b+0x4c>
 800ce3c:	f1a5 0408 	sub.w	r4, r5, #8
 800ce40:	444c      	add	r4, r9
 800ce42:	1b2d      	subs	r5, r5, r4
 800ce44:	1963      	adds	r3, r4, r5
 800ce46:	42bb      	cmp	r3, r7
 800ce48:	db04      	blt.n	800ce54 <__s2b+0x78>
 800ce4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce4e:	2509      	movs	r5, #9
 800ce50:	340a      	adds	r4, #10
 800ce52:	e7f6      	b.n	800ce42 <__s2b+0x66>
 800ce54:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce58:	4601      	mov	r1, r0
 800ce5a:	220a      	movs	r2, #10
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	3b30      	subs	r3, #48	; 0x30
 800ce60:	f7ff ff72 	bl	800cd48 <__multadd>
 800ce64:	e7ee      	b.n	800ce44 <__s2b+0x68>
 800ce66:	bf00      	nop
 800ce68:	0800e591 	.word	0x0800e591
 800ce6c:	0800e620 	.word	0x0800e620

0800ce70 <__hi0bits>:
 800ce70:	0c02      	lsrs	r2, r0, #16
 800ce72:	0412      	lsls	r2, r2, #16
 800ce74:	4603      	mov	r3, r0
 800ce76:	b9ca      	cbnz	r2, 800ceac <__hi0bits+0x3c>
 800ce78:	0403      	lsls	r3, r0, #16
 800ce7a:	2010      	movs	r0, #16
 800ce7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ce80:	bf04      	itt	eq
 800ce82:	021b      	lsleq	r3, r3, #8
 800ce84:	3008      	addeq	r0, #8
 800ce86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ce8a:	bf04      	itt	eq
 800ce8c:	011b      	lsleq	r3, r3, #4
 800ce8e:	3004      	addeq	r0, #4
 800ce90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ce94:	bf04      	itt	eq
 800ce96:	009b      	lsleq	r3, r3, #2
 800ce98:	3002      	addeq	r0, #2
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	db05      	blt.n	800ceaa <__hi0bits+0x3a>
 800ce9e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cea2:	f100 0001 	add.w	r0, r0, #1
 800cea6:	bf08      	it	eq
 800cea8:	2020      	moveq	r0, #32
 800ceaa:	4770      	bx	lr
 800ceac:	2000      	movs	r0, #0
 800ceae:	e7e5      	b.n	800ce7c <__hi0bits+0xc>

0800ceb0 <__lo0bits>:
 800ceb0:	6803      	ldr	r3, [r0, #0]
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	f013 0007 	ands.w	r0, r3, #7
 800ceb8:	d00b      	beq.n	800ced2 <__lo0bits+0x22>
 800ceba:	07d9      	lsls	r1, r3, #31
 800cebc:	d422      	bmi.n	800cf04 <__lo0bits+0x54>
 800cebe:	0798      	lsls	r0, r3, #30
 800cec0:	bf49      	itett	mi
 800cec2:	085b      	lsrmi	r3, r3, #1
 800cec4:	089b      	lsrpl	r3, r3, #2
 800cec6:	2001      	movmi	r0, #1
 800cec8:	6013      	strmi	r3, [r2, #0]
 800ceca:	bf5c      	itt	pl
 800cecc:	2002      	movpl	r0, #2
 800cece:	6013      	strpl	r3, [r2, #0]
 800ced0:	4770      	bx	lr
 800ced2:	b299      	uxth	r1, r3
 800ced4:	b909      	cbnz	r1, 800ceda <__lo0bits+0x2a>
 800ced6:	2010      	movs	r0, #16
 800ced8:	0c1b      	lsrs	r3, r3, #16
 800ceda:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cede:	bf04      	itt	eq
 800cee0:	0a1b      	lsreq	r3, r3, #8
 800cee2:	3008      	addeq	r0, #8
 800cee4:	0719      	lsls	r1, r3, #28
 800cee6:	bf04      	itt	eq
 800cee8:	091b      	lsreq	r3, r3, #4
 800ceea:	3004      	addeq	r0, #4
 800ceec:	0799      	lsls	r1, r3, #30
 800ceee:	bf04      	itt	eq
 800cef0:	089b      	lsreq	r3, r3, #2
 800cef2:	3002      	addeq	r0, #2
 800cef4:	07d9      	lsls	r1, r3, #31
 800cef6:	d403      	bmi.n	800cf00 <__lo0bits+0x50>
 800cef8:	085b      	lsrs	r3, r3, #1
 800cefa:	f100 0001 	add.w	r0, r0, #1
 800cefe:	d003      	beq.n	800cf08 <__lo0bits+0x58>
 800cf00:	6013      	str	r3, [r2, #0]
 800cf02:	4770      	bx	lr
 800cf04:	2000      	movs	r0, #0
 800cf06:	4770      	bx	lr
 800cf08:	2020      	movs	r0, #32
 800cf0a:	4770      	bx	lr

0800cf0c <__i2b>:
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	460c      	mov	r4, r1
 800cf10:	2101      	movs	r1, #1
 800cf12:	f7ff feb7 	bl	800cc84 <_Balloc>
 800cf16:	4602      	mov	r2, r0
 800cf18:	b928      	cbnz	r0, 800cf26 <__i2b+0x1a>
 800cf1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cf1e:	4b04      	ldr	r3, [pc, #16]	; (800cf30 <__i2b+0x24>)
 800cf20:	4804      	ldr	r0, [pc, #16]	; (800cf34 <__i2b+0x28>)
 800cf22:	f7fe fb7f 	bl	800b624 <__assert_func>
 800cf26:	2301      	movs	r3, #1
 800cf28:	6144      	str	r4, [r0, #20]
 800cf2a:	6103      	str	r3, [r0, #16]
 800cf2c:	bd10      	pop	{r4, pc}
 800cf2e:	bf00      	nop
 800cf30:	0800e591 	.word	0x0800e591
 800cf34:	0800e620 	.word	0x0800e620

0800cf38 <__multiply>:
 800cf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf3c:	4614      	mov	r4, r2
 800cf3e:	690a      	ldr	r2, [r1, #16]
 800cf40:	6923      	ldr	r3, [r4, #16]
 800cf42:	460d      	mov	r5, r1
 800cf44:	429a      	cmp	r2, r3
 800cf46:	bfbe      	ittt	lt
 800cf48:	460b      	movlt	r3, r1
 800cf4a:	4625      	movlt	r5, r4
 800cf4c:	461c      	movlt	r4, r3
 800cf4e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cf52:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cf56:	68ab      	ldr	r3, [r5, #8]
 800cf58:	6869      	ldr	r1, [r5, #4]
 800cf5a:	eb0a 0709 	add.w	r7, sl, r9
 800cf5e:	42bb      	cmp	r3, r7
 800cf60:	b085      	sub	sp, #20
 800cf62:	bfb8      	it	lt
 800cf64:	3101      	addlt	r1, #1
 800cf66:	f7ff fe8d 	bl	800cc84 <_Balloc>
 800cf6a:	b930      	cbnz	r0, 800cf7a <__multiply+0x42>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	f240 115d 	movw	r1, #349	; 0x15d
 800cf72:	4b41      	ldr	r3, [pc, #260]	; (800d078 <__multiply+0x140>)
 800cf74:	4841      	ldr	r0, [pc, #260]	; (800d07c <__multiply+0x144>)
 800cf76:	f7fe fb55 	bl	800b624 <__assert_func>
 800cf7a:	f100 0614 	add.w	r6, r0, #20
 800cf7e:	4633      	mov	r3, r6
 800cf80:	2200      	movs	r2, #0
 800cf82:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cf86:	4543      	cmp	r3, r8
 800cf88:	d31e      	bcc.n	800cfc8 <__multiply+0x90>
 800cf8a:	f105 0c14 	add.w	ip, r5, #20
 800cf8e:	f104 0314 	add.w	r3, r4, #20
 800cf92:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cf96:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cf9a:	9202      	str	r2, [sp, #8]
 800cf9c:	ebac 0205 	sub.w	r2, ip, r5
 800cfa0:	3a15      	subs	r2, #21
 800cfa2:	f022 0203 	bic.w	r2, r2, #3
 800cfa6:	3204      	adds	r2, #4
 800cfa8:	f105 0115 	add.w	r1, r5, #21
 800cfac:	458c      	cmp	ip, r1
 800cfae:	bf38      	it	cc
 800cfb0:	2204      	movcc	r2, #4
 800cfb2:	9201      	str	r2, [sp, #4]
 800cfb4:	9a02      	ldr	r2, [sp, #8]
 800cfb6:	9303      	str	r3, [sp, #12]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d808      	bhi.n	800cfce <__multiply+0x96>
 800cfbc:	2f00      	cmp	r7, #0
 800cfbe:	dc55      	bgt.n	800d06c <__multiply+0x134>
 800cfc0:	6107      	str	r7, [r0, #16]
 800cfc2:	b005      	add	sp, #20
 800cfc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc8:	f843 2b04 	str.w	r2, [r3], #4
 800cfcc:	e7db      	b.n	800cf86 <__multiply+0x4e>
 800cfce:	f8b3 a000 	ldrh.w	sl, [r3]
 800cfd2:	f1ba 0f00 	cmp.w	sl, #0
 800cfd6:	d020      	beq.n	800d01a <__multiply+0xe2>
 800cfd8:	46b1      	mov	r9, r6
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f105 0e14 	add.w	lr, r5, #20
 800cfe0:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cfe4:	f8d9 b000 	ldr.w	fp, [r9]
 800cfe8:	b2a1      	uxth	r1, r4
 800cfea:	fa1f fb8b 	uxth.w	fp, fp
 800cfee:	fb0a b101 	mla	r1, sl, r1, fp
 800cff2:	4411      	add	r1, r2
 800cff4:	f8d9 2000 	ldr.w	r2, [r9]
 800cff8:	0c24      	lsrs	r4, r4, #16
 800cffa:	0c12      	lsrs	r2, r2, #16
 800cffc:	fb0a 2404 	mla	r4, sl, r4, r2
 800d000:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d004:	b289      	uxth	r1, r1
 800d006:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d00a:	45f4      	cmp	ip, lr
 800d00c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d010:	f849 1b04 	str.w	r1, [r9], #4
 800d014:	d8e4      	bhi.n	800cfe0 <__multiply+0xa8>
 800d016:	9901      	ldr	r1, [sp, #4]
 800d018:	5072      	str	r2, [r6, r1]
 800d01a:	9a03      	ldr	r2, [sp, #12]
 800d01c:	3304      	adds	r3, #4
 800d01e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d022:	f1b9 0f00 	cmp.w	r9, #0
 800d026:	d01f      	beq.n	800d068 <__multiply+0x130>
 800d028:	46b6      	mov	lr, r6
 800d02a:	f04f 0a00 	mov.w	sl, #0
 800d02e:	6834      	ldr	r4, [r6, #0]
 800d030:	f105 0114 	add.w	r1, r5, #20
 800d034:	880a      	ldrh	r2, [r1, #0]
 800d036:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d03a:	b2a4      	uxth	r4, r4
 800d03c:	fb09 b202 	mla	r2, r9, r2, fp
 800d040:	4492      	add	sl, r2
 800d042:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d046:	f84e 4b04 	str.w	r4, [lr], #4
 800d04a:	f851 4b04 	ldr.w	r4, [r1], #4
 800d04e:	f8be 2000 	ldrh.w	r2, [lr]
 800d052:	0c24      	lsrs	r4, r4, #16
 800d054:	fb09 2404 	mla	r4, r9, r4, r2
 800d058:	458c      	cmp	ip, r1
 800d05a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d05e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d062:	d8e7      	bhi.n	800d034 <__multiply+0xfc>
 800d064:	9a01      	ldr	r2, [sp, #4]
 800d066:	50b4      	str	r4, [r6, r2]
 800d068:	3604      	adds	r6, #4
 800d06a:	e7a3      	b.n	800cfb4 <__multiply+0x7c>
 800d06c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1a5      	bne.n	800cfc0 <__multiply+0x88>
 800d074:	3f01      	subs	r7, #1
 800d076:	e7a1      	b.n	800cfbc <__multiply+0x84>
 800d078:	0800e591 	.word	0x0800e591
 800d07c:	0800e620 	.word	0x0800e620

0800d080 <__pow5mult>:
 800d080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d084:	4615      	mov	r5, r2
 800d086:	f012 0203 	ands.w	r2, r2, #3
 800d08a:	4606      	mov	r6, r0
 800d08c:	460f      	mov	r7, r1
 800d08e:	d007      	beq.n	800d0a0 <__pow5mult+0x20>
 800d090:	4c25      	ldr	r4, [pc, #148]	; (800d128 <__pow5mult+0xa8>)
 800d092:	3a01      	subs	r2, #1
 800d094:	2300      	movs	r3, #0
 800d096:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d09a:	f7ff fe55 	bl	800cd48 <__multadd>
 800d09e:	4607      	mov	r7, r0
 800d0a0:	10ad      	asrs	r5, r5, #2
 800d0a2:	d03d      	beq.n	800d120 <__pow5mult+0xa0>
 800d0a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d0a6:	b97c      	cbnz	r4, 800d0c8 <__pow5mult+0x48>
 800d0a8:	2010      	movs	r0, #16
 800d0aa:	f7ff fdb7 	bl	800cc1c <malloc>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	6270      	str	r0, [r6, #36]	; 0x24
 800d0b2:	b928      	cbnz	r0, 800d0c0 <__pow5mult+0x40>
 800d0b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d0b8:	4b1c      	ldr	r3, [pc, #112]	; (800d12c <__pow5mult+0xac>)
 800d0ba:	481d      	ldr	r0, [pc, #116]	; (800d130 <__pow5mult+0xb0>)
 800d0bc:	f7fe fab2 	bl	800b624 <__assert_func>
 800d0c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0c4:	6004      	str	r4, [r0, #0]
 800d0c6:	60c4      	str	r4, [r0, #12]
 800d0c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d0cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0d0:	b94c      	cbnz	r4, 800d0e6 <__pow5mult+0x66>
 800d0d2:	f240 2171 	movw	r1, #625	; 0x271
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f7ff ff18 	bl	800cf0c <__i2b>
 800d0dc:	2300      	movs	r3, #0
 800d0de:	4604      	mov	r4, r0
 800d0e0:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0e4:	6003      	str	r3, [r0, #0]
 800d0e6:	f04f 0900 	mov.w	r9, #0
 800d0ea:	07eb      	lsls	r3, r5, #31
 800d0ec:	d50a      	bpl.n	800d104 <__pow5mult+0x84>
 800d0ee:	4639      	mov	r1, r7
 800d0f0:	4622      	mov	r2, r4
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f7ff ff20 	bl	800cf38 <__multiply>
 800d0f8:	4680      	mov	r8, r0
 800d0fa:	4639      	mov	r1, r7
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	f7ff fe01 	bl	800cd04 <_Bfree>
 800d102:	4647      	mov	r7, r8
 800d104:	106d      	asrs	r5, r5, #1
 800d106:	d00b      	beq.n	800d120 <__pow5mult+0xa0>
 800d108:	6820      	ldr	r0, [r4, #0]
 800d10a:	b938      	cbnz	r0, 800d11c <__pow5mult+0x9c>
 800d10c:	4622      	mov	r2, r4
 800d10e:	4621      	mov	r1, r4
 800d110:	4630      	mov	r0, r6
 800d112:	f7ff ff11 	bl	800cf38 <__multiply>
 800d116:	6020      	str	r0, [r4, #0]
 800d118:	f8c0 9000 	str.w	r9, [r0]
 800d11c:	4604      	mov	r4, r0
 800d11e:	e7e4      	b.n	800d0ea <__pow5mult+0x6a>
 800d120:	4638      	mov	r0, r7
 800d122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d126:	bf00      	nop
 800d128:	0800e770 	.word	0x0800e770
 800d12c:	0800e370 	.word	0x0800e370
 800d130:	0800e620 	.word	0x0800e620

0800d134 <__lshift>:
 800d134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d138:	460c      	mov	r4, r1
 800d13a:	4607      	mov	r7, r0
 800d13c:	4691      	mov	r9, r2
 800d13e:	6923      	ldr	r3, [r4, #16]
 800d140:	6849      	ldr	r1, [r1, #4]
 800d142:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d146:	68a3      	ldr	r3, [r4, #8]
 800d148:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d14c:	f108 0601 	add.w	r6, r8, #1
 800d150:	42b3      	cmp	r3, r6
 800d152:	db0b      	blt.n	800d16c <__lshift+0x38>
 800d154:	4638      	mov	r0, r7
 800d156:	f7ff fd95 	bl	800cc84 <_Balloc>
 800d15a:	4605      	mov	r5, r0
 800d15c:	b948      	cbnz	r0, 800d172 <__lshift+0x3e>
 800d15e:	4602      	mov	r2, r0
 800d160:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d164:	4b27      	ldr	r3, [pc, #156]	; (800d204 <__lshift+0xd0>)
 800d166:	4828      	ldr	r0, [pc, #160]	; (800d208 <__lshift+0xd4>)
 800d168:	f7fe fa5c 	bl	800b624 <__assert_func>
 800d16c:	3101      	adds	r1, #1
 800d16e:	005b      	lsls	r3, r3, #1
 800d170:	e7ee      	b.n	800d150 <__lshift+0x1c>
 800d172:	2300      	movs	r3, #0
 800d174:	f100 0114 	add.w	r1, r0, #20
 800d178:	f100 0210 	add.w	r2, r0, #16
 800d17c:	4618      	mov	r0, r3
 800d17e:	4553      	cmp	r3, sl
 800d180:	db33      	blt.n	800d1ea <__lshift+0xb6>
 800d182:	6920      	ldr	r0, [r4, #16]
 800d184:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d188:	f104 0314 	add.w	r3, r4, #20
 800d18c:	f019 091f 	ands.w	r9, r9, #31
 800d190:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d194:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d198:	d02b      	beq.n	800d1f2 <__lshift+0xbe>
 800d19a:	468a      	mov	sl, r1
 800d19c:	2200      	movs	r2, #0
 800d19e:	f1c9 0e20 	rsb	lr, r9, #32
 800d1a2:	6818      	ldr	r0, [r3, #0]
 800d1a4:	fa00 f009 	lsl.w	r0, r0, r9
 800d1a8:	4302      	orrs	r2, r0
 800d1aa:	f84a 2b04 	str.w	r2, [sl], #4
 800d1ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1b2:	459c      	cmp	ip, r3
 800d1b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1b8:	d8f3      	bhi.n	800d1a2 <__lshift+0x6e>
 800d1ba:	ebac 0304 	sub.w	r3, ip, r4
 800d1be:	3b15      	subs	r3, #21
 800d1c0:	f023 0303 	bic.w	r3, r3, #3
 800d1c4:	3304      	adds	r3, #4
 800d1c6:	f104 0015 	add.w	r0, r4, #21
 800d1ca:	4584      	cmp	ip, r0
 800d1cc:	bf38      	it	cc
 800d1ce:	2304      	movcc	r3, #4
 800d1d0:	50ca      	str	r2, [r1, r3]
 800d1d2:	b10a      	cbz	r2, 800d1d8 <__lshift+0xa4>
 800d1d4:	f108 0602 	add.w	r6, r8, #2
 800d1d8:	3e01      	subs	r6, #1
 800d1da:	4638      	mov	r0, r7
 800d1dc:	4621      	mov	r1, r4
 800d1de:	612e      	str	r6, [r5, #16]
 800d1e0:	f7ff fd90 	bl	800cd04 <_Bfree>
 800d1e4:	4628      	mov	r0, r5
 800d1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	e7c5      	b.n	800d17e <__lshift+0x4a>
 800d1f2:	3904      	subs	r1, #4
 800d1f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1f8:	459c      	cmp	ip, r3
 800d1fa:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1fe:	d8f9      	bhi.n	800d1f4 <__lshift+0xc0>
 800d200:	e7ea      	b.n	800d1d8 <__lshift+0xa4>
 800d202:	bf00      	nop
 800d204:	0800e591 	.word	0x0800e591
 800d208:	0800e620 	.word	0x0800e620

0800d20c <__mcmp>:
 800d20c:	4603      	mov	r3, r0
 800d20e:	690a      	ldr	r2, [r1, #16]
 800d210:	6900      	ldr	r0, [r0, #16]
 800d212:	b530      	push	{r4, r5, lr}
 800d214:	1a80      	subs	r0, r0, r2
 800d216:	d10d      	bne.n	800d234 <__mcmp+0x28>
 800d218:	3314      	adds	r3, #20
 800d21a:	3114      	adds	r1, #20
 800d21c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d220:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d224:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d228:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d22c:	4295      	cmp	r5, r2
 800d22e:	d002      	beq.n	800d236 <__mcmp+0x2a>
 800d230:	d304      	bcc.n	800d23c <__mcmp+0x30>
 800d232:	2001      	movs	r0, #1
 800d234:	bd30      	pop	{r4, r5, pc}
 800d236:	42a3      	cmp	r3, r4
 800d238:	d3f4      	bcc.n	800d224 <__mcmp+0x18>
 800d23a:	e7fb      	b.n	800d234 <__mcmp+0x28>
 800d23c:	f04f 30ff 	mov.w	r0, #4294967295
 800d240:	e7f8      	b.n	800d234 <__mcmp+0x28>
	...

0800d244 <__mdiff>:
 800d244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d248:	460c      	mov	r4, r1
 800d24a:	4606      	mov	r6, r0
 800d24c:	4611      	mov	r1, r2
 800d24e:	4620      	mov	r0, r4
 800d250:	4692      	mov	sl, r2
 800d252:	f7ff ffdb 	bl	800d20c <__mcmp>
 800d256:	1e05      	subs	r5, r0, #0
 800d258:	d111      	bne.n	800d27e <__mdiff+0x3a>
 800d25a:	4629      	mov	r1, r5
 800d25c:	4630      	mov	r0, r6
 800d25e:	f7ff fd11 	bl	800cc84 <_Balloc>
 800d262:	4602      	mov	r2, r0
 800d264:	b928      	cbnz	r0, 800d272 <__mdiff+0x2e>
 800d266:	f240 2132 	movw	r1, #562	; 0x232
 800d26a:	4b3c      	ldr	r3, [pc, #240]	; (800d35c <__mdiff+0x118>)
 800d26c:	483c      	ldr	r0, [pc, #240]	; (800d360 <__mdiff+0x11c>)
 800d26e:	f7fe f9d9 	bl	800b624 <__assert_func>
 800d272:	2301      	movs	r3, #1
 800d274:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d278:	4610      	mov	r0, r2
 800d27a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d27e:	bfa4      	itt	ge
 800d280:	4653      	movge	r3, sl
 800d282:	46a2      	movge	sl, r4
 800d284:	4630      	mov	r0, r6
 800d286:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d28a:	bfa6      	itte	ge
 800d28c:	461c      	movge	r4, r3
 800d28e:	2500      	movge	r5, #0
 800d290:	2501      	movlt	r5, #1
 800d292:	f7ff fcf7 	bl	800cc84 <_Balloc>
 800d296:	4602      	mov	r2, r0
 800d298:	b918      	cbnz	r0, 800d2a2 <__mdiff+0x5e>
 800d29a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d29e:	4b2f      	ldr	r3, [pc, #188]	; (800d35c <__mdiff+0x118>)
 800d2a0:	e7e4      	b.n	800d26c <__mdiff+0x28>
 800d2a2:	f100 0814 	add.w	r8, r0, #20
 800d2a6:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d2aa:	60c5      	str	r5, [r0, #12]
 800d2ac:	f04f 0c00 	mov.w	ip, #0
 800d2b0:	f10a 0514 	add.w	r5, sl, #20
 800d2b4:	f10a 0010 	add.w	r0, sl, #16
 800d2b8:	46c2      	mov	sl, r8
 800d2ba:	6926      	ldr	r6, [r4, #16]
 800d2bc:	f104 0914 	add.w	r9, r4, #20
 800d2c0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d2c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d2c8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d2cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2d0:	fa1f f18b 	uxth.w	r1, fp
 800d2d4:	4461      	add	r1, ip
 800d2d6:	fa1f fc83 	uxth.w	ip, r3
 800d2da:	0c1b      	lsrs	r3, r3, #16
 800d2dc:	eba1 010c 	sub.w	r1, r1, ip
 800d2e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d2e4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d2e8:	b289      	uxth	r1, r1
 800d2ea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d2ee:	454e      	cmp	r6, r9
 800d2f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d2f4:	f84a 3b04 	str.w	r3, [sl], #4
 800d2f8:	d8e6      	bhi.n	800d2c8 <__mdiff+0x84>
 800d2fa:	1b33      	subs	r3, r6, r4
 800d2fc:	3b15      	subs	r3, #21
 800d2fe:	f023 0303 	bic.w	r3, r3, #3
 800d302:	3415      	adds	r4, #21
 800d304:	3304      	adds	r3, #4
 800d306:	42a6      	cmp	r6, r4
 800d308:	bf38      	it	cc
 800d30a:	2304      	movcc	r3, #4
 800d30c:	441d      	add	r5, r3
 800d30e:	4443      	add	r3, r8
 800d310:	461e      	mov	r6, r3
 800d312:	462c      	mov	r4, r5
 800d314:	4574      	cmp	r4, lr
 800d316:	d30e      	bcc.n	800d336 <__mdiff+0xf2>
 800d318:	f10e 0103 	add.w	r1, lr, #3
 800d31c:	1b49      	subs	r1, r1, r5
 800d31e:	f021 0103 	bic.w	r1, r1, #3
 800d322:	3d03      	subs	r5, #3
 800d324:	45ae      	cmp	lr, r5
 800d326:	bf38      	it	cc
 800d328:	2100      	movcc	r1, #0
 800d32a:	4419      	add	r1, r3
 800d32c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d330:	b18b      	cbz	r3, 800d356 <__mdiff+0x112>
 800d332:	6117      	str	r7, [r2, #16]
 800d334:	e7a0      	b.n	800d278 <__mdiff+0x34>
 800d336:	f854 8b04 	ldr.w	r8, [r4], #4
 800d33a:	fa1f f188 	uxth.w	r1, r8
 800d33e:	4461      	add	r1, ip
 800d340:	1408      	asrs	r0, r1, #16
 800d342:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d346:	b289      	uxth	r1, r1
 800d348:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d34c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d350:	f846 1b04 	str.w	r1, [r6], #4
 800d354:	e7de      	b.n	800d314 <__mdiff+0xd0>
 800d356:	3f01      	subs	r7, #1
 800d358:	e7e8      	b.n	800d32c <__mdiff+0xe8>
 800d35a:	bf00      	nop
 800d35c:	0800e591 	.word	0x0800e591
 800d360:	0800e620 	.word	0x0800e620

0800d364 <__ulp>:
 800d364:	4b11      	ldr	r3, [pc, #68]	; (800d3ac <__ulp+0x48>)
 800d366:	400b      	ands	r3, r1
 800d368:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	dd02      	ble.n	800d376 <__ulp+0x12>
 800d370:	2000      	movs	r0, #0
 800d372:	4619      	mov	r1, r3
 800d374:	4770      	bx	lr
 800d376:	425b      	negs	r3, r3
 800d378:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d37c:	f04f 0000 	mov.w	r0, #0
 800d380:	f04f 0100 	mov.w	r1, #0
 800d384:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d388:	da04      	bge.n	800d394 <__ulp+0x30>
 800d38a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d38e:	fa43 f102 	asr.w	r1, r3, r2
 800d392:	4770      	bx	lr
 800d394:	f1a2 0314 	sub.w	r3, r2, #20
 800d398:	2b1e      	cmp	r3, #30
 800d39a:	bfd6      	itet	le
 800d39c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d3a0:	2301      	movgt	r3, #1
 800d3a2:	fa22 f303 	lsrle.w	r3, r2, r3
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	7ff00000 	.word	0x7ff00000

0800d3b0 <__b2d>:
 800d3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b4:	6907      	ldr	r7, [r0, #16]
 800d3b6:	f100 0914 	add.w	r9, r0, #20
 800d3ba:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d3be:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d3c2:	f1a7 0804 	sub.w	r8, r7, #4
 800d3c6:	4630      	mov	r0, r6
 800d3c8:	f7ff fd52 	bl	800ce70 <__hi0bits>
 800d3cc:	f1c0 0320 	rsb	r3, r0, #32
 800d3d0:	280a      	cmp	r0, #10
 800d3d2:	600b      	str	r3, [r1, #0]
 800d3d4:	491f      	ldr	r1, [pc, #124]	; (800d454 <__b2d+0xa4>)
 800d3d6:	dc17      	bgt.n	800d408 <__b2d+0x58>
 800d3d8:	45c1      	cmp	r9, r8
 800d3da:	bf28      	it	cs
 800d3dc:	2200      	movcs	r2, #0
 800d3de:	f1c0 0c0b 	rsb	ip, r0, #11
 800d3e2:	fa26 f30c 	lsr.w	r3, r6, ip
 800d3e6:	bf38      	it	cc
 800d3e8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d3ec:	ea43 0501 	orr.w	r5, r3, r1
 800d3f0:	f100 0315 	add.w	r3, r0, #21
 800d3f4:	fa06 f303 	lsl.w	r3, r6, r3
 800d3f8:	fa22 f20c 	lsr.w	r2, r2, ip
 800d3fc:	ea43 0402 	orr.w	r4, r3, r2
 800d400:	4620      	mov	r0, r4
 800d402:	4629      	mov	r1, r5
 800d404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d408:	45c1      	cmp	r9, r8
 800d40a:	bf2e      	itee	cs
 800d40c:	2200      	movcs	r2, #0
 800d40e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d412:	f1a7 0808 	subcc.w	r8, r7, #8
 800d416:	f1b0 030b 	subs.w	r3, r0, #11
 800d41a:	d016      	beq.n	800d44a <__b2d+0x9a>
 800d41c:	f1c3 0720 	rsb	r7, r3, #32
 800d420:	fa22 f107 	lsr.w	r1, r2, r7
 800d424:	45c8      	cmp	r8, r9
 800d426:	fa06 f603 	lsl.w	r6, r6, r3
 800d42a:	ea46 0601 	orr.w	r6, r6, r1
 800d42e:	bf94      	ite	ls
 800d430:	2100      	movls	r1, #0
 800d432:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d436:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d43a:	fa02 f003 	lsl.w	r0, r2, r3
 800d43e:	40f9      	lsrs	r1, r7
 800d440:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d444:	ea40 0401 	orr.w	r4, r0, r1
 800d448:	e7da      	b.n	800d400 <__b2d+0x50>
 800d44a:	4614      	mov	r4, r2
 800d44c:	ea46 0501 	orr.w	r5, r6, r1
 800d450:	e7d6      	b.n	800d400 <__b2d+0x50>
 800d452:	bf00      	nop
 800d454:	3ff00000 	.word	0x3ff00000

0800d458 <__d2b>:
 800d458:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d45c:	2101      	movs	r1, #1
 800d45e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d462:	4690      	mov	r8, r2
 800d464:	461d      	mov	r5, r3
 800d466:	f7ff fc0d 	bl	800cc84 <_Balloc>
 800d46a:	4604      	mov	r4, r0
 800d46c:	b930      	cbnz	r0, 800d47c <__d2b+0x24>
 800d46e:	4602      	mov	r2, r0
 800d470:	f240 310a 	movw	r1, #778	; 0x30a
 800d474:	4b24      	ldr	r3, [pc, #144]	; (800d508 <__d2b+0xb0>)
 800d476:	4825      	ldr	r0, [pc, #148]	; (800d50c <__d2b+0xb4>)
 800d478:	f7fe f8d4 	bl	800b624 <__assert_func>
 800d47c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d480:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d484:	bb2d      	cbnz	r5, 800d4d2 <__d2b+0x7a>
 800d486:	9301      	str	r3, [sp, #4]
 800d488:	f1b8 0300 	subs.w	r3, r8, #0
 800d48c:	d026      	beq.n	800d4dc <__d2b+0x84>
 800d48e:	4668      	mov	r0, sp
 800d490:	9300      	str	r3, [sp, #0]
 800d492:	f7ff fd0d 	bl	800ceb0 <__lo0bits>
 800d496:	9900      	ldr	r1, [sp, #0]
 800d498:	b1f0      	cbz	r0, 800d4d8 <__d2b+0x80>
 800d49a:	9a01      	ldr	r2, [sp, #4]
 800d49c:	f1c0 0320 	rsb	r3, r0, #32
 800d4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4a4:	430b      	orrs	r3, r1
 800d4a6:	40c2      	lsrs	r2, r0
 800d4a8:	6163      	str	r3, [r4, #20]
 800d4aa:	9201      	str	r2, [sp, #4]
 800d4ac:	9b01      	ldr	r3, [sp, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	bf14      	ite	ne
 800d4b2:	2102      	movne	r1, #2
 800d4b4:	2101      	moveq	r1, #1
 800d4b6:	61a3      	str	r3, [r4, #24]
 800d4b8:	6121      	str	r1, [r4, #16]
 800d4ba:	b1c5      	cbz	r5, 800d4ee <__d2b+0x96>
 800d4bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d4c0:	4405      	add	r5, r0
 800d4c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4c6:	603d      	str	r5, [r7, #0]
 800d4c8:	6030      	str	r0, [r6, #0]
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	b002      	add	sp, #8
 800d4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4d6:	e7d6      	b.n	800d486 <__d2b+0x2e>
 800d4d8:	6161      	str	r1, [r4, #20]
 800d4da:	e7e7      	b.n	800d4ac <__d2b+0x54>
 800d4dc:	a801      	add	r0, sp, #4
 800d4de:	f7ff fce7 	bl	800ceb0 <__lo0bits>
 800d4e2:	2101      	movs	r1, #1
 800d4e4:	9b01      	ldr	r3, [sp, #4]
 800d4e6:	6121      	str	r1, [r4, #16]
 800d4e8:	6163      	str	r3, [r4, #20]
 800d4ea:	3020      	adds	r0, #32
 800d4ec:	e7e5      	b.n	800d4ba <__d2b+0x62>
 800d4ee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d4f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4f6:	6038      	str	r0, [r7, #0]
 800d4f8:	6918      	ldr	r0, [r3, #16]
 800d4fa:	f7ff fcb9 	bl	800ce70 <__hi0bits>
 800d4fe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d502:	6031      	str	r1, [r6, #0]
 800d504:	e7e1      	b.n	800d4ca <__d2b+0x72>
 800d506:	bf00      	nop
 800d508:	0800e591 	.word	0x0800e591
 800d50c:	0800e620 	.word	0x0800e620

0800d510 <__ratio>:
 800d510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	4688      	mov	r8, r1
 800d516:	4669      	mov	r1, sp
 800d518:	4681      	mov	r9, r0
 800d51a:	f7ff ff49 	bl	800d3b0 <__b2d>
 800d51e:	460f      	mov	r7, r1
 800d520:	4604      	mov	r4, r0
 800d522:	460d      	mov	r5, r1
 800d524:	4640      	mov	r0, r8
 800d526:	a901      	add	r1, sp, #4
 800d528:	f7ff ff42 	bl	800d3b0 <__b2d>
 800d52c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d530:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d534:	468b      	mov	fp, r1
 800d536:	eba3 0c02 	sub.w	ip, r3, r2
 800d53a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d53e:	1a9b      	subs	r3, r3, r2
 800d540:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d544:	2b00      	cmp	r3, #0
 800d546:	bfd5      	itete	le
 800d548:	460a      	movle	r2, r1
 800d54a:	462a      	movgt	r2, r5
 800d54c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d550:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d554:	bfd8      	it	le
 800d556:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d55a:	465b      	mov	r3, fp
 800d55c:	4602      	mov	r2, r0
 800d55e:	4639      	mov	r1, r7
 800d560:	4620      	mov	r0, r4
 800d562:	f7f3 f8e3 	bl	800072c <__aeabi_ddiv>
 800d566:	b003      	add	sp, #12
 800d568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d56c <__copybits>:
 800d56c:	3901      	subs	r1, #1
 800d56e:	b570      	push	{r4, r5, r6, lr}
 800d570:	1149      	asrs	r1, r1, #5
 800d572:	6914      	ldr	r4, [r2, #16]
 800d574:	3101      	adds	r1, #1
 800d576:	f102 0314 	add.w	r3, r2, #20
 800d57a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d57e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d582:	1f05      	subs	r5, r0, #4
 800d584:	42a3      	cmp	r3, r4
 800d586:	d30c      	bcc.n	800d5a2 <__copybits+0x36>
 800d588:	1aa3      	subs	r3, r4, r2
 800d58a:	3b11      	subs	r3, #17
 800d58c:	f023 0303 	bic.w	r3, r3, #3
 800d590:	3211      	adds	r2, #17
 800d592:	42a2      	cmp	r2, r4
 800d594:	bf88      	it	hi
 800d596:	2300      	movhi	r3, #0
 800d598:	4418      	add	r0, r3
 800d59a:	2300      	movs	r3, #0
 800d59c:	4288      	cmp	r0, r1
 800d59e:	d305      	bcc.n	800d5ac <__copybits+0x40>
 800d5a0:	bd70      	pop	{r4, r5, r6, pc}
 800d5a2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d5a6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d5aa:	e7eb      	b.n	800d584 <__copybits+0x18>
 800d5ac:	f840 3b04 	str.w	r3, [r0], #4
 800d5b0:	e7f4      	b.n	800d59c <__copybits+0x30>

0800d5b2 <__any_on>:
 800d5b2:	f100 0214 	add.w	r2, r0, #20
 800d5b6:	6900      	ldr	r0, [r0, #16]
 800d5b8:	114b      	asrs	r3, r1, #5
 800d5ba:	4298      	cmp	r0, r3
 800d5bc:	b510      	push	{r4, lr}
 800d5be:	db11      	blt.n	800d5e4 <__any_on+0x32>
 800d5c0:	dd0a      	ble.n	800d5d8 <__any_on+0x26>
 800d5c2:	f011 011f 	ands.w	r1, r1, #31
 800d5c6:	d007      	beq.n	800d5d8 <__any_on+0x26>
 800d5c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5cc:	fa24 f001 	lsr.w	r0, r4, r1
 800d5d0:	fa00 f101 	lsl.w	r1, r0, r1
 800d5d4:	428c      	cmp	r4, r1
 800d5d6:	d10b      	bne.n	800d5f0 <__any_on+0x3e>
 800d5d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d803      	bhi.n	800d5e8 <__any_on+0x36>
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	bd10      	pop	{r4, pc}
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	e7f7      	b.n	800d5d8 <__any_on+0x26>
 800d5e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5ec:	2900      	cmp	r1, #0
 800d5ee:	d0f5      	beq.n	800d5dc <__any_on+0x2a>
 800d5f0:	2001      	movs	r0, #1
 800d5f2:	e7f6      	b.n	800d5e2 <__any_on+0x30>

0800d5f4 <_calloc_r>:
 800d5f4:	b538      	push	{r3, r4, r5, lr}
 800d5f6:	fb02 f501 	mul.w	r5, r2, r1
 800d5fa:	4629      	mov	r1, r5
 800d5fc:	f7fc f8e4 	bl	80097c8 <_malloc_r>
 800d600:	4604      	mov	r4, r0
 800d602:	b118      	cbz	r0, 800d60c <_calloc_r+0x18>
 800d604:	462a      	mov	r2, r5
 800d606:	2100      	movs	r1, #0
 800d608:	f7fc f8d5 	bl	80097b6 <memset>
 800d60c:	4620      	mov	r0, r4
 800d60e:	bd38      	pop	{r3, r4, r5, pc}

0800d610 <_free_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	4605      	mov	r5, r0
 800d614:	2900      	cmp	r1, #0
 800d616:	d043      	beq.n	800d6a0 <_free_r+0x90>
 800d618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d61c:	1f0c      	subs	r4, r1, #4
 800d61e:	2b00      	cmp	r3, #0
 800d620:	bfb8      	it	lt
 800d622:	18e4      	addlt	r4, r4, r3
 800d624:	f7ff fb22 	bl	800cc6c <__malloc_lock>
 800d628:	4a1e      	ldr	r2, [pc, #120]	; (800d6a4 <_free_r+0x94>)
 800d62a:	6813      	ldr	r3, [r2, #0]
 800d62c:	4610      	mov	r0, r2
 800d62e:	b933      	cbnz	r3, 800d63e <_free_r+0x2e>
 800d630:	6063      	str	r3, [r4, #4]
 800d632:	6014      	str	r4, [r2, #0]
 800d634:	4628      	mov	r0, r5
 800d636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d63a:	f7ff bb1d 	b.w	800cc78 <__malloc_unlock>
 800d63e:	42a3      	cmp	r3, r4
 800d640:	d90a      	bls.n	800d658 <_free_r+0x48>
 800d642:	6821      	ldr	r1, [r4, #0]
 800d644:	1862      	adds	r2, r4, r1
 800d646:	4293      	cmp	r3, r2
 800d648:	bf01      	itttt	eq
 800d64a:	681a      	ldreq	r2, [r3, #0]
 800d64c:	685b      	ldreq	r3, [r3, #4]
 800d64e:	1852      	addeq	r2, r2, r1
 800d650:	6022      	streq	r2, [r4, #0]
 800d652:	6063      	str	r3, [r4, #4]
 800d654:	6004      	str	r4, [r0, #0]
 800d656:	e7ed      	b.n	800d634 <_free_r+0x24>
 800d658:	461a      	mov	r2, r3
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	b10b      	cbz	r3, 800d662 <_free_r+0x52>
 800d65e:	42a3      	cmp	r3, r4
 800d660:	d9fa      	bls.n	800d658 <_free_r+0x48>
 800d662:	6811      	ldr	r1, [r2, #0]
 800d664:	1850      	adds	r0, r2, r1
 800d666:	42a0      	cmp	r0, r4
 800d668:	d10b      	bne.n	800d682 <_free_r+0x72>
 800d66a:	6820      	ldr	r0, [r4, #0]
 800d66c:	4401      	add	r1, r0
 800d66e:	1850      	adds	r0, r2, r1
 800d670:	4283      	cmp	r3, r0
 800d672:	6011      	str	r1, [r2, #0]
 800d674:	d1de      	bne.n	800d634 <_free_r+0x24>
 800d676:	6818      	ldr	r0, [r3, #0]
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	4401      	add	r1, r0
 800d67c:	6011      	str	r1, [r2, #0]
 800d67e:	6053      	str	r3, [r2, #4]
 800d680:	e7d8      	b.n	800d634 <_free_r+0x24>
 800d682:	d902      	bls.n	800d68a <_free_r+0x7a>
 800d684:	230c      	movs	r3, #12
 800d686:	602b      	str	r3, [r5, #0]
 800d688:	e7d4      	b.n	800d634 <_free_r+0x24>
 800d68a:	6820      	ldr	r0, [r4, #0]
 800d68c:	1821      	adds	r1, r4, r0
 800d68e:	428b      	cmp	r3, r1
 800d690:	bf01      	itttt	eq
 800d692:	6819      	ldreq	r1, [r3, #0]
 800d694:	685b      	ldreq	r3, [r3, #4]
 800d696:	1809      	addeq	r1, r1, r0
 800d698:	6021      	streq	r1, [r4, #0]
 800d69a:	6063      	str	r3, [r4, #4]
 800d69c:	6054      	str	r4, [r2, #4]
 800d69e:	e7c9      	b.n	800d634 <_free_r+0x24>
 800d6a0:	bd38      	pop	{r3, r4, r5, pc}
 800d6a2:	bf00      	nop
 800d6a4:	20003710 	.word	0x20003710

0800d6a8 <__ssputs_r>:
 800d6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6ac:	688e      	ldr	r6, [r1, #8]
 800d6ae:	4682      	mov	sl, r0
 800d6b0:	429e      	cmp	r6, r3
 800d6b2:	460c      	mov	r4, r1
 800d6b4:	4690      	mov	r8, r2
 800d6b6:	461f      	mov	r7, r3
 800d6b8:	d838      	bhi.n	800d72c <__ssputs_r+0x84>
 800d6ba:	898a      	ldrh	r2, [r1, #12]
 800d6bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d6c0:	d032      	beq.n	800d728 <__ssputs_r+0x80>
 800d6c2:	6825      	ldr	r5, [r4, #0]
 800d6c4:	6909      	ldr	r1, [r1, #16]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	eba5 0901 	sub.w	r9, r5, r1
 800d6cc:	6965      	ldr	r5, [r4, #20]
 800d6ce:	444b      	add	r3, r9
 800d6d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d6d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d6d8:	106d      	asrs	r5, r5, #1
 800d6da:	429d      	cmp	r5, r3
 800d6dc:	bf38      	it	cc
 800d6de:	461d      	movcc	r5, r3
 800d6e0:	0553      	lsls	r3, r2, #21
 800d6e2:	d531      	bpl.n	800d748 <__ssputs_r+0xa0>
 800d6e4:	4629      	mov	r1, r5
 800d6e6:	f7fc f86f 	bl	80097c8 <_malloc_r>
 800d6ea:	4606      	mov	r6, r0
 800d6ec:	b950      	cbnz	r0, 800d704 <__ssputs_r+0x5c>
 800d6ee:	230c      	movs	r3, #12
 800d6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f4:	f8ca 3000 	str.w	r3, [sl]
 800d6f8:	89a3      	ldrh	r3, [r4, #12]
 800d6fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6fe:	81a3      	strh	r3, [r4, #12]
 800d700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d704:	464a      	mov	r2, r9
 800d706:	6921      	ldr	r1, [r4, #16]
 800d708:	f7fc f847 	bl	800979a <memcpy>
 800d70c:	89a3      	ldrh	r3, [r4, #12]
 800d70e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d716:	81a3      	strh	r3, [r4, #12]
 800d718:	6126      	str	r6, [r4, #16]
 800d71a:	444e      	add	r6, r9
 800d71c:	6026      	str	r6, [r4, #0]
 800d71e:	463e      	mov	r6, r7
 800d720:	6165      	str	r5, [r4, #20]
 800d722:	eba5 0509 	sub.w	r5, r5, r9
 800d726:	60a5      	str	r5, [r4, #8]
 800d728:	42be      	cmp	r6, r7
 800d72a:	d900      	bls.n	800d72e <__ssputs_r+0x86>
 800d72c:	463e      	mov	r6, r7
 800d72e:	4632      	mov	r2, r6
 800d730:	4641      	mov	r1, r8
 800d732:	6820      	ldr	r0, [r4, #0]
 800d734:	f000 fbd0 	bl	800ded8 <memmove>
 800d738:	68a3      	ldr	r3, [r4, #8]
 800d73a:	6822      	ldr	r2, [r4, #0]
 800d73c:	1b9b      	subs	r3, r3, r6
 800d73e:	4432      	add	r2, r6
 800d740:	2000      	movs	r0, #0
 800d742:	60a3      	str	r3, [r4, #8]
 800d744:	6022      	str	r2, [r4, #0]
 800d746:	e7db      	b.n	800d700 <__ssputs_r+0x58>
 800d748:	462a      	mov	r2, r5
 800d74a:	f000 fbdf 	bl	800df0c <_realloc_r>
 800d74e:	4606      	mov	r6, r0
 800d750:	2800      	cmp	r0, #0
 800d752:	d1e1      	bne.n	800d718 <__ssputs_r+0x70>
 800d754:	4650      	mov	r0, sl
 800d756:	6921      	ldr	r1, [r4, #16]
 800d758:	f7ff ff5a 	bl	800d610 <_free_r>
 800d75c:	e7c7      	b.n	800d6ee <__ssputs_r+0x46>
	...

0800d760 <_svfiprintf_r>:
 800d760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d764:	4698      	mov	r8, r3
 800d766:	898b      	ldrh	r3, [r1, #12]
 800d768:	4607      	mov	r7, r0
 800d76a:	061b      	lsls	r3, r3, #24
 800d76c:	460d      	mov	r5, r1
 800d76e:	4614      	mov	r4, r2
 800d770:	b09d      	sub	sp, #116	; 0x74
 800d772:	d50e      	bpl.n	800d792 <_svfiprintf_r+0x32>
 800d774:	690b      	ldr	r3, [r1, #16]
 800d776:	b963      	cbnz	r3, 800d792 <_svfiprintf_r+0x32>
 800d778:	2140      	movs	r1, #64	; 0x40
 800d77a:	f7fc f825 	bl	80097c8 <_malloc_r>
 800d77e:	6028      	str	r0, [r5, #0]
 800d780:	6128      	str	r0, [r5, #16]
 800d782:	b920      	cbnz	r0, 800d78e <_svfiprintf_r+0x2e>
 800d784:	230c      	movs	r3, #12
 800d786:	603b      	str	r3, [r7, #0]
 800d788:	f04f 30ff 	mov.w	r0, #4294967295
 800d78c:	e0d1      	b.n	800d932 <_svfiprintf_r+0x1d2>
 800d78e:	2340      	movs	r3, #64	; 0x40
 800d790:	616b      	str	r3, [r5, #20]
 800d792:	2300      	movs	r3, #0
 800d794:	9309      	str	r3, [sp, #36]	; 0x24
 800d796:	2320      	movs	r3, #32
 800d798:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d79c:	2330      	movs	r3, #48	; 0x30
 800d79e:	f04f 0901 	mov.w	r9, #1
 800d7a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d94c <_svfiprintf_r+0x1ec>
 800d7aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7ae:	4623      	mov	r3, r4
 800d7b0:	469a      	mov	sl, r3
 800d7b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7b6:	b10a      	cbz	r2, 800d7bc <_svfiprintf_r+0x5c>
 800d7b8:	2a25      	cmp	r2, #37	; 0x25
 800d7ba:	d1f9      	bne.n	800d7b0 <_svfiprintf_r+0x50>
 800d7bc:	ebba 0b04 	subs.w	fp, sl, r4
 800d7c0:	d00b      	beq.n	800d7da <_svfiprintf_r+0x7a>
 800d7c2:	465b      	mov	r3, fp
 800d7c4:	4622      	mov	r2, r4
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	f7ff ff6d 	bl	800d6a8 <__ssputs_r>
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	f000 80aa 	beq.w	800d928 <_svfiprintf_r+0x1c8>
 800d7d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7d6:	445a      	add	r2, fp
 800d7d8:	9209      	str	r2, [sp, #36]	; 0x24
 800d7da:	f89a 3000 	ldrb.w	r3, [sl]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	f000 80a2 	beq.w	800d928 <_svfiprintf_r+0x1c8>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7ee:	f10a 0a01 	add.w	sl, sl, #1
 800d7f2:	9304      	str	r3, [sp, #16]
 800d7f4:	9307      	str	r3, [sp, #28]
 800d7f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7fa:	931a      	str	r3, [sp, #104]	; 0x68
 800d7fc:	4654      	mov	r4, sl
 800d7fe:	2205      	movs	r2, #5
 800d800:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d804:	4851      	ldr	r0, [pc, #324]	; (800d94c <_svfiprintf_r+0x1ec>)
 800d806:	f7ff fa23 	bl	800cc50 <memchr>
 800d80a:	9a04      	ldr	r2, [sp, #16]
 800d80c:	b9d8      	cbnz	r0, 800d846 <_svfiprintf_r+0xe6>
 800d80e:	06d0      	lsls	r0, r2, #27
 800d810:	bf44      	itt	mi
 800d812:	2320      	movmi	r3, #32
 800d814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d818:	0711      	lsls	r1, r2, #28
 800d81a:	bf44      	itt	mi
 800d81c:	232b      	movmi	r3, #43	; 0x2b
 800d81e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d822:	f89a 3000 	ldrb.w	r3, [sl]
 800d826:	2b2a      	cmp	r3, #42	; 0x2a
 800d828:	d015      	beq.n	800d856 <_svfiprintf_r+0xf6>
 800d82a:	4654      	mov	r4, sl
 800d82c:	2000      	movs	r0, #0
 800d82e:	f04f 0c0a 	mov.w	ip, #10
 800d832:	9a07      	ldr	r2, [sp, #28]
 800d834:	4621      	mov	r1, r4
 800d836:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d83a:	3b30      	subs	r3, #48	; 0x30
 800d83c:	2b09      	cmp	r3, #9
 800d83e:	d94e      	bls.n	800d8de <_svfiprintf_r+0x17e>
 800d840:	b1b0      	cbz	r0, 800d870 <_svfiprintf_r+0x110>
 800d842:	9207      	str	r2, [sp, #28]
 800d844:	e014      	b.n	800d870 <_svfiprintf_r+0x110>
 800d846:	eba0 0308 	sub.w	r3, r0, r8
 800d84a:	fa09 f303 	lsl.w	r3, r9, r3
 800d84e:	4313      	orrs	r3, r2
 800d850:	46a2      	mov	sl, r4
 800d852:	9304      	str	r3, [sp, #16]
 800d854:	e7d2      	b.n	800d7fc <_svfiprintf_r+0x9c>
 800d856:	9b03      	ldr	r3, [sp, #12]
 800d858:	1d19      	adds	r1, r3, #4
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	9103      	str	r1, [sp, #12]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	bfbb      	ittet	lt
 800d862:	425b      	neglt	r3, r3
 800d864:	f042 0202 	orrlt.w	r2, r2, #2
 800d868:	9307      	strge	r3, [sp, #28]
 800d86a:	9307      	strlt	r3, [sp, #28]
 800d86c:	bfb8      	it	lt
 800d86e:	9204      	strlt	r2, [sp, #16]
 800d870:	7823      	ldrb	r3, [r4, #0]
 800d872:	2b2e      	cmp	r3, #46	; 0x2e
 800d874:	d10c      	bne.n	800d890 <_svfiprintf_r+0x130>
 800d876:	7863      	ldrb	r3, [r4, #1]
 800d878:	2b2a      	cmp	r3, #42	; 0x2a
 800d87a:	d135      	bne.n	800d8e8 <_svfiprintf_r+0x188>
 800d87c:	9b03      	ldr	r3, [sp, #12]
 800d87e:	3402      	adds	r4, #2
 800d880:	1d1a      	adds	r2, r3, #4
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	9203      	str	r2, [sp, #12]
 800d886:	2b00      	cmp	r3, #0
 800d888:	bfb8      	it	lt
 800d88a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d88e:	9305      	str	r3, [sp, #20]
 800d890:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d95c <_svfiprintf_r+0x1fc>
 800d894:	2203      	movs	r2, #3
 800d896:	4650      	mov	r0, sl
 800d898:	7821      	ldrb	r1, [r4, #0]
 800d89a:	f7ff f9d9 	bl	800cc50 <memchr>
 800d89e:	b140      	cbz	r0, 800d8b2 <_svfiprintf_r+0x152>
 800d8a0:	2340      	movs	r3, #64	; 0x40
 800d8a2:	eba0 000a 	sub.w	r0, r0, sl
 800d8a6:	fa03 f000 	lsl.w	r0, r3, r0
 800d8aa:	9b04      	ldr	r3, [sp, #16]
 800d8ac:	3401      	adds	r4, #1
 800d8ae:	4303      	orrs	r3, r0
 800d8b0:	9304      	str	r3, [sp, #16]
 800d8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8b6:	2206      	movs	r2, #6
 800d8b8:	4825      	ldr	r0, [pc, #148]	; (800d950 <_svfiprintf_r+0x1f0>)
 800d8ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8be:	f7ff f9c7 	bl	800cc50 <memchr>
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	d038      	beq.n	800d938 <_svfiprintf_r+0x1d8>
 800d8c6:	4b23      	ldr	r3, [pc, #140]	; (800d954 <_svfiprintf_r+0x1f4>)
 800d8c8:	bb1b      	cbnz	r3, 800d912 <_svfiprintf_r+0x1b2>
 800d8ca:	9b03      	ldr	r3, [sp, #12]
 800d8cc:	3307      	adds	r3, #7
 800d8ce:	f023 0307 	bic.w	r3, r3, #7
 800d8d2:	3308      	adds	r3, #8
 800d8d4:	9303      	str	r3, [sp, #12]
 800d8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8d8:	4433      	add	r3, r6
 800d8da:	9309      	str	r3, [sp, #36]	; 0x24
 800d8dc:	e767      	b.n	800d7ae <_svfiprintf_r+0x4e>
 800d8de:	460c      	mov	r4, r1
 800d8e0:	2001      	movs	r0, #1
 800d8e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8e6:	e7a5      	b.n	800d834 <_svfiprintf_r+0xd4>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	f04f 0c0a 	mov.w	ip, #10
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	3401      	adds	r4, #1
 800d8f2:	9305      	str	r3, [sp, #20]
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8fa:	3a30      	subs	r2, #48	; 0x30
 800d8fc:	2a09      	cmp	r2, #9
 800d8fe:	d903      	bls.n	800d908 <_svfiprintf_r+0x1a8>
 800d900:	2b00      	cmp	r3, #0
 800d902:	d0c5      	beq.n	800d890 <_svfiprintf_r+0x130>
 800d904:	9105      	str	r1, [sp, #20]
 800d906:	e7c3      	b.n	800d890 <_svfiprintf_r+0x130>
 800d908:	4604      	mov	r4, r0
 800d90a:	2301      	movs	r3, #1
 800d90c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d910:	e7f0      	b.n	800d8f4 <_svfiprintf_r+0x194>
 800d912:	ab03      	add	r3, sp, #12
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	462a      	mov	r2, r5
 800d918:	4638      	mov	r0, r7
 800d91a:	4b0f      	ldr	r3, [pc, #60]	; (800d958 <_svfiprintf_r+0x1f8>)
 800d91c:	a904      	add	r1, sp, #16
 800d91e:	f7fc f84b 	bl	80099b8 <_printf_float>
 800d922:	1c42      	adds	r2, r0, #1
 800d924:	4606      	mov	r6, r0
 800d926:	d1d6      	bne.n	800d8d6 <_svfiprintf_r+0x176>
 800d928:	89ab      	ldrh	r3, [r5, #12]
 800d92a:	065b      	lsls	r3, r3, #25
 800d92c:	f53f af2c 	bmi.w	800d788 <_svfiprintf_r+0x28>
 800d930:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d932:	b01d      	add	sp, #116	; 0x74
 800d934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d938:	ab03      	add	r3, sp, #12
 800d93a:	9300      	str	r3, [sp, #0]
 800d93c:	462a      	mov	r2, r5
 800d93e:	4638      	mov	r0, r7
 800d940:	4b05      	ldr	r3, [pc, #20]	; (800d958 <_svfiprintf_r+0x1f8>)
 800d942:	a904      	add	r1, sp, #16
 800d944:	f7fc fad4 	bl	8009ef0 <_printf_i>
 800d948:	e7eb      	b.n	800d922 <_svfiprintf_r+0x1c2>
 800d94a:	bf00      	nop
 800d94c:	0800e77c 	.word	0x0800e77c
 800d950:	0800e786 	.word	0x0800e786
 800d954:	080099b9 	.word	0x080099b9
 800d958:	0800d6a9 	.word	0x0800d6a9
 800d95c:	0800e782 	.word	0x0800e782

0800d960 <__sfputc_r>:
 800d960:	6893      	ldr	r3, [r2, #8]
 800d962:	b410      	push	{r4}
 800d964:	3b01      	subs	r3, #1
 800d966:	2b00      	cmp	r3, #0
 800d968:	6093      	str	r3, [r2, #8]
 800d96a:	da07      	bge.n	800d97c <__sfputc_r+0x1c>
 800d96c:	6994      	ldr	r4, [r2, #24]
 800d96e:	42a3      	cmp	r3, r4
 800d970:	db01      	blt.n	800d976 <__sfputc_r+0x16>
 800d972:	290a      	cmp	r1, #10
 800d974:	d102      	bne.n	800d97c <__sfputc_r+0x1c>
 800d976:	bc10      	pop	{r4}
 800d978:	f000 b974 	b.w	800dc64 <__swbuf_r>
 800d97c:	6813      	ldr	r3, [r2, #0]
 800d97e:	1c58      	adds	r0, r3, #1
 800d980:	6010      	str	r0, [r2, #0]
 800d982:	7019      	strb	r1, [r3, #0]
 800d984:	4608      	mov	r0, r1
 800d986:	bc10      	pop	{r4}
 800d988:	4770      	bx	lr

0800d98a <__sfputs_r>:
 800d98a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98c:	4606      	mov	r6, r0
 800d98e:	460f      	mov	r7, r1
 800d990:	4614      	mov	r4, r2
 800d992:	18d5      	adds	r5, r2, r3
 800d994:	42ac      	cmp	r4, r5
 800d996:	d101      	bne.n	800d99c <__sfputs_r+0x12>
 800d998:	2000      	movs	r0, #0
 800d99a:	e007      	b.n	800d9ac <__sfputs_r+0x22>
 800d99c:	463a      	mov	r2, r7
 800d99e:	4630      	mov	r0, r6
 800d9a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9a4:	f7ff ffdc 	bl	800d960 <__sfputc_r>
 800d9a8:	1c43      	adds	r3, r0, #1
 800d9aa:	d1f3      	bne.n	800d994 <__sfputs_r+0xa>
 800d9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d9b0 <_vfiprintf_r>:
 800d9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b4:	460d      	mov	r5, r1
 800d9b6:	4614      	mov	r4, r2
 800d9b8:	4698      	mov	r8, r3
 800d9ba:	4606      	mov	r6, r0
 800d9bc:	b09d      	sub	sp, #116	; 0x74
 800d9be:	b118      	cbz	r0, 800d9c8 <_vfiprintf_r+0x18>
 800d9c0:	6983      	ldr	r3, [r0, #24]
 800d9c2:	b90b      	cbnz	r3, 800d9c8 <_vfiprintf_r+0x18>
 800d9c4:	f7fb fe24 	bl	8009610 <__sinit>
 800d9c8:	4b89      	ldr	r3, [pc, #548]	; (800dbf0 <_vfiprintf_r+0x240>)
 800d9ca:	429d      	cmp	r5, r3
 800d9cc:	d11b      	bne.n	800da06 <_vfiprintf_r+0x56>
 800d9ce:	6875      	ldr	r5, [r6, #4]
 800d9d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9d2:	07d9      	lsls	r1, r3, #31
 800d9d4:	d405      	bmi.n	800d9e2 <_vfiprintf_r+0x32>
 800d9d6:	89ab      	ldrh	r3, [r5, #12]
 800d9d8:	059a      	lsls	r2, r3, #22
 800d9da:	d402      	bmi.n	800d9e2 <_vfiprintf_r+0x32>
 800d9dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9de:	f7fb feda 	bl	8009796 <__retarget_lock_acquire_recursive>
 800d9e2:	89ab      	ldrh	r3, [r5, #12]
 800d9e4:	071b      	lsls	r3, r3, #28
 800d9e6:	d501      	bpl.n	800d9ec <_vfiprintf_r+0x3c>
 800d9e8:	692b      	ldr	r3, [r5, #16]
 800d9ea:	b9eb      	cbnz	r3, 800da28 <_vfiprintf_r+0x78>
 800d9ec:	4629      	mov	r1, r5
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	f000 f998 	bl	800dd24 <__swsetup_r>
 800d9f4:	b1c0      	cbz	r0, 800da28 <_vfiprintf_r+0x78>
 800d9f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9f8:	07dc      	lsls	r4, r3, #31
 800d9fa:	d50e      	bpl.n	800da1a <_vfiprintf_r+0x6a>
 800d9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800da00:	b01d      	add	sp, #116	; 0x74
 800da02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da06:	4b7b      	ldr	r3, [pc, #492]	; (800dbf4 <_vfiprintf_r+0x244>)
 800da08:	429d      	cmp	r5, r3
 800da0a:	d101      	bne.n	800da10 <_vfiprintf_r+0x60>
 800da0c:	68b5      	ldr	r5, [r6, #8]
 800da0e:	e7df      	b.n	800d9d0 <_vfiprintf_r+0x20>
 800da10:	4b79      	ldr	r3, [pc, #484]	; (800dbf8 <_vfiprintf_r+0x248>)
 800da12:	429d      	cmp	r5, r3
 800da14:	bf08      	it	eq
 800da16:	68f5      	ldreq	r5, [r6, #12]
 800da18:	e7da      	b.n	800d9d0 <_vfiprintf_r+0x20>
 800da1a:	89ab      	ldrh	r3, [r5, #12]
 800da1c:	0598      	lsls	r0, r3, #22
 800da1e:	d4ed      	bmi.n	800d9fc <_vfiprintf_r+0x4c>
 800da20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da22:	f7fb feb9 	bl	8009798 <__retarget_lock_release_recursive>
 800da26:	e7e9      	b.n	800d9fc <_vfiprintf_r+0x4c>
 800da28:	2300      	movs	r3, #0
 800da2a:	9309      	str	r3, [sp, #36]	; 0x24
 800da2c:	2320      	movs	r3, #32
 800da2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da32:	2330      	movs	r3, #48	; 0x30
 800da34:	f04f 0901 	mov.w	r9, #1
 800da38:	f8cd 800c 	str.w	r8, [sp, #12]
 800da3c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800dbfc <_vfiprintf_r+0x24c>
 800da40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da44:	4623      	mov	r3, r4
 800da46:	469a      	mov	sl, r3
 800da48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da4c:	b10a      	cbz	r2, 800da52 <_vfiprintf_r+0xa2>
 800da4e:	2a25      	cmp	r2, #37	; 0x25
 800da50:	d1f9      	bne.n	800da46 <_vfiprintf_r+0x96>
 800da52:	ebba 0b04 	subs.w	fp, sl, r4
 800da56:	d00b      	beq.n	800da70 <_vfiprintf_r+0xc0>
 800da58:	465b      	mov	r3, fp
 800da5a:	4622      	mov	r2, r4
 800da5c:	4629      	mov	r1, r5
 800da5e:	4630      	mov	r0, r6
 800da60:	f7ff ff93 	bl	800d98a <__sfputs_r>
 800da64:	3001      	adds	r0, #1
 800da66:	f000 80aa 	beq.w	800dbbe <_vfiprintf_r+0x20e>
 800da6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da6c:	445a      	add	r2, fp
 800da6e:	9209      	str	r2, [sp, #36]	; 0x24
 800da70:	f89a 3000 	ldrb.w	r3, [sl]
 800da74:	2b00      	cmp	r3, #0
 800da76:	f000 80a2 	beq.w	800dbbe <_vfiprintf_r+0x20e>
 800da7a:	2300      	movs	r3, #0
 800da7c:	f04f 32ff 	mov.w	r2, #4294967295
 800da80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da84:	f10a 0a01 	add.w	sl, sl, #1
 800da88:	9304      	str	r3, [sp, #16]
 800da8a:	9307      	str	r3, [sp, #28]
 800da8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da90:	931a      	str	r3, [sp, #104]	; 0x68
 800da92:	4654      	mov	r4, sl
 800da94:	2205      	movs	r2, #5
 800da96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da9a:	4858      	ldr	r0, [pc, #352]	; (800dbfc <_vfiprintf_r+0x24c>)
 800da9c:	f7ff f8d8 	bl	800cc50 <memchr>
 800daa0:	9a04      	ldr	r2, [sp, #16]
 800daa2:	b9d8      	cbnz	r0, 800dadc <_vfiprintf_r+0x12c>
 800daa4:	06d1      	lsls	r1, r2, #27
 800daa6:	bf44      	itt	mi
 800daa8:	2320      	movmi	r3, #32
 800daaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daae:	0713      	lsls	r3, r2, #28
 800dab0:	bf44      	itt	mi
 800dab2:	232b      	movmi	r3, #43	; 0x2b
 800dab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dab8:	f89a 3000 	ldrb.w	r3, [sl]
 800dabc:	2b2a      	cmp	r3, #42	; 0x2a
 800dabe:	d015      	beq.n	800daec <_vfiprintf_r+0x13c>
 800dac0:	4654      	mov	r4, sl
 800dac2:	2000      	movs	r0, #0
 800dac4:	f04f 0c0a 	mov.w	ip, #10
 800dac8:	9a07      	ldr	r2, [sp, #28]
 800daca:	4621      	mov	r1, r4
 800dacc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dad0:	3b30      	subs	r3, #48	; 0x30
 800dad2:	2b09      	cmp	r3, #9
 800dad4:	d94e      	bls.n	800db74 <_vfiprintf_r+0x1c4>
 800dad6:	b1b0      	cbz	r0, 800db06 <_vfiprintf_r+0x156>
 800dad8:	9207      	str	r2, [sp, #28]
 800dada:	e014      	b.n	800db06 <_vfiprintf_r+0x156>
 800dadc:	eba0 0308 	sub.w	r3, r0, r8
 800dae0:	fa09 f303 	lsl.w	r3, r9, r3
 800dae4:	4313      	orrs	r3, r2
 800dae6:	46a2      	mov	sl, r4
 800dae8:	9304      	str	r3, [sp, #16]
 800daea:	e7d2      	b.n	800da92 <_vfiprintf_r+0xe2>
 800daec:	9b03      	ldr	r3, [sp, #12]
 800daee:	1d19      	adds	r1, r3, #4
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	9103      	str	r1, [sp, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	bfbb      	ittet	lt
 800daf8:	425b      	neglt	r3, r3
 800dafa:	f042 0202 	orrlt.w	r2, r2, #2
 800dafe:	9307      	strge	r3, [sp, #28]
 800db00:	9307      	strlt	r3, [sp, #28]
 800db02:	bfb8      	it	lt
 800db04:	9204      	strlt	r2, [sp, #16]
 800db06:	7823      	ldrb	r3, [r4, #0]
 800db08:	2b2e      	cmp	r3, #46	; 0x2e
 800db0a:	d10c      	bne.n	800db26 <_vfiprintf_r+0x176>
 800db0c:	7863      	ldrb	r3, [r4, #1]
 800db0e:	2b2a      	cmp	r3, #42	; 0x2a
 800db10:	d135      	bne.n	800db7e <_vfiprintf_r+0x1ce>
 800db12:	9b03      	ldr	r3, [sp, #12]
 800db14:	3402      	adds	r4, #2
 800db16:	1d1a      	adds	r2, r3, #4
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	9203      	str	r2, [sp, #12]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	bfb8      	it	lt
 800db20:	f04f 33ff 	movlt.w	r3, #4294967295
 800db24:	9305      	str	r3, [sp, #20]
 800db26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dc0c <_vfiprintf_r+0x25c>
 800db2a:	2203      	movs	r2, #3
 800db2c:	4650      	mov	r0, sl
 800db2e:	7821      	ldrb	r1, [r4, #0]
 800db30:	f7ff f88e 	bl	800cc50 <memchr>
 800db34:	b140      	cbz	r0, 800db48 <_vfiprintf_r+0x198>
 800db36:	2340      	movs	r3, #64	; 0x40
 800db38:	eba0 000a 	sub.w	r0, r0, sl
 800db3c:	fa03 f000 	lsl.w	r0, r3, r0
 800db40:	9b04      	ldr	r3, [sp, #16]
 800db42:	3401      	adds	r4, #1
 800db44:	4303      	orrs	r3, r0
 800db46:	9304      	str	r3, [sp, #16]
 800db48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db4c:	2206      	movs	r2, #6
 800db4e:	482c      	ldr	r0, [pc, #176]	; (800dc00 <_vfiprintf_r+0x250>)
 800db50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db54:	f7ff f87c 	bl	800cc50 <memchr>
 800db58:	2800      	cmp	r0, #0
 800db5a:	d03f      	beq.n	800dbdc <_vfiprintf_r+0x22c>
 800db5c:	4b29      	ldr	r3, [pc, #164]	; (800dc04 <_vfiprintf_r+0x254>)
 800db5e:	bb1b      	cbnz	r3, 800dba8 <_vfiprintf_r+0x1f8>
 800db60:	9b03      	ldr	r3, [sp, #12]
 800db62:	3307      	adds	r3, #7
 800db64:	f023 0307 	bic.w	r3, r3, #7
 800db68:	3308      	adds	r3, #8
 800db6a:	9303      	str	r3, [sp, #12]
 800db6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db6e:	443b      	add	r3, r7
 800db70:	9309      	str	r3, [sp, #36]	; 0x24
 800db72:	e767      	b.n	800da44 <_vfiprintf_r+0x94>
 800db74:	460c      	mov	r4, r1
 800db76:	2001      	movs	r0, #1
 800db78:	fb0c 3202 	mla	r2, ip, r2, r3
 800db7c:	e7a5      	b.n	800daca <_vfiprintf_r+0x11a>
 800db7e:	2300      	movs	r3, #0
 800db80:	f04f 0c0a 	mov.w	ip, #10
 800db84:	4619      	mov	r1, r3
 800db86:	3401      	adds	r4, #1
 800db88:	9305      	str	r3, [sp, #20]
 800db8a:	4620      	mov	r0, r4
 800db8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db90:	3a30      	subs	r2, #48	; 0x30
 800db92:	2a09      	cmp	r2, #9
 800db94:	d903      	bls.n	800db9e <_vfiprintf_r+0x1ee>
 800db96:	2b00      	cmp	r3, #0
 800db98:	d0c5      	beq.n	800db26 <_vfiprintf_r+0x176>
 800db9a:	9105      	str	r1, [sp, #20]
 800db9c:	e7c3      	b.n	800db26 <_vfiprintf_r+0x176>
 800db9e:	4604      	mov	r4, r0
 800dba0:	2301      	movs	r3, #1
 800dba2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dba6:	e7f0      	b.n	800db8a <_vfiprintf_r+0x1da>
 800dba8:	ab03      	add	r3, sp, #12
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	462a      	mov	r2, r5
 800dbae:	4630      	mov	r0, r6
 800dbb0:	4b15      	ldr	r3, [pc, #84]	; (800dc08 <_vfiprintf_r+0x258>)
 800dbb2:	a904      	add	r1, sp, #16
 800dbb4:	f7fb ff00 	bl	80099b8 <_printf_float>
 800dbb8:	4607      	mov	r7, r0
 800dbba:	1c78      	adds	r0, r7, #1
 800dbbc:	d1d6      	bne.n	800db6c <_vfiprintf_r+0x1bc>
 800dbbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbc0:	07d9      	lsls	r1, r3, #31
 800dbc2:	d405      	bmi.n	800dbd0 <_vfiprintf_r+0x220>
 800dbc4:	89ab      	ldrh	r3, [r5, #12]
 800dbc6:	059a      	lsls	r2, r3, #22
 800dbc8:	d402      	bmi.n	800dbd0 <_vfiprintf_r+0x220>
 800dbca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbcc:	f7fb fde4 	bl	8009798 <__retarget_lock_release_recursive>
 800dbd0:	89ab      	ldrh	r3, [r5, #12]
 800dbd2:	065b      	lsls	r3, r3, #25
 800dbd4:	f53f af12 	bmi.w	800d9fc <_vfiprintf_r+0x4c>
 800dbd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbda:	e711      	b.n	800da00 <_vfiprintf_r+0x50>
 800dbdc:	ab03      	add	r3, sp, #12
 800dbde:	9300      	str	r3, [sp, #0]
 800dbe0:	462a      	mov	r2, r5
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	4b08      	ldr	r3, [pc, #32]	; (800dc08 <_vfiprintf_r+0x258>)
 800dbe6:	a904      	add	r1, sp, #16
 800dbe8:	f7fc f982 	bl	8009ef0 <_printf_i>
 800dbec:	e7e4      	b.n	800dbb8 <_vfiprintf_r+0x208>
 800dbee:	bf00      	nop
 800dbf0:	0800e29c 	.word	0x0800e29c
 800dbf4:	0800e2bc 	.word	0x0800e2bc
 800dbf8:	0800e27c 	.word	0x0800e27c
 800dbfc:	0800e77c 	.word	0x0800e77c
 800dc00:	0800e786 	.word	0x0800e786
 800dc04:	080099b9 	.word	0x080099b9
 800dc08:	0800d98b 	.word	0x0800d98b
 800dc0c:	0800e782 	.word	0x0800e782

0800dc10 <_read_r>:
 800dc10:	b538      	push	{r3, r4, r5, lr}
 800dc12:	4604      	mov	r4, r0
 800dc14:	4608      	mov	r0, r1
 800dc16:	4611      	mov	r1, r2
 800dc18:	2200      	movs	r2, #0
 800dc1a:	4d05      	ldr	r5, [pc, #20]	; (800dc30 <_read_r+0x20>)
 800dc1c:	602a      	str	r2, [r5, #0]
 800dc1e:	461a      	mov	r2, r3
 800dc20:	f7f4 f9d1 	bl	8001fc6 <_read>
 800dc24:	1c43      	adds	r3, r0, #1
 800dc26:	d102      	bne.n	800dc2e <_read_r+0x1e>
 800dc28:	682b      	ldr	r3, [r5, #0]
 800dc2a:	b103      	cbz	r3, 800dc2e <_read_r+0x1e>
 800dc2c:	6023      	str	r3, [r4, #0]
 800dc2e:	bd38      	pop	{r3, r4, r5, pc}
 800dc30:	20003bac 	.word	0x20003bac

0800dc34 <nan>:
 800dc34:	2000      	movs	r0, #0
 800dc36:	4901      	ldr	r1, [pc, #4]	; (800dc3c <nan+0x8>)
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	7ff80000 	.word	0x7ff80000

0800dc40 <strncmp>:
 800dc40:	b510      	push	{r4, lr}
 800dc42:	b16a      	cbz	r2, 800dc60 <strncmp+0x20>
 800dc44:	3901      	subs	r1, #1
 800dc46:	1884      	adds	r4, r0, r2
 800dc48:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dc4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d103      	bne.n	800dc5c <strncmp+0x1c>
 800dc54:	42a0      	cmp	r0, r4
 800dc56:	d001      	beq.n	800dc5c <strncmp+0x1c>
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d1f5      	bne.n	800dc48 <strncmp+0x8>
 800dc5c:	1a98      	subs	r0, r3, r2
 800dc5e:	bd10      	pop	{r4, pc}
 800dc60:	4610      	mov	r0, r2
 800dc62:	e7fc      	b.n	800dc5e <strncmp+0x1e>

0800dc64 <__swbuf_r>:
 800dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc66:	460e      	mov	r6, r1
 800dc68:	4614      	mov	r4, r2
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	b118      	cbz	r0, 800dc76 <__swbuf_r+0x12>
 800dc6e:	6983      	ldr	r3, [r0, #24]
 800dc70:	b90b      	cbnz	r3, 800dc76 <__swbuf_r+0x12>
 800dc72:	f7fb fccd 	bl	8009610 <__sinit>
 800dc76:	4b21      	ldr	r3, [pc, #132]	; (800dcfc <__swbuf_r+0x98>)
 800dc78:	429c      	cmp	r4, r3
 800dc7a:	d12b      	bne.n	800dcd4 <__swbuf_r+0x70>
 800dc7c:	686c      	ldr	r4, [r5, #4]
 800dc7e:	69a3      	ldr	r3, [r4, #24]
 800dc80:	60a3      	str	r3, [r4, #8]
 800dc82:	89a3      	ldrh	r3, [r4, #12]
 800dc84:	071a      	lsls	r2, r3, #28
 800dc86:	d52f      	bpl.n	800dce8 <__swbuf_r+0x84>
 800dc88:	6923      	ldr	r3, [r4, #16]
 800dc8a:	b36b      	cbz	r3, 800dce8 <__swbuf_r+0x84>
 800dc8c:	6923      	ldr	r3, [r4, #16]
 800dc8e:	6820      	ldr	r0, [r4, #0]
 800dc90:	b2f6      	uxtb	r6, r6
 800dc92:	1ac0      	subs	r0, r0, r3
 800dc94:	6963      	ldr	r3, [r4, #20]
 800dc96:	4637      	mov	r7, r6
 800dc98:	4283      	cmp	r3, r0
 800dc9a:	dc04      	bgt.n	800dca6 <__swbuf_r+0x42>
 800dc9c:	4621      	mov	r1, r4
 800dc9e:	4628      	mov	r0, r5
 800dca0:	f7fe fbf2 	bl	800c488 <_fflush_r>
 800dca4:	bb30      	cbnz	r0, 800dcf4 <__swbuf_r+0x90>
 800dca6:	68a3      	ldr	r3, [r4, #8]
 800dca8:	3001      	adds	r0, #1
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	60a3      	str	r3, [r4, #8]
 800dcae:	6823      	ldr	r3, [r4, #0]
 800dcb0:	1c5a      	adds	r2, r3, #1
 800dcb2:	6022      	str	r2, [r4, #0]
 800dcb4:	701e      	strb	r6, [r3, #0]
 800dcb6:	6963      	ldr	r3, [r4, #20]
 800dcb8:	4283      	cmp	r3, r0
 800dcba:	d004      	beq.n	800dcc6 <__swbuf_r+0x62>
 800dcbc:	89a3      	ldrh	r3, [r4, #12]
 800dcbe:	07db      	lsls	r3, r3, #31
 800dcc0:	d506      	bpl.n	800dcd0 <__swbuf_r+0x6c>
 800dcc2:	2e0a      	cmp	r6, #10
 800dcc4:	d104      	bne.n	800dcd0 <__swbuf_r+0x6c>
 800dcc6:	4621      	mov	r1, r4
 800dcc8:	4628      	mov	r0, r5
 800dcca:	f7fe fbdd 	bl	800c488 <_fflush_r>
 800dcce:	b988      	cbnz	r0, 800dcf4 <__swbuf_r+0x90>
 800dcd0:	4638      	mov	r0, r7
 800dcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcd4:	4b0a      	ldr	r3, [pc, #40]	; (800dd00 <__swbuf_r+0x9c>)
 800dcd6:	429c      	cmp	r4, r3
 800dcd8:	d101      	bne.n	800dcde <__swbuf_r+0x7a>
 800dcda:	68ac      	ldr	r4, [r5, #8]
 800dcdc:	e7cf      	b.n	800dc7e <__swbuf_r+0x1a>
 800dcde:	4b09      	ldr	r3, [pc, #36]	; (800dd04 <__swbuf_r+0xa0>)
 800dce0:	429c      	cmp	r4, r3
 800dce2:	bf08      	it	eq
 800dce4:	68ec      	ldreq	r4, [r5, #12]
 800dce6:	e7ca      	b.n	800dc7e <__swbuf_r+0x1a>
 800dce8:	4621      	mov	r1, r4
 800dcea:	4628      	mov	r0, r5
 800dcec:	f000 f81a 	bl	800dd24 <__swsetup_r>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d0cb      	beq.n	800dc8c <__swbuf_r+0x28>
 800dcf4:	f04f 37ff 	mov.w	r7, #4294967295
 800dcf8:	e7ea      	b.n	800dcd0 <__swbuf_r+0x6c>
 800dcfa:	bf00      	nop
 800dcfc:	0800e29c 	.word	0x0800e29c
 800dd00:	0800e2bc 	.word	0x0800e2bc
 800dd04:	0800e27c 	.word	0x0800e27c

0800dd08 <__ascii_wctomb>:
 800dd08:	4603      	mov	r3, r0
 800dd0a:	4608      	mov	r0, r1
 800dd0c:	b141      	cbz	r1, 800dd20 <__ascii_wctomb+0x18>
 800dd0e:	2aff      	cmp	r2, #255	; 0xff
 800dd10:	d904      	bls.n	800dd1c <__ascii_wctomb+0x14>
 800dd12:	228a      	movs	r2, #138	; 0x8a
 800dd14:	f04f 30ff 	mov.w	r0, #4294967295
 800dd18:	601a      	str	r2, [r3, #0]
 800dd1a:	4770      	bx	lr
 800dd1c:	2001      	movs	r0, #1
 800dd1e:	700a      	strb	r2, [r1, #0]
 800dd20:	4770      	bx	lr
	...

0800dd24 <__swsetup_r>:
 800dd24:	4b32      	ldr	r3, [pc, #200]	; (800ddf0 <__swsetup_r+0xcc>)
 800dd26:	b570      	push	{r4, r5, r6, lr}
 800dd28:	681d      	ldr	r5, [r3, #0]
 800dd2a:	4606      	mov	r6, r0
 800dd2c:	460c      	mov	r4, r1
 800dd2e:	b125      	cbz	r5, 800dd3a <__swsetup_r+0x16>
 800dd30:	69ab      	ldr	r3, [r5, #24]
 800dd32:	b913      	cbnz	r3, 800dd3a <__swsetup_r+0x16>
 800dd34:	4628      	mov	r0, r5
 800dd36:	f7fb fc6b 	bl	8009610 <__sinit>
 800dd3a:	4b2e      	ldr	r3, [pc, #184]	; (800ddf4 <__swsetup_r+0xd0>)
 800dd3c:	429c      	cmp	r4, r3
 800dd3e:	d10f      	bne.n	800dd60 <__swsetup_r+0x3c>
 800dd40:	686c      	ldr	r4, [r5, #4]
 800dd42:	89a3      	ldrh	r3, [r4, #12]
 800dd44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd48:	0719      	lsls	r1, r3, #28
 800dd4a:	d42c      	bmi.n	800dda6 <__swsetup_r+0x82>
 800dd4c:	06dd      	lsls	r5, r3, #27
 800dd4e:	d411      	bmi.n	800dd74 <__swsetup_r+0x50>
 800dd50:	2309      	movs	r3, #9
 800dd52:	6033      	str	r3, [r6, #0]
 800dd54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd58:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5c:	81a3      	strh	r3, [r4, #12]
 800dd5e:	e03e      	b.n	800ddde <__swsetup_r+0xba>
 800dd60:	4b25      	ldr	r3, [pc, #148]	; (800ddf8 <__swsetup_r+0xd4>)
 800dd62:	429c      	cmp	r4, r3
 800dd64:	d101      	bne.n	800dd6a <__swsetup_r+0x46>
 800dd66:	68ac      	ldr	r4, [r5, #8]
 800dd68:	e7eb      	b.n	800dd42 <__swsetup_r+0x1e>
 800dd6a:	4b24      	ldr	r3, [pc, #144]	; (800ddfc <__swsetup_r+0xd8>)
 800dd6c:	429c      	cmp	r4, r3
 800dd6e:	bf08      	it	eq
 800dd70:	68ec      	ldreq	r4, [r5, #12]
 800dd72:	e7e6      	b.n	800dd42 <__swsetup_r+0x1e>
 800dd74:	0758      	lsls	r0, r3, #29
 800dd76:	d512      	bpl.n	800dd9e <__swsetup_r+0x7a>
 800dd78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd7a:	b141      	cbz	r1, 800dd8e <__swsetup_r+0x6a>
 800dd7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd80:	4299      	cmp	r1, r3
 800dd82:	d002      	beq.n	800dd8a <__swsetup_r+0x66>
 800dd84:	4630      	mov	r0, r6
 800dd86:	f7ff fc43 	bl	800d610 <_free_r>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	6363      	str	r3, [r4, #52]	; 0x34
 800dd8e:	89a3      	ldrh	r3, [r4, #12]
 800dd90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd94:	81a3      	strh	r3, [r4, #12]
 800dd96:	2300      	movs	r3, #0
 800dd98:	6063      	str	r3, [r4, #4]
 800dd9a:	6923      	ldr	r3, [r4, #16]
 800dd9c:	6023      	str	r3, [r4, #0]
 800dd9e:	89a3      	ldrh	r3, [r4, #12]
 800dda0:	f043 0308 	orr.w	r3, r3, #8
 800dda4:	81a3      	strh	r3, [r4, #12]
 800dda6:	6923      	ldr	r3, [r4, #16]
 800dda8:	b94b      	cbnz	r3, 800ddbe <__swsetup_r+0x9a>
 800ddaa:	89a3      	ldrh	r3, [r4, #12]
 800ddac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ddb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddb4:	d003      	beq.n	800ddbe <__swsetup_r+0x9a>
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	4630      	mov	r0, r6
 800ddba:	f000 f84d 	bl	800de58 <__smakebuf_r>
 800ddbe:	89a0      	ldrh	r0, [r4, #12]
 800ddc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddc4:	f010 0301 	ands.w	r3, r0, #1
 800ddc8:	d00a      	beq.n	800dde0 <__swsetup_r+0xbc>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	60a3      	str	r3, [r4, #8]
 800ddce:	6963      	ldr	r3, [r4, #20]
 800ddd0:	425b      	negs	r3, r3
 800ddd2:	61a3      	str	r3, [r4, #24]
 800ddd4:	6923      	ldr	r3, [r4, #16]
 800ddd6:	b943      	cbnz	r3, 800ddea <__swsetup_r+0xc6>
 800ddd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dddc:	d1ba      	bne.n	800dd54 <__swsetup_r+0x30>
 800ddde:	bd70      	pop	{r4, r5, r6, pc}
 800dde0:	0781      	lsls	r1, r0, #30
 800dde2:	bf58      	it	pl
 800dde4:	6963      	ldrpl	r3, [r4, #20]
 800dde6:	60a3      	str	r3, [r4, #8]
 800dde8:	e7f4      	b.n	800ddd4 <__swsetup_r+0xb0>
 800ddea:	2000      	movs	r0, #0
 800ddec:	e7f7      	b.n	800ddde <__swsetup_r+0xba>
 800ddee:	bf00      	nop
 800ddf0:	2000000c 	.word	0x2000000c
 800ddf4:	0800e29c 	.word	0x0800e29c
 800ddf8:	0800e2bc 	.word	0x0800e2bc
 800ddfc:	0800e27c 	.word	0x0800e27c

0800de00 <abort>:
 800de00:	2006      	movs	r0, #6
 800de02:	b508      	push	{r3, lr}
 800de04:	f000 f8d0 	bl	800dfa8 <raise>
 800de08:	2001      	movs	r0, #1
 800de0a:	f7f4 f8d2 	bl	8001fb2 <_exit>

0800de0e <__swhatbuf_r>:
 800de0e:	b570      	push	{r4, r5, r6, lr}
 800de10:	460e      	mov	r6, r1
 800de12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de16:	4614      	mov	r4, r2
 800de18:	2900      	cmp	r1, #0
 800de1a:	461d      	mov	r5, r3
 800de1c:	b096      	sub	sp, #88	; 0x58
 800de1e:	da07      	bge.n	800de30 <__swhatbuf_r+0x22>
 800de20:	2300      	movs	r3, #0
 800de22:	602b      	str	r3, [r5, #0]
 800de24:	89b3      	ldrh	r3, [r6, #12]
 800de26:	061a      	lsls	r2, r3, #24
 800de28:	d410      	bmi.n	800de4c <__swhatbuf_r+0x3e>
 800de2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de2e:	e00e      	b.n	800de4e <__swhatbuf_r+0x40>
 800de30:	466a      	mov	r2, sp
 800de32:	f000 f8d5 	bl	800dfe0 <_fstat_r>
 800de36:	2800      	cmp	r0, #0
 800de38:	dbf2      	blt.n	800de20 <__swhatbuf_r+0x12>
 800de3a:	9a01      	ldr	r2, [sp, #4]
 800de3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800de40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800de44:	425a      	negs	r2, r3
 800de46:	415a      	adcs	r2, r3
 800de48:	602a      	str	r2, [r5, #0]
 800de4a:	e7ee      	b.n	800de2a <__swhatbuf_r+0x1c>
 800de4c:	2340      	movs	r3, #64	; 0x40
 800de4e:	2000      	movs	r0, #0
 800de50:	6023      	str	r3, [r4, #0]
 800de52:	b016      	add	sp, #88	; 0x58
 800de54:	bd70      	pop	{r4, r5, r6, pc}
	...

0800de58 <__smakebuf_r>:
 800de58:	898b      	ldrh	r3, [r1, #12]
 800de5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de5c:	079d      	lsls	r5, r3, #30
 800de5e:	4606      	mov	r6, r0
 800de60:	460c      	mov	r4, r1
 800de62:	d507      	bpl.n	800de74 <__smakebuf_r+0x1c>
 800de64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de68:	6023      	str	r3, [r4, #0]
 800de6a:	6123      	str	r3, [r4, #16]
 800de6c:	2301      	movs	r3, #1
 800de6e:	6163      	str	r3, [r4, #20]
 800de70:	b002      	add	sp, #8
 800de72:	bd70      	pop	{r4, r5, r6, pc}
 800de74:	466a      	mov	r2, sp
 800de76:	ab01      	add	r3, sp, #4
 800de78:	f7ff ffc9 	bl	800de0e <__swhatbuf_r>
 800de7c:	9900      	ldr	r1, [sp, #0]
 800de7e:	4605      	mov	r5, r0
 800de80:	4630      	mov	r0, r6
 800de82:	f7fb fca1 	bl	80097c8 <_malloc_r>
 800de86:	b948      	cbnz	r0, 800de9c <__smakebuf_r+0x44>
 800de88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de8c:	059a      	lsls	r2, r3, #22
 800de8e:	d4ef      	bmi.n	800de70 <__smakebuf_r+0x18>
 800de90:	f023 0303 	bic.w	r3, r3, #3
 800de94:	f043 0302 	orr.w	r3, r3, #2
 800de98:	81a3      	strh	r3, [r4, #12]
 800de9a:	e7e3      	b.n	800de64 <__smakebuf_r+0xc>
 800de9c:	4b0d      	ldr	r3, [pc, #52]	; (800ded4 <__smakebuf_r+0x7c>)
 800de9e:	62b3      	str	r3, [r6, #40]	; 0x28
 800dea0:	89a3      	ldrh	r3, [r4, #12]
 800dea2:	6020      	str	r0, [r4, #0]
 800dea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dea8:	81a3      	strh	r3, [r4, #12]
 800deaa:	9b00      	ldr	r3, [sp, #0]
 800deac:	6120      	str	r0, [r4, #16]
 800deae:	6163      	str	r3, [r4, #20]
 800deb0:	9b01      	ldr	r3, [sp, #4]
 800deb2:	b15b      	cbz	r3, 800decc <__smakebuf_r+0x74>
 800deb4:	4630      	mov	r0, r6
 800deb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800deba:	f000 f8a3 	bl	800e004 <_isatty_r>
 800debe:	b128      	cbz	r0, 800decc <__smakebuf_r+0x74>
 800dec0:	89a3      	ldrh	r3, [r4, #12]
 800dec2:	f023 0303 	bic.w	r3, r3, #3
 800dec6:	f043 0301 	orr.w	r3, r3, #1
 800deca:	81a3      	strh	r3, [r4, #12]
 800decc:	89a0      	ldrh	r0, [r4, #12]
 800dece:	4305      	orrs	r5, r0
 800ded0:	81a5      	strh	r5, [r4, #12]
 800ded2:	e7cd      	b.n	800de70 <__smakebuf_r+0x18>
 800ded4:	080095a9 	.word	0x080095a9

0800ded8 <memmove>:
 800ded8:	4288      	cmp	r0, r1
 800deda:	b510      	push	{r4, lr}
 800dedc:	eb01 0402 	add.w	r4, r1, r2
 800dee0:	d902      	bls.n	800dee8 <memmove+0x10>
 800dee2:	4284      	cmp	r4, r0
 800dee4:	4623      	mov	r3, r4
 800dee6:	d807      	bhi.n	800def8 <memmove+0x20>
 800dee8:	1e43      	subs	r3, r0, #1
 800deea:	42a1      	cmp	r1, r4
 800deec:	d008      	beq.n	800df00 <memmove+0x28>
 800deee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800def2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800def6:	e7f8      	b.n	800deea <memmove+0x12>
 800def8:	4601      	mov	r1, r0
 800defa:	4402      	add	r2, r0
 800defc:	428a      	cmp	r2, r1
 800defe:	d100      	bne.n	800df02 <memmove+0x2a>
 800df00:	bd10      	pop	{r4, pc}
 800df02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df0a:	e7f7      	b.n	800defc <memmove+0x24>

0800df0c <_realloc_r>:
 800df0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df0e:	4607      	mov	r7, r0
 800df10:	4614      	mov	r4, r2
 800df12:	460e      	mov	r6, r1
 800df14:	b921      	cbnz	r1, 800df20 <_realloc_r+0x14>
 800df16:	4611      	mov	r1, r2
 800df18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800df1c:	f7fb bc54 	b.w	80097c8 <_malloc_r>
 800df20:	b922      	cbnz	r2, 800df2c <_realloc_r+0x20>
 800df22:	f7ff fb75 	bl	800d610 <_free_r>
 800df26:	4625      	mov	r5, r4
 800df28:	4628      	mov	r0, r5
 800df2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df2c:	f000 f87a 	bl	800e024 <_malloc_usable_size_r>
 800df30:	42a0      	cmp	r0, r4
 800df32:	d20f      	bcs.n	800df54 <_realloc_r+0x48>
 800df34:	4621      	mov	r1, r4
 800df36:	4638      	mov	r0, r7
 800df38:	f7fb fc46 	bl	80097c8 <_malloc_r>
 800df3c:	4605      	mov	r5, r0
 800df3e:	2800      	cmp	r0, #0
 800df40:	d0f2      	beq.n	800df28 <_realloc_r+0x1c>
 800df42:	4631      	mov	r1, r6
 800df44:	4622      	mov	r2, r4
 800df46:	f7fb fc28 	bl	800979a <memcpy>
 800df4a:	4631      	mov	r1, r6
 800df4c:	4638      	mov	r0, r7
 800df4e:	f7ff fb5f 	bl	800d610 <_free_r>
 800df52:	e7e9      	b.n	800df28 <_realloc_r+0x1c>
 800df54:	4635      	mov	r5, r6
 800df56:	e7e7      	b.n	800df28 <_realloc_r+0x1c>

0800df58 <_raise_r>:
 800df58:	291f      	cmp	r1, #31
 800df5a:	b538      	push	{r3, r4, r5, lr}
 800df5c:	4604      	mov	r4, r0
 800df5e:	460d      	mov	r5, r1
 800df60:	d904      	bls.n	800df6c <_raise_r+0x14>
 800df62:	2316      	movs	r3, #22
 800df64:	6003      	str	r3, [r0, #0]
 800df66:	f04f 30ff 	mov.w	r0, #4294967295
 800df6a:	bd38      	pop	{r3, r4, r5, pc}
 800df6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800df6e:	b112      	cbz	r2, 800df76 <_raise_r+0x1e>
 800df70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df74:	b94b      	cbnz	r3, 800df8a <_raise_r+0x32>
 800df76:	4620      	mov	r0, r4
 800df78:	f000 f830 	bl	800dfdc <_getpid_r>
 800df7c:	462a      	mov	r2, r5
 800df7e:	4601      	mov	r1, r0
 800df80:	4620      	mov	r0, r4
 800df82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df86:	f000 b817 	b.w	800dfb8 <_kill_r>
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d00a      	beq.n	800dfa4 <_raise_r+0x4c>
 800df8e:	1c59      	adds	r1, r3, #1
 800df90:	d103      	bne.n	800df9a <_raise_r+0x42>
 800df92:	2316      	movs	r3, #22
 800df94:	6003      	str	r3, [r0, #0]
 800df96:	2001      	movs	r0, #1
 800df98:	e7e7      	b.n	800df6a <_raise_r+0x12>
 800df9a:	2400      	movs	r4, #0
 800df9c:	4628      	mov	r0, r5
 800df9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dfa2:	4798      	blx	r3
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	e7e0      	b.n	800df6a <_raise_r+0x12>

0800dfa8 <raise>:
 800dfa8:	4b02      	ldr	r3, [pc, #8]	; (800dfb4 <raise+0xc>)
 800dfaa:	4601      	mov	r1, r0
 800dfac:	6818      	ldr	r0, [r3, #0]
 800dfae:	f7ff bfd3 	b.w	800df58 <_raise_r>
 800dfb2:	bf00      	nop
 800dfb4:	2000000c 	.word	0x2000000c

0800dfb8 <_kill_r>:
 800dfb8:	b538      	push	{r3, r4, r5, lr}
 800dfba:	2300      	movs	r3, #0
 800dfbc:	4d06      	ldr	r5, [pc, #24]	; (800dfd8 <_kill_r+0x20>)
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	4608      	mov	r0, r1
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	602b      	str	r3, [r5, #0]
 800dfc6:	f7f3 ffe4 	bl	8001f92 <_kill>
 800dfca:	1c43      	adds	r3, r0, #1
 800dfcc:	d102      	bne.n	800dfd4 <_kill_r+0x1c>
 800dfce:	682b      	ldr	r3, [r5, #0]
 800dfd0:	b103      	cbz	r3, 800dfd4 <_kill_r+0x1c>
 800dfd2:	6023      	str	r3, [r4, #0]
 800dfd4:	bd38      	pop	{r3, r4, r5, pc}
 800dfd6:	bf00      	nop
 800dfd8:	20003bac 	.word	0x20003bac

0800dfdc <_getpid_r>:
 800dfdc:	f7f3 bfd2 	b.w	8001f84 <_getpid>

0800dfe0 <_fstat_r>:
 800dfe0:	b538      	push	{r3, r4, r5, lr}
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	4d06      	ldr	r5, [pc, #24]	; (800e000 <_fstat_r+0x20>)
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	4608      	mov	r0, r1
 800dfea:	4611      	mov	r1, r2
 800dfec:	602b      	str	r3, [r5, #0]
 800dfee:	f7f4 f82e 	bl	800204e <_fstat>
 800dff2:	1c43      	adds	r3, r0, #1
 800dff4:	d102      	bne.n	800dffc <_fstat_r+0x1c>
 800dff6:	682b      	ldr	r3, [r5, #0]
 800dff8:	b103      	cbz	r3, 800dffc <_fstat_r+0x1c>
 800dffa:	6023      	str	r3, [r4, #0]
 800dffc:	bd38      	pop	{r3, r4, r5, pc}
 800dffe:	bf00      	nop
 800e000:	20003bac 	.word	0x20003bac

0800e004 <_isatty_r>:
 800e004:	b538      	push	{r3, r4, r5, lr}
 800e006:	2300      	movs	r3, #0
 800e008:	4d05      	ldr	r5, [pc, #20]	; (800e020 <_isatty_r+0x1c>)
 800e00a:	4604      	mov	r4, r0
 800e00c:	4608      	mov	r0, r1
 800e00e:	602b      	str	r3, [r5, #0]
 800e010:	f7f4 f82c 	bl	800206c <_isatty>
 800e014:	1c43      	adds	r3, r0, #1
 800e016:	d102      	bne.n	800e01e <_isatty_r+0x1a>
 800e018:	682b      	ldr	r3, [r5, #0]
 800e01a:	b103      	cbz	r3, 800e01e <_isatty_r+0x1a>
 800e01c:	6023      	str	r3, [r4, #0]
 800e01e:	bd38      	pop	{r3, r4, r5, pc}
 800e020:	20003bac 	.word	0x20003bac

0800e024 <_malloc_usable_size_r>:
 800e024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e028:	1f18      	subs	r0, r3, #4
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	bfbc      	itt	lt
 800e02e:	580b      	ldrlt	r3, [r1, r0]
 800e030:	18c0      	addlt	r0, r0, r3
 800e032:	4770      	bx	lr

0800e034 <_init>:
 800e034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e036:	bf00      	nop
 800e038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e03a:	bc08      	pop	{r3}
 800e03c:	469e      	mov	lr, r3
 800e03e:	4770      	bx	lr

0800e040 <_fini>:
 800e040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e042:	bf00      	nop
 800e044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e046:	bc08      	pop	{r3}
 800e048:	469e      	mov	lr, r3
 800e04a:	4770      	bx	lr
